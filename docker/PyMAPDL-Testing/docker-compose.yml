# PyMAPDL docker compose testing
#
# This docker compose file is used to test PyMAPDL against different MAPDL installations.
# It allows you to run tests against a local MAPDL installation, a cloned PyMAPDL
# repository, or a remote MAPDL installation.
#
# Required environment variables
# ------------------------------
#
# - `ANSYSLMD_LICENSE_FILE` for the license server required in all MAPDL configurations
# - See each service definition for additional environment variables
#
# Available profiles
# ------------------
#
# This docker compose works using profiles. The are many profiles, depending on the following
# configurations possible:
#
# - MAPDL acting as remote (`mapdl-remote`) or local (`mapdl-local`)
# - MAPDL from a container (`mapdl-xxx-container`) or from the host (`mapdl-xxx-host`)
# - PyMAPDL cloned from Github (`pymapdl-clone`) or from the host (`pymapdl-host`)
# 
# Because of this configuration there are two main groups of profiles, based on MAPDL or PyMAPDL.
#
# - MAPDL profiles:
#   - mapdl-remote-container
#   - mapdl-remote-host
#   - mapdl-local-container
#   - mapdl-local-host
#
# - PyMAPDL profiles
#   - pymapdl-clone
#   - pymapdl-host
#
# You can specify each one with `--profile <profile_name>`. For instance:
# 
# ```
# docker compose --profile mapdl-remote-container --profile pymapdl-clone
# ```
#
# which is equivalent to:
# 
# ```
# docker compose --profile mapdl-remote-container-pymapdl-clone
# ```
#
# The full list of profiles already available for testing is:
#
# - [x] mapdl-remote-container-pymapdl-clone
# - [x] mapdl-remote-container-pymapdl-host
# - [x] mapdl-remote-host-pymapdl-clone
# - [x] mapdl-remote-host-pymapdl-host
# 
# - [ ] mapdl-local-container-pymapdl-host
# - [ ] mapdl-local-host-pymapdl-host
# - [w] mapdl-local-container-pymapdl-clone
# - [w] mapdl-local-host-pymapdl-clone
#
# The list of profiles not implemented yet are:
# 
#
#
# Example usage
# -------------
#
# docker compose --profile local-repository --profile mapdl-container up
#

name: pymapdl-testing

services:
  mapdl-remote-container:
    # This service is used to run MAPDL in a remote container.
    #
    # Environment variables
    # ---------------------
    # - `ANSYSLMD_LICENSE_FILE` (mandatory) for the license server
    # - `DOCKER_IMAGE` (mandatory) environment variable to specify the image to use.
    # - `MAPDL_ENTRYPOINT` to specify the entrypoint for the container.
    # - `MAPDL_EXEC_PATH` to specify the path to the MAPDL executable.
    # - `MAPDL_EXTRA_ARGS` to specify any additional arguments for the MAPDL command.
    #
    container_name: mapdl
    profiles:
      - mapdl-remote-container
      - mapdl-remote-container-pymapdl-clone
      - mapdl-remote-container-pymapdl-host
      - '' # Default profile
    shm_size: '2gb'
    restart: unless-stopped
    hostname: mapdl
    networks: 
      - pymapdl-net
    environment:
      - ANSYSLMD_LICENSE_FILE=${ANSYSLMD_LICENSE_FILE}
      - ANSYS_LOCK=OFF
    image: ${DOCKER_IMAGE}
    platform: linux/amd64
    # You might want to customize it
    entrypoint: ${MAPDL_ENTRYPOINT:-"/bin/bash"}
    command: ["${MAPDL_EXEC_PATH:-ansys}", "-grpc", "${MAPDL_EXTRA_ARGS:-}"]

  mapdl-remote-host:
    # This service is used to run the local MAPDL instalation by mounting the volume
    # inside the container.
    # This is using an ubuntu container with the required dependencies to mount the directory
    # where MAPDL is installed, and then run MAPDL.
    # 
    # Environment variables
    # ---------------------
    #
    # - `ANSYSLMD_LICENSE_FILE` (mandatory) for the license server.
    # - `ANSYS_INC` (mandatory) the installation directory `ansys_inc` of MAPDL.
    # - `MAPDL_EXEC_PATH` (mandatory) the path to the MAPDL executable. The default is `ansys`.
    # - `MAPDL_ENTRYPOINT` (optional) the entrypoint to the MAPDL container. The default is `"/bin/bash"`.
    # - `MAPDL_EXTRA_ARGS` (optional) any additional arguments for the MAPDL command.
    #
    container_name: mapdl
    profiles:
      - mapdl-remote-host
      - mapdl-remote-host-pymapdl-clone
      - mapdl-remote-host-pymapdl-host
    shm_size: '2gb'
    restart: unless-stopped
    hostname: mapdl
    networks: 
      - pymapdl-net
    environment:
      - ANSYSLMD_LICENSE_FILE=${ANSYSLMD_LICENSE_FILE}
      - ANSYS_LOCK=OFF
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      target: mapdl-local
    entrypoint: ${MAPDL_ENTRYPOINT:-"/bin/bash"}
    command: ["${MAPDL_EXEC_PATH:-ansys}", "-grpc", "${MAPDL_EXTRA_ARGS:-}"]
    volumes:
      - ${ANSYS_INC-/ansys_inc}:/ansys_inc:ro

  pymapdl-host:
    # This service mount the local PyMAPDL repository and test it.
    profiles:
      - pymapdl-host
      - mapdl-remote-container-pymapdl-host
      - mapdl-remote-host-pymapdl-host
      - mapdl-local-container-pymapdl-host
      - mapdl-local-host-pymapdl-host
      - '' # Default profile
    container_name: pymapdl-test
    platform: linux/amd64
    depends_on:
      - mapdl
    networks: 
      - pymapdl-net
    build:
      context: .
      dockerfile: Dockerfile
      target: test-local-pymapdl
    environment:
      - PYMAPDL_IP=mapdl-remote # Use the MAPDL service name 
      # If empty, it will use the default 'main' branch
      - PYMAPDL_BRANCH=${PYMAPDL_BRANCH}# if empty, it will use the default 'main' branch
    volumes:
      - ../../../:/workspace

  pymapdl-clone:
    # This service clones the PyMAPDL repository and test against it.
    profiles:
      - cloned-repository
    container_name: pymapdl-test
    platform: linux/amd64
    depends_on:
      - mapdl
    networks:
      - pymapdl-net
    build:
      context: .
      dockerfile: Dockerfile
      target: test-local-pymapdl
    environment:
      - PYMAPDL_IP=mapdl-remote # Use the MAPDL service name
      # If empty, it will use the default 'main' branch
      - PYMAPDL_BRANCH=${PYMAPDL_BRANCH}# if empty, it will use the default 'main' branch
   
  mapdl-local-container-pymapdl-clone:
    # This service clones PyMAPDL inside the MAPDL container and run the tests.
    # 
    # WARNING: It is very likely you will have to update your dockerfile according the specific
    # ${DOCKER_IMAGE} you are using.
    #
    # Environment variables
    # ---------------------
    #
    # - `ANSYSLMD_LICENSE_FILE` (mandatory) for the license server.
    #
    profiles:
      - mapdl-local-container-pymapdl-clone
    container_name: pymapdl-test
    platform: linux/amd64
    networks:
      - pymapdl-net
    build:
      context: .
      dockerfile: Dockerfile
      target: mapdl-local-container-pymapdl
      args:
        - DOCKER_IMAGE=${DOCKER_IMAGE}
    environment:
      # If empty, it will use the default 'main' branch
      - PYMAPDL_BRANCH=${PYMAPDL_BRANCH}# if empty, it will use the default 'main' branch

  mapdl-local-container-pymapdl-host:
    # This service clones PyMAPDL inside the MAPDL container and run the tests.
    # 
    # WARNING: It is very likely you will have to update your dockerfile according the specific
    # ${DOCKER_IMAGE} you are using.
    #
    # Environment variables
    # ---------------------
    #
    # - `ANSYSLMD_LICENSE_FILE` (mandatory) for the license server.
    #
    profiles:
      - mapdl-local-container-pymapdl-host
    container_name: pymapdl-test
    platform: linux/amd64
    networks:
      - pymapdl-net
    build:
      context: .
      dockerfile: Dockerfile
      target: mapdl-local-container-pymapdl
      args:
        - DOCKER_IMAGE=${DOCKER_IMAGE}
    environment:
      # If empty, it will use the default 'main' branch
      - PYMAPDL_BRANCH=${PYMAPDL_BRANCH}# if empty, it will use the default 'main' branch
    volumes:
      - ../../../:/workspace

networks:
  pymapdl-net:
    driver: bridge