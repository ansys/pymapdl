
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py:


.. _ref_3d_plate_thermal:

Basic Thermal Analysis with pyMAPDL
-----------------------------------

This example demonstrates how you can use MAPDL to create a plate,
impose thermal boundary conditions, solve, and plot it all within
pyMAPDL.

First, start MAPDL as a service and disable all but error messages.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2

    from ansys.mapdl.core import launch_mapdl

    mapdl = launch_mapdl()








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Geometry and Material Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a simple beam, specify the material properties, and mesh it.

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: default

    mapdl.prep7()
    mapdl.mp("kxx", 1, 45)
    mapdl.et(1, 90)
    mapdl.block(-0.3, 0.3, -0.46, 1.34, -0.2, -0.2 + 0.02)
    mapdl.vsweep(1)
    mapdl.eplot()





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_001.png
   :alt: 3d plate thermal
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 33-36

Boundary Conditions
~~~~~~~~~~~~~~~~~~~
Set the thermal boundary conditions

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: default

    mapdl.asel("S", vmin=3)
    mapdl.nsla()
    mapdl.d("all", "temp", 5)
    mapdl.asel("S", vmin=4)
    mapdl.nsla()
    mapdl.d("all", "temp", 100)
    out = mapdl.allsel()









.. GENERATED FROM PYTHON SOURCE LINES 46-49

Solve
~~~~~
Solve the thermal static analysis and print the results

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: default

    mapdl.vsweep(1)
    mapdl.run("/SOLU")
    print(mapdl.solve())
    out = mapdl.finish()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    *** NOTE ***                            CP =      39.725   TIME= 15:59:43
     The automatic domain decomposition logic has selected the MESH domain   
     decomposition method with 2 processes per solution.                     

     *****  MAPDL SOLVE    COMMAND  *****

     *** NOTE ***                            CP =      39.757   TIME= 15:59:43
     There is no title defined for this analysis.                            

     *** MAPDL - ENGINEERING ANALYSIS SYSTEM  RELEASE 2023 R1          23.1     ***
     Ansys Mechanical Enterprise                       
     00000000  VERSION=LINUX x64     15:59:43  SEP 18, 2023 CP=     39.758

                                                                               



                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  
       DEGREES OF FREEDOM. . . . . . TEMP
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =      39.759   TIME= 15:59:43
     Present time 0 is less than or equal to the previous time.  Time will   
     default to 1.                                                           

     *** NOTE ***                            CP =      39.759   TIME= 15:59:43
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

  
  
         D I S T R I B U T E D   D O M A I N   D E C O M P O S E R
  
      ...Number of elements: 450
      ...Number of nodes:    2720
      ...Decompose to 2 CPU domains
      ...Element load balance ratio =     1.004


                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1
       TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    
       NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1
       STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN
                                                      FOR THE LAST SUBSTEP


     SOLUTION MONITORING INFO IS WRITTEN TO FILE= file.mntr                                                                                                                                                                                                                                                           


     Range of element maximum matrix coefficients in global coordinates
     Maximum = 13.6474747 at element 449.                                    
     Minimum = 13.6474747 at element 105.                                    

       *** ELEMENT MATRIX FORMULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.013   0.000028
     Time at end of element matrix formulation CP = 39.7830772.              

     DISTRIBUTED SPARSE MATRIX DIRECT SOLVER.
      Number of equations =        2606,    Maximum wavefront =     72

      Process memory allocated for solver              =     3.184 MB
      Process memory required for in-core solution     =     3.062 MB
      Process memory required for out-of-core solution =     1.999 MB

      Total memory allocated for solver                =     5.951 MB
      Total memory required for in-core solution       =     5.724 MB
      Total memory required for out-of-core solution   =     3.755 MB

     *** NOTE ***                            CP =      39.804   TIME= 15:59:43
     The Distributed Sparse Matrix Solver is currently running in the        
     in-core memory mode.  This memory mode uses the most amount of memory   
     in order to avoid using the hard drive as much as possible, which most  
     often results in the fastest solution time.  This mode is recommended   
     if enough physical memory is present to accommodate all of the solver   
     data.                                                                   
     Distributed sparse solver maximum pivot= 32.7757037 at node 2026 TEMP.  
     Distributed sparse solver minimum pivot= 0.581541969 at node 2504 TEMP. 
     Distributed sparse solver minimum pivot in absolute value= 0.581541969  
     at node 2504 TEMP.                                                      

       *** ELEMENT RESULT CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.010   0.000022

       *** NODAL LOAD CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.007   0.000016
     *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1
     *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX


     *** MAPDL BINARY FILE STATISTICS
      BUFFER SIZE USED= 16384
            0.625 MB WRITTEN ON ASSEMBLED MATRIX FILE: file0.full
            0.562 MB WRITTEN ON RESULTS FILE: file0.rth




.. GENERATED FROM PYTHON SOURCE LINES 56-60

Post-Processing using MAPDL
~~~~~~~~~~~~~~~~~~~~~~~~~~~
View the thermal solution of the beam by getting the results
directly through MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default

    mapdl.post1()
    mapdl.set(1, 1)
    mapdl.post_processing.plot_nodal_temperature()





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_002.png
   :alt: 3d plate thermal
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-68

Alternatively you could also use the result object that reads in the
result file using pyansys

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    result = mapdl.result
    nnum, temp = result.nodal_temperature(0)
    # this is the same as pyansys.read_binary(mapdl._result_file)
    print(nnum, temp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [    1     2     3 ... 12715 12716 12717] [ 0.  0.  0. ... nan nan nan]




.. GENERATED FROM PYTHON SOURCE LINES 75-78

Stop mapdl
~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 78-79

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.725 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3d_plate_thermal.py <3d_plate_thermal.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3d_plate_thermal.ipynb <3d_plate_thermal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
