
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-mapdl-examples/geometry.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-mapdl-examples_geometry.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-mapdl-examples_geometry.py:


.. _ref_3d_bracket_example:

Plotting and Mesh Access
------------------------

PyMAPDL can load basic IGES geometry for analysis.

This example demonstrates loading basic geometry into MAPDL for
analysis and demonstrates how to use the built-in Python specific
plotting functionality.

This example also demonstrates some of the more advanced features of
PyMAPDL including direct mesh access through VTK.

.. GENERATED FROM PYTHON SOURCE LINES 17-27

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 3

    import numpy as np

    from ansys.mapdl import core as pymapdl
    from ansys.mapdl.core import examples

    mapdl = pymapdl.launch_mapdl()









.. GENERATED FROM PYTHON SOURCE LINES 28-32

Load Geometry
~~~~~~~~~~~~~
Here we download a simple example bracket IGES file and load it into
MAPDL.  Since ``igesin`` must be in the AUX15 process

.. GENERATED FROM PYTHON SOURCE LINES 32-42

.. code-block:: default


    # note that this method just returns a file path
    bracket_file = examples.download_bracket()

    # load the bracket and then print out the geometry
    mapdl.aux15()
    mapdl.igesin(bracket_file)
    print(mapdl.geometry)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MAPDL Selected Geometry
    Keypoints:  188
    Lines:      185
    Areas:      73
    Volumes:    1





.. GENERATED FROM PYTHON SOURCE LINES 43-51

Plotting
~~~~~~~~
PyMAPDL uses VTK and pyvista as a plotting backend to enable
remotable (with 2021R1 and newer) interactive plotting.  The common
plotting methods (``kplot``, ``lplot``, ``aplot``, ``eplot``, etc.)
all have compatible commands that use the
:func:`ansys.mapdl.core.plotting.general_plotter` function.  You can
configure this method with a variety of keyword arguments.  For example:

.. GENERATED FROM PYTHON SOURCE LINES 51-64

.. code-block:: default


    mapdl.lplot(
        show_line_numbering=False,
        background="k",
        line_width=3,
        color="w",
        show_axes=False,
        show_bounds=True,
        title="",
        cpos="xz",
    )





.. image-sg:: /examples/00-mapdl-examples/images/sphx_glr_geometry_001.png
   :alt: geometry
   :srcset: /examples/00-mapdl-examples/images/sphx_glr_geometry_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 65-68

You can also configure a theme to enable consistent plotting across
multiple plots.  These theme parameters override any unset keyword
arguments.  For example:

.. GENERATED FROM PYTHON SOURCE LINES 68-78

.. code-block:: default


    my_theme = pymapdl.MapdlTheme()
    my_theme.background = "white"
    my_theme.cmap = "jet"  # colormap
    my_theme.axes.show = False
    my_theme.show_scalar_bar = False

    mapdl.aplot(theme=my_theme)





.. image-sg:: /examples/00-mapdl-examples/images/sphx_glr_geometry_002.png
   :alt: geometry
   :srcset: /examples/00-mapdl-examples/images/sphx_glr_geometry_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-84

Accessesing Element and Nodes Pythonically
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PyMAPDL also supports element and nodal plotting using ``eplot`` and
``nplot``.  First, mesh the bracket using SOLID187 elements.  These
are well suited to this geometry and the static structural analyses.

.. GENERATED FROM PYTHON SOURCE LINES 84-95

.. code-block:: default


    # set the preprocessor, element type and size, and mesh the volume
    mapdl.prep7()
    mapdl.et(1, "SOLID187")
    mapdl.esize(0.075)
    mapdl.vmesh("all")

    # print out the mesh characteristics
    print(mapdl.mesh)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    ANSYS Mesh
      Number of Nodes:              50686
      Number of Elements:           32198
      Number of Element Types:      1
      Number of Node Components:    0
      Number of Element Components: 0





.. GENERATED FROM PYTHON SOURCE LINES 96-98

You can access the underlying finite element mesh as a VTK grid
through the ``mesh.grid`` attribute.

.. GENERATED FROM PYTHON SOURCE LINES 98-103

.. code-block:: default


    grid = mapdl.mesh.grid
    grid







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>UnstructuredGrid</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>32198</td></tr>
    <tr><td>N Points</td><td>50686</td></tr>
    <tr><td>X Bounds</td><td>-1.181e+00, 1.181e+00</td></tr>
    <tr><td>Y Bounds</td><td>-2.362e-01, 0.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>-2.394e+00, 2.509e+00</td></tr>
    <tr><td>N Arrays</td><td>10</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>ansys_node_num</td><td>Points</td><td>int32</td><td>1</td><td>1.000e+00</td><td>5.069e+04</td></tr>
    <tr><td>vtkOriginalPointIds</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>5.068e+04</td></tr>
    <tr><td>origid</td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>5.068e+04</td></tr>
    <tr><td><b>VTKorigID</b></td><td>Points</td><td>int64</td><td>1</td><td>0.000e+00</td><td>5.068e+04</td></tr>
    <tr><td>ansys_elem_num</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>3.220e+04</td></tr>
    <tr><td>ansys_real_constant</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>1.000e+00</td></tr>
    <tr><td>ansys_material_type</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>1.000e+00</td></tr>
    <tr><td>ansys_etype</td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>1.000e+00</td></tr>
    <tr><td>ansys_elem_type_num</td><td>Cells</td><td>int32</td><td>1</td><td>1.870e+02</td><td>1.870e+02</td></tr>
    <tr><td>vtkOriginalCellIds</td><td>Cells</td><td>int64</td><td>1</td><td>0.000e+00</td><td>3.220e+04</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 104-108

This UnstructuredGrid contains a powerful API, including the ability
to access the nodes, elements, original node numbers, all with the
ability to plot the mesh and add new attributes and data to the
grid.

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default


    grid.points  # same as mapdl.mesh.nodes






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    pyvista_ndarray([[-2.03111884e-01, -5.87401575e-02,  4.44426114e-04],
                     [-2.03111884e-01,  0.00000000e+00,  4.44426114e-04],
                     [-2.03111884e-01, -2.93700787e-02,  4.44426114e-04],
                     ...,
                     [-3.75851169e-01, -1.85457803e-01, -2.53642976e-01],
                     [ 4.87955026e-02, -1.81666560e-01, -4.74114746e-01],
                     [-5.38861990e-01, -1.81771018e-01, -7.19734818e-01]])



.. GENERATED FROM PYTHON SOURCE LINES 113-114

cell representation in VTK format

.. GENERATED FROM PYTHON SOURCE LINES 114-118

.. code-block:: default


    grid.cells






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([   10,  4237, 15212, ..., 35361, 36457, 35354])



.. GENERATED FROM PYTHON SOURCE LINES 119-120

Obtain node numbers of the grid

.. GENERATED FROM PYTHON SOURCE LINES 120-124

.. code-block:: default


    grid.point_data["ansys_node_num"]






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    pyvista_ndarray([    1,     2,     3, ..., 50684, 50685, 50686],
                    dtype=int32)



.. GENERATED FROM PYTHON SOURCE LINES 125-126

Save arbitrary data to the grid

.. GENERATED FROM PYTHON SOURCE LINES 126-132

.. code-block:: default


    # must be sized to the number of points
    grid.point_data["my_data"] = np.arange(grid.n_points)
    grid.point_data






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    pyvista DataSetAttributes
    Association     : POINT
    Active Scalars  : my_data
    Active Vectors  : None
    Active Texture  : None
    Active Normals  : None
    Contains arrays :
        ansys_node_num          int32    (50686,)
        vtkOriginalPointIds     int64    (50686,)
        origid                  int64    (50686,)
        VTKorigID               int64    (50686,)
        my_data                 int64    (50686,)             SCALARS



.. GENERATED FROM PYTHON SOURCE LINES 133-135

Plot this mesh with scalars of your choosing.  You can apply the
same MapdlTheme when plotting as it's compatible with the grid plotter.

.. GENERATED FROM PYTHON SOURCE LINES 135-149

.. code-block:: default


    # make interesting scalars
    scalars = grid.points[:, 2]  # z coordinates

    sbar_kwargs = {"color": "black", "title": "Z Coord"}
    grid.plot(
        scalars=scalars,
        show_scalar_bar=True,
        scalar_bar_args=sbar_kwargs,
        show_edges=True,
        theme=my_theme,
    )





.. image-sg:: /examples/00-mapdl-examples/images/sphx_glr_geometry_003.png
   :alt: geometry
   :srcset: /examples/00-mapdl-examples/images/sphx_glr_geometry_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 150-158

This grid can be also saved to disk in the compact cross-platform VTK
format and loaded again with ``pyvista`` or ParaView.

..code::

    >>> grid.save('my_mesh.vtk')
    >>> import pyvista
    >>> imported_mesh = pyvista.read('my_mesh.vtk')

.. GENERATED FROM PYTHON SOURCE LINES 160-161

stop mapdl

.. GENERATED FROM PYTHON SOURCE LINES 161-162

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  20.371 seconds)


.. _sphx_glr_download_examples_00-mapdl-examples_geometry.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: geometry.py <geometry.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: geometry.ipynb <geometry.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
