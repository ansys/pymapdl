
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/01-apdlmath-examples/mapdl_vs_scipy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_01-apdlmath-examples_mapdl_vs_scipy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_01-apdlmath-examples_mapdl_vs_scipy.py:


.. _ref_mapdl_math_mapdl_vs_scipy:

Compute Eigenvalues using MAPDL or SciPy
----------------------------------------

This example shows:

- How to extract the stiffness and mass matrices from a MAPDL model.
- How to use the ``Math`` module of PyMapdl to compute the first
  eigenvalues.
- How to can get these matrices in the SciPy world, to get the same
  solutions using Python resources.
- How MAPDL is really faster than SciPy :)

.. GENERATED FROM PYTHON SOURCE LINES 16-19

.. code-block:: default


    import math








.. GENERATED FROM PYTHON SOURCE LINES 20-21

First load python packages we need for this example

.. GENERATED FROM PYTHON SOURCE LINES 21-30

.. code-block:: default

    import time

    import matplotlib.pylab as plt
    import numpy as np
    import scipy
    from scipy.sparse.linalg import eigsh

    from ansys.mapdl.core import examples, launch_mapdl








.. GENERATED FROM PYTHON SOURCE LINES 31-36

Next:

- Load the ansys.mapdl module
- Get the ``Math`` module of PyMapdl


.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: default

    mapdl = launch_mapdl()
    print(mapdl)
    mm = mapdl.math





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Product:             Ansys Mechanical Enterprise
    MAPDL Version:       21.2
    ansys.mapdl Version: 0.61.7





.. GENERATED FROM PYTHON SOURCE LINES 41-44

APDLMath EigenSolve
First load the input file using MAPDL.


.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default

    print(mapdl.input(examples.examples.wing_model))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


     /INPUT FILE=    LINE=       0
       *****ANSYS VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

              ***** ANSYS ANALYSIS DEFINITION (PREP7) *****

     *** WARNING ***                         CP =       0.000   TIME= 00:00:00
     Deactivation of element shape checking is not recommended.              

     *** WARNING ***                         CP =       0.000   TIME= 00:00:00
     The mesh of area 1 contains PLANE42 triangles, which are much too stiff 
     in bending.  Use quadratic (6- or 8-node) elements if possible.         

     *** WARNING ***                         CP =       0.000   TIME= 00:00:00
     CLEAR, SELECT, and MESH boundary condition commands are not possible    
     after MODMSH.                                                           


     ***** ROUTINE COMPLETED *****  CP =         0.000







.. GENERATED FROM PYTHON SOURCE LINES 48-49

Plot and mesh using the ``eplot`` method.

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    mapdl.eplot()





.. image-sg:: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_001.png
   :alt: mapdl vs scipy
   :srcset: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 53-56

Next, setup a modal Analysis and request the :math:`K` and math:`M`
matrices to be formed. MAPDL stores these matrices in a ``.FULL``
file.

.. GENERATED FROM PYTHON SOURCE LINES 56-66

.. code-block:: default


    print(mapdl.slashsolu())
    print(mapdl.antype(antype="MODAL"))
    print(mapdl.modopt(method="LANB", nmode="10", freqb="1."))
    print(mapdl.wrfull(ldstep="1"))

    # store the output of the solve command
    output = mapdl.solve()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    *****  ANSYS SOLUTION ROUTINE  *****
    PERFORM A MODAL ANALYSIS
      THIS WILL BE A NEW ANALYSIS
    USE SYM. BLOCK LANCZOS MODE EXTRACTION METHOD
      EXTRACT    10 MODES
      SHIFT POINT FOR EIGENVALUE CALCULATION=  1.0000    
      NORMALIZE THE MODE SHAPES TO THE MASS MATRIX
    STOP SOLUTION AFTER FULL FILE HAS BEEN WRITTEN
       LOADSTEP =    1 SUBSTEP =    1 EQ. ITER =    1




.. GENERATED FROM PYTHON SOURCE LINES 67-69

Read the sparse matrices using PyMapdl.


.. GENERATED FROM PYTHON SOURCE LINES 69-75

.. code-block:: default

    mapdl.finish()
    mm.free()
    k = mm.stiff(fname="file.full")
    M = mm.mass(fname="file.full")









.. GENERATED FROM PYTHON SOURCE LINES 76-78

Solve the eigenproblem using PyMapdl with APDLMath.


.. GENERATED FROM PYTHON SOURCE LINES 78-87

.. code-block:: default

    nev = 10
    A = mm.mat(k.nrow, nev)

    t1 = time.time()
    ev = mm.eigs(nev, k, M, phi=A, fmin=1.0)
    t2 = time.time()
    mapdl_elapsed_time = t2 - t1
    print("\nElapsed time to solve this problem : ", mapdl_elapsed_time)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.8.16/x64/lib/python3.8/site-packages/ansys/mapdl/core/math.py:1453: UserWarning: Call to ``sym`` cannot evaluate if this matrix is symmetric with this version of MAPDL.
      warn(

    Elapsed time to solve this problem :  0.7200098037719727




.. GENERATED FROM PYTHON SOURCE LINES 88-92

Print eigenfrequencies and accuracy.

Accuracy : :math:`\frac{||(K-\lambda.M).\phi||_2}{||K.\phi||_2}`


.. GENERATED FROM PYTHON SOURCE LINES 92-112

.. code-block:: default

    mapdl_acc = np.empty(nev)

    for i in range(nev):
        f = ev[i]  # Eigenfrequency (Hz)
        omega = 2 * np.pi * f  # omega = 2.pi.Frequency
        lam = omega**2  # lambda = omega^2

        phi = A[i]  # i-th eigenshape
        kphi = k.dot(phi)  # K.Phi
        mphi = M.dot(phi)  # M.Phi

        kphi_nrm = kphi.norm()  # Normalization scalar value

        mphi *= lam  # (K-\lambda.M).Phi
        kphi -= mphi

        mapdl_acc[i] = kphi.norm() / kphi_nrm  # compute the residual
        print(f"[{i}] : Freq = {f:8.2f} Hz\t Residual = {mapdl_acc[i]:.5}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0] : Freq =   352.40 Hz         Residual = 1.6796e-08
    [1] : Freq =   385.20 Hz         Residual = 6.9321e-09
    [2] : Freq =   656.81 Hz         Residual = 9.1413e-09
    [3] : Freq =   764.73 Hz         Residual = 7.8389e-09
    [4] : Freq =   825.47 Hz         Residual = 8.6191e-09
    [5] : Freq =  1039.28 Hz         Residual = 2.0272e-09
    [6] : Freq =  1143.61 Hz         Residual = 8.4224e-09
    [7] : Freq =  1258.00 Hz         Residual = 4.2791e-08
    [8] : Freq =  1334.23 Hz         Residual = 4.6862e-08
    [9] : Freq =  1352.10 Hz         Residual = 3.3806e-08




.. GENERATED FROM PYTHON SOURCE LINES 113-119

Use SciPy to Solve the same Eigenproblem
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First get MAPDL sparse matrices into the Python memory as SciPy
matrices.


.. GENERATED FROM PYTHON SOURCE LINES 119-133

.. code-block:: default

    pk = k.asarray()
    pm = M.asarray()

    # get_ipython().run_line_magic('matplotlib', 'inline')

    fig, (ax1, ax2) = plt.subplots(1, 2)
    fig.suptitle("K and M Matrix profiles")
    ax1.spy(pk, markersize=0.01)
    ax1.set_title("K Matrix")
    ax2.spy(pm, markersize=0.01)
    ax2.set_title("M Matrix")
    plt.show(block=True)





.. image-sg:: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_002.png
   :alt: K and M Matrix profiles, K Matrix, M Matrix
   :srcset: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 134-139

Make the sparse matrices for SciPy unsymmetric as symmetric matrices in SciPy
are memory inefficient.

:math:`K = K + K^T - diag(K)`


.. GENERATED FROM PYTHON SOURCE LINES 139-145

.. code-block:: default

    pkd = scipy.sparse.diags(pk.diagonal())
    pK = pk + pk.transpose() - pkd
    pmd = scipy.sparse.diags(pm.diagonal())
    pm = pm + pm.transpose() - pmd









.. GENERATED FROM PYTHON SOURCE LINES 146-148

Plot Matrices


.. GENERATED FROM PYTHON SOURCE LINES 148-157

.. code-block:: default

    fig, (ax1, ax2) = plt.subplots(1, 2)
    fig.suptitle("K and M Matrix profiles")
    ax1.spy(pk, markersize=0.01)
    ax1.set_title("K Matrix")
    ax2.spy(pm, markersize=0.01)
    ax2.set_title("M Matrix")
    plt.show(block=True)





.. image-sg:: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_003.png
   :alt: K and M Matrix profiles, K Matrix, M Matrix
   :srcset: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 158-160

Solve the eigenproblem


.. GENERATED FROM PYTHON SOURCE LINES 160-167

.. code-block:: default

    t3 = time.time()
    vals, vecs = eigsh(A=pK, M=pm, k=10, sigma=1, which="LA")
    t4 = time.time()
    scipy_elapsed_time = t4 - t3
    print("\nElapsed time to solve this problem : ", scipy_elapsed_time)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Elapsed time to solve this problem :  3.9391982555389404




.. GENERATED FROM PYTHON SOURCE LINES 168-171

Convert Lambda values to Frequency values:
:math:`freq = \frac{\sqrt(\lambda)}{2.\pi}`


.. GENERATED FROM PYTHON SOURCE LINES 171-174

.. code-block:: default

    freqs = np.sqrt(vals) / (2 * math.pi)









.. GENERATED FROM PYTHON SOURCE LINES 175-179

Compute the residual error for SciPy.

:math:`Err=\frac{||(K-\lambda.M).\phi||_2}{||K.\phi||_2}`


.. GENERATED FROM PYTHON SOURCE LINES 179-197

.. code-block:: default

    scipy_acc = np.zeros(nev)

    for i in range(nev):
        lam = vals[i]  # i-th eigenvalue
        phi = vecs.T[i]  # i-th eigenshape

        kphi = pk * phi.T  # K.Phi
        mphi = pm * phi.T  # M.Phi

        kphi_nrm = np.linalg.norm(kphi, 2)  # Normalization scalar value

        mphi *= lam  # (K-\lambda.M).Phi
        kphi -= mphi

        scipy_acc[i] = 1 - np.linalg.norm(kphi, 2) / kphi_nrm  # compute the residual
        print(f"[{i}] : Freq = {freqs[i]:8.2f} Hz\t Residual = {scipy_acc[i]:.5}")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0] : Freq =   352.40 Hz         Residual = 8.007e-05
    [1] : Freq =   385.20 Hz         Residual = 0.00010352
    [2] : Freq =   656.81 Hz         Residual = 0.00024255
    [3] : Freq =   764.73 Hz         Residual = 0.00016257
    [4] : Freq =   825.47 Hz         Residual = 0.0003896
    [5] : Freq =  1039.28 Hz         Residual = 0.00057568
    [6] : Freq =  1143.61 Hz         Residual = 0.0025878
    [7] : Freq =  1258.00 Hz         Residual = 0.00033875
    [8] : Freq =  1334.23 Hz         Residual = 0.00046618
    [9] : Freq =  1352.10 Hz         Residual = 0.0011268




.. GENERATED FROM PYTHON SOURCE LINES 198-200

MAPDL is more accurate than SciPy.


.. GENERATED FROM PYTHON SOURCE LINES 200-212

.. code-block:: default

    fig = plt.figure(figsize=(12, 10))
    ax = plt.axes()
    x = np.linspace(1, 10, 10)
    plt.title("Residual Error")
    plt.yscale("log")
    plt.xlabel("Mode")
    plt.ylabel("% Error")
    ax.bar(x, scipy_acc, label="SciPy Results")
    ax.bar(x, mapdl_acc, label="MAPDL Results")
    plt.legend(loc="lower right")
    plt.show()




.. image-sg:: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_004.png
   :alt: Residual Error
   :srcset: /examples/01-apdlmath-examples/images/sphx_glr_mapdl_vs_scipy_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 213-215

MAPDL is faster than SciPy.


.. GENERATED FROM PYTHON SOURCE LINES 215-218

.. code-block:: default

    ratio = scipy_elapsed_time / mapdl_elapsed_time
    print(f"Mapdl is {ratio:.3} times faster")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Mapdl is 5.47 times faster




.. GENERATED FROM PYTHON SOURCE LINES 219-220

stop mapdl

.. GENERATED FROM PYTHON SOURCE LINES 220-221

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.532 seconds)


.. _sphx_glr_download_examples_01-apdlmath-examples_mapdl_vs_scipy.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: mapdl_vs_scipy.py <mapdl_vs_scipy.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: mapdl_vs_scipy.ipynb <mapdl_vs_scipy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
