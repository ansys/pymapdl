
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/02-geometry/01-lines.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_02-geometry_01-lines.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_02-geometry_01-lines.py:


.. _ref_basic-geometry-lines:

Lines
-----

This example shows how to create basic geometry
using lines commands.

.. GENERATED FROM PYTHON SOURCE LINES 11-23

.. code-block:: default


    import numpy as np

    from ansys.mapdl.core import launch_mapdl

    # start MAPDL and enter the pre-processing routine
    mapdl = launch_mapdl()
    mapdl.clear()
    mapdl.prep7()
    print(mapdl)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Product:             Ansys Mechanical Enterprise
    MAPDL Version:       22.2
    ansys.mapdl Version: 0.64.1





.. GENERATED FROM PYTHON SOURCE LINES 24-28

APDL Command: L
~~~~~~~~~~~~~~~

Create a line between the two keypoints ``(0, 0, 0)`` and ``(1, 0, 0)``

.. GENERATED FROM PYTHON SOURCE LINES 28-35

.. code-block:: default


    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    lnum = mapdl.l(k0, k1)
    lnum






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 36-40

APDL Command: LARC
~~~~~~~~~~~~~~~~~~
Create a circular arc that travels between ``(0, 0, 0)`` and
``(1, 1, 0)`` with a radius of curvature of 2.  Plot the result.

.. GENERATED FROM PYTHON SOURCE LINES 40-50

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 1, 0)
    k2 = mapdl.k("", 0, 1, 0)
    lnum = mapdl.larc(k0, k1, k2, 2)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_001.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 51-54

APDL Command: L2ANG
~~~~~~~~~~~~~~~~~~~
Create two circles and join them with a line.  Plot the result.

.. GENERATED FROM PYTHON SOURCE LINES 54-66

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 0, 1)
    k2 = mapdl.k("", 0, 0, 0.5)
    carc0 = mapdl.circle(k0, 1, k1)
    carc1 = mapdl.circle(k2, 1, k1)
    lnum = mapdl.l2ang(carc0[0], carc1[0], 90, 90)
    mapdl.lplot(background="w", color="k", line_width=5)





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_002.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-70

APDL Command: L2TAN
~~~~~~~~~~~~~~~~~~~
Create two circular arcs and connect them with a spline.  Plot the result.

.. GENERATED FROM PYTHON SOURCE LINES 70-83

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 0, 1)
    k2 = mapdl.k("", -1.5, 1.5, 0)
    k3 = mapdl.k("", -1.5, 1.5, 1)
    carc0 = mapdl.circle(k0, 1, k1, arc=90)
    carc1 = mapdl.circle(k2, 1, k3, arc=90)
    lnum = mapdl.l2tan(1, 2)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_003.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-88

APDL Command: LANG
~~~~~~~~~~~~~~~~~~
Create a line from a line from ``(0, 0, 0)`` to ``(1, 0, 0)`` to a
keypoint at ``(1, 1, 1)`` at an angle of 60 degrees.  Plot the result.

.. GENERATED FROM PYTHON SOURCE LINES 88-99

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    lnum = mapdl.l(k0, k1)
    k2 = mapdl.k("", 1, 1, 0)
    lnum = mapdl.lang(lnum, k2, 60)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_004.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 100-103

APDL Command: LAREA
~~~~~~~~~~~~~~~~~~~
Generate a line on a square between its two corners.

.. GENERATED FROM PYTHON SOURCE LINES 103-115

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    k2 = mapdl.k("", 1, 1, 0)
    k3 = mapdl.k("", 0, 1, 0)
    a0 = mapdl.a(k0, k1, k2, k3)
    lnum = mapdl.larea(k0, k2, a0)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_005.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 116-119

APDL Command: LCOMB
~~~~~~~~~~~~~~~~~~~
Create two lines and combine them.

.. GENERATED FROM PYTHON SOURCE LINES 119-128

.. code-block:: default


    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    k2 = mapdl.k("", 2, 0, 0)
    l0 = mapdl.l(k0, k1)
    l1 = mapdl.l(k0, k2)
    lout = mapdl.lcomb(l0, l1)









.. GENERATED FROM PYTHON SOURCE LINES 129-132

APDL Command: LDIV
~~~~~~~~~~~~~~~~~~
Create a single line and divide it into 5 pieces.

.. GENERATED FROM PYTHON SOURCE LINES 132-142

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    l0 = mapdl.l(k0, k1)
    mapdl.ldiv(l0, ndiv=5)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_006.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 143-146

APDL Command: LEXTND
~~~~~~~~~~~~~~~~~~~~
Create a circular arc and extend it at one of its keypoints.

.. GENERATED FROM PYTHON SOURCE LINES 146-156

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 0, 1)
    carcs = mapdl.circle(k0, 1, k1, arc=90)
    lnum = mapdl.lextnd(carcs[0], 3, 1)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_007.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-161

APDL Command: LFILLT
~~~~~~~~~~~~~~~~~~~~
Create two intersecting lines at a right angle and add a
fillet between them.

.. GENERATED FROM PYTHON SOURCE LINES 161-173

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 1, 0)
    k2 = mapdl.k("", 1, 0, 0)
    l0 = mapdl.l(k0, k1)
    l1 = mapdl.l(k0, k2)
    lnum = mapdl.lfillt(l0, l1, 0.25)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_008.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 174-178

APDL Command: LTAN
~~~~~~~~~~~~~~~~~~
Create a circular arc and generate a tangent spline at the end of it
directed to a new keypoint.

.. GENERATED FROM PYTHON SOURCE LINES 178-189

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 0, 1)
    k2 = mapdl.k("", -1, 1.5, 0)
    carc = mapdl.circle(k0, 1, k1, arc=90)
    lnum = mapdl.ltan(carc[0], k2)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_009.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 190-193

APDL Command: SPLINE
~~~~~~~~~~~~~~~~~~~~
Generate a segmented spline through 5 keypoints.

.. GENERATED FROM PYTHON SOURCE LINES 193-205

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0.2, 0.2, 0)
    k2 = mapdl.k("", 0.4, 0.3, 0)
    k3 = mapdl.k("", 0.6, 0.5, 0)
    k4 = mapdl.k("", 0.8, 0.3, 0)
    mapdl.spline(k0, k1, k2, k3, k4)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_010.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 206-213

APDL Command: BSPLIN
~~~~~~~~~~~~~~~~~~~~
Generate a single line from a spline fit to a series of keypoints.
Generate through ``(0, 0, 0)``, ``(0, 1, 0)`` and ``(1, 2, 0)``

This is different than the ``spline`` method as this creates a
single line rather than multiple lines.

.. GENERATED FROM PYTHON SOURCE LINES 213-223

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 1, 0)
    k2 = mapdl.k("", 1, 2, 0)
    lnum = mapdl.bsplin(k0, k1, k2)
    mapdl.lplot(background="w", color="k", line_width=5, cpos="xy")





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_011.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 224-227

Line IDs
~~~~~~~~
Return an array of the line IDs

.. GENERATED FROM PYTHON SOURCE LINES 227-231

.. code-block:: default

    lnum = mapdl.geometry.lnum
    lnum






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1], dtype=int32)



.. GENERATED FROM PYTHON SOURCE LINES 232-236

Line Geometry
~~~~~~~~~~~~~
Get the VTK ``PolyData`` containing lines.  This VTK mesh can be
saved or plotted.  For more details, visit `Pyvista documentation <pyvista_docs_>`_

.. GENERATED FROM PYTHON SOURCE LINES 236-240

.. code-block:: default

    lines = mapdl.geometry.lines
    lines







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>1</td></tr>
    <tr><td>N Points</td><td>100</td></tr>
    <tr><td>N Strips</td><td>0</td></tr>
    <tr><td>X Bounds</td><td>-9.611e-02, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 2.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>entity_num</b></td><td>Cells</td><td>int32</td><td>1</td><td>1.000e+00</td><td>1.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 241-249

Line Selection
~~~~~~~~~~~~~~
There are two approaches for selecting lines, the old "legacy"
style and the new style.  The old style is valuable for those who
are comfortable with the existing MAPDL commands, and new style is
useful for selecting lines in a pythonic manner.

This example generates a series of random lines and selects them

.. GENERATED FROM PYTHON SOURCE LINES 249-267

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()


    def generate_random_line():
        k0 = mapdl.k("", *np.random.random(3))
        k1 = mapdl.k("", *np.random.random(3))
        mapdl.l(k0, k1)


    # create 20 random lines
    for _ in range(20):
        generate_random_line()

    # Print the line numbers
    print(mapdl.geometry.lnum)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]




.. GENERATED FROM PYTHON SOURCE LINES 268-269

Select every other line with the old style command.

.. GENERATED FROM PYTHON SOURCE LINES 269-273

.. code-block:: default

    mapdl.ksel("S", "KP", "", 1, 20, 2)
    print(mapdl.geometry.lnum)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]




.. GENERATED FROM PYTHON SOURCE LINES 274-278

Select every other line with the new style command.

Note that the item IDs are 1 based in MAPDL, while Python ranges are
0 based.

.. GENERATED FROM PYTHON SOURCE LINES 278-282

.. code-block:: default

    mapdl.geometry.line_select(range(1, 21, 2))
    print(mapdl.geometry.lnum)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 1  3  5  7  9 11 13 15 17 19]




.. GENERATED FROM PYTHON SOURCE LINES 283-290

Select lines from a list

Note that you can ``return_selected`` if you want to see what you
have selected.  This is helpful when reselecting from existing
areas.

Note that you could use a numpy array here as well.

.. GENERATED FROM PYTHON SOURCE LINES 290-294

.. code-block:: default

    items = mapdl.geometry.line_select([1, 5, 10, 20], return_selected=True)
    print(items)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [ 1  5 10 20]




.. GENERATED FROM PYTHON SOURCE LINES 295-301

APDL Command: LPLOT
~~~~~~~~~~~~~~~~~~~
Plot colored lines while displaying the keypoint numbers.

There are a variety of plotting options available for all the common
plotting methods.

.. GENERATED FROM PYTHON SOURCE LINES 301-314

.. code-block:: default


    mapdl.lplot(
        show_keypoint_numbering=True,
        color_lines=True,
        show_line_numbering=False,
        background="black",
        show_bounds=True,
        line_width=5,
        cpos="xy",
        font_size=26,
    )





.. image-sg:: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_012.png
   :alt: 01 lines
   :srcset: /examples/gallery_examples/02-geometry/images/sphx_glr_01-lines_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 315-318

Stop mapdl
~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 318-319

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.306 seconds)


.. _sphx_glr_download_examples_gallery_examples_02-geometry_01-lines.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01-lines.py <01-lines.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01-lines.ipynb <01-lines.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
