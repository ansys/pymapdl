
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/lathe_cutter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:


.. _ref_lathe_cutter_example:

=====================================
Structural Analysis of a Lathe Cutter
=====================================

Basic walk through PyMAPDL capabilities.

Objective
=========

The objective of this example is to highlight some regularly used
PyMAPDL features via a lathe cutter finite element model. Lathe
cutters have multiple avenues of wear and failure, and the analyses
supporting their design would most often be transient
thermal-structural. However, for simplicity, this simulation
example uses a non-uniform load.

.. figure:: ../../../_static/lathe_cutter_model.png
    :align: center
    :width: 600
    :alt:  Lathe cutter geometry and load description.
    :figclass: align-center

    **Figure 1: Lathe cutter geometry and load description.**



Contents
========

1. **Variables and launch**
   Define necessary variables and launch MAPDL.

2. **Geometry, mesh, and MAPDL parameters**
   Import geometry and inspect for MAPDL parameters. Define linear
   elastic material model with Python variables. Mesh and apply symmetry
   boundary conditions.

3. **Coordinate system and load**
   Create a local coordinate system for the applied load and verify with
   a plot.

4. **Pressure load**
   Define the pressure load as a sine function of the length of the
   application area using numpy arrays. Import the pressure array into
   MAPDL as a table array. Verify the applied load and solve.

5. **Plotting**
   Show result plotting, plotting with selection, and working with the
   plot legend.

6. **Postprocessing:**
   List a result two ways: use PyMAPDL and the Pythonic version of APDL.
   Demonstrate extended methods and writing a list to a file.

7. **Advanced plotting**
   Use of :class:`pyvista.UnstructuredGrid`
   for additional postprocessing.


Step 1: Variables and launch
============================

Define variables and launch MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 68-82

.. code-block:: default


    import os

    import numpy as np

    from ansys.mapdl.core import launch_mapdl
    from ansys.mapdl.core.examples.downloads import download_example_data

    # cwd = current working directory
    path = os.getcwd()
    PI = np.pi
    EXX = 1.0e7
    NU = 0.27








.. GENERATED FROM PYTHON SOURCE LINES 83-98

Often used MAPDL command line options are exposed as Pythonic parameter names in
:func:`ansys.mapdl.core.launch_mapdl`. For example, ``-dir``
has become ``run_location``.
You could use ``run_location`` to specify the MAPDL run location. For example:

.. code:: python3

   mapdl = launch_mapdl(run_location=path)

Otherwise, the MAPDL working directory is stored in ``mapdl.directory``. In this
directory, MAPDL will create some of the images we will show later.

Options without a Pythonic version can be accessed by the ``additional_switches``
parameter.
Here ``-smp`` is used only to keep the number of solver files to a minimum.

.. GENERATED FROM PYTHON SOURCE LINES 98-101

.. code-block:: default


    mapdl = launch_mapdl(additional_switches="-smp")








.. GENERATED FROM PYTHON SOURCE LINES 102-108

Step 2: Geometry, mesh, and MAPDL parameters
============================================

- Import geometry and inspect for MAPDL parameters.
- Define material and mesh, and then create boundary conditions.


.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default


    # First, reset the MAPDL database.
    mapdl.clear()








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Import the geometry file and list any MAPDL parameters.

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: default

    lathe_cutter_geo = download_example_data("LatheCutter.anf", "geometry")
    mapdl.input(lathe_cutter_geo)
    mapdl.finish()
    print(mapdl.parameters)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MAPDL Parameters
    ----------------
    PRESS_LENGTH                     : 0.055
    UNIT_SYSTEM                      : "bin"




.. GENERATED FROM PYTHON SOURCE LINES 120-121

Use pressure area per length in the load definition.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default

    pressure_length = mapdl.parameters["PRESS_LENGTH"]

    print(mapdl.parameters)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    MAPDL Parameters
    ----------------
    PRESS_LENGTH                     : 0.055
    UNIT_SYSTEM                      : "bin"




.. GENERATED FROM PYTHON SOURCE LINES 126-127

Change the units and title.

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default

    mapdl.units("Bin")
    mapdl.title("Lathe Cutter")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    TITLE= 
     Lathe Cutter



.. GENERATED FROM PYTHON SOURCE LINES 131-132

Set material properties.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: default

    mapdl.prep7()
    mapdl.mp("EX", 1, EXX)
    mapdl.mp("NUXY", 1, NU)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    MATERIAL          1     NUXY =  0.2700000



.. GENERATED FROM PYTHON SOURCE LINES 137-140

The MAPDL element type ``SOLID285`` is used for demonstration purposes.
Consider using an appropriate element type or mesh density for your actual
application.

.. GENERATED FROM PYTHON SOURCE LINES 140-151

.. code-block:: default


    mapdl.et(1, 285)
    mapdl.smrtsize(4)
    mapdl.aesize(14, 0.0025)
    mapdl.vmesh(1)

    mapdl.da(11, "symm")
    mapdl.da(16, "symm")
    mapdl.da(9, "symm")
    mapdl.da(10, "symm")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    CONSTRAINT AT AREA    10
          LOAD LABEL = SYMM



.. GENERATED FROM PYTHON SOURCE LINES 152-159

Step 3: Coordinate system and load
==============================================

Create a local Coordinate System (CS) for the applied pressure as a function
of local X.

Local CS ID is 11

.. GENERATED FROM PYTHON SOURCE LINES 159-171

.. code-block:: default


    mapdl.cskp(11, 0, 2, 1, 13)
    mapdl.csys(1)
    mapdl.view(1, -1, 1, 1)
    mapdl.psymb("CS", 1)
    mapdl.vplot(
        color_areas=True,
        show_lines=True,
        cpos=[-1, 1, 1],
        smooth_shading=True,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_001.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 172-175

VTK plots do not show MAPDL plot symbols.
However, to use MAPDL plotting capabilities, you can set the keyword
option ``vtk`` to ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: default


    mapdl.lplot(vtk=False)








.. GENERATED FROM PYTHON SOURCE LINES 180-185

Step 4: Pressure load
=================================

Create a pressure load, load it into MAPDL as a table array, verify the load,
and solve.

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    # pressure_length = 0.055 inch

    pts = 10
    pts_1 = pts - 1

    length_x = np.arange(0, pts, 1)
    length_x = length_x * pressure_length / pts_1

    press = 10000 * (np.sin(PI * length_x / pressure_length))








.. GENERATED FROM PYTHON SOURCE LINES 197-200

``length_x`` and ``press`` are vectors. To combine them into the correct
form needed to define the MAPDL table array, you can use
`numpy.stack <https://numpy.org/doc/stable/reference/generated/numpy.stack.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 200-209

.. code-block:: default


    press = np.stack((length_x, press), axis=-1)
    mapdl.load_table("MY_PRESS", press, "X", csysid=11)

    mapdl.asel("S", "Area", "", 14)
    mapdl.nsla("S", 1)
    mapdl.sf("All", "Press", "%MY_PRESS%")
    mapdl.allsel()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SELECT ALL ENTITIES OF TYPE= ALL  AND BELOW



.. GENERATED FROM PYTHON SOURCE LINES 210-217

You can open the MAPDL GUI to check the model.

.. code:: python

    mapdl.open_gui()



.. GENERATED FROM PYTHON SOURCE LINES 219-220

Set up the solution.

.. GENERATED FROM PYTHON SOURCE LINES 220-227

.. code-block:: default

    mapdl.finish()
    mapdl.slashsolu()
    mapdl.nlgeom("On")
    mapdl.psf("PRES", "NORM", 3, 0, 1)
    mapdl.view(1, -1, 1, 1)
    mapdl.eplot(vtk=False)








.. GENERATED FROM PYTHON SOURCE LINES 228-229

Solve the model.

.. GENERATED FROM PYTHON SOURCE LINES 229-234

.. code-block:: default

    mapdl.solve()
    mapdl.finish()
    if mapdl.solution.converged:
        print("The solution has converged.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The solution has converged.




.. GENERATED FROM PYTHON SOURCE LINES 235-238

Step 5: Plotting
================


.. GENERATED FROM PYTHON SOURCE LINES 238-245

.. code-block:: default


    mapdl.post1()
    mapdl.set("last")
    mapdl.allsel()

    mapdl.post_processing.plot_nodal_principal_stress("1", smooth_shading=False)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_002.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 246-249

Plotting - Part of Model
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 249-258

.. code-block:: default


    mapdl.csys(1)
    mapdl.nsel("S", "LOC", "Z", -0.5, -0.141)
    mapdl.esln()
    mapdl.nsle()
    mapdl.post_processing.plot_nodal_principal_stress(
        "1", edge_color="white", show_edges=True
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_003.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 259-262

Plotting - Legend Options
-------------------------


.. GENERATED FROM PYTHON SOURCE LINES 262-280

.. code-block:: default


    mapdl.allsel()
    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }
    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        background="white",
        edge_color="black",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=9,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_004.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 281-289

Let's try out some scalar bar options from the
`PyVista documentation <pyvista_docs_>`_.
For example, let's set black text on a beige background.

The scalar bar keywords defined as a Python dictionary are an alternate
method to using {key:value}'s.
You can use the click-and drag method to reposition the scalar bar.
Left-click it and hold down the left mouse button while moving the mouse.

.. GENERATED FROM PYTHON SOURCE LINES 289-317

.. code-block:: default


    sbar_kwargs = dict(
        title_font_size=20,
        label_font_size=16,
        shadow=True,
        n_labels=9,
        italic=True,
        bold=True,
        fmt="%.1f",
        font_family="arial",
        title="1st Principal Stress (psi)",
        color="black",
    )

    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        edge_color="black",
        background="beige",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=256,
        cmap="jet",
    )

    # cmap names *_r usually reverses values.  Try cmap='jet_r'





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_005.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 318-325

Step 6: Postprocessing
=======================

Results List
------------

Get all principal nodal stresses.

.. GENERATED FROM PYTHON SOURCE LINES 325-327

.. code-block:: default

    mapdl.post_processing.nodal_principal_stress("1")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1198.57552642, 1308.34503077,  111.30925963, ..., 1661.40055342,
           1323.07883419, 1360.64830088])



.. GENERATED FROM PYTHON SOURCE LINES 328-329

Get the principal nodal stresses of the node subset.

.. GENERATED FROM PYTHON SOURCE LINES 329-339

.. code-block:: default

    mapdl.nsel("S", "S", 1, 6700, 7720)
    mapdl.esln()
    mapdl.nsle()

    print("The node numbers are:")
    print(mapdl.mesh.nnum)  # get node numbers

    print("The principal nodal stresses are:")
    mapdl.post_processing.nodal_principal_stress("1")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The node numbers are:
    [  84   85  415  416  417  425  426 1104 1163]
    The principal nodal stresses are:

    array([7283.37637597, 7651.99689433, 7308.07851329, 6839.63086963,
           7173.27831228, 6892.53836453, 6399.20826385, 6607.44852844,
           5994.1721867 ])



.. GENERATED FROM PYTHON SOURCE LINES 340-343

Results as lists, arrays, and DataFrames
-----------------------------------------
Using :meth:`mapdl.prnsol` to check

.. GENERATED FROM PYTHON SOURCE LINES 343-345

.. code-block:: default

    print(mapdl.prnsol("S", "PRIN"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    PRINT S    NODAL SOLUTION PER NODE
       *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION
 
      ***** POST1 NODAL STRESS LISTING *****                                       
 
      LOAD STEP=     1  SUBSTEP=     1                                             
       TIME=    1.0000      LOAD CASE=   0                                         
 
        NODE     S1           S2           S3           SINT         SEQV    
          84   7283.4       300.35       212.68       7070.7       7027.3     
          85   7652.0       962.92       23.004       7629.0       7205.2     
         415   7308.1       489.51       267.33       7040.7       6932.3     
         416   6839.6       329.26       133.98       6705.7       6610.2     
         417   7173.3       371.75       119.59       7053.7       6931.1     
         425   6892.5       310.35      -121.13       7013.7       6808.2     
         426   6399.2       283.26       12.246       6387.0       6255.9     
        1104   6607.4       417.21       163.29       6444.2       6321.0     
        1163   5994.2      -215.18      -712.68       6706.9       6472.5     

     MINIMUM VALUES
     NODE          0            0            0            0            0
     VALUE    5994.2      -215.18      -712.68       6387.0       6255.9     

     MAXIMUM VALUES
     NODE          0            0            0            0            0
     VALUE    7652.0       962.92       267.33       7629.0       7205.2




.. GENERATED FROM PYTHON SOURCE LINES 346-347

Use this command to obtain the data as a list.

.. GENERATED FROM PYTHON SOURCE LINES 347-350

.. code-block:: default

    mapdl_s_1_list = mapdl.prnsol("S", "PRIN").to_list()
    print(mapdl_s_1_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[84.0, 7283.4, 300.35, 212.68, 7070.7, 7027.3], [85.0, 7652.0, 962.92, 23.004, 7629.0, 7205.2], [415.0, 7308.1, 489.51, 267.33, 7040.7, 6932.3], [416.0, 6839.6, 329.26, 133.98, 6705.7, 6610.2], [417.0, 7173.3, 371.75, 119.59, 7053.7, 6931.1], [425.0, 6892.5, 310.35, -121.13, 7013.7, 6808.2], [426.0, 6399.2, 283.26, 12.246, 6387.0, 6255.9], [1104.0, 6607.4, 417.21, 163.29, 6444.2, 6321.0], [1163.0, 5994.2, -215.18, -712.68, 6706.9, 6472.5]]




.. GENERATED FROM PYTHON SOURCE LINES 351-352

Use this command to obtain the data as an array:

.. GENERATED FROM PYTHON SOURCE LINES 352-355

.. code-block:: default

    mapdl_s_1_array = mapdl.prnsol("S", "PRIN").to_array()
    print(mapdl_s_1_array)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[  84.    7283.4    300.35   212.68  7070.7   7027.3  ]
     [  85.    7652.     962.92    23.004 7629.    7205.2  ]
     [ 415.    7308.1    489.51   267.33  7040.7   6932.3  ]
     [ 416.    6839.6    329.26   133.98  6705.7   6610.2  ]
     [ 417.    7173.3    371.75   119.59  7053.7   6931.1  ]
     [ 425.    6892.5    310.35  -121.13  7013.7   6808.2  ]
     [ 426.    6399.2    283.26    12.246 6387.    6255.9  ]
     [1104.    6607.4    417.21   163.29  6444.2   6321.   ]
     [1163.    5994.2   -215.18  -712.68  6706.9   6472.5  ]]




.. GENERATED FROM PYTHON SOURCE LINES 356-357

or as a DataFrame:

.. GENERATED FROM PYTHON SOURCE LINES 357-360

.. code-block:: default

    mapdl_s_1_df = mapdl.prnsol("S", "PRIN").to_dataframe()
    mapdl_s_1_df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>NODE</th>
          <th>S1</th>
          <th>S2</th>
          <th>S3</th>
          <th>SINT</th>
          <th>SEQV</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>84.0</td>
          <td>7283.4</td>
          <td>300.35</td>
          <td>212.680</td>
          <td>7070.7</td>
          <td>7027.3</td>
        </tr>
        <tr>
          <th>1</th>
          <td>85.0</td>
          <td>7652.0</td>
          <td>962.92</td>
          <td>23.004</td>
          <td>7629.0</td>
          <td>7205.2</td>
        </tr>
        <tr>
          <th>2</th>
          <td>415.0</td>
          <td>7308.1</td>
          <td>489.51</td>
          <td>267.330</td>
          <td>7040.7</td>
          <td>6932.3</td>
        </tr>
        <tr>
          <th>3</th>
          <td>416.0</td>
          <td>6839.6</td>
          <td>329.26</td>
          <td>133.980</td>
          <td>6705.7</td>
          <td>6610.2</td>
        </tr>
        <tr>
          <th>4</th>
          <td>417.0</td>
          <td>7173.3</td>
          <td>371.75</td>
          <td>119.590</td>
          <td>7053.7</td>
          <td>6931.1</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 361-365

Use this command to obtain the data as a DataFrame, which is a.
`Pandas data type <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.
Because the Pandas module is imported, you can use its functions.
For example, you can write principal stresses to a file.

.. GENERATED FROM PYTHON SOURCE LINES 365-370

.. code-block:: default


    # mapdl_s_1_df.to_csv(path + '\prin-stresses.csv')
    # mapdl_s_1_df.to_json(path + '\prin-stresses.json')
    mapdl_s_1_df.to_html(path + "\prin-stresses.html")








.. GENERATED FROM PYTHON SOURCE LINES 371-374

Step 7: Advanced plotting
=========================


.. GENERATED FROM PYTHON SOURCE LINES 374-378

.. code-block:: default


    mapdl.allsel()
    principal_1 = mapdl.post_processing.nodal_principal_stress("1")








.. GENERATED FROM PYTHON SOURCE LINES 379-380

Load this result into the VTK grid.

.. GENERATED FROM PYTHON SOURCE LINES 380-390

.. code-block:: default

    grid = mapdl.mesh.grid
    grid["p1"] = principal_1

    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }








.. GENERATED FROM PYTHON SOURCE LINES 391-397

Generate a single horizontal slice along the XY plane.

.. note::
   We're using ``eye_dome_lighting`` here to enhance the plots of our slices.
   Read more about it at `Eye Dome Lighting
   <pyvista_eye_dome_lighting_>`_

.. GENERATED FROM PYTHON SOURCE LINES 397-410

.. code-block:: default


    single_slice = grid.slice(normal=[0, 0, 1], origin=[0, 0, 0])
    single_slice.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_006.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 411-412

Generate a plot with three slice planes.

.. GENERATED FROM PYTHON SOURCE LINES 412-424

.. code-block:: default

    slices = grid.slice_orthogonal()
    slices.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_007.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 425-427

Generate a grid with multiple slices in the same plane.


.. GENERATED FROM PYTHON SOURCE LINES 427-439

.. code-block:: default

    slices = grid.slice_along_axis(12, "x")
    slices.plot(
        scalars="p1",
        background="white",
        show_edges=False,
        lighting=False,
        eye_dome_lighting=True,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_008.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 440-441

Finally, exit MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 441-442

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.501 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: lathe_cutter.py <lathe_cutter.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: lathe_cutter.ipynb <lathe_cutter.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
