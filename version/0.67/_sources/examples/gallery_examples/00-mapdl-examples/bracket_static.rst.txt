
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/bracket_static.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_bracket_static.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_bracket_static.py:


.. _ref_static_analysis_bracket:


===================================
Static analysis of a corner bracket
===================================

This is an example adapted from a classic Ansys APDL tutorial
`Static Analysis of a Corner Bracket <https://ansyshelp.ansys.com/account/Secured?returnurl=/Views/Secured/corp/v231/en/ans_tut/structural_cb.html>`_


Problem specification
=====================

+---------------------------+---------------------------------------------------------------------------------------------------------+
| Applicable Products:      | Ansys Multiphysics, Ansys Mechanical, Ansys Structural                                                  |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Level of Difficulty:      | Easy                                                                                                    |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Interactive Time Required:| 60 to 90 minutes                                                                                        |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Discipline:               | Structural                                                                                              |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Analysis Type:            | Linear static                                                                                           |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Element Types Used:       | `PLANE183 <elem_plane183_>`_                                                                            |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Features Demonstrated:    | Solid modeling including primitives, boolean operations, and fillets; tapered pressure load             |
|                           | deformed shape and stress displays; listing of reaction forces;                                         |
+---------------------------+---------------------------------------------------------------------------------------------------------+
| Help Resources:           | Structural Static Analysis and `PLANE183 <elem_plane183_>`_                                             |
+---------------------------+---------------------------------------------------------------------------------------------------------+


Problem description
===================

This is a simple, single-load-step, structural static analysis of a corner angle
bracket. The upper-left pin hole is constrained (welded) around its entire
circumference, and a tapered pressure load is applied to the bottom of the
lower-right pin hole. The US customary system of units is used.
The objective is to demonstrate how Mechanical APDL is typical used in an analysis.

Bracket model
~~~~~~~~~~~~~

The dimensions of the corner bracket are shown in the following figure.
The bracket is made of A36 steel with a Young's modulus of :math:`3\cdot10^7` psi
and Poisson's ratio of :math:`0.27`.

.. figure:: ../../../images/bracket_dimensions.png
   :width: 400
   :alt: Bracket image

   **Bracket model dimensions**


Approach and assumptions
~~~~~~~~~~~~~~~~~~~~~~~~

Because the bracket is thin in the z direction (1/2-inch thickness) compared
to its x and y dimensions, and because the pressure load acts only in the x-y
plane, assume plane stress for the analysis.

The approach is to use solid modeling to generate the 2D model and automatically
mesh it with nodes and elements.
An alternative approach would be to create the nodes and elements directly.

.. GENERATED FROM PYTHON SOURCE LINES 72-74

Launching MAPDL
===============

.. GENERATED FROM PYTHON SOURCE LINES 74-79

.. code-block:: default

    from ansys.mapdl.core import launch_mapdl

    jobName = "bracket"  # optional
    mapdl = launch_mapdl(jobname=jobName)








.. GENERATED FROM PYTHON SOURCE LINES 80-114

Build the geometry
==================

Define rectangles
~~~~~~~~~~~~~~~~~

There are several ways to create the model geometry within Mechanical APDL,
and some are more convenient than others. The first step is to recognize that you can
construct the bracket easily with combinations of rectangles and circle primitives.

Select an arbitrary global origin location, and then define the rectangle and circle
primitives relative to that origin. For this analysis, use the center of the
upper-left hole. Begin by defining a rectangle relative to that location.

The APDL command :meth:`mapdl.prep7() <ansys.mapdl.core.Mapdl.rectng>` is
used to create a rectangle with ``X1``, ``X2``, ``Y1``, and ``Y2`` dimensions.
In PyMAPDL the :class:`mapdl() <ansys.mapdl.core.Mapdl>` class is used
to call the APDL command.


Dimension box 1
---------------

Enter the following:

.. code:: python

    X1 = 0
    X2 = 6
    Y1 = -1
    Y2 = 1


Or use a Python list to store the dimensions:

.. GENERATED FROM PYTHON SOURCE LINES 114-117

.. code-block:: default


    box1 = [0, 6, -1, 1]








.. GENERATED FROM PYTHON SOURCE LINES 118-121

Dimension box 2
---------------
Enter the following:

.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: default


    box2 = [4, 6, -1, -3]








.. GENERATED FROM PYTHON SOURCE LINES 125-128

The :meth:`mapdl.prep7() <ansys.mapdl.core.Mapdl.prep7>` command starts the APDL
preprocessor to start the build up of the analysis.
This is the processor where the model geometry is created.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default


    mapdl.prep7()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

              ***** MAPDL ANALYSIS DEFINITION (PREP7) *****



.. GENERATED FROM PYTHON SOURCE LINES 132-137

Parameterize as much as possible, taking advantage of Python features such as the
Python :class:`list <python.list>` or :class:`dict <python.dict>` class.
Good practice would be to have all parameters near or at the top of the input
file. However, for this interactive tutorial, they are inline.


.. GENERATED FROM PYTHON SOURCE LINES 137-141

.. code-block:: default


    # build your cubes
    mapdl.rectng(box1[0], box1[1], box1[2], box1[3])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 142-144

In Python, you can use the ``*`` to unpack an object in a function
call. For example:

.. GENERATED FROM PYTHON SOURCE LINES 144-148

.. code-block:: default


    mapdl.rectng(*box2)  # prints the id of the created area






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    2



.. GENERATED FROM PYTHON SOURCE LINES 149-159

Plot areas
~~~~~~~~~~

PyMAPDL plots can be controlled through arguments passed to the different plot
methods, such as :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>`.

The area plot shows both rectangles, which are areas, in the same color.
To more clearly distinguish between areas, turn on area numbers.
For more information, see the :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>` method.


.. GENERATED FROM PYTHON SOURCE LINES 159-163

.. code-block:: default


    mapdl.aplot(cpos="xy", show_lines=True)





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_001.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 164-171

.. note::

   If you download the Jupyter Notebook version of
   `this example <ref_static_analysis_bracket_end_>`_, you can take advantage
   of Jupyter Notebook features.
   For example, you can right-click a command to display contextual help.


.. GENERATED FROM PYTHON SOURCE LINES 174-189

Create first circle
~~~~~~~~~~~~~~~~~~~

With the use of logic and Boolean geometrical operations, you can use
the original geometric parameters (``box1``, ``box2``) to locate the circles.

Create the half circle at each end of the bracket. You first create
a full circle on each end and then combine the circles and rectangles with a
Boolean add operation (discussed in `Subtract pin holes from bracket`_).

The APDL command to create the circles is
:meth:`mapdl.cyl4() <ansys.mapdl.core.Mapdl.cyl4>`.

The first circle area is located on the left side at the X,Y location, and
its radius is :math:`1`.

.. GENERATED FROM PYTHON SOURCE LINES 189-199

.. code-block:: default


    # Create first circle
    radius = 1
    circle1_X = box1[0]
    circle1_Y = (box1[2] + box1[3]) / 2
    mapdl.cyl4(circle1_X, circle1_Y, radius)

    mapdl.aplot(vtk=True, cpos="xy", show_lines=True)





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_002.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 200-205

Create second circle
~~~~~~~~~~~~~~~~~~~~

Create the second circle at the X,Y location:


.. GENERATED FROM PYTHON SOURCE LINES 205-209

.. code-block:: default


    circle2_X = (box2[0] + box2[1]) / 2
    circle2_Y = box2[3]








.. GENERATED FROM PYTHON SOURCE LINES 210-212

Use these parameter values to create the new area with the same radius of :math:`1`
as the first circle area.

.. GENERATED FROM PYTHON SOURCE LINES 212-217

.. code-block:: default


    mapdl.cyl4(circle2_X, circle2_Y, radius)
    mapdl.aplot(vtk=True, cpos="xy", show_lines=True)





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_003.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 218-226

Add areas
~~~~~~~~~
Now that the appropriate pieces of the model (rectangles and circles) are defined,
add them together so the model becomes one continuous area.
Use the Boolean add operation :meth:`mapdl.aadd() <ansys.mapdl.core.Mapdl.aadd>`
to add the areas together.

Use the ``all`` argument to add all areas.

.. GENERATED FROM PYTHON SOURCE LINES 226-228

.. code-block:: default

    mapdl.aadd("all")  # Prints the ID of the created area





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    5



.. GENERATED FROM PYTHON SOURCE LINES 229-249

Create line fillet
~~~~~~~~~~~~~~~~~~

The right angle between the two boxes can be improved using a fillet with a
radius of :math:`0.4`.
You can do this by selecting the lines around this area and creating the fillet.

Use the APDL :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` method
to select lines. Here, the X and Y locations of the lines are used to create
the boxes for creating your selection.

After selecting the line, you need to write it to a parameter so you can use
it to generate the fillet line.
This is done using the :meth:`mapdl.get() <ansys.mapdl.core.Mapdl.get>`
method.

Because you have selected one line, you can use the ``MAX`` and ``NUM`` arguments
for the :meth:`mapdl.get() <ansys.mapdl.core.Mapdl.get>` method.

Select first line for fillet

.. GENERATED FROM PYTHON SOURCE LINES 249-253

.. code-block:: default

    line1 = mapdl.lsel("S", "LOC", "Y", box1[2])
    l1 = mapdl.get("line1", "LINE", 0, "NUM", "MAX")









.. GENERATED FROM PYTHON SOURCE LINES 254-259

If you write the command to a Python parameter (``line1``), you can use either
the APDL parameter ``l1`` or the Python parameter ``line1`` when you create
the fillet line.

Select second line for fillet and create Python parameter

.. GENERATED FROM PYTHON SOURCE LINES 260-263

.. code-block:: default

    line2 = mapdl.lsel("S", "LOC", "X", box2[0])
    l2 = mapdl.get("line2", "LINE", 0, "NUM", "MAX")








.. GENERATED FROM PYTHON SOURCE LINES 264-269

Once you have both lines selected, you can use the PyMAPDL command
:meth:`mapdl.lfillt() <ansys.mapdl.core.Mapdl.lfillt>` to generate the fillet
between the lines.

**Note** that Python could return a list if more than one line is selected.

.. GENERATED FROM PYTHON SOURCE LINES 271-275

Here you use a mix of the APDL parameter as a string ``line1`` and
the ``l2`` Python parameter to create the fillet line.

Create fillet line using selected line (parameter names)

.. GENERATED FROM PYTHON SOURCE LINES 275-282

.. code-block:: default

    fillet_radius = 0.4
    mapdl.allsel()
    line3 = mapdl.lfillt("line1", l2, fillet_radius)

    mapdl.allsel()
    mapdl.lplot(vtk=True, cpos="xy")




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_004.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 283-299

Create fillet area
~~~~~~~~~~~~~~~~~~

To create the area delineated by ``line1``, ``line2``, and newly created
``line3``, use the :meth:`mapdl.al() <ansys.mapdl.core.Mapdl.al>` method.
The three lines are the input. If you select them all, you can use
the ``'ALL'`` argument to create the area.

First you have to reselect the newly created lines in the fillet area.
To do this, you can use the ``fillet_radius`` parameter and the
:meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command.

For the two newly created straight lines, the length is the same as
the ``fillet_radius`` value. Thus, you can use the length argument
with the :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command.


.. GENERATED FROM PYTHON SOURCE LINES 299-305

.. code-block:: default


    mapdl.allsel()

    # Select lines for the area
    mapdl.lsel("S", "LENGTH", "", fillet_radius)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([4, 5], dtype=int32)



.. GENERATED FROM PYTHON SOURCE LINES 306-312

Additionally, you need to get the fillet line itself (``line3``). You can use the
:meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command again with either
the ``'RADIUS'`` argument if there is only one line with that radius in the model
or more directly use the parameter name of the line.
Note the ``'A'`` to additionally select items.


.. GENERATED FROM PYTHON SOURCE LINES 312-317

.. code-block:: default

    mapdl.lsel("A", "LINE", "", line3)

    # plotting ares
    mapdl.lplot(vtk=True, cpos="xy", show_line_numbering=True)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_005.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 318-321

Then use :meth:`mapdl.al() <ansys.mapdl.core.Mapdl.al>` command to create the areas
from the lines.


.. GENERATED FROM PYTHON SOURCE LINES 321-326

.. code-block:: default


    # Create the area
    mapdl.al("ALL")  # Prints the ID of the newly created area






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 327-332

Add areas together
~~~~~~~~~~~~~~~~~~
Append all areas again with the :meth:`mapdl.aadd() <ansys.mapdl.core.Mapdl.aadd> command`.
Because you have only the two areas to combine, use the ``'ALL'`` argument.


.. GENERATED FROM PYTHON SOURCE LINES 332-337

.. code-block:: default


    # Add the area to the main area
    mapdl.aadd("all")
    mapdl.aplot(vtk=True, cpos="xy", show_lines=True)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_006.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 338-347

Create first pin hole
~~~~~~~~~~~~~~~~~~~~~

The first pin hole is located at the left side of the first box. Thus, you can use
the box dimensions to locate your new circle.

The X value (center) of the pin hole is at the first coordinate of
the ``box1`` (``X1``). The Y value is the average of the two ``box1`` Y values:


.. GENERATED FROM PYTHON SOURCE LINES 347-355

.. code-block:: default


    # Create the first pinhole
    pinhole_radius = 0.4
    pinhole1_X = box1[0]
    pinhole1_Y = (box1[2] + box1[3]) / 2

    pinhole1 = mapdl.cyl4(pinhole1_X, pinhole1_Y, pinhole_radius)








.. GENERATED FROM PYTHON SOURCE LINES 356-362

Because you have two pin hole circles, you use the command twice.

.. note::
   Some of these areas are set to parameters to use later in the analysis.
   This allows you to use the lines to create the areas with
   the :meth:`mapdl.asll() <ansys.mapdl.core.Mapdl.asll>` command.

.. GENERATED FROM PYTHON SOURCE LINES 365-371

Create second pin hole
~~~~~~~~~~~~~~~~~~~~~~

The second pin hole is located at the bottom of the second box, so again we
can use the box 2 dimensions to locate the circle.
For this pinhole the dimensions are:

.. GENERATED FROM PYTHON SOURCE LINES 371-377

.. code-block:: default

    pinhole2_X = (box2[0] + box2[1]) / 2
    pinhole2_Y = box2[3]

    pinhole2 = mapdl.cyl4(pinhole2_X, pinhole2_Y, pinhole_radius)
    pinhole2_lines = mapdl.asll("S", 0)








.. GENERATED FROM PYTHON SOURCE LINES 378-386

Subtract pin holes from bracket
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you use the :meth:`mapdl.aplot() <ansys.mapdl.core.Mapdl.aplot>` command with lines, at
this point, you have created two circle areas overlapping the bracket.
You can use the :meth:`mapdl.asba() <ansys.mapdl.core.Mapdl.asba>` command, which is
the Boolean command to subtract areas, to remove the circles from the bracket.


.. GENERATED FROM PYTHON SOURCE LINES 386-392

.. code-block:: default


    # Remove pin hole areas from bracket
    mapdl.asba("all", pinhole1)
    bracket = mapdl.asba("all", pinhole2)
    mapdl.aplot(vtk=True, show_lines=True, cpos="xy")




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_007.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 393-401

Model definition
================

Define material properties
~~~~~~~~~~~~~~~~~~~~~~~~~~
There is only one material property to define for the bracket,
A36 Steel, with given values for the Young's modulus of elasticity and Poisson's ratio.


.. GENERATED FROM PYTHON SOURCE LINES 401-405

.. code-block:: default


    ex = 30e6  # Young's Modulus
    prxy = 0.27  # Poisson's ratio








.. GENERATED FROM PYTHON SOURCE LINES 406-409

Use the :meth:`mapdl.mp() <ansys.mapdl.core.Mapdl.mp>` command to
define material properties in PyMAPDL.


.. GENERATED FROM PYTHON SOURCE LINES 409-414

.. code-block:: default


    mapdl.mp("EX", 1, ex)
    mapdl.mp("PRXY", 1, prxy)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    MATERIAL          1     PRXY =  0.2700000



.. GENERATED FROM PYTHON SOURCE LINES 415-441

Define element types and options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You use the :meth:`mapdl.et() <ansys.mapdl.core.Mapdl.et>` command to select an element .

In any analysis, you select elements from a library of element types and
define the appropriate ones for the analysis. In this case, only one element
type is used: `PLANE183 <elem_plane183_>`_, a 2D, quadratic, structural,
higher-order element.

A higher-order element enables you to have a coarser mesh than with lower-order
elements while still maintaining solution accuracy. Also, Mechanical APDL
generates some triangle-shaped elements in the mesh that would otherwise be
inaccurate when using lower-order elements.


Options for `PLANE183`
----------------------

Specify plane stress with thickness as an option for `PLANE183 <elem_plane183_>`_.
(Thickness is defined as a real constant in `Define real constants`_).
Select plane stress with the thickness option for the element behavior.
The thickness option is set using the element keyoption 3.  For more
information, see the `PLANE183 <elem_plane183_>`_ element definition in the
Ansys Help.


.. GENERATED FROM PYTHON SOURCE LINES 441-445

.. code-block:: default


    # define a ``PLANE183`` element type with thickness
    mapdl.et(1, "PLANE183", kop3=3)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    1



.. GENERATED FROM PYTHON SOURCE LINES 446-454

Define real constants
~~~~~~~~~~~~~~~~~~~~~~

Assuming plane stress with thickness, enter the thickness as a real constant
for `PLANE183 <elem_plane183_>`_:

You use the :meth:`mapdl.r() <ansys.mapdl.core.Mapdl.r>` command to set real
constants.

.. GENERATED FROM PYTHON SOURCE LINES 454-459

.. code-block:: default


    # Set element thickness
    thick = 0.5
    mapdl.r(1, thick)  # thickness of 0.5 length units)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    REAL CONSTANT SET          1  ITEMS   1 TO   6
       0.50000       0.0000       0.0000       0.0000       0.0000       0.0000



.. GENERATED FROM PYTHON SOURCE LINES 460-475

Mesh
=====

You can mesh the model without specifying mesh-size controls. If you are
unsure of how to determine mesh density, you can allow Mechanical APDL to apply
a default mesh. For this model, however, you want to specify a global element size
to control overall mesh density.
Set global size control using the :meth:`mapdl.esize() <ansys.mapdl.core.Mapdl.esize>`
command. Set a size of :math:`0.5` or a slightly smaller value to improve the mesh.

Mesh the areas using the :meth:`mapdl.amesh() <ansys.mapdl.core.Mapdl.amesh>` command.
Your mesh may vary slightly from the mesh shown. You may see slightly different
results during postprocessing.

Now you can use the :meth:`mapdl.eplot() <ansys.mapdl.core.Mapdl.eplot>` command to see the mesh.

.. GENERATED FROM PYTHON SOURCE LINES 475-488

.. code-block:: default


    element_size = 0.5
    mapdl.esize(element_size)
    mapdl.amesh(bracket)
    mapdl.eplot(
        vtk=True,
        cpos="xy",
        show_edges=True,
        show_axes=False,
        line_width=2,
        background="w",
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_008.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 489-503

Boundary conditions
===================

Loading is considered part of the
:meth:`mapdl.solu() <ansys.mapdl.core.Mapdl.solu>` command or the solution processor in APDL.
But it can be also done in the preprocessor with
:meth:`mapdl.prep7() <ansys.mapdl.core.Mapdl.prep7>` command.

You can activate the solution processor by calling the
:class:`mapdl.solution() <ansys.mapdl.core.solution.Solution>` class,
by using the :meth:`mapdl.slashsolu() <ansys.mapdl.core.Mapdl.slashsolu>`
command, or by using :meth:`mapdl.run("/solu") <ansys.mapdl.core.Mapdl.run>` to
call the APDL ``/SOLU`` command.


.. GENERATED FROM PYTHON SOURCE LINES 503-507

.. code-block:: default


    mapdl.allsel()
    mapdl.solution()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ***** ROUTINE COMPLETED *****  CP =         0.000



     *****  MAPDL SOLUTION ROUTINE  *****



.. GENERATED FROM PYTHON SOURCE LINES 508-511

Set the analysis type with the
:meth:`mapdl.antype() <ansys.mapdl.core.Mapdl.antype>` command.


.. GENERATED FROM PYTHON SOURCE LINES 511-513

.. code-block:: default

    mapdl.antype("STATIC")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PERFORM A STATIC ANALYSIS
      THIS WILL BE A NEW ANALYSIS



.. GENERATED FROM PYTHON SOURCE LINES 514-530

Apply displacement constraints
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is where you add boundary conditions to the model. First, you want to fix
the model by setting a zero displacement at the first pin hole.
You can apply displacement constraints directly to lines.

To do this without the graphical interface, you would need to replot the lines.
Or you can use Booleans and generate the lines from the pin hole locations/box
parameters.
By using the parameters that you have created, you can select the lines and fix one end
of the bracket.

Pick the four lines around the left-hand hole using
the :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>` command and
the ``pinehole1`` parameters.


.. GENERATED FROM PYTHON SOURCE LINES 530-536

.. code-block:: default


    bc1 = mapdl.lsel(
        "S", "LOC", "X", pinhole1_X - pinhole_radius, pinhole1_X + pinhole_radius
    )
    print(f"Number of lines selected : {len(bc1)}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Number of lines selected : 4




.. GENERATED FROM PYTHON SOURCE LINES 537-540

Then for loading, select and apply the boundary condition to the nodes attached
to those lines using the :meth:`mapdl.nsll() <ansys.mapdl.core.Mapdl.nsll>` command.


.. GENERATED FROM PYTHON SOURCE LINES 540-543

.. code-block:: default


    fixNodes = mapdl.nsll(type_="S")








.. GENERATED FROM PYTHON SOURCE LINES 544-547

Next use the :meth:`mapdl.d() <ansys.mapdl.core.Mapdl.d>` command to set
the displacement to zero (fixed constraint).


.. GENERATED FROM PYTHON SOURCE LINES 547-554

.. code-block:: default


    # Set up boundary conditions
    mapdl.d("ALL", "ALL", 0)  # The 0 is not required since default is zero

    # Selecting everything again
    mapdl.allsel()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SELECT ALL ENTITIES OF TYPE= ALL  AND BELOW



.. GENERATED FROM PYTHON SOURCE LINES 555-566

Apply pressure load
~~~~~~~~~~~~~~~~~~~

Apply the tapered pressure load to the bottom-right pin hole. In this case,
tapered means varying linearly.
When a circle is created in Mechanical APDL, four lines define the perimeter;
therefore, apply the pressure to two lines making up the lower half of the circle.
Because the pressure tapers from a maximum value (500 psi) at the bottom of the
circle to a minimum value (50 psi) at the sides, apply pressure in two separate
steps, with reverse tapering values for each line.


.. GENERATED FROM PYTHON SOURCE LINES 566-570

.. code-block:: default


    p1 = 50
    p2 = 500








.. GENERATED FROM PYTHON SOURCE LINES 571-583

The Mechanical APDL convention for pressure loading is that a positive load
value represents pressure into the surface (compressive).

To pick the line, use the same :meth:`mapdl.lsel() <ansys.mapdl.core.Mapdl.lsel>`
command used in the previous cell block and then convert the lines
to a nodal selection with the :meth:`mapdl.nsel() <ansys.mapdl.core.Mapdl.nsel>`
command.

Note we have a slightly more complicated picking procedure for the two quarters
of the full circle. A method to select the lines would be to select the lower
half of the second pinhole circle.


.. GENERATED FROM PYTHON SOURCE LINES 583-586

.. code-block:: default


    mapdl.lsel("S", "LOC", "Y", pinhole2_Y - pinhole_radius, pinhole2_Y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([11, 12], dtype=int32)



.. GENERATED FROM PYTHON SOURCE LINES 587-589

Now repick from that selection the lines that are less than the X center of that pin hole.


.. GENERATED FROM PYTHON SOURCE LINES 590-594

.. code-block:: default

    mapdl.lsel("R", "LOC", "X", 0, pinhole2_X)

    mapdl.lplot(vtk=True, cpos="xy")




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_009.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 595-599

Once you have the correct line, use
the :meth:`mapdl.sf() <ansys.mapdl.core.Mapdl.sf>` command
to load the line with the varying surface load.


.. GENERATED FROM PYTHON SOURCE LINES 600-605

.. code-block:: default


    # Here you load the left side of the lower half of second pin hole.
    mapdl.sf("ALL", "PRES", p1, p2)
    mapdl.allsel()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SELECT ALL ENTITIES OF TYPE= ALL  AND BELOW



.. GENERATED FROM PYTHON SOURCE LINES 606-608

Repeat the procedure for the second pin hole.


.. GENERATED FROM PYTHON SOURCE LINES 609-622

.. code-block:: default


    mapdl.lsel("S", "LOC", "Y", pinhole2_Y - pinhole_radius, pinhole2_Y)
    mapdl.lsel("R", "LOC", "X", pinhole2_X, pinhole2_X + pinhole_radius)

    mapdl.lplot(
        vtk=True,
        cpos="xy",
        show_line_numbering=True,
    )

    mapdl.sf("ALL", "PRES", p2, p1)
    mapdl.allsel()




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_010.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SELECT ALL ENTITIES OF TYPE= ALL  AND BELOW



.. GENERATED FROM PYTHON SOURCE LINES 623-634

Solution
========

To solve an Ansys FE analysis, the solution processor must be activated,
using the :class:`mapdl.solution() <ansys.mapdl.core.solution.Solution>` class
or the :meth:`mapdl.slashsolu() <ansys.mapdl.core.Mapdl.slashsolu>`
command. This was done a few steps earlier.

The model is ready to be solved using the
:meth:`mapdl.solve() <ansys.mapdl.core.Mapdl.solve>` command.


.. GENERATED FROM PYTHON SOURCE LINES 634-639

.. code-block:: default


    # Solve the model
    output = mapdl.solve()
    print(output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    *****  MAPDL SOLVE    COMMAND  *****

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     There is no title defined for this analysis.                            

     *** SELECTION OF ELEMENT TECHNOLOGIES FOR APPLICABLE ELEMENTS ***
                    ---GIVE SUGGESTIONS ONLY---

     ELEMENT TYPE         1 IS PLANE183 WITH PLANE STRESS OPTION. NO SUGGESTION IS
     AVAILABLE.


       *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .2-D                  
       DEGREES OF FREEDOM. . . . . . UX   UY  
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     Present time 0 is less than or equal to the previous time.  Time will   
     default to 1.                                                           

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     The imaginary pressure value defined on element 2, face 2 (and possibly 
     others) will be not be used for this analysis type, but may be in a     
     later analysis.                                                         

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

  
  
         D I S T R I B U T E D   D O M A I N   D E C O M P O S E R
  
      ...Number of elements: 90
      ...Number of nodes:    335
      ...Decompose to 0 CPU domains
      ...Element load balance ratio =     0.000


                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1
       TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    
       NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1
       STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN
                                                      FOR THE LAST SUBSTEP



     Range of element maximum matrix coefficients in global coordinates
     Maximum = 96184868.8 at element 0.                                      
     Minimum = 31609902.3 at element 0.                                      

       *** ELEMENT MATRIX FORMULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        90  PLANE183      0.000   0.000000
     Time at end of element matrix formulation CP = 0.                       

     DISTRIBUTED SPARSE MATRIX DIRECT SOLVER.
      Number of equations =         646,    Maximum wavefront =      0
      Memory available (MB) =    0.0    ,  Memory required (MB) =    0.0    

     Distributed sparse solver maximum pivot= 0 at node 0 .                  
     Distributed sparse solver minimum pivot= 0 at node 0 .                  
     Distributed sparse solver minimum pivot in absolute value= 0 at node 0  
     .                                                                       

       *** ELEMENT RESULT CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        90  PLANE183      0.000   0.000000

       *** NODAL LOAD CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        90  PLANE183      0.000   0.000000
     *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1
     *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX




.. GENERATED FROM PYTHON SOURCE LINES 640-661

Mechanical APDL stores the results of this single-load-step problem in the
database and in the results file, :file:`Jobname.RST` (or :file:`Jobname.RTH`
for thermal or :file:`Jobname.RMG` for magnetic). The database can contain only
one set of results at any given time, so in a multiple-load-step or
multiple-substep analysis, Mechanical APDL stores only the final solution in
the database.

Mechanical APDL stores all solutions in the results file.

Review the results
==================

This step represents the beginning of the postprocessing phase.

.. note:: The results you see may vary slightly from what is shown due to variations in the mesh.

Enter the postprocessor
~~~~~~~~~~~~~~~~~~~~~~~
The Ansys APDL postprocessor is a separate processor called with the
:meth:`mapdl.post1() <ansys.mapdl.core.Mapdl.post1>` command.


.. GENERATED FROM PYTHON SOURCE LINES 661-664

.. code-block:: default


    mapdl.post1()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    FINISH SOLUTION PROCESSING


     ***** ROUTINE COMPLETED *****  CP =         0.000


       *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

              ***** MAPDL RESULTS INTERPRETATION (POST1) *****


     USE LAST SUBSTEP ON RESULT FILE  FOR LOAD CASE 0 

     SET COMMAND GOT LOAD STEP=     1  SUBSTEP=     1  CUMULATIVE ITERATION=     1
       TIME/FREQUENCY=  1.0000    
     TITLE=



.. GENERATED FROM PYTHON SOURCE LINES 665-670

Plot the deformed shape
~~~~~~~~~~~~~~~~~~~~~~~
Here :class:`mapdl.result <ansys.mapdl.core.Mapdl.result>` is used to retrieve
the results and for plotting.


.. GENERATED FROM PYTHON SOURCE LINES 670-683

.. code-block:: default


    # Plot displacement
    result = mapdl.result
    result_set = 0  # Plotting the first results
    disp_fact = 1e10
    result.plot_nodal_displacement(
        result_set,
        cpos="xy",
        displacement_factor=5,
        show_displacement=True,
        show_edges=True,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_011.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 684-690

Plot the von Mises equivalent stress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can also generate stress plots using
the :meth:`mapdl.plot_principal_nodal_stress() <ansys.mapdl.core.Mapdl.plot_principal_nodal_stress>` command.


.. GENERATED FROM PYTHON SOURCE LINES 690-702

.. code-block:: default


    result.plot_principal_nodal_stress(
        0,
        "SEQV",
        cpos="xy",
        background="w",
        text_color="k",
        add_text=True,
        show_edges=True,
    )





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_012.png
   :alt: bracket static
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_bracket_static_012.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 703-705

Obtain von Mises stresses.


.. GENERATED FROM PYTHON SOURCE LINES 706-713

.. code-block:: default


    nnum, stress = result.principal_nodal_stress(0)

    # Von Mises stress is the last column in the stress results
    von_mises = stress[:, -1]









.. GENERATED FROM PYTHON SOURCE LINES 714-723

List reaction solution
~~~~~~~~~~~~~~~~~~~~~~

To list the FY reactions forces use the APDL
:meth:`mapdl.prrsol() <ansys.mapdl.core.Mapdl.prrsol>` command which print
the constrained node reaction solution.

You can use the :meth:`to_dataframe <ansys.mapdl.core.commands.CommandListingOutput>`
command to convert the output to a dataframe for more static print:

.. GENERATED FROM PYTHON SOURCE LINES 723-728

.. code-block:: default


    reactForces = mapdl.prrsol(lab="FY").to_dataframe(columns=["NODE", "FY"])
    print(reactForces)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

         NODE       FY
    0   103.0  21.7590
    1   104.0   9.8719
    2   105.0  12.5870
    3   107.0   1.5168
    4   108.0  12.2310
    5   109.0  29.4880
    6   111.0 -29.8790
    7   112.0 -10.5920
    8   113.0  -2.5094
    9   114.0 -12.4730
    10  115.0  -9.8004
    11  116.0 -22.2000




.. GENERATED FROM PYTHON SOURCE LINES 729-733

The values shown are representative and may vary from the values that you obtain.
Many other options are available for reviewing results in the general postprocessor.
You can see some of these other options in other tutorials, such.
as the `Ansys tutorial guide <ansys_tutorials_guide_>`_.

.. GENERATED FROM PYTHON SOURCE LINES 736-740

Exit Mechanical APDL
~~~~~~~~~~~~~~~~~~~~
Exit Mechanical APDL once you have finished.


.. GENERATED FROM PYTHON SOURCE LINES 740-743

.. code-block:: default

    mapdl.exit()









.. GENERATED FROM PYTHON SOURCE LINES 744-746

.. _ref_static_analysis_bracket_end:



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 10.890 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_bracket_static.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bracket_static.py <bracket_static.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bracket_static.ipynb <bracket_static.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
