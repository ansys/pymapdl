
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/lathe_cutter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:


.. _ref_lathe_cutter_example:

=====================================
Structural Analysis of a Lathe Cutter
=====================================

**Summary**: Basic walk through PyMAPDL capabilities.

Objective
=========

The objective of this example is to highlight some regularly used
PyMAPDL features via a lathe cutter finite element model. Lathe
cutters have multiple avenues of wear and failure, and the analyses
supporting their design would most often be transient
thermal-structural. However, for simplicity, this simulation
example uses a non-uniform load.

.. figure:: ../../../_static/lathe_cutter_model.png
    :align: center
    :width: 600
    :alt:  Lathe cutter geometry and load description.
    :figclass: align-center

    **Figure 1: Lathe cutter geometry and load description.**



Contents
========

1. **Variables and launch**
   Define necessary variables and launch MAPDL.

2. **Geometry, mesh, and MAPDL parameters**
   Import geometry and inspect for MAPDL parameters. Define linear
   elastic material model with Python variables. Mesh and apply symmetry
   boundary conditions.

3. **Coordinate system and load**
   Create a local coordinate system for the applied load and verify with
   a plot.

4. **Pressure load**
   Define the pressure load as a sine function of the length of the
   application area using numpy arrays. Import the pressure array into
   MAPDL as a table array. Verify the applied load and solve.

5. **Plotting**
   Show result plotting, plotting with selection, and working with the
   plot legend.

6. **Postprocessing:**
   List a result two ways: use PyMAPDL and the Pythonic version of APDL.
   Demonstrate extended methods and writing a list to a file.

7. **Advanced plotting**
   Use of `mesh.grid <https://mapdldocs.pyansys.com/mapdl_commands/graphics/_autosummary/ansys.mapdl.core.Mapdl.grid.html>`_
   for additional postprocessing.


Step 1: Variables and launch
============================

Define variables and launch MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 68-82

.. code-block:: default


    import os

    import numpy as np

    from ansys.mapdl.core import launch_mapdl
    from ansys.mapdl.core.examples.downloads import download_example_data

    # cwd = current working directory
    path = os.getcwd()
    PI = np.pi
    EXX = 1.0e7
    NU = 0.27








.. GENERATED FROM PYTHON SOURCE LINES 83-98

Often used MAPDL command line options are exposed as Pythonic parameter names in
:func:`ansys.mapdl.core.launch_mapdl`. For example, ``-dir``
has become ``run_location``.
You could use ``run_location`` to specify the MAPDL run location. For example:

..code:: python3

  mapdl = launch_mapdl(run_location=path)

Otherwise, the MAPDL working directory is stored in ``mapdl.directory``. In this
directory, MAPDL will create some of the images we will show later.

Options without a Pythonic version can be accessed by the ``additional_switches``
parameter.
Here ``-smp`` is used only to keep the number of solver files to a minimum.

.. GENERATED FROM PYTHON SOURCE LINES 98-101

.. code-block:: default


    mapdl = launch_mapdl(additional_switches="-smp")








.. GENERATED FROM PYTHON SOURCE LINES 102-108

Step 2: Geometry, mesh, and MAPDL parameters
============================================

- Import geometry and inspect for MAPDL parameters.
- Define material and mesh, and then create boundary conditions.


.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default


    # First, reset the MAPDL database.
    mapdl.clear()








.. GENERATED FROM PYTHON SOURCE LINES 113-114

Import the geometry file and list any MAPDL parameters.

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: default

    lathe_cutter_geo = download_example_data("LatheCutter.anf", "geometry")
    mapdl.input(lathe_cutter_geo)
    mapdl.finish()
    print(mapdl.parameters)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MAPDL Parameters
    ----------------
    PRESS_LENGTH                     : 0.055
    UNIT_SYSTEM                      : "bin"




.. GENERATED FROM PYTHON SOURCE LINES 120-121

Use pressure area per length in the load definition.

.. GENERATED FROM PYTHON SOURCE LINES 121-125

.. code-block:: default

    pressure_length = mapdl.parameters["PRESS_LENGTH"]

    print(mapdl.parameters)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MAPDL Parameters
    ----------------
    PRESS_LENGTH                     : 0.055
    UNIT_SYSTEM                      : "bin"




.. GENERATED FROM PYTHON SOURCE LINES 126-127

Change the units and title.

.. GENERATED FROM PYTHON SOURCE LINES 127-130

.. code-block:: default

    mapdl.units("Bin")
    mapdl.title("Lathe Cutter")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    TITLE= 
     Lathe Cutter



.. GENERATED FROM PYTHON SOURCE LINES 131-132

Set material properties.

.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: default

    mapdl.prep7()
    mapdl.mp("EX", 1, EXX)
    mapdl.mp("NUXY", 1, NU)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    MATERIAL          1     NUXY =  0.2700000



.. GENERATED FROM PYTHON SOURCE LINES 137-140

The MAPDL element type ``SOLID285`` is used for demonstration purposes.
Consider using an appropriate element type or mesh density for your actual
application.

.. GENERATED FROM PYTHON SOURCE LINES 140-151

.. code-block:: default


    mapdl.et(1, 285)
    mapdl.smrtsize(4)
    mapdl.aesize(14, 0.0025)
    mapdl.vmesh(1)

    mapdl.da(11, "symm")
    mapdl.da(16, "symm")
    mapdl.da(9, "symm")
    mapdl.da(10, "symm")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    CONSTRAINT AT AREA    10
          LOAD LABEL = SYMM



.. GENERATED FROM PYTHON SOURCE LINES 152-159

Step 3: Coordinate system and load
==============================================

Create a local Coordinate System (CS) for the applied pressure as a function
of local X.

Local CS ID is 11

.. GENERATED FROM PYTHON SOURCE LINES 159-171

.. code-block:: default


    mapdl.cskp(11, 0, 2, 1, 13)
    mapdl.csys(1)
    mapdl.view(1, -1, 1, 1)
    mapdl.psymb("CS", 1)
    mapdl.vplot(
        color_areas=True,
        show_lines=True,
        cpos=[-1, 1, 1],
        smooth_shading=True,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_001.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 172-175

VTK plots do not show MAPDL plot symbols.
However, to use MAPDL plotting capabilities, you can set the keyword
option ``vtk`` to ``False``.

.. GENERATED FROM PYTHON SOURCE LINES 176-179

.. code-block:: default


    mapdl.lplot(vtk=False)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_002.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 180-185

Step 4: Pressure load
=================================

Create a pressure load, load it into MAPDL as a table array, verify the load,
and solve.

.. GENERATED FROM PYTHON SOURCE LINES 185-196

.. code-block:: default


    # pressure_length = 0.055 inch

    pts = 10
    pts_1 = pts - 1

    length_x = np.arange(0, pts, 1)
    length_x = length_x * pressure_length / pts_1

    press = 10000 * (np.sin(PI * length_x / pressure_length))








.. GENERATED FROM PYTHON SOURCE LINES 197-200

``length_x`` and ``press`` are vectors. To combine them into the correct
form needed to define the MAPDL table array, you can use
`numpy.stack <https://numpy.org/doc/stable/reference/generated/numpy.stack.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 200-209

.. code-block:: default


    press = np.stack((length_x, press), axis=-1)
    mapdl.load_table("MY_PRESS", press, "X", csysid=11)

    mapdl.asel("S", "Area", "", 14)
    mapdl.nsla("S", 1)
    mapdl.sf("All", "Press", "%MY_PRESS%")
    mapdl.allsel()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    SELECT ALL ENTITIES OF TYPE= ALL  AND BELOW



.. GENERATED FROM PYTHON SOURCE LINES 210-217

You can open the MAPDL GUI to check the model.

.. code:: python

    mapdl.open_gui()



.. GENERATED FROM PYTHON SOURCE LINES 219-220

Set up the solution.

.. GENERATED FROM PYTHON SOURCE LINES 220-227

.. code-block:: default

    mapdl.finish()
    mapdl.slashsolu()
    mapdl.nlgeom("On")
    mapdl.psf("PRES", "NORM", 3, 0, 1)
    mapdl.view(1, -1, 1, 1)
    mapdl.eplot(vtk=False)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_003.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 228-229

Solve the model.

.. GENERATED FROM PYTHON SOURCE LINES 229-234

.. code-block:: default

    mapdl.solve()
    mapdl.finish()
    if mapdl.solution.converged:
        print("The solution has converged.")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The solution has converged.




.. GENERATED FROM PYTHON SOURCE LINES 235-238

Step 5: Plotting
================


.. GENERATED FROM PYTHON SOURCE LINES 238-245

.. code-block:: default


    mapdl.post1()
    mapdl.set("last")
    mapdl.allsel()

    mapdl.post_processing.plot_nodal_principal_stress("1", smooth_shading=False)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_004.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 246-249

Plotting - Part of Model
------------------------


.. GENERATED FROM PYTHON SOURCE LINES 249-258

.. code-block:: default


    mapdl.csys(1)
    mapdl.nsel("S", "LOC", "Z", -0.5, -0.141)
    mapdl.esln()
    mapdl.nsle()
    mapdl.post_processing.plot_nodal_principal_stress(
        "1", edge_color="white", show_edges=True
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_005.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 259-262

Plotting - Legend Options
-------------------------


.. GENERATED FROM PYTHON SOURCE LINES 262-280

.. code-block:: default


    mapdl.allsel()
    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }
    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        background="white",
        edge_color="black",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=9,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_006.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 281-289

Let's try out some scalar bar options from the
`PyVista documentation <https://docs.pyvista.org/>`_.
For example, let's set black text on a beige background.

The scalar bar keywords defined as a Python dictionary are an alternate
method to using {key:value}'s.
You can use the click-and drag method to reposition the scalar bar.
Left-click it and hold down the left mouse button while moving the mouse.

.. GENERATED FROM PYTHON SOURCE LINES 289-317

.. code-block:: default


    sbar_kwargs = dict(
        title_font_size=20,
        label_font_size=16,
        shadow=True,
        n_labels=9,
        italic=True,
        bold=True,
        fmt="%.1f",
        font_family="arial",
        title="1st Principal Stress (psi)",
        color="black",
    )

    mapdl.post_processing.plot_nodal_principal_stress(
        "1",
        cpos="xy",
        edge_color="black",
        background="beige",
        show_edges=True,
        scalar_bar_args=sbar_kwargs,
        n_colors=256,
        cmap="jet",
    )

    # cmap names *_r usually reverses values.  Try cmap='jet_r'





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_007.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 318-325

Step 6: Postprocessing
=======================

Results List
------------

Get all principal nodal stresses.

.. GENERATED FROM PYTHON SOURCE LINES 325-327

.. code-block:: default

    mapdl.post_processing.nodal_principal_stress("1")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([1553.23366186, 1302.78211371,  114.42758876, ..., 1708.49046222,
           1357.52966709, 1400.63152491])



.. GENERATED FROM PYTHON SOURCE LINES 328-329

Get the principal nodal stresses of the node subset.

.. GENERATED FROM PYTHON SOURCE LINES 329-339

.. code-block:: default

    mapdl.nsel("S", "S", 1, 6700, 7720)
    mapdl.esln()
    mapdl.nsle()

    print("The node numbers are:")
    print(mapdl.mesh.nnum)  # get node numbers

    print("The principal nodal stresses are:")
    mapdl.post_processing.nodal_principal_stress("1")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The node numbers are:
    [  15   84   85   86  235  236  237  415  416  417  425  426  460 1104
     1163]
    The principal nodal stresses are:

    array([6455.64723834, 7591.47120491, 6734.98179097, 6829.4678661 ,
           5348.82458553, 5801.08899115, 6092.58822825, 7151.51926157,
           7022.27252074, 7361.85493455, 7092.45639776, 6572.00376486,
           5708.90915185, 6789.89247424, 5894.51402464])



.. GENERATED FROM PYTHON SOURCE LINES 340-344

Results as lists, arrays, and DataFrames
-----------------------------------------
Using `mapdl.prnsol <https://mapdldocs.pyansys.com/mapdl_commands/post1/_autosummary/ansys.mapdl.core.Mapdl.prnsol.html>`_
to check

.. GENERATED FROM PYTHON SOURCE LINES 344-346

.. code-block:: default

    print(mapdl.prnsol("S", "PRIN"))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    PRINT S    NODAL SOLUTION PER NODE

     *** ANSYS - ENGINEERING ANALYSIS SYSTEM  RELEASE 2021 R2          21.2BETA ***
     Ansys Mechanical Enterprise                       
     00000000  VERSION=LINUX x64     06:14:32  APR 05, 2023 CP=    108.781

     Lathe Cutter                                                                  



     ** WARNING: PRE-RELEASE VERSION OF ANSYS 21.2BETA
      ANSYS,INC TESTING IS NOT COMPLETE - CHECK RESULTS CAREFULLY **
 
      ***** POST1 NODAL STRESS LISTING *****                                       
 
      LOAD STEP=     1  SUBSTEP=     1                                             
       TIME=    1.0000      LOAD CASE=   0                                         
 
        NODE     S1           S2           S3           SINT         SEQV    
          15   6455.6       135.15      -633.69       7089.3       6737.9     
          84   7591.5       381.08       336.29       7255.2       7232.9     
          85   6735.0       440.78       173.33       6561.7       6432.1     
          86   6829.5       1084.3       460.22       6369.2       6081.3     
         235   5348.8       529.17      -108.09       5456.9       5167.8     
         236   5801.1       434.95      -21.273       5822.4       5608.2     
         237   6092.6       543.80       57.951       6034.6       5807.0     
         415   7151.5       636.57       329.05       6822.5       6674.0     
         416   7022.3       328.91       131.78       6890.5       6794.1     
         417   7361.9       380.66       114.99       7246.9       7117.8     
         425   7092.5       308.05      -124.23       7216.7       7010.5     
         426   6572.0       285.34      -4.5637       6576.6       6436.5     
         460   5708.9       483.65      -115.92       5824.8       5549.4     
        1104   6789.9       418.02       157.69       6632.2       6505.9     
        1163   5894.5      -128.30      -567.37       6461.9       6253.9     

     MINIMUM VALUES
     NODE        235         1163           15          235          235
     VALUE    5348.8      -128.30      -633.69       5456.9       5167.8     

     MAXIMUM VALUES
     NODE         84           86           86           84           84
     VALUE    7591.5       1084.3       460.22       7255.2       7232.9




.. GENERATED FROM PYTHON SOURCE LINES 347-348

Use this command to obtain the data as a list.

.. GENERATED FROM PYTHON SOURCE LINES 348-351

.. code-block:: default

    mapdl_s_1_list = mapdl.prnsol("S", "PRIN").to_list()
    print(mapdl_s_1_list)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[15.0, 6455.0, 135.15, -633.69, 7089.0, 6737.0], [84.0, 7591.0, 381.08, 336.29, 7255.0, 7232.0], [85.0, 6735.0, 440.78, 173.33, 6561.0, 6432.0], [86.0, 6829.0, 1084.0, 460.22, 6369.0, 6081.0], [235.0, 5348.0, 529.17, -108.09, 5456.0, 5167.0], [236.0, 5801.0, 434.95, -21.273, 5822.0, 5608.0], [237.0, 6092.0, 543.8, 57.951, 6034.0, 5807.0], [415.0, 7151.0, 636.57, 329.05, 6822.0, 6674.0], [416.0, 7022.0, 328.91, 131.78, 6890.0, 6794.0], [417.0, 7361.0, 380.66, 114.99, 7246.0, 7117.0], [425.0, 7092.0, 308.05, -124.23, 7216.0, 7010.0], [426.0, 6572.0, 285.34, -4.5637, 6576.0, 6436.0], [460.0, 5708.0, 483.65, -115.92, 5824.0, 5549.0], [1104.0, 6789.0, 418.02, 157.69, 6632.0, 6505.0], [1163.0, 5894.0, -128.3, -567.37, 6461.0, 6253.0]]




.. GENERATED FROM PYTHON SOURCE LINES 352-353

Use this command to obtain the data as an array:

.. GENERATED FROM PYTHON SOURCE LINES 353-356

.. code-block:: default

    mapdl_s_1_array = mapdl.prnsol("S", "PRIN").to_array()
    print(mapdl_s_1_array)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[ 1.5000e+01  6.4550e+03  1.3515e+02 -6.3369e+02  7.0890e+03  6.7370e+03]
     [ 8.4000e+01  7.5910e+03  3.8108e+02  3.3629e+02  7.2550e+03  7.2320e+03]
     [ 8.5000e+01  6.7350e+03  4.4078e+02  1.7333e+02  6.5610e+03  6.4320e+03]
     [ 8.6000e+01  6.8290e+03  1.0840e+03  4.6022e+02  6.3690e+03  6.0810e+03]
     [ 2.3500e+02  5.3480e+03  5.2917e+02 -1.0809e+02  5.4560e+03  5.1670e+03]
     [ 2.3600e+02  5.8010e+03  4.3495e+02 -2.1273e+01  5.8220e+03  5.6080e+03]
     [ 2.3700e+02  6.0920e+03  5.4380e+02  5.7951e+01  6.0340e+03  5.8070e+03]
     [ 4.1500e+02  7.1510e+03  6.3657e+02  3.2905e+02  6.8220e+03  6.6740e+03]
     [ 4.1600e+02  7.0220e+03  3.2891e+02  1.3178e+02  6.8900e+03  6.7940e+03]
     [ 4.1700e+02  7.3610e+03  3.8066e+02  1.1499e+02  7.2460e+03  7.1170e+03]
     [ 4.2500e+02  7.0920e+03  3.0805e+02 -1.2423e+02  7.2160e+03  7.0100e+03]
     [ 4.2600e+02  6.5720e+03  2.8534e+02 -4.5637e+00  6.5760e+03  6.4360e+03]
     [ 4.6000e+02  5.7080e+03  4.8365e+02 -1.1592e+02  5.8240e+03  5.5490e+03]
     [ 1.1040e+03  6.7890e+03  4.1802e+02  1.5769e+02  6.6320e+03  6.5050e+03]
     [ 1.1630e+03  5.8940e+03 -1.2830e+02 -5.6737e+02  6.4610e+03  6.2530e+03]]




.. GENERATED FROM PYTHON SOURCE LINES 357-358

or as a DataFrame:

.. GENERATED FROM PYTHON SOURCE LINES 358-361

.. code-block:: default

    mapdl_s_1_df = mapdl.prnsol("S", "PRIN").to_dataframe()
    mapdl_s_1_df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>NODE</th>
          <th>S1</th>
          <th>S2</th>
          <th>S3</th>
          <th>SINT</th>
          <th>SEQV</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>15.0</td>
          <td>6455.0</td>
          <td>135.15</td>
          <td>-633.69</td>
          <td>7089.0</td>
          <td>6737.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>84.0</td>
          <td>7591.0</td>
          <td>381.08</td>
          <td>336.29</td>
          <td>7255.0</td>
          <td>7232.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>85.0</td>
          <td>6735.0</td>
          <td>440.78</td>
          <td>173.33</td>
          <td>6561.0</td>
          <td>6432.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>86.0</td>
          <td>6829.0</td>
          <td>1084.00</td>
          <td>460.22</td>
          <td>6369.0</td>
          <td>6081.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>235.0</td>
          <td>5348.0</td>
          <td>529.17</td>
          <td>-108.09</td>
          <td>5456.0</td>
          <td>5167.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 362-366

Use this command to obtain the data as a DataFrame, which is a.
`Pandas data type <https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html>`_.
Because the Pandas module is imported, you can use its functions.
For example, you can write principal stresses to a file.

.. GENERATED FROM PYTHON SOURCE LINES 366-371

.. code-block:: default


    # mapdl_s_1_df.to_csv(path + '\prin-stresses.csv')
    # mapdl_s_1_df.to_json(path + '\prin-stresses.json')
    mapdl_s_1_df.to_html(path + "\prin-stresses.html")








.. GENERATED FROM PYTHON SOURCE LINES 372-375

Step 7: Advanced plotting
=========================


.. GENERATED FROM PYTHON SOURCE LINES 375-379

.. code-block:: default


    mapdl.allsel()
    principal_1 = mapdl.post_processing.nodal_principal_stress("1")








.. GENERATED FROM PYTHON SOURCE LINES 380-381

Load this result into the VTK grid.

.. GENERATED FROM PYTHON SOURCE LINES 381-391

.. code-block:: default

    grid = mapdl.mesh.grid
    grid["p1"] = principal_1

    sbar_kwargs = {
        "color": "black",
        "title": "1st Principal Stress (psi)",
        "vertical": False,
        "n_labels": 6,
    }








.. GENERATED FROM PYTHON SOURCE LINES 392-398

Generate a single horizontal slice along the XY plane.

.. note::
   We're using ``eye_dome_lighting`` here to enhance the plots of our slices.
   Read more about it at `Eye Dome Lighting
   <https://docs.pyvista.org/examples/02-plot/edl.html>`_

.. GENERATED FROM PYTHON SOURCE LINES 398-411

.. code-block:: default


    single_slice = grid.slice(normal=[0, 0, 1], origin=[0, 0, 0])
    single_slice.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_008.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 412-413

Generate a plot with three slice planes.

.. GENERATED FROM PYTHON SOURCE LINES 413-425

.. code-block:: default

    slices = grid.slice_orthogonal()
    slices.plot(
        scalars="p1",
        background="white",
        lighting=False,
        eye_dome_lighting=True,
        show_edges=False,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_009.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 426-428

Generate a grid with multiple slices in the same plane.


.. GENERATED FROM PYTHON SOURCE LINES 428-440

.. code-block:: default

    slices = grid.slice_along_axis(12, "x")
    slices.plot(
        scalars="p1",
        background="white",
        show_edges=False,
        lighting=False,
        eye_dome_lighting=True,
        cmap="jet",
        n_colors=9,
        scalar_bar_args=sbar_kwargs,
    )




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_010.png
   :alt: lathe cutter
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_lathe_cutter_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 441-442

Finally, exit MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 442-443

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.486 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_lathe_cutter.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: lathe_cutter.py <lathe_cutter.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: lathe_cutter.ipynb <lathe_cutter.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
