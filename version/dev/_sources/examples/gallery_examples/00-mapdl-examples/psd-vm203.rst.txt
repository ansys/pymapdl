
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/psd-vm203.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_psd-vm203.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_psd-vm203.py:


.. _ref_psd_vm203:

=========================
Dynamic Load Effect on a Supported Thick Plate
=========================

This example demonstrates how to perform a random vibration analysis
using PyMAPDL.


This example is based on the ANSYS Verification Manual, problem 203
(VM203).

Description
===========

A simply-supported thick square plate of length L, thickness t, and mass
per unit area m is subject to random uniform pressure power spectral
density. Determine the peak one-sigma displacement at undamped natural
frequency.

A frequency range of 1.0 Hz to 80 Hz is used as an approximation of the
white noise PSD forcing function frequency.  The PSD curve is a constant
$$(1E6 N/m^2)^2 / Hz$$.

The model is solved using SHELL281 elements and generic materials.

Import modules
==============

.. GENERATED FROM PYTHON SOURCE LINES 54-65

.. code-block:: Python

    import matplotlib.pyplot as plt
    from tabulate import tabulate

    from ansys.mapdl.core import launch_mapdl

    mapdl = launch_mapdl()

    mapdl.clear()
    mapdl.prep7()
    mapdl.units("mks")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    MKS UNITS SPECIFIED FOR INTERNAL    
      LENGTH        (l)  = METER (M)
      MASS          (M)  = KILOGRAM (KG)
      TIME          (t)  = SECOND (SEC)
      TEMPERATURE   (T)  = CELSIUS (C)
      TOFFSET            = 273.0
      CHARGE        (Q)  = COULOMB
      FORCE         (f)  = NEWTON (N) (KG-M/SEC2)
      HEAT               = JOULE (N-M)

      PRESSURE           = PASCAL (NEWTON/M**2)
      ENERGY        (W)  = JOULE (N-M)
      POWER         (P)  = WATT (N-M/SEC)
      CURRENT       (i)  = AMPERE (COULOMBS/SEC)
      CAPACITANCE   (C)  = FARAD
      INDUCTANCE    (L)  = HENRY
      MAGNETIC FLUX      = WEBER
      RESISTANCE    (R)  = OHM
      ELECTRIC POTENTIAL = VOLT

     INPUT  UNITS ARE ALSO SET TO MKS



.. GENERATED FROM PYTHON SOURCE LINES 66-70

Parameters
==========

Loading parameters

.. GENERATED FROM PYTHON SOURCE LINES 70-73

.. code-block:: Python

    LOAD_PRES = -1e6
    DAMPING_RATIO = 0.02








.. GENERATED FROM PYTHON SOURCE LINES 74-79

Set up the FE model
===================

Set the element type to SHELL281, which is a 3D structural
high-order shell element.

.. GENERATED FROM PYTHON SOURCE LINES 79-85

.. code-block:: Python

    thickness = 1

    mapdl.et(1, "SHELL281")
    mapdl.sectype(1, "SHELL")
    mapdl.secdata(1, thickness, 0, 5)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Shell Section ID=        1 Number of layers=    1  Total Thickness=     1.000000



.. GENERATED FROM PYTHON SOURCE LINES 86-91

Set material properties
-----------------------

Units are in the international unit system.


.. GENERATED FROM PYTHON SOURCE LINES 91-99

.. code-block:: Python

    EX = 200e9
    PR = 0.3
    DENS = 8000

    mapdl.mp("EX", 1, EX)
    mapdl.mp("NUXY", 1, PR)
    mapdl.mp("DENS", 1, DENS)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    MATERIAL          1     DENS =   8000.000



.. GENERATED FROM PYTHON SOURCE LINES 100-104

Create geometry
---------------

Create the model geometry.

.. GENERATED FROM PYTHON SOURCE LINES 104-118

.. code-block:: Python

    L1 = 10

    mapdl.n(1, 0, 0, 0)
    mapdl.n(9, 0, L1, 0)
    mapdl.fill()
    mapdl.ngen(5, 40, 1, 9, 1, L1 / 4)
    mapdl.n(21, L1 / 8, 0, 0)
    mapdl.n(29, L1 / 8, 10, 0)
    mapdl.fill(21, 29, 3)
    mapdl.ngen(4, 40, 21, 29, 2, L1 / 4)
    mapdl.en(1, 1, 41, 43, 3, 21, 42, 23, 2)
    mapdl.egen(4, 2, 1)
    mapdl.egen(4, 40, 1, 4)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    GENERATE       4 TOTAL SETS OF ELEMENTS WITH NODE INCREMENT OF        40
       SET IS SELECTED ELEMENTS IN RANGE         1 TO         4 IN STEPS OF       1

     MAXIMUM ELEMENT NUMBER=        16



.. GENERATED FROM PYTHON SOURCE LINES 119-125

Loads and boundary conditions
------------------------------

Define loads and boundary conditions.

Apply a uniform pressure load of 1,000,000 N/m^2

.. GENERATED FROM PYTHON SOURCE LINES 125-127

.. code-block:: Python

    mapdl.sfe("ALL", "", "PRES", "", LOAD_PRES)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SPECIFIED SURFACE LOAD PRES FOR ALL SELECTED ELEMENTS  LKEY =  1   KVAL = 1
         VALUES =   -0.10000E+07   -0.10000E+07   -0.10000E+07   -0.10000E+07



.. GENERATED FROM PYTHON SOURCE LINES 128-130

Apply constraints UX, UY, ROTZ DOFs all fixed


.. GENERATED FROM PYTHON SOURCE LINES 130-132

.. code-block:: Python

    mapdl.d("ALL", "UX", 0, "", "", "", "UY", "ROTZ")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SPECIFIED CONSTRAINT UX   FOR SELECTED NODES            1 TO         169 BY           1
     REAL=  0.00000000       IMAG=  0.00000000    
     ADDITIONAL DOFS=  UY    ROTZ



.. GENERATED FROM PYTHON SOURCE LINES 133-135

Simply supported on the four corners


.. GENERATED FROM PYTHON SOURCE LINES 135-141

.. code-block:: Python

    mapdl.d(1, "UZ", 0, 0, 9, 1, "ROTX")
    mapdl.d(161, "UZ", 0, 0, 169, 1, "ROTX")
    mapdl.d(1, "UZ", 0, 0, 161, 20, "ROTY")
    mapdl.d(9, "UZ", 0, 0, 169, 20, "ROTY")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    SPECIFIED CONSTRAINT UZ   FOR SELECTED NODES            9 TO         169 BY          20
     REAL=  0.00000000       IMAG=  0.00000000    
     ADDITIONAL DOFS=  ROTY



.. GENERATED FROM PYTHON SOURCE LINES 142-147

Solve the model
===============

Solve the modal analysis using the PCG Lanczos solver to find and expand the
first two modes of the model.

.. GENERATED FROM PYTHON SOURCE LINES 147-159

.. code-block:: Python

    n_modes = 2
    mapdl.solution()
    mapdl.antype("MODAL")
    mapdl.modopt("LANPCG", n_modes)
    mapdl.mxpand(n_modes, "", "", "YES")

    mapdl.solve()
    # Getting frequency of the first mode
    f0 = mapdl.get_value("MODE", 1, "FREQ")

    mapdl.finish()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    FINISH SOLUTION PROCESSING


     ***** ROUTINE COMPLETED *****  CP =         0.000



.. GENERATED FROM PYTHON SOURCE LINES 160-165

PSD Spectrum analysis
=====================

Now let's perform PSD spectrum analysis using the two solved modes:


.. GENERATED FROM PYTHON SOURCE LINES 165-169

.. code-block:: Python

    mapdl.slashsolu()
    mapdl.antype("SPECTR")
    mapdl.spopt("PSD", n_modes, "ON")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    USE PSD RESPONSE SPECTRUM
      USE THE FIRST    2 MODES FROM THE MODAL ANALYSIS
      INCLUDE STRESS RESPONSES IN THE CALCULATIONS
      PSD INTEGRATION WILL BE PERFORMED IN CLOSED FORM



.. GENERATED FROM PYTHON SOURCE LINES 170-172

Define the PSD spectrum


.. GENERATED FROM PYTHON SOURCE LINES 172-174

.. code-block:: Python

    mapdl.psdunit(1, "PRES")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PSD TYPE FOR TABLE NUMBER  1 IS PRES



.. GENERATED FROM PYTHON SOURCE LINES 175-177

Applying proportional damping


.. GENERATED FROM PYTHON SOURCE LINES 177-179

.. code-block:: Python

    mapdl.dmprat(DAMPING_RATIO)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    DAMPING RATIO =      0.0200



.. GENERATED FROM PYTHON SOURCE LINES 180-182

PSD frequency value table 1 to 80 Hz


.. GENERATED FROM PYTHON SOURCE LINES 182-188

.. code-block:: Python

    freqA = 1.0
    freqB = 80.0

    mapdl.psdfrq(1, 1, freq1=freqA, freq2=freqB)
    mapdl.psdval(1, 1.0, 1.0)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    PSD VALUES (DIAGONAL) FOR TABLE  1
       PSDVAL =    1.0000        1.0000



.. GENERATED FROM PYTHON SOURCE LINES 189-191

Define the PSD load vector generated at modal analysis


.. GENERATED FROM PYTHON SOURCE LINES 191-195

.. code-block:: Python

    mapdl.sfedele("ALL", "", "PRES")
    mapdl.lvscale(1)
    mapdl.pfact(1, "NODE")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    COMPUTE PARTICIPATION FACTORS FOR TABLE   1
      FOR NODAL EXCITATION

     *****  MAPDL PFACT    COMMAND  *****

     *** SELECTION OF ELEMENT TECHNOLOGIES FOR APPLICABLE ELEMENTS ***
                    ---GIVE SUGGESTIONS ONLY---

     ELEMENT TYPE         1 IS SHELL281. IT IS ASSOCIATED WITH ELASTOPLASTIC 
     MATERIALS ONLY. KEYOPT(8)=2 IS SUGGESTED.


       *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  
       DEGREES OF FREEDOM. . . . . . UX   UY   UZ   ROTX ROTY ROTZ
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .SPECTRUM             
          SPECTRUM TYPE. . . . . . . . . . . . . . . .PSD           
       NUMBER OF MODES TO BE USED. . . . . . . . . . .     2
       ELEMENT RESULTS CALCULATION . . . . . . . . . .ON 
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     2
       MODAL DAMPING RATIO . . . . . . . . . . . . . . 0.20000E-01
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN

       *****MAPDL VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION


      ***** PARTICIPATION FACTORS FOR NODAL EXCITATION *****    TABLE NO.    1

      MODE   VALUE      MODE   VALUE      MODE   VALUE      MODE   VALUE     

        1  -90096.        2   2.4549



.. GENERATED FROM PYTHON SOURCE LINES 196-198

Write out the displacement result


.. GENERATED FROM PYTHON SOURCE LINES 198-205

.. code-block:: Python

    mapdl.psdres("DISP", "REL")
    # set for PSD mode combination method
    mapdl.psdcom()
    mapdl.solve()

    mapdl.finish()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    FINISH SOLUTION PROCESSING


     ***** ROUTINE COMPLETED *****  CP =         0.000



.. GENERATED FROM PYTHON SOURCE LINES 206-211

Post-processing
===============

Now we can plot the results of the one-sigma displacement solution.
We will plot the Z displacement of the nodes.

.. GENERATED FROM PYTHON SOURCE LINES 211-217

.. code-block:: Python

    mapdl.post1()
    # One Sigma Displacement Solution Results
    mapdl.set(3, 1)
    mapdl.post_processing.plot_nodal_displacement("Z", cmap="jet", cpos="iso")
    mapdl.finish()




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_001.png
   :alt: psd vm203
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    EXIT THE MAPDL POST1 DATABASE PROCESSOR


     ***** ROUTINE COMPLETED *****  CP =         0.000



.. GENERATED FROM PYTHON SOURCE LINES 218-220

Use post26 to capture then plot the response psd and the max value


.. GENERATED FROM PYTHON SOURCE LINES 220-228

.. code-block:: Python

    number_frequencies = 2
    mapdl.post26()
    mapdl.store("PSD", number_frequencies)

    node85_uz = mapdl.nsol(2, 85, "U", "Z")
    rpsduz = mapdl.rpsd(3, 2, "", 1, 2)









.. GENERATED FROM PYTHON SOURCE LINES 229-230

While you can use the `extrem` command to get the maximum and minimum values:

.. GENERATED FROM PYTHON SOURCE LINES 230-232

.. code-block:: Python

    print(mapdl.extrem(2, 3))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    POST26 SUMMARY OF VARIABLE EXTREME VALUES
     VARI TYPE    IDENTIFIERS   NAME     MINIMUM    AT TIME    MAXIMUM   AT TIME

       2 NSOL    85 UZ        UZ       -0.1269E-007  0.000      0.1017       0.000     
       3 OPER     3 RPSD      3          0.000       0.000      0.3595E-002  0.000




.. GENERATED FROM PYTHON SOURCE LINES 233-234

You can also use Numpy methods to find the max value of the response psd.

.. GENERATED FROM PYTHON SOURCE LINES 234-249

.. code-block:: Python

    print(
        tabulate(
            [
                ["", "Maximum", "Minimum"],
                ["Z-displacement on node 85", node85_uz.max(), node85_uz.min()],
                ["Response power spectral density", rpsduz.max(), rpsduz.min()],
            ],
            headers="firstrow",
            tablefmt="grid",
            floatfmt=".4e",
            numalign="center",
            stralign="right",
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +---------------------------------+------------+-------------+
    |                                 |  Maximum   |   Minimum   |
    +=================================+============+=============+
    |       Z-displacement on node 85 | 1.0171e-01 | -1.2690e-08 |
    +---------------------------------+------------+-------------+
    | Response power spectral density | 3.5954e-03 | 0.0000e+00  |
    +---------------------------------+------------+-------------+




.. GENERATED FROM PYTHON SOURCE LINES 250-252

To get the maximum value of the response psd you can use the `get_value`
( wrapper of `*GET`) method with the `EXTREM` option:

.. GENERATED FROM PYTHON SOURCE LINES 252-254

.. code-block:: Python

    Pmax = mapdl.get_value("VARI", 3, "EXTREM", "VMAX")








.. GENERATED FROM PYTHON SOURCE LINES 255-256

However, you can also use the numpy methods here as well:

.. GENERATED FROM PYTHON SOURCE LINES 256-258

.. code-block:: Python

    Pmax = rpsduz.max()








.. GENERATED FROM PYTHON SOURCE LINES 259-260

You can plot the response psd using MAPDL methods:

.. GENERATED FROM PYTHON SOURCE LINES 260-271

.. code-block:: Python


    # Setting up the PSD plot with MAPDL
    mapdl.axlab("X", "Frequency (Hz)")
    mapdl.axlab("Y", "RPSD (M**2/Hz)")
    mapdl.yrange(ymin="0", ymax="0.004")
    mapdl.xrange(xmin="0", xmax="80")
    mapdl.gropt(lab="LOGY", key="ON")

    mapdl.xvar(0)  # Plot against time/frequency
    mapdl.plvar(3)  # Plot variable set 3 (RPSD)




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_002.png
   :alt: psd vm203
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 272-273

or use matplotlib:

.. GENERATED FROM PYTHON SOURCE LINES 273-293

.. code-block:: Python


    freqs = mapdl.vget("FREQS", 1)

    # Remove the last two values as they are zero
    fig, ax = plt.subplots(figsize=(8, 4))

    ax.plot(freqs, rpsduz, label="RPSD UZ")

    ax.set_yscale("log")
    ax.set_xlabel("Frequency (Hz)")
    ax.set_ylabel(r"RPSD $\left( \dfrac{M^2}{Hz}\right)$")
    ax.set_xlim((0, 80))
    ax.set_ylim((0, 0.004))
    ax.grid()

    fig.legend()

    fig.tight_layout()
    fig.show()




.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_003.png
   :alt: psd vm203
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_psd-vm203_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 294-295

Compare and print results to manual values

.. GENERATED FROM PYTHON SOURCE LINES 295-305

.. code-block:: Python

    manual = [45.9, 3.4018e-3]

    arr = [
        ["", "Manual", "Calculated", "Ratio"],
        ["Frequency (Hz)", manual[0], f0, abs(f0 / manual[0])],
        ["Peak Deflection PSD (m^2/Hz)", manual[1], Pmax, abs(Pmax / manual[1])],
    ]

    print(tabulate(arr, headers="firstrow", tablefmt="grid"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    +------------------------------+------------+--------------+---------+
    |                              |     Manual |   Calculated |   Ratio |
    +==============================+============+==============+=========+
    | Frequency (Hz)               | 45.9       |   45.9596    | 1.0013  |
    +------------------------------+------------+--------------+---------+
    | Peak Deflection PSD (m^2/Hz) |  0.0034018 |    0.0035954 | 1.05691 |
    +------------------------------+------------+--------------+---------+




.. GENERATED FROM PYTHON SOURCE LINES 306-307

Exit MAPDL

.. GENERATED FROM PYTHON SOURCE LINES 307-308

.. code-block:: Python

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.906 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_psd-vm203.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: psd-vm203.ipynb <psd-vm203.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: psd-vm203.py <psd-vm203.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: psd-vm203.zip <psd-vm203.zip>`
