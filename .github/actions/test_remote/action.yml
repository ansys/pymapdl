
name: |
  Test PyMAPDL with remote MAPDL instances

description: |
  This action starts a MAPDL instance in a Docker container and runs the PyMAPDL test suite against it

inputs:

  # Required inputs

  username:
    description: |
      Username for the GitHub container registry.
    required: true
    type: string
  
  password:
    description: |
      Password for the GitHub container registry.
    required: true
    type: string
  
  mapdl-version:
    description: |
      MAPDL version to test.
    required: true
    type: string
  
  codecov_token:
    description: |
      Token for Codecov.
    required: true
    type: string


runs:
  using: "composite"

  steps:
    - name: "Login in Github container registry"
      uses: docker/login-action@v3.3.0
      with:
        registry: ghcr.io
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: "Getting SMP/DMP mode"
      id: distributed_mode
      run: |
        image=${{ inputs.mapdl-version }}
        export distributed_mode="smp"
        if [[ $image == *".1."* ]]; then
          export distributed_mode="dmp";
        fi
        echo "Distributed mode: $distributed_mode"
        echo "distributed_mode=$(echo $distributed_mode)" >> $GITHUB_OUTPUT

    - name: "Get if running on Ubuntu"
      id: ubuntu_check
      run: |
        if [[ "${{ inputs.mapdl-version }}" == *"ubuntu"* ]];
          then export ON_UBUNTU=true; export TAG_UBUNTU="ubuntu";
          else export ON_UBUNTU=false; export TAG_UBUNTU="centos";
        fi
        echo "ON_UBUNTU: $ON_UBUNTU"
        echo "TAG_UBUNTU: $TAG_UBUNTU"
        echo "ON_UBUNTU=$(echo $ON_UBUNTU)" >> $GITHUB_OUTPUT
        echo "TAG_UBUNTU=$(echo $TAG_UBUNTU)" >> $GITHUB_OUTPUT

    - name: "Get if running student version"
      id: student_check
      run: |
        if [[ "${{ inputs.mapdl-version }}" == *"student"* ]]; 
          then export ON_STUDENT=true; export TAG_STUDENT="student";
          else export ON_STUDENT=false; export TAG_STUDENT="non-student";
        fi
        echo "ON_STUDENT: $ON_STUDENT"
        echo "TAG_STUDENT: $TAG_STUDENT"
        echo "ON_STUDENT=$(echo $ON_STUDENT)" >> $GITHUB_OUTPUT
        echo "TAG_STUDENT=$(echo $TAG_STUDENT)" >> $GITHUB_OUTPUT
        
    - name: "Pull, launch, and validate MAPDL service"
      id: start_mapdl
      env:
        LICENSE_SERVER: ${{ inputs.LICENSE_SERVER }}
        MAPDL_VERSION: ${{ inputs.mapdl-version }}
        DISTRIBUTED_MODE: ${{ steps.distributed_mode.outputs.distributed_mode }}
      run: |
        echo "Launching first MAPDL instance..."
        export INSTANCE_NAME=MAPDL_0
        .ci/start_mapdl.sh &> mapdl_launch_0.log & export DOCKER_PID_0=$!
        echo "Launching a second instance for MAPDL pool testing..."
        export PYMAPDL_PORT=${{ env.PYMAPDL_PORT2 }}
        export PYMAPDL_DB_PORT=${{ env.PYMAPDL_DB_PORT2 }}
        export INSTANCE_NAME=MAPDL_1
        .ci/start_mapdl.sh &> mapdl_launch_1.log & export DOCKER_PID_1=$!
        echo "Launching MAPDL service 0 at PID: $DOCKER_PID_0"
        echo "Launching MAPDL service 1 at PID: $DOCKER_PID_2"
        echo "DOCKER_PID_0=$(echo $DOCKER_PID_0)" >> $GITHUB_OUTPUT
        echo "DOCKER_PID_1=$(echo $DOCKER_PID_1)" >> $GITHUB_OUTPUT

    - name: "DPF server activation"
      run: |
        $(docker pull ghcr.io/ansys/dpf-core:22.2dev && docker run -d --name dpfserver -p ${{ env.DPF_PORT }}:50052 ghcr.io/ansys/dpf-core:22.2dev && echo "DPF Server active on port ${{ env.DPF_PORT }}.") &

    - name: "Getting files change filters"
      uses: dorny/paths-filter@v3
      id: changes
      with:
        filters: |
          workflows:
            - '.github/workflows/**'

    - name: "Setup Python with cache"
      uses: actions/setup-python@v5
      if:  steps.changes.outputs.workflows != 'true'
      with:
        cache: 'pip'
        python-version: ${{ env.MAIN_PYTHON_VERSION }}

    - name: "Setup Python without cache"
      uses: actions/setup-python@v5
      if: steps.changes.outputs.workflows == 'true'
      with:
        python-version: ${{ env.MAIN_PYTHON_VERSION }}

    - name: "Install os packages"
      run: |
        sudo apt update
        sudo apt install libgl1-mesa-glx xvfb graphviz

    - name: "Test virtual framebuffer"
      run: |
        pip install -r .ci/requirements_test_xvfb.txt
        xvfb-run python .ci/display_test.py

    - name: Install ansys-mapdl-core
      run: |
        python -m pip install build
        python -m build
        python -m pip install dist/*.whl
        xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

    - name: "Unit testing requirements installation"
      run: |
        python -m pip install .[tests]

    - name: "Waiting for the services to be up"
      run: |
        .ci/waiting_services.sh

    - name: "Unit testing"
      env:
        DISTRIBUTED_MODE: ${{ steps.distributed_mode.outputs.distributed_mode }}
        ON_UBUNTU: ${{ steps.ubuntu_check.outputs.ON_UBUNTU }}
        ON_STUDENT: ${{ steps.student_check.outputs.ON_STUDENT }}
        file_name: "${{ inputs.mapdl-version }}-remote"
      run: |
        echo "ON_UBUNTU: $ON_UBUNTU"
        echo "ON_STUDENT: $ON_STUDENT"
        xvfb-run pytest \
          ${{ env.PYTEST_ARGUMENTS }} \
          --ignore_image_cache \
          --report-log=$file_name.jsonl \
          --cov-report=xml:$file_name.xml

    - uses: codecov/codecov-action@v5
      name: "Upload coverage to Codecov"
      with:
        token: ${{ inputs.codecov_token }} # required
        name: ${{ inputs.mapdl-version }}-remote.xml
        flags: remote,${{ steps.ubuntu_check.outputs.TAG_UBUNTU }},${{ inputs.mapdl-version }},${{ steps.distributed_mode.outputs.distributed_mode }},${{ steps.student_check.outputs.TAG_STUDENT }}

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.mapdl-version }}-remote.xml
        path: ./${{ inputs.mapdl-version }}-remote.xml

    - name: "Check package"
      run: |
        pip install twine
        twine check dist/*

    - name: "Upload wheel and binaries"
      uses: actions/upload-artifact@v4
      with:
        name: PyMAPDL-packages-${{ inputs.mapdl-version }}
        path: dist/
        retention-days: 7

    - name: "Collect logs on failure"
      if: always()
      env:
        MAPDL_VERSION: ${{ inputs.mapdl-version }}
        MAPDL_INSTANCE: MAPDL_0
        LOG_NAMES: logs-remote-${{ inputs.mapdl-version }}
      run: |
        .ci/collect_mapdl_logs_remote.sh

    - name: "Upload logs to GitHub"
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: logs-remote-${{ inputs.mapdl-version }}.tgz
        path: ./logs-remote-${{ inputs.mapdl-version }}.tgz

    - name: "Display files structure"
      if: always()
      env:
        MAPDL_INSTANCE: MAPDL_0
        LOG_NAMES: logs-remote-${{ inputs.mapdl-version }}
      run: |
        .ci/display_logs_remote.sh