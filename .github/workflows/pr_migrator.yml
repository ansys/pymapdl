# ------------------------------------------------------------------------------------
# Fork PR Handler GitHub Action
#
# Description:
#   This workflow migrates pull requests (PRs) from forks to branches within the main
#   repository, enabling workflows that require repository secrets to run. It is triggered
#   by comments containing "@pyansys-ci-bot migrate" or "@pyansys-ci-bot sync" on PRs,
#   or manually via workflow dispatch.
#
# Usage:
#   - Comment "@pyansys-ci-bot migrate" or "@pyansys-ci-bot sync" on a forked PR.
#   - Optionally specify "theirs" or "ours" to resolve merge conflicts automatically.
#   - Can also be triggered manually from the Actions tab with required inputs.
#
# Intended Output:
#   - Migrates the PR to a new branch in the main repository.
#   - Optionally resolves merge conflicts using the specified strategy.
#   - Opens a new PR in the main repository and notifies the user.
#   - Reacts to the triggering comment to indicate success or failure.
#
# Inputs (for workflow_dispatch/dev mode):
#   - issue_number: The PR/issue number to migrate (required).
#   - comment_body: The comment body to simulate (optional, default: "@pyansys-ci-bot migrate").
# ------------------------------------------------------------------------------------

name: Fork PR Handler

on:
  issue_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: number

      comment_body:
        description: 'Comment body'
        required: false
        default: '@pyansys-ci-bot migrate'
        type: string

permissions:
  contents: write
  pull-requests: read

jobs:
  migrate:
    if: |
       (
        github.event.issue.pull_request != null &&
        (contains(github.event.comment.body, '@pyansys-ci-bot migrate') || contains(github.event.comment.body, '@pyansys-ci-bot sync') )
        ) || ( github.event_name == 'workflow_dispatch' )
    runs-on: ubuntu-latest
    steps:

      - name: Setup the configuration
        id: pr_number
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.issue_number }}" >> $GITHUB_ENV
            echo "USER_TRIGGERING=${{ github.actor }}" >> $GITHUB_ENV
            echo "COMMENT_BODY=${{ github.event.inputs.comment_body }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
            echo "USER_TRIGGERING=${{ github.event.comment.user.login }}" >> $GITHUB_ENV
            echo "COMMENT_BODY=${{ github.event.comment.body }}" >> $GITHUB_ENV
          fi

      - name: Get user team membership
        id: is_organization_member
        uses: octokit/request-action@v2.4.0
        with:
          route: GET /organizations/{org_id}/team/{team_id}/memberships/{username}
          org_id: ansys
          team_id: pymapdl-maintainers
          username: ${{ env.USER_TRIGGERING }}
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEAMS_USER_READ }}

      - name: Set IS_MEMBER and CONTINUE environment variables
        run: |
          if [[ ${{ fromJson(steps.is_organization_member.outputs.data).role }} == 'member' ]]; then
            echo "IS_MEMBER='true'" >> $GITHUB_ENV
            echo "CONTINUE='true'" >> $GITHUB_ENV
          else
            echo "IS_MEMBER='false'" >> $GITHUB_ENV
            echo "CONTINUE='false'" >> $GITHUB_ENV
          fi

      - name: Check the migration mode
        id: check_mode
        run: |
          # Three modes of operation:
          # 1. auto - automatically resolves conflicts if possible, otherwise exits
          # 2. theirs - resolves conflicts by taking changes from the head branch
          # 3. ours - resolves conflicts by taking changes from the base branch
          if [[ "${{ env.COMMENT_BODY }}" == *"pyansys-ci-bot sync theirs"*  && "${{ env.COMMENT_BODY }}" == *"pyansys-ci-bot migrate theirs"* ]]; then
            echo "Resolving conflicts by taking 'theirs' changes"
            echo "MODE='--theirs'" >> $GITHUB_ENV
          elif [[ "${{ env.COMMENT_BODY }}" == *"pyansys-ci-bot sync ours"* && "${{ env.COMMENT_BODY }}" == *"pyansys-ci-bot migrate ours"* ]]; then
            echo "Resolving conflicts by taking 'ours' changes"
            echo "MODE='--ours'" >> $GITHUB_ENV
          else
            echo "No specific sync mode provided, defaulting to 'auto' which will exit if there are conflicts."
            echo "MODE=''" >> $GITHUB_ENV
          fi

      - name: React positively to comment if user is a team member
        if : ${{ env.IS_MEMBER == 'true' && github.event_name == 'issue_comment' }}
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          commentId: ${{ github.event.comment.id }}
          reaction: "+1"

      - name: React negatively to comment if the user is NOT a team member
        if : ${{ env.IS_MEMBER == 'false' && github.event_name == 'issue_comment' }}
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          commentId: ${{ github.event.comment.id }}
          reaction: "-1"

      - name: Get PR details
        id: pr
        if : ${{ env.IS_MEMBER == 'true' }}
        uses: octokit/request-action@v2.4.0
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse PR data
        id: extract
        if : ${{ env.IS_MEMBER == 'true' }}
        run: |
          PR_HEAD_BRANCH="${{ fromJson(steps.pr.outputs.data).head.ref }}"
          echo "PR_HEAD_BRANCH=$PR_HEAD_BRANCH" >> $GITHUB_ENV

          PR_HEAD_REPO="${{ fromJson(steps.pr.outputs.data).head.repo.full_name }}"
          echo "PR_HEAD_REPO=$PR_HEAD_REPO" >> $GITHUB_ENV

          PR_BASE_BRANCH="migration/pr-${{ env.PR_NUMBER }}"
          echo "PR_BASE_BRANCH=$PR_BASE_BRANCH" >> $GITHUB_ENV
          PR_BASE_REPO="${{ github.repository }}"
          echo "PR_BASE_REPO=$PR_BASE_REPO" >> $GITHUB_ENV

      - name: Checkout repo
        if : ${{ env.IS_MEMBER == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Clone head repo and checkout branch. Resolve conflicts if needed.
        if : ${{ env.IS_MEMBER == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
        run: |
          echo "Setting up git configuration"
          git config --global user.name "${{ secrets.PYANSYS_CI_BOT_USERNAME }}"
          git config --global user.email "${{ secrets.PYANSYS_CI_BOT_EMAIL}}"
          git config pull.rebase true

          echo "Adding ${{ env.PR_HEAD_REPO }} as remote"
          git remote add head_repo https://x-access-token:${{ secrets.PYANSYS_CI_BOT_TOKEN }}@github.com/${{ env.PR_HEAD_REPO }}.git

          echo "Fetching '${{ env.PR_HEAD_BRANCH }}' branch from '${{ env.PR_HEAD_REPO }}'"
          git fetch head_repo ${{ env.PR_HEAD_BRANCH }}
          git pull head_repo ${{ env.PR_HEAD_BRANCH }}

          echo "Checking out '${{ env.PR_BASE_BRANCH }}' branch from '${{ env.PR_HEAD_REPO }}/${{ env.PR_HEAD_BRANCH }}'"
          git checkout -b ${{ env.PR_BASE_BRANCH }} head_repo/${{ env.PR_HEAD_BRANCH }}

          echo "Merging '${{ env.PR_HEAD_BRANCH }}' branch into '${{ env.PR_BASE_BRANCH }}'"
          git merge head_repo/${{ env.PR_HEAD_BRANCH }}
          CONFLICTS=$(git ls-files -u | wc -l)
          echo "CONFLICTS=$CONFLICTS"

          if [[ "$CONFLICTS" -gt 0 && -n "${{ env.MODE }}" ]]; then
            echo "Merge conflicts detected: $CONFLICTS files"

            # Show conflicting files
            echo "Conflicting files:"
            git status
            echo ""

            # Resolve conflicts by taking "theirs" changes (optional, depending on your strategy)
            echo "Resolving conflicts by taking 'theirs' changes"
            git checkout ${{ env.MODE }} .
            git add .

            # Verify if conflicts are resolved
            REMAINING_CONFLICTS=$(git ls-files -u | wc -l)
            if [ "$REMAINING_CONFLICTS" -gt 0 ]; then
              echo "Error: Conflicts remain after resolution. Aborting."
              exit 1
            fi

            # Continue the merge
            git merge --continue || { echo "Merge failed. Aborting."; exit 1; }
          else
            echo "No merge conflicts detected."
          fi

          echo "Pushing changes to '${{ env.PR_BASE_REPO }}' repo"
          git push origin ${{ env.PR_BASE_BRANCH }} --force-with-lease || { echo "Push failed. Aborting."; exit 1; }

          if [[ "${{ env.MODE }}" == "--ours" ]]; then
            echo "Sync mode is 'ours'. Pushing to head_repo/${{ env.PR_HEAD_BRANCH }} with 'ours' changes"
            git push origin head_repo/${{ env.PR_HEAD_BRANCH }} --force-with-lease || { echo "Push to head_repo/${{ env.PR_HEAD_BRANCH }} failed. Aborting."; exit 1; }
          fi

      - name: Opening PR if needed.
        if : ${{ env.IS_MEMBER == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
        run: |
          BASE_PR_NUMBER=$(gh pr list --head ${{ env.PR_BASE_BRANCH }} --state open --json number --jq '.[0].number')
          echo "BASE_PR_NUMBER=$BASE_PR_NUMBER" >> $GITHUB_ENV

          if [[ -n "$BASE_PR_NUMBER" ]]; then
            echo "Open PR exists for branch '${{ env.PR_BASE_BRANCH }}': PR #$BASE_PR_NUMBER"
            echo "COMMENT=false" >> $GITHUB_ENV

          else
            echo "No open PR exists for branch '${{ env.PR_BASE_BRANCH }}'. Creating PR..."
            echo "COMMENT=true" >> $GITHUB_ENV

            title_pr='chore: migrated PR ${{ env.PR_NUMBER }}'
            echo -e "\nThis PR was migrated from a fork to allow secrets to run in workflows. Check the [original PR](https://github.com/${{ github.repository }}/pull/${{ env.PR_NUMBER }}) for more details.\n\nCloses #${{ env.PR_NUMBER }}" > body_pr

            NEW_PR=$(gh pr create --head "${{ env.PR_BASE_BRANCH }}" --reviewer ${{ env.USER_TRIGGERING }} --title "$title_pr" --body-file body_pr | grep -o 'github\.com/.*/pull/[0-9]*' | sed -E 's#.*/pull/##')
            echo "PR created: $NEW_PR"
            echo "BASE_PR_NUMBER=$NEW_PR" >> $GITHUB_ENV
          fi;

      # Confirm success with a reaction
      - name: React to comment when success
        if : ${{ env.IS_MEMBER == 'true' && github.event_name == 'issue_comment' }}
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          commentId: ${{ github.event.comment.id }}
          reaction: "rocket"

      - name: Create comment about successful migration
        if: ${{ env.IS_MEMBER == 'true' && env.COMMENT == 'true' }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.PR_NUMBER}}
          body: |
            **🚀 Migration completed!**

            The PR [#${{ env.BASE_PR_NUMBER }}](https://github.com/${{ github.repository }}/pull/${{ env.BASE_PR_NUMBER }}) has been created successfully.

          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

      - name: Create comment about failed migration
        if: ${{ env.IS_MEMBER == 'true' && failure() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.PR_NUMBER}}
          body: |
            **Error**

            An error occurred while migrating and syncing the PR. Please check the action logs for more details.

          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
