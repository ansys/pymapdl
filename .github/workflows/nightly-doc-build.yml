name: Nightly Documentation Build

on:
  schedule:  # UTC at 0400
    - cron:  '0 4 * * *'
  workflow_dispatch:

jobs:
  nightly_docs_build:
    runs-on: ubuntu-latest

    container:
      image: ghcr.io/pyansys/pymapdl/mapdl:v21.2.1
      options: "--entrypoint /bin/bash"
      env:
        ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
        PYMAPDL_PORT: 50052  # to use CI mode at the moment
        PYMAPDL_START_INSTANCE: FALSE
        PYANSYS_OFF_SCREEN: True
        DISPLAY: ':99.0'
        ON_CI: True

    steps:
      - uses: actions/checkout@v2

      - name: Display structure of files
        run: |
          echo "::group:: PyMAPDL repo"
          ls -R
          echo "::endgroup::"

          echo "::group:: Ansys installation"
          ls -R /ansys*
          echo "::endgroup::"

      - name: Install OS packages
        run: |
          yum -y makecache
          yum -y update
          yum -y install mesa-libGL xorg-x11-server-Xvfb
          yum -y install epel-release
          yum -y install pandoc --enablerepo=epel
          yum -y install zip libgl1-mesa-glx xvfb texlive-latex-extra latexmk

      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.8      

      - name: Install Dependencies
        # Needed for Scipy and xvfb
        run: |
          yum -y install blas-devel lapack-devel which
          yum -y install make automake gcc g++ subversion python3-dev

      # used for documentation deployment
      - name: Get Bot Application Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Install Python
        run: |
          echo "::group:: Installing Python" 
          yum -y update && yum -y install gcc openssl-devel bzip2-devel libffi-devel wget make sqlite-devel && yum clean all
          cd /opt 
          wget --no-check-certificate https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz 
          tar xzf Python-3.8.3.tgz 
          cd Python-3.8*/ 
          ./configure --enable-optimizations --enable-loadable-sqlite-extensions 
          make altinstall 
          rm -rf /opt/Python*
          echo "::endgroup::"

          echo "::group:: Linking python" 
          ln -fs /usr/local/bin/python3.8 /usr/bin/python3 && echo "Linked Python3.8 to Python3"
          ln -fs /usr/local/bin/pip3.8 /usr/bin/pip3 && echo "Linked pip3.8 to pip3"
          echo "::endgroup::"

          echo "::group:: Listing python config" 
          python_version=$(python3 --version>&1) 
          echo "Python version: ${python_version}"
          echo "::set-output name=python_version::$(echo ${python_version})"
          echo "::endgroup::"

      - name: Update git
        run: |
          yum -y remove git
          yum -y remove git-*
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git

      - name: Get MAPDL version
        id: get_MAPDL_ver
        run: |
          version=$(echo "v21.2.1" | tr -d '.' | tr -d 'v' | head -c3)
          echo "MAPDL image version is: ${version}"
          echo "::set-output name=mapdl_ver::$(echo ${version})"

      - name: Linking MAPDL
        id: link_MAPDL
        run: |
          echo "::group:: Setting path variables" 
          new_MAPDL_dir=/ansys_inc/v${{ steps.get_MAPDL_ver.outputs.mapdl_ver }}/ansys/bin/
          new_MAPDL_exec="${new_MAPDL_dir}ansys${{ steps.get_MAPDL_ver.outputs.mapdl_ver }}"
          echo "The MAPDL directory is: ${new_MAPDL_dir}"
          echo "The MAPDL executable is at: ${new_MAPDL_exec}"
          echo "::endgroup::"

          echo "::group:: Linking files" 
          mkdir -p $new_MAPDL_dir
          ln -fs /ansys_inc/ansys/bin/mapdl $new_MAPDL_exec && echo "Linked MAPDL to default paths"
          echo "::set-output name=mapdl_dir::$(echo $new_MAPDL_dir)"
          echo "::set-output name=mapdl_exec::$(echo $new_MAPDL_exec)"
          echo "::endgroup::"

          echo "::group:: Testing linked files" 
          (test -L $new_MAPDL_exec && echo "Ansys executable exists.") || (echo "Ansys executable does NOT exist." && ls -R /ansys* && exit 1)
          echo "::endgroup::"

      - name: Launching MAPDL
        run: |
          mkdir -p /ansys_run
          echo | ${{steps.link_MAPDL.outputs.mapdl_exec}} -grpc -smp -dir /ansys_run > console_output.txt && echo "MAPDL started" &

      - name: Create and activate virtual environment
        run: |
          python3 -m venv venv && echo "Created virtual environment"
          source venv/bin/activate && echo "Activated virtual environment"
          pip install pip --upgrade && echo "Upgraded pip"

      - name: Install ansys-mapdl-core
        run: |
          echo "::group:: Installing PyMAPDL and dependencies" 
          source venv/bin/activate && echo "Activated virtual environment"
          pip install -r requirements/requirements_build.txt && echo "Installing requirements for build: Done"
          pip install build
          python -m build
          pip install dist/*.whl
          echo "ansys-mapdl-core installed."
          echo "::endgroup::"

          echo "::group:: Smoke test" 
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"
          echo "::endgroup::"

      - name: Checking display settings
        run: |
          source venv/bin/activate && echo "Activated virtual environment"
          python -c "from pyvista.plotting import system_supports_plotting; print(f'The system support plotting: {system_supports_plotting()}')"
  
      - name: Retrieve PyMAPDL version
        run: |
          echo "::set-output name=PYMAPDL_VERSION::$(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
        id: version

      - name: Installing dependencies for docs building
        run: |
          echo "::group:: Installing docs requirements" 
          source venv/bin/activate && echo "Activated virtual environment"
          pip install -r requirements/requirements_docs.txt
          echo "::endgroup::"

      - name: Build Documentation
        run: |
          xvfb-run -e xvfb_error.log make -C doc html
          echo "HTML docs built."

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          repository-name: pyansys/pymapdl-dev-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          BRANCH: gh-pages
          FOLDER: doc/build/html
          CLEAN: true

      - name: Display logs
        if: always()
        run: |
          echo "::group:: Xvfb error 'xvfb_error.log'" && cat xvfb_error.log && echo "::endgroup::"
          echo "::group:: Terminal output 'console_output.txt'" && cat console_output.txt && echo "::endgroup::"
          for f in /ansys_run/*.err; do echo "::group:: Error file $f" && cat f && echo "::endgroup::" ; done
          for f in /ansys_run/*.log; do echo "::group:: Log file $f" && cat f && echo "::endgroup::" ; done
          for f in /ansys_run/*.out; do echo "::group:: Output file $f" && cat $f && echo "::endgroup::" ; done
          for f in doc/build/latex/*.log; do echo "::group:: Output latex log file $f" && cat $f && echo "::endgroup::" ; done

      - name: Notify if fail
        uses: skitionek/notify-microsoft-teams@master
        if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.TEAM_HOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{
            title: `${workflow} failed.`, 
            }"