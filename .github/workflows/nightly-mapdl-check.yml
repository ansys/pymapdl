name: Nightly MAPDL check

on:
  workflow_dispatch:
  schedule:  # UTC at 0400
    - cron:  '0 4 * * *'

env:
  PYMAPDL_PORT: 21000  # default won't work on azure
  PYMAPDL_START_INSTANCE: FALSE
  PYANSYS_OFF_SCREEN: True

jobs:

  check_image:
    name: Validate latest mapdl image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install libgl1-mesa-glx xvfb

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements_*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install ansys-mapdl-core
        run: |
          pip install .
          cd tests
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Log in to github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull image
        run: |
          docker run -e ANSYSLMD_LICENSE_FILE=1055@$LICENSE_SERVER --restart always --name mapdl -p $PYMAPDL_PORT:50052 ghcr.io/pyansys/mapdl -smp > log.txt &
          grep -q 'Server listening on' <(timeout 60 tail -f log.txt)
          python -c "from ansys.mapdl.core import launch_mapdl; print(launch_mapdl())"
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}

      - name: Unit Testing
        run: |
          pip install -r requirements_test.txt
          xvfb-run pytest -v --cov=ansys.mapdl.core --cov-report=xml --cov-report=html

      - name: Display MAPDL Logs
        if: always()
        run: cat log.txt

      - name: Notify if fail
        uses: skitionek/notify-microsoft-teams@master
        if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.TEAM_HOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{
            title: `${workflow} failed.`, 
            }"

