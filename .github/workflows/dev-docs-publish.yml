name: Dev docs publisher

on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  DOCUMENTATION_CNAME: 'mapdl.docs.pyansys.com'

jobs:
  upload_dev_docs:
    name: "Upload dev documentation"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          name: documentation-html
          workflow: ci.yml
          commit: ${{github.event.pull.before}}
          skip_unpack: True

      # PyAnsys dev deploy action
      - name: "Install system dependencies"
        shell: bash
        run: |
          sudo apt-get install curl

      - name: "Checkout project in the GitHub Pages branch"
        uses: actions/checkout@v3
        with:
          ref: 'gh-pages'

      - name: "Create a fresh development folder"
        shell: bash
        run: rm -rf dev/ && mkdir dev/

      - name: "Download the HTML documentation artifact"
        uses: actions/download-artifact@v3
        if: ${{ github.event.inputs.use-downloaded-artifact == false }}
        with:
          name: ${{ inputs.doc-artifact-name }}
          path: dev

      - name: "Move artifact to dev folder"
        if: ${{ github.event.inputs.use-downloaded-artifact == true }}
        run: |
          unzip ${{ inputs.doc-artifact-name }}.zip ./dev/* -r

      - name: "Display structure of downloaded files"
        shell: bash
        run: |
          ls -R

      - name: "Include CNAME and nojekyll files expected by GitHub pages"
        shell: bash
        run: |
          touch CNAME .nojekyll
          echo ${{ env.DOCUMENTATION_CNAME }} > CNAME

      - name: "Generate the redirection URL"
        shell: bash
        run: |
          # Verify if there is any stable release in release/versions.json
          if grep -q -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json;
          then 
            # Generate the URL pointing to the latest stable version
            echo "Found stable release. Generating stable redirection URL..."
            line=$(grep -n -E "\"version\": \"[0-9]+.[0-9]+ \(stable\)\"" release/versions.json)
            version=$(echo $line | grep -o -h -E "[0-9]+.[0-9]+")
            echo "URL=https://${{ env.DOCUMENTATION_CNAME }}/release/$version" >> $GITHUB_ENV
          else 
            # Generate the URL pointing to the development version if no stable releases
            echo "Stable release not found. Generating development redirection URL..."
            echo "URL=https://${{ env.DOCUMENTATION_CNAME }}/dev" >> $GITHUB_ENV
          fi

      - name: "Update the redirection link"
        shell: bash
        run: |
          curl https://raw.githubusercontent.com/pyansys/actions/main/scripts/redirect.html -o index.html
          # HACK: if the GitHub actions variable is dereferenced inside the `sed` command a syntax error is raised.
          # The URL Github actions environmental variable is loaded inside a shell one to avoid this conflict.
          url=${{ env.URL }}
          echo "Value for url: $url"
          sed -i "s|var-url|$url|g" index.html
          cat index.html

      - name: "Clear unnecessary gh-pages files and directories"
        shell: bash
        run: |
          shopt -s extglob
          rm -rf -v !("index.html"|"release"|"dev"|"CNAME"|".nojekyll")
          ls -R

      - name: "Commit new changes (if required)"
        shell: bash
        run: |
          if [[ ! -z $(git status -s) ]];
          then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "DOC: add development documentation"
            git push
          fi
