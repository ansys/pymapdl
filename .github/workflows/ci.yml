name: GitHub Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  PYMAPDL_PORT: 21000  # default won't work on GitHub runners
  PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
  PYMAPDL_START_INSTANCE: FALSE
  PYANSYS_OFF_SCREEN: True
  DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
  DOCKER_IMAGE_VERSION_DOCS_BUILD: v21.2.1
  ON_CI: True
  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_PIP_CACHE: 3
  RESET_EXAMPLES_CACHE: 3
  RESET_DOC_BUILD_CACHE: 3
  RESET_AUTOSUMMARY_CACHE: 3
  PACKAGE_NAME: PyMAPDL

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  stylecheck:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  testimport:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests*.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install PyMAPDL
        run: pip install .

      - name: Test import
        working-directory: tests
        run: python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report(gpu=False))"

      - name: Retrieve PyMAPDL version
        run: |
          echo "::set-output name=PYMAPDL_VERSION::$(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
        id: version

      - name: Generate wheelhouse
        run: pip wheel . -w wheelhouse

      - name: Zip wheelhouse
        uses: vimtor/action-zip@v1
        with:
          files: wheelhouse
          dest: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYMAPDL_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}.zip

      - name: Upload Wheelhouse
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }}-v${{ steps.version.outputs.PYMAPDL_VERSION }}-wheelhouse-${{ runner.os }}-${{ matrix.python-version }}
          path: '*.zip'
          retention-days: 7

  docs_build:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # used for documentation deployment
      - name: Get Bot Application Token
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install zip pandoc libgl1-mesa-glx xvfb texlive-latex-extra latexmk

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_docs*.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      - name: Test virtual framebuffer
        run: |
          pip install -r .ci/requirements_test_xvfb.txt
          xvfb-run python .ci/display_test.py

      - name: Install ansys-mapdl-core
        run: |
          pip install build
          python -m build
          pip install dist/ansys*.whl
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Login in Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GH_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull, launch, and validate MAPDL service
        run: .ci/start_mapdl.sh
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MAPDL_IMAGE: '${{ env.DOCKER_PACKAGE }}:${{ env.DOCKER_IMAGE_VERSION_DOCS_BUILD }}'

      - name: Retrieve PyMAPDL version
        run: |
          echo "::set-output name=PYMAPDL_VERSION::$(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
        id: version

      - name: Cache examples
        uses: actions/cache@v2
        with:
          path: doc/source/examples
          key: Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Cache docs build directory
        uses: actions/cache@v2
        with:
          path: doc/build
          key: doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Cache autosummary
        uses: actions/cache@v2
        with:
          path: doc/source/**/_autosummary/*.rst
          key: autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Install Docs Build Requirements
        run: |
          pip install -r requirements/requirements_docs.txt

      - name: Build Documentation
        run: |
          xvfb-run make -C doc html SPHINXOPTS="-j auto -W --keep-going"

      - name: Zip documentation
        run: |
          cd doc/build/html
          zip -r PyMAPDL_documentation.zip *

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: HTML-Documentation
          path: doc/build/html/PyMAPDL_documentation.zip
          retention-days: 7

      - name: Deploy
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          repository-name: pyansys/pymapdl-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          BRANCH: gh-pages
          FOLDER: doc/build/html
          CLEAN: true

      - name: Build PDF Documentation
        working-directory: doc
        run: make pdf

      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v2
        with:
          name: PDF-Documentation
          path: doc/build/latex/pymapdl*.pdf
          retention-days: 7

  build_test:
    name: Build and Unit Testing
    # needs: testimport
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mapdl-version: ['v21.1.1', 'v21.2.1', 'v22.1.0']

    container:
      image: ghcr.io/pyansys/pymapdl/mapdl:${{ matrix.mapdl-version }}
      options: "--entrypoint /bin/bash"
      env:
        ANSYSLMD_LICENSE_FILE: 1055@${{ secrets.LICENSE_SERVER }}
        PYMAPDL_PORT: 50052  # to use CI mode at the moment
        PYMAPDL_START_INSTANCE: FALSE
        PYANSYS_OFF_SCREEN: True

    env:
      PYMAPDL_PORT: 50052  # to use CI mode at the moment
      PYMAPDL_START_INSTANCE: FALSE
      PYANSYS_OFF_SCREEN: True

    steps:
      - uses: actions/checkout@v2

      - name: Install OS packages
        run: |
          yum -y makecache
          yum -y install mesa-libGL xorg-x11-server-Xvfb
      
      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Install Dependencies
        # Needed for Scipy and xvfb
        run: |
          yum -y install blas-devel lapack-devel which
          yum -y install make automake gcc g++ subversion python3-dev
      
      # - name: Setup Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.8

      - name: Install Python
        run: |
          echo "::group:: Installing Python" 
          yum -y update && yum -y install gcc openssl-devel bzip2-devel libffi-devel wget make sqlite-devel && yum clean all
          cd /opt 
          wget --no-check-certificate https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz 
          tar xzf Python-3.8.3.tgz 
          cd Python-3.8*/ 
          ./configure --enable-optimizations --enable-loadable-sqlite-extensions 
          make altinstall 
          rm -rf /opt/Python*
          echo "::endgroup::"

          echo "::group:: Linking python" 
          ln -fs /usr/local/bin/python3.8 /usr/bin/python3 && echo "Linked Python3.8 to Python3"
          ln -fs /usr/local/bin/pip3.8 /usr/bin/pip3 && echo "Linked pip3.8 to pip3"
          echo "::endgroup::"

          echo "::group:: Listing python config" 
          python_version=$(python3 --version>&1) 
          echo "Python version: ${python_version}"
          echo "::set-output name=python_version::$(echo ${python_version})"
          echo "::endgroup::"
      
      - name: Update git
        run: |
          yum -y remove git
          yum -y remove git-*
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git

      - name: Get MAPDL version
        id: get_MAPDL_ver
        run: |
          version=$(echo ${{ matrix.mapdl-version }} | tr -d '.' | tr -d 'v' | head -c3)
          echo "MAPDL image version is: ${version}"
          echo "::set-output name=mapdl_ver::$(echo ${version})"

      - name: Linking MAPDL
        id: link_MAPDL
        run: |
          echo "::group:: Setting path variables" 
          new_MAPDL_dir=/ansys_inc/v${{ steps.get_MAPDL_ver.outputs.mapdl_ver }}/ansys/bin/
          new_MAPDL_exec="${new_MAPDL_dir}ansys${{ steps.get_MAPDL_ver.outputs.mapdl_ver }}"
          echo "The MAPDL directory is: ${new_MAPDL_dir}"
          echo "The MAPDL executable is at: ${new_MAPDL_exec}"
          echo "::endgroup::"

          echo "::group:: Linking files" 
          mkdir -p $new_MAPDL_dir
          ln -fs /ansys_inc/ansys/bin/mapdl new_MAPDL_exec && echo "Linked MAPDL to default paths"
          echo "::set-output name=mapdl_dir::$(echo $new_MAPDL_dir)"
          echo "::set-output name=mapdl_exec::$(echo $new_MAPDL_exec)"
          echo "::endgroup::"

      - name: Launching MAPDL
        run: |
          mkdir -p /ansys_run
          echo | ${{steps.link_MAPDL.outputs.mapdl_exec}} -grpc -smp -dir /ansys_run > console_output.txt && echo "MAPDL started" &

      - name: Create and activate virtual environment
        run: |
          python3 -m venv venv && echo "Created virtual environment"
          source venv/bin/activate && echo "Activated virtual environment"
          pip install pip --upgrade && echo "Upgraded pip"

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests.txt') }}
          restore-keys: |
            Python-v${{ env.RESET_PIP_CACHE }}-${{ runner.os }}-${{ matrix.python-version }}

      # - name: Test virtual framebuffer
      #   run: |
      #     pip install -r requirements/requirements_build.txt && echo "Installing requirements for build: Done"
      #     pip install -r .ci/requirements_test_xvfb.txt && echo "Installing requirements for xvfb testing: Done"
        
        #xvfb-run python3 .ci/display_test.py && echo "Display testing: Done "

      - name: Install ansys-mapdl-core
        run: |
          echo "::group:: Installing PyMAPDL and dependencies" 
          source venv/bin/activate && echo "Activated virtual environment"
          pip install -r requirements/requirements_build.txt && echo "Installing requirements for build: Done"
          pip install build
          python -m build
          pip install dist/*.whl
          echo "ansys-mapdl-core installed."
          echo "::endgroup::"

          echo "::group:: Smoke test" 
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"
          echo "::endgroup::"

      # - name: Login in Github Container registry
      #   uses: docker/login-action@v1
      #   with:
      #     registry: ghcr.io
      #     username: ${{ secrets.GH_USERNAME }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Installing dependencies for unit testing
        run: |
          echo "::group:: Installing test requirements" 
          source venv/bin/activate && echo "Activated virtual environment"
          pip install -r requirements/requirements_tests.txt
          echo "::endgroup::"

      # - name: Running unit tests
      #   uses: GabrielBB/xvfb-action@v1
      #   with:
      #     run: pytest -v --cov=ansys.mapdl.core --cov-report=xml --cov-report=html
      #     #working-directory: ./ #optional
      #     #options: #optional

      - name: Running unit tests
        run: |
          echo "::group:: Running tests" 
          /usr/bin/Xvfb :99 -screen 0 1280x1024x24 &
          xvfb-run -e xvfb_error.log pytest -v --cov=ansys.mapdl.core --cov-report=xml --cov-report=html
          echo "::endgroup::"

      - uses: codecov/codecov-action@v2
        if: matrix.mapdl-version == 'v21.2.1'
        name: 'Upload coverage to Codecov'

      - name: Check package
        run: |
          source venv/bin/activate && echo "Activated virtual environment"
          pip install twine
          twine check dist/*

      - name: Upload wheel and binaries
        uses: actions/upload-artifact@v2
        with:
          name: PyMAPDL-packages
          path: dist/
          retention-days: 7
      
      - name: Display logs
        if: always()
        run: |
          echo "::group:: Files listing" && ls -R && echo "::endgroup::"
          echo "::group:: Xvfb error 'xvfb_error.log'" && cat xvfb_error.log && echo "::endgroup::"
          echo "::group:: Terminal output 'console_output.txt'" && cat console_output.txt && echo "::endgroup::"
          for f in /ansys_run/*.err; do echo "::group:: Error file $f" && cat f && echo "::endgroup::" ; done
          for f in /ansys_run/*.log; do echo "::group:: Log file $f" && cat f && echo "::endgroup::" ; done
          for f in /ansys_run/*.out; do echo "::group:: Output file $f" && cat $f && echo "::endgroup::" ; done

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [docs_build, build_test]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf
            ./**/*.zip

      - name: Notify if fail
        uses: skitionek/notify-microsoft-teams@master
        if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.TEAM_HOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{
            title: `Release FAILED!`,
            }"
