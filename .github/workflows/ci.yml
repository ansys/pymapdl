name: GitHub Actions

on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  PYMAPDL_PORT: 21000  # default won't work on GitHub runners
  PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
  PYMAPDL_START_INSTANCE: FALSE
  PYANSYS_OFF_SCREEN: True
  DOCKER_PACKAGE: ghcr.io/pyansys/pymapdl/mapdl
  DOCKER_IMAGE_VERSION_DOCS_BUILD: v21.2.1

jobs:

  stylecheck:
    name: Style Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit
        run: pre-commit run --all-files || ( git status --short ; git diff ; exit 1 )

  testimport:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9']

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Linux pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Linux' }}
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Window pip cache
        uses: actions/cache@v2
        if: ${{ runner.os == 'Windows' }}
        with:
          path: ~\AppData\Local\pip\Cache
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Install PyMAPDL
        run: |
          pip install .

      - name: Test import
        working-directory: tests
        run: |
          python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report(gpu=False))"

  docs_build:
    name: Build Documentation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # used for documentation deployment
      - name: Get Bot Application Token
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.BOT_APPLICATION_ID }}
          application_private_key: ${{ secrets.BOT_APPLICATION_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install zip pandoc libgl1-mesa-glx xvfb texlive-latex-extra latexmk

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_docs*.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Test virtual framebuffer
        run: |
          pip install -r .ci/requirements_test_xvfb.txt
          xvfb-run python .ci/display_test.py

      - name: Install ansys-mapdl-core
        run: |
          pip install build
          python -m build
          pip install dist/ansys*.whl
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Pull, launch, and validate MAPDL service
        run: .ci/start_mapdl.sh
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          GH_PAT: ${{ secrets.REPO_DOWNLOAD_PAT }}
          MAPDL_IMAGE: '${{ env.DOCKER_PACKAGE }}:${{ env.DOCKER_IMAGE_VERSION_DOCS_BUILD }}'

      - name: Retrieve PyMAPDL version
        run: |
          echo "::set-output name=PYMAPDL_VERSION::$(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"
        id: version

      - name: Cache examples
        uses: actions/cache@v2
        with:
          path: doc/source/examples
          key: Examples-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            Examples-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Cache docs build directory
        uses: actions/cache@v2
        with:
          path: doc/build
          key: doc-build-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            doc-build-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Cache autosummary
        uses: actions/cache@v2
        with:
          path: doc/source/**/_autosummary/*.rst
          key: autosummary-rst-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            autosummary-rst-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: Install Docs Build Requirements
        run: |
          pip install -r requirements/requirements_docs.txt

      - name: Build Documentation
        run: |
          xvfb-run make -C doc html SPHINXOPTS="-j auto -W --keep-going"

      - name: Zip documentation
        run: |
          cd doc/build/html
          zip -r PyMAPDL_documentation.zip *

      - name: Upload HTML Documentation
        uses: actions/upload-artifact@v2
        with:
          name: HTML-Documentation
          path: doc/build/html/PyMAPDL_documentation.zip
          retention-days: 7

      - name: Deploy
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: JamesIves/github-pages-deploy-action@4.1.4
        with:
          repository-name: pyansys/pymapdl-docs
          token: ${{ steps.get_workflow_token.outputs.token }}
          BRANCH: gh-pages
          FOLDER: doc/build/html
          CLEAN: true

      - name: Build PDF Documentation
        working-directory: doc
        run: make pdf

      - name: Upload PDF Documentation
        uses: actions/upload-artifact@v2
        with:
          name: PDF-Documentation
          path: doc/build/latex/pymapdl*.pdf
          retention-days: 7

  build_test:
    name: Build and Unit Testing
    needs: testimport
    runs-on: ubuntu-latest
    strategy:
      matrix:
        mapdl-version: ['v21.1.1', 'v21.2.1', 'v22.1.0']

    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install OS packages
        run: |
          sudo apt update
          sudo apt install libgl1-mesa-glx xvfb

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: Python-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/requirements_tests.txt') }}
          restore-keys: |
            Python-${{ runner.os }}-${{ matrix.python-version }}

      - name: Test virtual framebuffer
        run: |
          pip install -r .ci/requirements_test_xvfb.txt
          xvfb-run python .ci/display_test.py

      - name: Install ansys-mapdl-core
        run: |
          pip install build
          python -m build
          pip install dist/*.whl
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: Pull, launch, and validate MAPDL service
        run: .ci/start_mapdl.sh
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          GH_USERNAME: ${{ secrets.GH_USERNAME }}
          GH_PAT: ${{ secrets.REPO_DOWNLOAD_PAT }}
          MAPDL_IMAGE: ${{ env.DOCKER_PACKAGE }}:${{ matrix.mapdl-version }}

      - name: Unit Testing
        run: |
          pip install -r requirements/requirements_tests.txt
          xvfb-run pytest -v --cov=ansys.mapdl.core --cov-report=xml --cov-report=html

      - uses: codecov/codecov-action@v2
        if: matrix.mapdl-version == 'v21.2.1'
        name: 'Upload coverage to Codecov'

      - name: Check package
        run: |
          pip install twine
          twine check dist/*

      - name: Upload wheel and binaries
        uses: actions/upload-artifact@v2
        with:
          name: PyMAPDL-packages
          path: dist/
          retention-days: 7

      - name: Display MAPDL Logs
        if: always()
        run: cat log.txt

  Release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [docs_build, build_test]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload to Public PyPi
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
          twine upload --skip-existing ./**/*.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.tar.gz
            ./**/*.pdf
      
      - name: Notify if fail
        uses: skitionek/notify-microsoft-teams@master
        if: ${{ failure() }}
        with:
          webhook_url: ${{ secrets.TEAM_HOOK }}
          needs: ${{ toJson(needs) }}
          job: ${{ toJson(job) }}
          steps: ${{ toJson(steps) }}
          overwrite: "{
            title: `Release FAILED!`, 
            }"
