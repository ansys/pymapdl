name: CI

on:
  pull_request:
  workflow_dispatch:
    inputs:
      run_all_tests:
        description: 'Run all extended MAPDL build tests'
        required: true
        type: boolean

  push:
    tags:
      - "v*"
    branches:
       - main
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '30 4 * * *'

env:
  PROJECT_NAME: 'PyMAPDL'
  MAIN_PYTHON_VERSION: '3.12'
  PACKAGE_NAME: 'ansys-mapdl-core'
  PACKAGE_NAMESPACE: 'ansys.mapdl.core'
  DOCUMENTATION_CNAME: 'mapdl.docs.pyansys.com'
  LATEST_VERSION: "252"
  MAPDL_IMAGE_VERSION_DOCS_BUILD: v24.2-ubuntu-student
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_PUBLIC_API_KEY: ${{ secrets.MEILISEARCH_PUBLIC_API_KEY }}
  PYANSYS_OFF_SCREEN: True
  DPF_START_SERVER: False
  DPF_PORT: 21004
  MAPDL_PACKAGE: ghcr.io/ansys/mapdl
  ON_CI: True
  PYTEST_ARGUMENTS: '-vvv -rxXsa --color=yes --durations=30 --random-order --random-order-bucket=class --maxfail=10 --reruns 3 --reruns-delay 4 --cov=ansys.mapdl.core --cov-report=html --timeout=180 --profile-svg --profile'

  BUILD_CHEATSHEET: True
  PYMAPDL_DEBUG_TESTING: True

  # Following env vars when changed will "reset" the mentioned cache,
  # by changing the cache file name. It is rendered as ...-v%RESET_XXX%-...
  # You should go up in number, if you go down (or repeat a previous value)
  # you might end up reusing a previous cache if it haven't been deleted already.
  # It applies 7 days retention policy by default.
  RESET_EXAMPLES_CACHE: 0
  RESET_DOC_BUILD_CACHE: 0
  RESET_AUTOSUMMARY_CACHE: 0

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: write
  packages: read
  pull-requests: write
  issues: write

jobs:

  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v8
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}


  pull-request-name:
    if: github.event_name == 'pull_request'
    name: Check the name of the pull-request
    runs-on: ubuntu-22.04
    steps:
      - name: Check pull-request name
        uses: ansys/actions/check-pr-title@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}


  doc-style:
    name: "Documentation style ${{ matrix.folder }}"
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        folder: ["doc", "examples"]
    steps:
      - name: "Ansys documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ matrix.folder }}
          vale-config: ${{ matrix.folder }}/.vale.ini
          vale-version: "3.4.1"


  smoke-tests:
    name: "${{ matrix.os }} | Py ${{ matrix.python-version }} | Rel ${{ matrix.should-release }}"
    runs-on: ${{ matrix.os }}
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']
        # Only perform wheelhouse builds for macOS when releasing
        should-release: 
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - name: "Build wheelhouse and perform smoke test"
        uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          whitelist-license-check: "attrs" # This has MIT license but fails the check

      - name: "Importing library"
        run: |
          python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: "Checking plotting support"
        run:
          python -c "from pyvista.plotting import system_supports_plotting; print('System support plotting ' + str(system_supports_plotting()))"


  check-vulnerabilities:
    name: "Check library vulnerabilities"
    runs-on: ubuntu-22.04
    steps:
      - uses: ansys/actions/check-vulnerabilities@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          python-package-name: ${{ env.PACKAGE_NAME }}
          dev-mode: ${{ github.ref != 'refs/heads/main' }}
          upload-reports: True
          hide-log: false


  docs-build:
    name: "Build documentation"
    runs-on: ubuntu-22.04
    needs: doc-style
    timeout-minutes: 60
    outputs:
      PYMAPDL_VERSION: ${{ steps.version.outputs.PYMAPDL_VERSION }}
    env:
      PYMAPDL_PORT: 21000  # default won't work on GitHub runners
      PYMAPDL_DB_PORT: 21001  # default won't work on GitHub runners
      PYMAPDL_START_INSTANCE: FALSE
      ON_DOCUMENTATION: TRUE
      GRPC_ENABLE_FORK_SUPPORT: false  # See #3434
    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2

      - name: "Login in Github container registry"
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Pull, launch, and validate MAPDL service"
        id: start_mapdl
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}
          MAPDL_VERSION: ${{ env.MAPDL_IMAGE_VERSION_DOCS_BUILD }}
          DISTRIBUTED_MODE: "dmp"
        run: |
          export INSTANCE_NAME=MAPDL_0
          .ci/start_mapdl.sh &> mapdl_launch.log & export DOCKER_PID=$!
          echo "Launching MAPDL service at PID: $DOCKER_PID"
          echo "DOCKER_PID=$(echo $DOCKER_PID)" >> $GITHUB_OUTPUT

      - name: "DPF server activation"
        run: |
          $(docker pull ghcr.io/ansys/dpf-core:22.2dev && docker run -d --name dpfserver -p ${{ env.DPF_PORT }}:50052 ghcr.io/ansys/dpf-core:22.2dev && echo "DPF Server active on port ${{ env.DPF_PORT }}.") &

      - name: "Getting files change filters"
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            workflows:
              - '.github/workflows/**'
              - 'pyproject.toml'
            examples:
              - 'examples/**'
              - 'pyproject.toml'
            documentation:
              - 'examples/**'
              - 'doc/**'
              - 'pyproject.toml'

      - name: "Setup Python with cache"
        uses: actions/setup-python@v5
        if:  steps.changes.outputs.workflows != 'true'
        with:
          cache: 'pip'
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Setup Python without cache"
        uses: actions/setup-python@v5
        if: steps.changes.outputs.workflows == 'true'
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - name: "Install OS packages"
        run: |
          sudo apt update 
          sudo apt install zip pandoc libgl1-mesa-glx xvfb texlive-latex-extra latexmk graphviz texlive-xetex texlive-fonts-extra qpdf xindy

      - name: "Test virtual framebuffer"
        run: |
          pip install -r .ci/requirements_test_xvfb.txt
          xvfb-run python .ci/display_test.py

      - name: "Install ansys-mapdl-core"
        run: |
          pip install .
          xvfb-run python -c "from ansys.mapdl import core as pymapdl; print(pymapdl.Report())"

      - name: "Retrieve PyMAPDL version"
        id: version
        run: |
          echo "PYMAPDL_VERSION=$(python -c 'from ansys.mapdl.core import __version__; print(__version__)')" >> $GITHUB_OUTPUT
          echo "PyMAPDL version is: $(python -c "from ansys.mapdl.core import __version__; print(__version__)")"

      - name: "Cache examples"
        uses: actions/cache@v4
        if: steps.changes.outputs.documentation == 'false' || (github.ref == 'refs/heads/main' && !contains(github.ref, 'refs/tags'))
        with:
          path: doc/source/examples
          key: Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            Examples-v${{ env.RESET_EXAMPLES_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: "Cache docs build directory"
        uses: actions/cache@v4
        if: steps.changes.outputs.documentation == 'false' || (github.ref == 'refs/heads/main' && !contains(github.ref, 'refs/tags'))
        with:
          path: doc/_build
          key: doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            doc-build-v${{ env.RESET_DOC_BUILD_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: "Cache autosummary"
        uses: actions/cache@v4
        if: steps.changes.outputs.documentation == 'false' || (github.ref == 'refs/heads/main' && !contains(github.ref, 'refs/tags'))
        with:
          path: doc/source/**/_autosummary/*.rst
          key: autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}-${{ github.sha }}
          restore-keys: |
            autosummary-v${{ env.RESET_AUTOSUMMARY_CACHE }}-${{ steps.version.outputs.PYMAPDL_VERSION }}

      - name: "Install docs build requirements"
        run: |
          pip uninstall ansys-sphinx-theme
          pip install .[doc]

      - name: "Waiting for the services to be up"
        run: |
          .ci/waiting_services.sh
      
      - name: Install Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          tinytex: true

      - name: Check Quarto Version
        shell: bash
        run: |
          quarto --version
      
      - name: "Install Poppler for PDF to PNG conversion"
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils

      - name: "Build documentation"
        run: |
          xvfb-run make -C doc html SPHINXOPTS="-j auto -W --keep-going"

      - name: "Substitute defective GIF"
        run: |
          .ci/substitute_defective_gif.sh

      - name: "Upload HTML Documentation"
        uses: actions/upload-artifact@v4
        with:
          name: documentation-html
          path: doc/_build/html
          retention-days: 7

      - name: "Build PDF Documentation"
        working-directory: doc
        run: make pdf

      - name: "Show latex dir"
        working-directory: doc
        run: ls _build/latex

      - name: "Upload PDF documentation"
        uses: actions/upload-artifact@v4
        with:
          name: documentation-pdf
          path: doc/_build/latex/pymapdl*.pdf
          retention-days: 7

      - name: "Upload minimal requirements file"
        # To include it in the release
        uses: actions/upload-artifact@v4
        with:
          name: minimum_requirements.txt
          path: ./minimum_requirements.txt

      - name: "Collect logs on failure"
        if: always()
        env:
          MAPDL_VERSION: ${{ env.MAPDL_IMAGE_VERSION_DOCS_BUILD }}
          MAPDL_INSTANCE: MAPDL_0
          LOG_NAMES: logs-build-docs
        run: |
          .ci/collect_mapdl_logs_remote.sh

      - name: "Upload logs to GitHub"
        if: always()
        uses: actions/upload-artifact@master
        with:
          name: logs-build-docs.tgz
          path: ./logs-build-docs.tgz

      - name: "Display files structure"
        if: always()
        env:
          MAPDL_INSTANCE: MAPDL_0
          LOG_NAMES: logs-build-docs
        run: |
          .ci/display_logs_remote.sh

  build-test-remote-matrix:
    name: "Build remote test matrix"
    runs-on: ubuntu-22.04
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2

      - name: Get event type and user to check permissions.
        id: get_user
        env:
          type_event: ${{ github.event.issue.pull_request }}
        run: |
          if [[ $type_event ]]; then
            echo "Event type: $type_event"
            echo "event_type=$( echo "$type_event" )" >> $GITHUB_OUTPUT
            export user=${{ github.event.pull_request.user.login }}
          else
            export user=${{ github.actor }}
          fi
          echo "This PR has been opened by: $user"
          echo "user=$( echo "$user" )" >> $GITHUB_OUTPUT

      - uses: tspascoal/get-user-teams-membership@v3
        id: is_organization_member
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ steps.get_user.outputs.user }}
          organization: ansys
          team: 'pymapdl-developers'
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEAMS_USER_READ }}

      - id: set-matrix
        env:
          extended_testing: ${{ github.event_name == 'schedule' || ( github.event_name == 'workflow_dispatch' && inputs.run_all_tests ) || ( github.event_name == 'push' && contains(github.ref, 'refs/tags') ) }}
          auth_user: ${{ steps.is_organization_member.outputs.isTeamMember == 'true' || github.actor == 'dependabot[bot]'  }}
          ON_REMOTE: true
        run: .ci/build_matrix.sh

  build-test-remote:
    name: "Remote: ${{ matrix.mapdl-version }}"
    runs-on: ubuntu-22.04
    needs: [smoke-tests, build-test-remote-matrix]
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-test-remote-matrix.outputs.matrix) }}

    env:
      PYMAPDL_PORT: 21000  # default won't work on GitHub runners
      PYMAPDL_PORT2: 21001  # for the pool testing and default won't work on GitHub runners
      PYMAPDL_DB_PORT: 21002  # default won't work on GitHub runners
      PYMAPDL_DB_PORT2: 21003  # default won't work on GitHub runners
      PYMAPDL_START_INSTANCE: FALSE
      ON_LOCAL: FALSE
      ON_UBUNTU: FALSE
      # BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2

      - name: Run Pytest for ${{ matrix.mapdl-version }} on remote mode
        uses: ./.github/actions/test_remote
        with:
          mapdl-version: ${{ matrix.mapdl-version }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          codecov_token: ${{ secrets.CODECOV_TOKEN }}
          license_server: ${{ secrets.LICENSE_SERVER }}

  build-test-local-minimal-matrix:
    name: "Build test matrix for minimal and local"
    runs-on: ubuntu-22.04
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2

      - uses: tspascoal/get-user-teams-membership@v3
        id: is_organization_member
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ github.actor }}
          organization: ansys
          team: 'pymapdl-developers'
          GITHUB_TOKEN: ${{ secrets.TOKEN_TEAMS_USER_READ }}

      - id: set-matrix
        env:
          ONLY_UBUNTU: true
          LIMIT_VERSIONS: 2
          ON_SCHEDULE: ${{ github.event_name == 'schedule' }}
          ON_WORKFLOW_DISPATCH: ${{ github.event_name == 'workflow_dispatch' }}
          RUN_ALL_TEST: ${{ inputs.run_all_tests }}
          ON_PUSH: ${{ github.event_name == 'push' }}
          HAS_TAG: ${{ contains(github.ref, 'refs/tags') }}
          auth_user: ${{ steps.is_organization_member.outputs.isTeamMember == 'true' || github.actor == 'dependabot[bot]'  }}
        run: .ci/build_matrix.sh

  build-test-ubuntu-local:
    name: "Local: ${{ matrix.mapdl-version }}"
    runs-on: ubuntu-22.04
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [smoke-tests, build-test-local-minimal-matrix]
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.build-test-local-minimal-matrix.outputs.matrix)}}

    container:
      image: ghcr.io/ansys/mapdl:${{ matrix.mapdl-version }}
      options: -u=0:0 --oom-kill-disable --memory=6656MB --memory-swap=16896MB --shm-size=1gb --entrypoint /bin/bash
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      ON_LOCAL: true
      ON_UBUNTU: true
      P_SCHEMA: "/ansys_inc/v241/ansys/ac4/schema"
      PYTEST_TIMEOUT: 120 # seconds. Limit the duration for each unit test

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: "Run pytest on local"
        uses: ./.github/actions/test-local
        with:
          mapdl-version: ${{ matrix.mapdl-version }}
          minimal: false
          license_server: ${{ secrets.LICENSE_SERVER }}
          pytest-arguments: '-k "not test_dpf" --reset_only_failed  --add_missing_images'
          file-name: "${{ matrix.mapdl-version }}-local"
          tags: "local"
          codecov_token: ${{ secrets.CODECOV_TOKEN }}

  build-test-ubuntu-minimal:
    name: "Local-min: ${{ matrix.mapdl-version }}"
    runs-on: ubuntu-22.04
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [build-test-ubuntu-local, build-test-remote]
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        mapdl-version: ['latest-ubuntu', 'v25.1-ubuntu']
    container:
      image: ghcr.io/ansys/mapdl:${{ matrix.mapdl-version }}
      options: -u=0:0 --oom-kill-disable --memory=6656MB --memory-swap=16896MB --shm-size=1gb --entrypoint /bin/bash
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      ON_LOCAL: true
      ON_UBUNTU: true
      TESTING_MINIMAL: true

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: "Run Pytest for ${{ matrix.mapdl-version }} on local mode using minimal configuration"
        uses: ./.github/actions/test-local
        with:
          mapdl-version: ${{ matrix.mapdl-version }}
          minimal: true
          license_server: ${{ secrets.LICENSE_SERVER }}
          pytest-arguments: '-k "not test_dpf"'
          file-name: "${{ matrix.mapdl-version }}-minimal"
          tags: "local,minimal"
          codecov_token: ${{ secrets.CODECOV_TOKEN }}

  build-test-ubuntu-console:
    name: "Local-min-console: ${{ matrix.mapdl-version }}"
    runs-on: ubuntu-22.04
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: [build-test-ubuntu-local, build-test-remote]
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        mapdl-version: ['latest-ubuntu', 'v25.1-ubuntu']
    container:
      image: ghcr.io/ansys/mapdl:${{ matrix.mapdl-version }}
      options: -u=0:0 --oom-kill-disable --memory=6656MB --memory-swap=16896MB --shm-size=1gb --entrypoint /bin/bash
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    env:
      ON_LOCAL: true
      ON_UBUNTU: true
      TESTING_MINIMAL: true
      ON_CONSOLE: true

    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: "Run Pytest for ${{ matrix.mapdl-version }} on local mode using console configuration"
        uses: ./.github/actions/test-local
        with:
          mapdl-version: ${{ matrix.mapdl-version }}
          minimal: true
          license_server: ${{ secrets.LICENSE_SERVER }}
          pytest-arguments: '-k console'
          file-name: "${{ matrix.mapdl-version }}-minimal-console"
          tags: "local,minimal,console"
          codecov_token: ${{ secrets.CODECOV_TOKEN }}
          
  test-windows:
    # Skipped
    if: github.repository == ''
    name: "Local: Build & test on Windows"
    runs-on: [self-hosted, Windows, pymapdl]
    timeout-minutes: 30
    env:
      ON_LOCAL: TRUE

    steps:
      - uses: actions/checkout@v4.2.2

      - uses: ./.github/actions/test_windows
        with:
          codecov_token: ${{ secrets.CODECOV_TOKEN }}


  package:
    name: "Package library"
    needs: [build-test-remote, build-test-ubuntu-local, build-test-ubuntu-minimal, docs-build]
    runs-on: ubuntu-22.04
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}


  release:
    name: "Release project"
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    needs: [package, update-changelog]
    runs-on: ubuntu-22.04
    # Specifying a GitHub environment is optional, but strongly encouraged
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v8
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          use-trusted-publisher: true

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v8
        with:
          library-name: ${{ env.PACKAGE_NAME }}
          additional-artifacts: "minimum_requirements.txt"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Display structure of downloaded files"
        run: ls -Rla


  upload-docs-release:
    name: "Upload release documentation"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs: [release]
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          render-last: '5'
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}


  upload-dev-docs:
    name: "Upload dev documentation"
    if: github.ref == 'refs/heads/main' && !contains(github.ref, 'refs/tags')
    runs-on: ubuntu-22.04
    needs: [docs-build]
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}


  notify:
    name: "Notify failed build"
    needs: [smoke-tests, docs-build, build-test-remote, build-test-ubuntu-local, build-test-ubuntu-minimal]
    if: failure() && github.event_name == 'schedule'
    runs-on: ubuntu-22.04
    steps:
      - name: "Open issue"
        uses: jayqi/failed-build-issue-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          title-template: "Failed scheduled build"
          label-name: "Build failed"


  test_julia:
    name: "Julia ${{ matrix.julia-version }} | ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    if: github.ref != 'refs/heads/main' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        julia-version: ['1.10.3', '1.10.4']
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4.2.2
      - name: "Set up Julia"
        uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}

      - name: "Getting python interpreter"
        id: get_python
        run: |
          pycallpython=$(julia -e 'using Pkg;Pkg.add("PyCall");using PyCall;println(PyCall.python)')
          echo "pythonpath=$(echo $pycallpython)" >> $GITHUB_OUTPUT

      - name: "Installing PyMAPDL"
        env:
          PYTHON_PATH: ${{ steps.get_python.outputs.pythonpath }}
        run: |
          "$PYTHON_PATH" -m pip install -e .

      - name: "Starting Julia"
        shell: julia {0}
        run: |
          using Pkg; Pkg.add("PyCall");using PyCall;pymapdl = pyimport("ansys.mapdl.core");print(pymapdl.__version__)

  pytest-summary:
    name: Pytest summary for all the test jobs
    needs: [
      build-test-remote, build-test-ubuntu-local, build-test-ubuntu-minimal, build-test-ubuntu-console
      ]
    if: always()
    runs-on: ubuntu-22.04          
    steps:
      - name: "Install Git and checkout project"
        uses: actions/checkout@v4.2.2

      - name: "Run Pytest-summary action"
        uses: ./.github/actions/pytest-summary