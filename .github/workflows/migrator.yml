# .github/workflows/recreate-pr.yml
name: Fork PR Handler

on:
  issue_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: number
      
      is_sync:
        description: 'Is sync'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

jobs:
  migrate:
    if: |
       (
        github.event.issue.pull_request != null &&
        (contains(github.event.comment.body, '@pyansys-ci-bot migrate') || contains(github.event.comment.body, '@pyansys-ci-bot sync') )&&
        github.event.comment.user.login == 'germa89' 
        ) || ( github.event_name == 'workflow_dispatch' )
    runs-on: ubuntu-latest
    steps:
      - name: React to comment
        if : ${{ github.event_name == 'issue_comment' }}
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          commentId: ${{ github.event.comment.id }}
          reaction: "rocket"

      - name: Determine PR Number
        id: pr_number
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "PR_NUMBER=${{ github.event.inputs.issue_number }}" >> $GITHUB_ENV
          else
            echo "PR_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          fi

      - name: Get PR details
        id: pr
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/pulls/${{ env.PR_NUMBER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse PR data
        id: extract
        run: |
          echo "PR_NUMBER=${{ env.PR_NUMBER }}" >> $GITHUB_ENV

          PR_HEAD_BRANCH="${{ fromJson(steps.pr.outputs.data).head.ref }}"
          echo "PR_HEAD_BRANCH=$PR_HEAD_BRANCH" >> $GITHUB_ENV

          PR_HEAD_REPO="${{ fromJson(steps.pr.outputs.data).head.repo.full_name }}"
          echo "PR_HEAD_REPO=$PR_HEAD_REPO" >> $GITHUB_ENV

          PR_BASE_BRANCH="migrated/pr-${{ env.PR_NUMBER }}"
          echo "PR_BASE_BRANCH=$PR_BASE_BRANCH" >> $GITHUB_ENV
          PR_BASE_REPO="${{ github.repository }}"
          echo "PR_BASE_REPO=$PR_BASE_REPO" >> $GITHUB_ENV

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Clone head repo and checkout branch
        env:
          GITHUB_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
        run: |
          git config --global user.name "${{ secrets.PYANSYS_CI_BOT_USERNAME }}"
          git config --global user.email "${{ secrets.PYANSYS_CI_BOT_EMAIL}}"

          echo "Adding ${{ env.PR_HEAD_REPO }} as remote"
          git remote add head_repo https://x-access-token:${{ secrets.PYANSYS_CI_BOT_TOKEN }}@github.com/${{ env.PR_HEAD_REPO }}.git || echo "Failed to add remote"
          
          echo "Fetching '${{ env.PR_HEAD_BRANCH }}' branch from '${{ env.PR_HEAD_REPO }}'"
          git fetch head_repo ${{ env.PR_HEAD_BRANCH }} || echo "Failed to fetch branch"

          echo "Checking out '${{ env.PR_BASE_BRANCH }}' branch from '${{ env.PR_HEAD_REPO }}/${{ env.PR_HEAD_BRANCH }}'"
          git checkout -b ${{ env.PR_BASE_BRANCH }} head_repo/${{ env.PR_HEAD_BRANCH }} || echo "Failed to checkout branch"
          
          echo "Pushing changes to '${{ env.PR_BASE_REPO }}' repo"
          git push origin ${{ env.PR_BASE_BRANCH }} || echo "Failed to push changes"

          echo "Migration process completed successfully."  # Added success message

      # - name: Make dummy change (simulate migration step)
      #   run: |
      #     echo "# Migration sync marker for PR ${PR_NUMBER}" >> .migration_log.md || true

      # - name: Commit changes if any
      #   id: commit
      #   run: |
      #     git add .
      #     if git diff --cached --quiet; then
      #       echo "No changes to sync"
      #       echo "NO_CHANGES=true" >> $GITHUB_ENV
      #     else
      #       git commit -m "Sync changes from PR #${PR_NUMBER}"
      #       echo "NO_CHANGES=false" >> $GITHUB_ENV
      #     fi

      # - name: Push new branch if changes exist
      #   if: env.NO_CHANGES == 'false'
      #   run: |
      #     git push head_repo migrated-pr-${PR_NUMBER}

      # - name: Output status
      #   run: |
      #     if [ "$NO_CHANGES" == "true" ]; then
      #       echo "âœ… No new changes to sync from PR #${PR_NUMBER}."
      #     else
      #       echo "ðŸš€ Branch migrated-pr-${PR_NUMBER} pushed with synced changes."
      #     fi

      # - name: "Configuration"
      #   id: config
      #   run: |
      #     if [[ ${{ github.event_name }} == "workflow_dispatch" ]] ; then
      #       echo "On workflow dispatch"
      #       echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
      #       echo "user=${{ github.actor }}" >> $GITHUB_OUTPUT
      #       echo "is_sync=${{ inputs.is_sync }}" >> $GITHUB_OUTPUT

      #     else
      #       echo "On ${{ github.event_name }}"
      #       echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
      #       echo "user=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT
      #       echo "is_sync=${{ contains(github.event.comment.body, '@pyansys-ci-bot sync') }}" >> $GITHUB_OUTPUT
      #     fi;

      #     # echo "Setting up git"
      #     git config --global user.name "${{ secrets.PYANSYS_CI_BOT_USERNAME }}"
      #     git config --global user.email "${{ secrets.PYANSYS_CI_BOT_EMAIL}}"


      # - name: Checkout PR source branch
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ steps.config.outputs.issue_number }}
      #     fetch-depth: 0  # Needed to push branches

      # - name: Get PR details
      #   id: pr2
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: GET /repos/${{ github.repository }}/pulls/${{ steps.config.outputs.issue_number }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Parse PR data
      #   id: extract
      #   run: |
      #     echo "PR_NUMBER=${{ steps.config.outputs.issue_number }}" >> $GITHUB_ENV

      #     PR_HEAD_BRANCH=$(${{ steps.pr.outputs.data }} | jq -r '.data.head.ref')
      #     echo "PR_HEAD_BRANCH=$PR_HEAD_BRANCH" >> $GITHUB_ENV

      #     PR_HEAD_REPO=$(${{ steps.pr.outputs.data }} | jq -r '.data.head.repo.full_name')
      #     echo "PR_HEAD_REPO=$PR_HEAD_REPO" >> $GITHUB_ENV

      # - name: Check out the branch
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
      #   run: |
      #     echo "Checking out the PR"
      #     # git remote add fork 
      #     gh pr checkout ${{ steps.config.outputs.issue_number }}

      # - name: Migrate PR
      #   id: logic
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
      #   run: |
      #     NEW_BRANCH=migrated/pr-${{ steps.config.outputs.issue_number }}
      #     CURRENT_BRANCH=$(git branch --show-current)

      #     title=""
      #     body=""

      #     echo "Adding new remote"
      #     git remote add pymapdl https://x-access-token:${{ secrets.PYANSYS_CI_BOT_TOKEN }}@github.com/${{ github.repository }}.git

      #     if [[ ${{ steps.config.outputs.is_sync }} == 'true' ]]; then
      #       echo "Syncing with the PR"

      #       if git ls-remote --exit-code --heads pymapdl refs/heads/$NEW_BRANCH; then
      #         echo "Branch '$NEW_BRANCH' already exists on remote 'pymapdl'."

      #         title="Branch synced!"
      #         body="The branch '$NEW_BRANCH' has been synced with '$CURRENT_BRANCH' using 'git merge'."

      #         git remote -v

      #         git fetch origin 
      #         git checkout $NEW_BRANCH
      #         git merge origin/$CURRENT_BRANCH
      #         echo "Merge completed successfully."

      #       else
      #         echo "Branch '$NEW_BRANCH' does not exist on remote 'pymapdl'."
      #         title="Branch not found!"
      #         body="The branch '$NEW_BRANCH' does not exist. Use the `migrate` command to create it. "
      #       fi

      #     else
      #       echo "Migrating the PR"

      #       if git ls-remote --exit-code --heads pymapdl refs/heads/$NEW_BRANCH; then
      #         echo "Branch '$NEW_BRANCH' already exists on remote 'pymapdl'."

      #         body="The branch '$NEW_BRANCH' already exists on the remote. "

      #       else
      #         echo "Branch '$NEW_BRANCH' does not exist. Safe to push."

      #         body="The branch '$NEW_BRANCH' have been created on the remote. "

      #         git push pymapdl HEAD:refs/heads/$NEW_BRANCH
      #       fi

      #       PR_NUMBER=$(gh pr list --head $NEW_BRANCH --state open --json number --jq '.[0].number')
      #       if [[ -n "$PR_NUMBER" ]]; then
      #         echo "Open PR exists for branch '$NEW_BRANCH': PR #$PR_NUMBER"

      #         title="PR already exists!"
      #         body="$body There is already a pull request #$PR_NUMBER on that branch on the remote." # Use `sync` command to sync with that PR.

      #       else
      #         echo "No open PR exists for branch '$NEW_BRANCH'. Creating PR..."
      #         title_pr='chore: migrated PR ${{ steps.config.outputs.issue_number }}'
      #         echo -e "\nThis PR was migrated from a fork to allow secrets to run in workflows. Check the [original PR](https://github.com/${{ github.repository }}/pull/${{ steps.config.outputs.issue_number }}) for more details.\n\nCloses #${{ steps.config.outputs.issue_number }}" > body_pr

      #         NEW_PR=$(gh pr create --head $NEW_BRANCH --reviewer ${{ steps.config.outputs.user }} --title "$title_pr" --body-file body_pr | grep -o 'github\.com/.*/pull/[0-9]*' | sed -E 's#.*/pull/##')
      #         echo "PR created: $NEW_PR"

      #         title="New PR opened!"
      #         body="$body The PR [#$NEW_PR](https://github.com/${{ github.repository }}/pull/${{ env.NEW_PR }}) has been opened."
      #       fi

      #     fi

      #     echo "title=$title" >> $GITHUB_OUTPUT
      #     echo "body=$body" >> $GITHUB_OUTPUT

      # - name: Create comment
      #   uses: peter-evans/create-or-update-comment@v4
      #   with:
      #     issue-number: ${{ steps.config.outputs.issue_number }}
      #     body: |
      #       **${{ steps.logic.outputs.title }}**

      #       ${{ steps.logic.outputs.body }}

      #     token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}