"""Script generated by ansys-mapdl-core version 0.59.0"""
"""
===========================================================================
Objective:
The objective of this test is to demonstrate CFX pressure data mapping to
structural 11 blade model in PyMAPDL.

Description:
The 11 blade model along with a fictitious disk is modeled. CFX generated
pressure data is used as input.

The test uses a CFX exported pressure data to map. Pressure file
correspond to a certain vibrating blade mode (vibrating mode 1
approximately 534 Hz)and to a certain pressure mode (pressure mode 1
also the same 534 Hz mode). However, due to lack of data for another
mode this same file will be assumed to represent other mode
combinations (vib mode 2 press mode 2) (vib mode 1 press mode 2)
(vib mode 2 press mode 1).
===========================================================================
"""

from datetime import datetime
import os

from ansys.mapdl.core import launch_mapdl

mapdl = launch_mapdl(loglevel="WARNING")
mapdl.title(
    "Verify Pressure Data Mapping exported from CFX on Structural 11 Blade Model"
)
input_dir = "Struct_CFX_Map"


def my_mapdl_launch_in_cwd(my_wdirnew, my_job_name):
    """create a new working directory beside the py file"""
    path = os.getcwd()
    new_wdir_path = os.path.join(path, my_wdirnew)
    print(new_wdir_path)
    try:
        os.mkdir(new_wdir_path)
    except:
        pass
    exec_file_222 = os.path.join(
        os.getenv("ANSYS222_DIR"), "bin", "winx64", "ansys222.exe"
    )
    mapdl = launch_mapdl(
        run_location=new_wdir_path,
        jobname=my_job_name,
        nproc=4,
        override=True,
        exec_file=exec_file_222,
    )
    return mapdl, new_wdir_path


def aero_blade_cfx_pres_mapping(mapdl):
    """Function to Map CFX Pressure Data to Structural Blade"""
    mapdl.run("/filname,ExampleMapping")
    mapdl.run("/cwd,input_dir")

    mapdl.resume("ExampleMapping", "db")
    mapdl.esel("s", "type", "", 1)
    mapdl.cm("BladeElem", "elem")
    mapdl.run("allse,all,all")
    mapdl.cdwrite("all", "baseModel", "cdb")
    mapdl.finish()

    start_time = datetime.now()
    mapdl.slashmap()  # mapdl.slashmap(**kwargs); Enters the mapping processor.
    print("Enter the Mapping Processor")

    mapdl.run(
        "target,pressure_faces"
    )  # Specifies the target nodes for mapping pressures onto surface effect elements.
    mapdl.ftype(
        filetype="cfxtbr", prestype="1"
    )  # Specifies the file type and pressure type for the
    #   subsequent import of source points and pressures.
    mapdl.read(
        fname="11_blades_mode_1_ND_0.csv"
    )  # Read CFX exported file (*.csv file) Blade 2, Export Surface 1
    # ngen,2,0,all,,, 0,360*3/22
    # Compatible with blade 1
    print(
        mapdl.map(kdim="2", kout="1")
    )  # Maps pressures from source points to target surface elements.
    # Interpolation is done on a surface (default).
    mapdl.run("/show,png,rev")
    mapdl.plgeom(item="BOTH")  # Plot both target and source geometries (default).
    mapdl.plmap(item="target")
    mapdl.plmap(item="target", imagkey="1")
    mapdl.plmap(item="source")
    mapdl.plmap(item="source", imagkey="1")
    mapdl.plmap(item="both")
    mapdl.plmap(item="both", imagkey="1")

    mapdl.run("/show,close")
    mapdl.writemap("mappedHI.dat")

    print("Mapping Completed")
    end_time = datetime.now()
    c = end_time - start_time
    seconds = c.total_seconds()
    print("\n" + "Duration in seconds for Mapping is  : ", seconds)
    out = mapdl.finish()
    return


mapdl, my_wdirnow = my_mapdl_launch_in_cwd(input_dir, "Struct_CFX_Mapping")
print(mapdl)
out = aero_blade_cfx_pres_mapping(mapdl)
mapdl.exit()
