"""Pythonic MAPDL Commands"""
import os
import warnings
import re

from .plotting import general_plotter
from typing import Optional, Union
from ansys.mapdl.core.mapdl_types import *
from ansys.mapdl.core.misc import supress_logging




class _MapdlCommands():  # pragma: no cover
    """ANSYS class containing MAPDl functions."""

    def mforder(self, fnumb1="", fnumb2="", fnumb3="", fnumb4="", fnumb5="",
                fnumb6="", fnumb7="", fnumb8="", fnumb9="", fnumb10="",
                fnumb11="", fnumb12="", fnumb13="", fnumb14="", fnumb15="",
                fnumb16="", fnumb17="", fnumb18="", fnumb19="", fnumb20="",
                **kwargs):
        """APDL Command: MFORDER

        Specifies field solution order for an ANSYS Multi-field solver
        analysis.

        Parameters
        ----------
        fnumb1, fnumb2, fnumb3, . . . , fnumb20
            Field numbers defined by the MFELEM command.

        Notes
        -----
        You can define up to twenty fields in an ANSYS Multi-field solver
        analysis.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFORDER,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(fnumb1), str(fnumb2), str(fnumb3), str(fnumb4), str(fnumb5), str(fnumb6), str(fnumb7), str(fnumb8), str(fnumb9), str(fnumb10), str(fnumb11), str(fnumb12), str(fnumb13), str(fnumb14), str(fnumb15), str(fnumb16), str(fnumb17), str(fnumb18), str(fnumb19), str(fnumb20))
        return self.run(command, **kwargs)

    def pdshis(self, rlab="", name="", type_="", conf="", **kwargs):
        """APDL Command: PDSHIS

        Plots the sample history values.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command, or the response surface set label
            defined in an RSFIT command.

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable or a random output parameter using the
            PDVAR command.

        type\_
            Keyword to identify which type of data is to be plotted:

            SAMP - Sampled values (default).

            MEAN - Mean values for results based on Monte Carlo simulation methods only.

            STDV - Standard deviations for results based on Monte Carlo simulation methods only.

            MIN - Minimum values for results based on Monte Carlo simulation methods only.

            MAX - Maximum values for results based on Monte Carlo simulation methods only.

        conf
            Confidence level. The confidence level is used to plot confidence
            bounds for the history value. The value for the confidence level
            must be between 0.0 and 1.0 and it defaults to 0.95 (95%).
            Confidence bound(s) plotting is suppressed for CONF  0.5. This
            option is ignored for Type = SAMP (no confidence bounds are
            plotted).

        Notes
        -----
        Plots the sample history values as a function of the number of
        simulation loops.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        The confidence level is a probability expressing the confidence that
        the value for the requested probability is in fact between the
        confidence bounds. The larger the confidence level, the wider the
        confidence bounds. For Type = MEAN and Type = STDV, lower and upper
        confidence curves are plotted. For Type = MEAN, the mean value curve
        starts at the first simulation and the confidence bounds start with
        simulation number 2. For Type = MIN only the upper confidence bound is
        shown (the interpretation is that by a certain probability the true
        minimum value is below this curve). This probability (or confidence) is
        set using CONF. Likewise, for Type = MAX, only the lower confidence
        bound is shown. For all Type options, confidence curves are plotted
        starting with the simulation at which enough data is available to
        calculate the bounds. However, for scaling reasons, no confidence
        bounds are plotted for simulation numbers 1 to 5 even if they might be
        available.
        """
        command = "PDSHIS,%s,%s,%s,%s" % (str(rlab), str(name), str(type_), str(conf))
        return self.run(command, **kwargs)

    def pras(self, quantity="", loadstep="", substep="", **kwargs):
        """APDL Command: PRAS

        Calculates a specified acoustic quantity on the selected exterior
        surface or the frequency-band sound pressure level (SPL).

        Parameters
        ----------
        quantity
            The acoustic quantity to calculate:

            SIMP - Specific acoustic impedance on the selected surface.

            AIMP  - Acoustic impedance on the selected surface.

            MIMP  - Mechanical impedance on the selected surface.

            PRES  - Average pressure on the selected surface.

            FORC  - Force on the selected surface.

            POWE  - Acoustic power on the selected surface.

            BSPL  - Frequency-band sound pressure level.

            BSPA  - A-weighted frequency-band sound pressure level.

        loadstep
            Specified load step. Default = 1.

        substep
            Specified substep. Default = All substeps at the specified load
            step. Not valid for Quantity = BSPL or BSPA.

        Notes
        -----
        The PRAS command calculates a specified acoustic quantity on the
        selected exterior surface in postprocessing. The calculation is based
        on the pressure and velocity solution or the frequency-band sound
        pressure level (SPL).

        The total pressure and velocity are used if the selected surface is the
        excitation source surface. To calculate the incoming and outgoing
        acoustic power, and other sound power parameters, on the excitation
        source surface, issue the SF,,PORT and SPOWER commands.

        The sound pressure level of the octave bands and general frequency band
        (defined via the HARFRQ command) is calculated at the selected nodes in
        the model.
        """
        command = "PRAS,%s,%s,%s" % (str(quantity), str(loadstep), str(substep))
        return self.run(command, **kwargs)

    
    def sfcalc(self, labr="", labs="", labt="", type_="", **kwargs):
        """APDL Command: SFCALC

        Calculates the safety factor or margin of safety.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        labs
            Labeled result item corresponding to the element stress.

        labt
            Labeled result item corresponding to the element temperature.

        type\_
            Type of calculation:

            0 or 1 - Use safety factor (SF) calculation.

            2 - Use margin of safety (MS) calculation.

            3 - Use 1/SF calculation.

        Notes
        -----
        Calculates safety factor (SF) or margin of safety (MS) as described for
        the SFACT command for any labeled result item (see ETABLE command) for
        the selected elements.  Use the PRETAB or PLETAB command to display
        results.  Allowable element stress is determined from the SALLOW-TALLOW
        table [SALLOW, TALLOW].
        """
        command = "SFCALC,%s,%s,%s,%s" % (str(labr), str(labs), str(labt), str(type_))
        return self.run(command, **kwargs)

    
    def f(self, node="", lab="", value="", value2="", nend="", ninc="",
          **kwargs):
        """APDL Command: F

        Specifies force loads at nodes.

        Parameters
        ----------
        node
            Node at which force is to be specified.  If ALL, NEND and NINC are
            ignored and forces are applied to all selected nodes [NSEL]. If
            NODE = P, graphical picking is enabled and all remaining command
            fields are ignored (valid only in the GUI).  A component name may
            also be substituted for NODE.

        lab
            Valid force label.  Structural labels:  FX, FY, or FZ (forces); MX,
            MY, or MZ (moments).  Thermal labels:  HEAT, HBOT, HE2, HE3, . . .,
            HTOP (heat flow).  Fluid labels:  FLOW (fluid flow).   Electric
            labels:  AMPS (current flow), CHRG (electric charge).  Magnetic
            labels:  FLUX (magnetic flux);  CSGX, CSGY, or CSGZ (magnetic
            current segments).  Diffusion labels: RATE (diffusion flow rate).

        value
            Force value or table name reference for specifying tabular boundary
            conditions.  To specify a table, enclose the table name in percent
            signs (%), e.g., F, NODE,HEAT,%tabname%).  Use the *DIM command to
            define a table.

        value2
            Second force value (if any).  If the analysis type and the force
            allow a complex input, VALUE (above) is the real component and
            VALUE2 is the imaginary component.

        nend, ninc
            Specifies the same values of force at the nodes ranging from NODE
            to NEND (defaults to NODE), in steps of NINC (defaults to 1).

        Notes
        -----
        The available force loads per node correspond to the degrees of freedom
        listed under "Degrees of Freedom" in the input table for each element
        type in the Element Reference.  If both a force and a constrained
        degree of freedom [D] are specified at the same node, the constraint
        takes precedence.  Forces are defined in the nodal coordinate system.
        The positive directions of structural forces and moments are along and
        about the positive nodal axis directions.  The node and the degree of
        freedom label corresponding to the force must be selected [NSEL,
        DOFSEL].

        For hydrostatic fluid elements (HSFLD241 and HSFLD242), DVOL is used to
        specify fluid mass flow rate (with units of mass/time) at the pressure
        node. This allows fluid to be added or taken out of the fluid elements
        sharing the pressure node. A fluid density must also be specified (via
        the MP command or TB command) to apply a volume change corresponding to
        the prescribed fluid mass flow rate.

        Tabular boundary conditions (VALUE = %tabname%) are available only for
        the following labels: Fluid (FLOW), Electric (AMPS), Structural force
        (FX, FY, FZ, MX, MY, MZ), and Thermal (HEAT, HBOT, HE2, HE3, . . .,
        HTOP). Tabular boundary conditions are valid only in static
        (ANTYPE,STATIC), full transient (ANTYPE,TRANS), full harmonic (ANTYPE,
        HARMIC), modal superposition harmonic and modal superposition transient
        analyses.

        This command is also valid in PREP7.
        """
        command = "F,%s,%s,%s,%s,%s,%s" % (str(node), str(lab), str(value), str(value2), str(nend), str(ninc))
        return self.run(command, **kwargs)

    def bfadele(self, area="", lab="", **kwargs):
        """APDL Command: BFADELE

        Deletes body force loads on an area.

        Parameters
        ----------
        area
            Area at which body load is to be deleted.  If ALL, delete for all
            selected areas [ASEL]. A component name may also be substituted for
            AREA.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFA command for
            labels.

        Notes
        -----
        Deletes body force loads (and all corresponding finite element loads)
        for a specified area and label.  Body loads may be defined on an area
        with the BFA command.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFADELE,%s,%s" % (str(area), str(lab))
        return self.run(command, **kwargs)

    
    
    
    
    
    def mfdtime(self, dtime="", dtmin="", dtmax="", carry="", **kwargs):
        """APDL Command: MFDTIME

        Sets time step sizes for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        dtime
            Multi-field time step size.  If automatic time stepping is being
            used [see Notes below], DTIME is the starting time step.

        dtmin
            Minimum time step. Defaults to DTIME.

        dtmax
            Maximum time step. Defaults to DTIME.

        carry
            Time step carryover key.

            OFF  - Use DTIME as the starting time step for the next restart run (default).

            ON  - Use the final time step from the previous run as the starting time step for the
                  next restart run.

        Notes
        -----
        This command specifies time step sizes for an ANSYS Multi-field solver
        analysis. If either DTMIN or DTMAX is not equal to DTIME, auto time-
        stepping is turned on for the multi-field loop. ANSYS will
        automatically adjust the time step size for the next multi-field step
        between DTMIN and DTMAX, based on the status of the current
        convergence, the number of target stagger iterations (specified by
        MFITER), and the actual number of iterations needed to reach
        convergence at the current time step.

        If auto time-stepping is turned off, the time step size must be evenly
        divisible into the end time (specified by MFTIME) minus the start time
        (0 for a new analysis or a restart time specified by MFRSTART).

        You can use a smaller time step within each ANSYS field analysis. This
        is called subcycling. Use the DELTIM and AUTOTS commands to subcycle a
        structural, thermal, or electromagnetic analysis.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFDTIME,%s,%s,%s,%s" % (str(dtime), str(dtmin), str(dtmax), str(carry))
        return self.run(command, **kwargs)

    def ocread(self, fname="", ext="", option="", **kwargs):
        """APDL Command: OCREAD

        Reads externally defined ocean data.

        Parameters
        ----------
        fname
            External ocean data file name (excluding the filename extension)
            and directory path containing the file. For more information, see
            the Notes section.

        ext
            Filename extension (limited to eight characters).

        --
            Reserved field.

        option
            Integer value passed to the userOceanRead subroutine (as iOption)
            for user-defined waves. This value does not apply to the diffracted
            wave type.

        Notes
        -----
        The OCREAD command imports ocean data that has been defined externally
        (for example, via the Hydrodynamic Diffraction System (AQWA)).

        The command operates on the ocean load ID specified via the most
        recently issued OCTYPE command. Issue a separate OCREAD command for
        each ocean load that you want to read into the program.

        Fname is limited to 248 characters, including the directory path. If
        Fname does not include a directory path, the program searches for the
        specified file in the current working directory. An unspecified Fname
        defaults to Jobname.

        For the diffracted wave type (KWAVE = 8 on the OCDATA command), you
        must issue an OCREAD command for the ocean wave ID in order to import
        the hydrodynamic data from the hydrodynamic analysis.

        For more information, see Applying Ocean Loading from a Hydrodynamic
        Analysis in the Advanced Analysis Guide.

        To learn more about creating user-defined waves, see Subroutine
        userPanelHydFor (Calculating Panel Loads Caused by Ocean Loading) in
        the Programmer's Reference.

        This command is also valid in PREP7.
        """
        command = "OCREAD,%s,%s,%s" % (str(fname), str(ext), str(option))
        return self.run(command, **kwargs)

    def anim(self, ncycl="", kcycl="", delay="", **kwargs):
        """APDL Command: ANIM

        Displays animated graphics data for linear problems.

        Parameters
        ----------
        ncycl
            Number of cycles associated with the animation (defaults to 5 in
            non-GUI mode only)

        kcycl
            Animation mode:

            0 - Continuous animation cycle (forward-reverse-forward-etc.) (default).

            1 - Discontinuous animation cycle (forward-reset-forward-etc.).

        delay
            Time delay (seconds) between animation frames (defaults to 0.1
            seconds).

        Notes
        -----
        Use the ANIM command to create animations for linear problems only. The
        command uses the currently displayed picture based on one particular
        data set from the results file, and linearly interpolates that data
        into different sets, displaying pictures of each interpolated data set
        in sequence to create animation.  For information about creating
        animations for nonlinear problems, see the ANDATA command.

        This command is device-dependent.

        Do not resize the graphic while animation is in progress; doing so can
        result in distorted plots.

        For more information, see the /SEG command for details about segment
        storage, and the ANCNTR macro for a convenient method of storing
        graphics frames in terminal memory segments.

        This command is valid in any processor.
        """
        command = "ANIM,%s,%s,%s" % (str(ncycl), str(kcycl), str(delay))
        return self.run(command, **kwargs)

    def lcsum(self, lab="", **kwargs):
        """APDL Command: LCSUM

        Specifies whether to process non-summable items in load case
        operations.

        Parameters
        ----------
        lab
            Combination option

            (blank) - Only combine summable items [default].

            ALL - Combine all items including non summable items.

        Notes
        -----
        Allows non-summable items (e.g. plastic strains) to be included in load
        combinations.  Issue LCSUM,ALL before the first load case operation
        (LCXX command).  May also be used to include nonsummable items in the
        appending of a results file (RAPPND command).
        """
        command = "LCSUM,%s" % (str(lab))
        return self.run(command, **kwargs)

    def bfalist(self, area="", lab="", **kwargs):
        """APDL Command: BFALIST

        Lists the body force loads on an area.

        Parameters
        ----------
        area
            Area at which body load is to be listed.  If ALL (or blank), list
            for all selected areas [ASEL].  If AREA = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for AREA.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFA command for
            labels.

        Notes
        -----
        Lists the body force loads for the specified area and label.  Body
        loads may be defined on an area with the BFA command.

        This command is valid in any processor.
        """
        command = "BFALIST,%s,%s" % (str(area), str(lab))
        return self.run(command, **kwargs)

    
    def norl(self, line="", area="", ndir="", **kwargs):
        """APDL Command: NORL

        Rotates nodal coordinate systems perpendicular to line normal

        Parameters
        ----------
        line
            Line number containing the nodes to be rotated. If ALL, applies to
            all selected lines (see the LSEL command). If LINE = P, graphical
            picking is enabled.

        area
            The area number containing the selected lines. The normal of the
            line(s) selected is supposed to lie on this area. Defaults to the
            lowest numbered selected area containing the line number.

        ndir
            Direction of the normal. If NDIR = -1, the nodal coordinate system
            is rotated in the opposite direction of the line normal. The
            default is the same direction as the surface normal.

        Notes
        -----
        The NORL command rotates the X-axis of the nodal coordinate
        perpendicular to the line normal. The rotated nodal coordinate systems
        may be displayed through the /PSYMB command. In case multiple lines are
        selected, there could be conflicts at the boundaries. If a node belongs
        to two lines that have a different normal, its nodal coordinate system
        will be rotated to the line normal with the lowest number. Keep the
        following in mind when using the NORL command:

        If the nodal coordinate system is parallel to the global Cartesian
        system, it is not displayed through the /PSYMB command.

        Previously specified rotation on the selected nodes are overridden.
        """
        command = "NORL,%s,%s,%s" % (str(line), str(area), str(ndir))
        return self.run(command, **kwargs)

    def trplis(self, ntrp1="", ntrp2="", trpinc="", opt="", **kwargs):
        """APDL Command: TRPLIS

        Lists the particle flow or charged particle trace points.

        Parameters
        ----------
        ntrp1, ntrp2, trpinc
            List points from NTRP1 to NTRP2 (defaults to NTRP1) in steps of
            TRPINC (defaults to 1).  If NTRP1 = ALL, NTRP2 and TRPINC are
            ignored and all trace points are listed.  If NTRP1 = P, graphical
            picking is enabled and all remaining command fields are ignored
            (valid only in the GUI).

        opt
            Opt = LOC lists the trace point number location (X, Y, Z). Default.

        Notes
        -----
        Lists the particle flow or charged particle trace points in the active
        display coordinate system [DSYS].  Trace points are defined with the
        TRPOIN command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "TRPLIS,%s,%s,%s,%s" % (str(ntrp1), str(ntrp2), str(trpinc), str(opt))
        return self.run(command, **kwargs)

    def mfem(self, fnumb="", itype1="", itype2="", itype3="", itype4="",
             itype5="", itype6="", itype7="", itype8="", itype9="", itype10="",
             **kwargs):
        """APDL Command: MFEM

        Add more element types to a previously defined field number.

        Parameters
        ----------
        fnumb
            Existing field number defined by the MFELEM command.

        itype1, itype2, itype3, . . . , itype10
            Element types defined by the ET command.

        Notes
        -----
        You can add up to ten element types per MFEM command. This command
        should not be used after an initial solution.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFEM,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(fnumb), str(itype1), str(itype2), str(itype3), str(itype4), str(itype5), str(itype6), str(itype7), str(itype8), str(itype9), str(itype10))
        return self.run(command, **kwargs)

    def modseloption(self, dir1="", dir2="", dir3="", dir4="", dir5="", dir6
                     ="", **kwargs):
        """APDL Command: MODSELOPTION

        Specifies the criteria for selecting the modes to be expanded.

        Parameters
        ----------
        dir1, dir2, …, dir6
            Selection of the direction to be expanded.

        Notes
        -----
        This command is only applicable when a mode selection method is defined
        (ModeSelMethod on the MXPAND command). See Using Mode Selection in the
        Mechanical APDL Structural Analysis Guide for more details.

        If a numerical value is specified for a direction, the significance
        threshold (SIGNIF on the MXPAND command) is ignored for the selection
        of the modes in this direction.

        If a mode is determined to be expanded in any of the 6 directions, it
        will be expanded in the .MODE file. : Otherwise, the mode will not be
        expanded.

        The default behavior is to consider all directions for expansion.
        """
        command = "MODSELOPTION,%s,%s,%s,%s,%s,%s" % (str(dir1), str(dir2), str(dir3), str(dir4), str(dir5), str(dir6))
        return self.run(command, **kwargs)

    def device(self, label="", key="", **kwargs):
        """APDL Command: /DEVICE

        Controls graphics device options.

        Parameters
        ----------
        label
            Device function label:

            BBOX - Bounding box mode. For PowerGraphics plots involving elements with /SHOW,x11
                   and /SHOW,win32, ANSYS generally displays dynamic rotations
                   faster. If KEY = 1 (ON), then a bounding box (not the
                   elements) encompassing the model is displayed and rotated,
                   rather than the element outlines (ON is default in
                   preprocessing). When KEY = 0 (OFF), then dynamic rotations
                   may be slower (ANSYS redraws the element outlines) for plots
                   involving elements with /SHOW,x11 and /SHOW,win32.  OFF is
                   default in postprocessing. This command is ignored if
                   /EDGE,WN,1 is set for any WN. This is ignored in POST1 and
                   SOLUTION plots.

            For any PowerGraphics plots involving elements, regardless of /SHOW settings, plots will generally be displayed faster. - VECTOR

            Vector mode. In vector mode, areas, volumes, elements, and postprocessing display geometries are shown as outlines (wireframes).  When vector mode is off (default), these entities are shown filled with color. - DITHER

            When dithering is turned on (default), color intensity transitions are smoothed.  This selection a - applies only to smooth-shaded images, i.e., Z-buffered [/TYPE], or raster plots
                              with Gouraud or Phong shading [/SHADE].

            ANIM - Select the animation type used on 2-D devices on the PC platform. A KEY value
                   of BMP (or 0) sets animation mode to ANSYS Animation
                   Controller (default). A KEY value of AVI (or 2) sets
                   animation mode to AVI movie player file.

            FONT - Font selection for the ANSYS graphics window. When Label = FONT, the command
                   format is: /DEVICE,FONT,KEY,Val1,Val2,Val3,Val4,Val5,Val6
                   where KEY determines the type of font being controlled, and
                   values 1 through 6 control various font parameters. Note
                   that these values are device specific; using the same
                   command input file [/INPUT] on different machines may yield
                   different results.. The following KEY values determine the
                   font information that will be supplied to the appropriate
                   driver (e.g., Postscript, X11, Win32, JPEG, ...):

            KEY = 1 - The command controls the LEGEND (documentation column) font.

            KEY = 2 - The command controls the ENTITY (node and keypoint number) font.

            KEY = 3 - The command controls the ANNOTATION/GRAPH font.

            Linux: Values 1 through 4 are used to find a match in the X11 database of font strings. Values 1, 2, and 3 are character strings; value 4 is a nonzero integer:    - Val1

            Family name (e.g., Courier). If Val1 = MENU, all other values are ignored and a font selection menu appears (GUI must be active). - Val2

            Weight (e.g., medium) - Val3

            Slant (e.g., r) - Val4

            Pixel size (e.g., 14). Note that this value does no affect the annotation fonts (KEY = 3). Use the /TSPEC command for annotation font size.  - Val5

            Val1 - Family name (e.g., Courier*New) Substitute an asterisk (*) for any blank
                   character that appears in a family name. If Val1 = MENU, all
                   other values are ignored and a font selection menu appears
                   (GUI must be active). When this value is blank ANSYS uses
                   the first available resource it finds.

            Val2 - Weight (0 - 1000)

            Val3 - Orientation (in tenths of a degree)

            Val4 - Height (in logical units)

            Val5 - Width (in logical units)

            Val6 - Italics (0 = OFF, 1 = ON)

            TEXT - Text size specification for the ANSYS Graphics window.  Using this label with
                   the /DEVICE command requires the following form:
                   /DEVICE,TEXT,KEY,PERCENT.  KEY = 1 for LEGEND fonts; KEY = 2
                   for ENTITY fonts.  PERCENT specifies the new text size as a
                   percent of the default text size.  If PERCENT = 100, the new
                   text size is precisely the default size.  If PERCENT = 200,
                   the new text size is twice the default text size.

        key
            Control key:

            OFF or 0 - Turns specified function off.

            ON or 1 - Turns specified function on or designates the LEGEND font.

            2 - Designates the ENTITY font.

            3 - Designates the ANNOTATION/GRAPH font.

        Notes
        -----
        This command is valid in any processor.

        The /DEVICE,BBOX command is ignored in POST1 and SOLUTION plots. Also,
        the elements are displayed and rotated if you use /DEVICE,BBOX,ON and
        /EDGE,WN,1,ANGLE (effectively ignoring the BBOX option).
        """
        command = "/DEVICE,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    def intsrf(self, lab="", **kwargs):
        """APDL Command: INTSRF

        Integrates nodal results on an exterior surface.

        Parameters
        ----------
        lab
            Label indicating degree of freedom to be integrated:

            PRES - Pressure.

            TAUW - Wall shear stress.

            FLOW - Both pressure and wall shear stress.

        Notes
        -----
        Integrates nodal results on a surface.  Use node selection (such as the
        EXT option of the NSEL command) to indicate the surface(s) of element
        faces to be used in the integration.  A surface can be "created" by
        unselecting elements (such as unselecting non-fluid elements that are
        adjacent to fluid elements for the postprocessing of fluid flow
        result).  Element faces attached to the selected nodes will be
        automatically determined.  All nodes on a face must be selected for the
        face to be used.  The integration results will cancel for nodes on
        common faces of adjacent selected elements.

        Integration results are in the active coordinate system (see the RSYS
        command). The type of results coordinate system must match the type
        used in the analysis. However, you may translate and rotate forces and
        moments as needed. Use the *GET command (Utility Menu> Parameters> Get
        Scalar Data) to retrieve the results.
        """
        command = "INTSRF,%s" % (str(lab))
        return self.run(command, **kwargs)

    
    
    def rsfit(self, rslab="", slab="", name="", rmod="", ytrans="", yval="",
              xfilt="", conf="", **kwargs):
        """APDL Command: RSFIT

        Fit a response surface for an output parameter in a solution set.

        Parameters
        ----------
        rslab
            Response surface set label. Identifies the response surface results
            for later postprocessing. This label can be used as Rlab for
            postprocessing response surface results, and for evaluating the fit
            results with RSPLOT and RSPRNT. You must have separate
            identification labels for the solution sets and for the response
            surface sets, because you can perform a response surface fit based
            on Monte Carlo results. For this case, the original Monte Carlo
            results are identified by the solution set label provided in the
            PDEXE command and the results generated with the fitted response
            surfaces are identified by the response surface set label (RSlab)
            provided here. RSlab must not contain blanks. Maximum length of
            this field is 16 characters; if this field contains more than 16
            characters, it will be truncated to 16 characters.

        slab
            Solution set label that identifies the probabilistic analysis
            containing the results to be fitted. This solution set label is
            defined with the PDEXE command.

        name
            Parameter name. The parameter must have been previously defined as
            a random output parameter with the PDVAR command. The result values
            of this parameter (stored in the solution set identified by Slab)
            are fitted as a function of all random input variables.

        rmod
            Regression model to use for the evaluation of the response surface.

            LIN - Regression model with linear terms only.

            QUAD - Regression model with linear and pure quadratic terms (no cross-terms).

            QUAX - Regression model with linear and all quadratic terms (including cross-terms).
                   (Default.)

        ytrans
            Option for the transformation type applied to the output parameter
            identified with Name.

            NONE - The values of the output parameter Name are not transformed (default).

            EXP - The values of the output parameter Name are transformed according to Y* =
                  exp(Y). The transformed values Y* are used for the fitting
                  process.

            LOGA - The values of the output parameter Name are transformed according to Y* =
                   loga(Y), where the basis a is specified by Yval. The
                   transformed values Y* are used for the fitting process.

        yval
            Value needed for Ytrans = LOGA, Ytrans = POW, and Ytrans = BOX.
            Ignored for all other options of Ytrans. For Ytrans = LOGA and
            Ytrans = POW, the default value is Yval = 1.0. For Ytrans = BOX,
            the default value is Yval = 0.01.

        xfilt
            Option that specifies if irrelevant terms of the regression model
            should be filtered out.

            NONE - Regression term filtering is not done. A full regression model as specified
                   with the Rmod option is evaluated.

            FSR - Use the "forward-stepwise-regression" to automatically filter out individual
                  and irrelevant terms of the regression model. If irrelevant
                  terms are sorted out this leads to a smaller number of
                  coefficients to be determined in the regression analysis,
                  which then leads to increased accuracy of the coefficients of
                  the remaining terms in the regression model (default).

        conf
            Confidence level that is used to filter the terms of the regression
            model if the Xfilt = FSR option has been selected. The value of
            CONF must be between 0.0 and 1.0 (default is 0.95). The higher this
            value, the more terms will be filtered out. Consequently, higher
            CONF values lead to a fewer terms in the regression model.
            Likewise, lower CONF values lead to more terms being included in
            the regression model.

        Notes
        -----
        Evaluates a response surface for a random output parameter Name. The
        result values for the parameter Name as stored in the solution set Slab
        are fitted as a function of all random input parameters. There can be
        only one response surface set for each solution set. A response surface
        set can include the fitted response surfaces of one or more output
        parameters.

        Note:: : If the RSFIT command is used for an existing response surface
        set for which Monte Carlo simulations have already been generated using
        the RSSIMS command then these Monte Carlo samples are deleted by the
        RSFIT command. In this case they need to be generated again using the
        RSSIMS command. It is necessary to delete the Monte Carlo simulations
        in order to make sure that the samples, their statistics and
        correlations are consistent with the response surfaces.
        """
        command = "RSFIT,%s,%s,%s,%s,%s,%s,%s,%s" % (str(rslab), str(slab), str(name), str(rmod), str(ytrans), str(yval), str(xfilt), str(conf))
        return self.run(command, **kwargs)

    
    
    def pvect(self, oper="", labxr="", labyr="", labzr="", **kwargs):
        """APDL Command: PVECT

        Interpolates a set of items onto a path.

        Parameters
        ----------
        oper
            Valid operations for geometry operations along a path are:

            NORM - Defines a unit normal vector at each interpolation point in the direction of
                   the cross product of the tangent to the path and the active
                   Z axis.  Resulting vector components are in the active
                   coordinate system (which must be Cartesian).

            TANG - Defines a unit vector tangent to the path at each interpolation point.  Vector
                   components are in the active coordinate system (which must
                   be Cartesian).

            RADI - Defines the position vector of each interpolation point of the path from the
                   center of the active coordinate system (which must be
                   Cartesian).

        labxr
            Label (8 characters maximum) assigned to X-component of the
            resulting vector.

        labyr
            Label (8 characters maximum) assigned to Y-component of the
            resulting vector.

        labzr
            Label (8 characters maximum) assigned to Z-component of the
            resulting vector.

        Notes
        -----
        Defines and interpolates a set of labeled path items along predefined
        path [PATH] and performs various geometric operations on these path
        items.  A path item must be defined before it can be used with other
        path operations.  Additional path items may be defined with the PDEF,
        PCALC, PDOT, and PCROSS commands.  Path items may be listed or
        displayed with the PLPATH, PLPAGM and PRPATH commands.  Path geometry
        items (XG, YG, ZG, S) are automatically interpolated (in the active
        CSYS) if not done so previously with the PDEF command.
        """
        command = "PVECT,%s,%s,%s,%s" % (str(oper), str(labxr), str(labyr), str(labzr))
        return self.run(command, **kwargs)

    
    def ppath(self, point="", node="", x="", y="", z="", cs="", **kwargs):
        """APDL Command: PPATH

        Defines a path by picking or defining nodes, or locations on the
        currently active working plane, or by entering specific coordinate
        locations.

        Parameters
        ----------
        point
            The point number.  It must be greater than zero and less than or
            equal to the nPts value specified on the PATH command if graphical
            picking is not being used.

        node
            The node number defining this point.  If blank, use the X, Y, Z
            coordinates to define the point.  A valid node number will override
            X, Y, Z coordinate arguments.

        x, y, z
            The location of the point in the global Cartesian coordinate
            system.  Use these arguments only if you omit the NODE argument.

        cs
            The coordinate system for interpolation of the path between the
            previous point and this point.  Omit this argument if you wish to
            use the currently active (CSYS) coordinate system.  If the
            coordinate system of two adjacent points is different, the CS value
            of the latter point will be used.

        Notes
        -----
        For linearized stress calculations, the path must be defined with
        nodes.

        This command is designed and works best in interactive (GUI) mode,
        using the menu paths listed below. For command line operations, issue
        PPATH,P to define your path by picking nodes.

        For information on displaying paths you have defined, see Defining Data
        to be Retrieved in the Basic Analysis Guide.
        """
        command = "PPATH,%s,%s,%s,%s,%s,%s" % (str(point), str(node), str(x), str(y), str(z), str(cs))
        return self.run(command, **kwargs)

    def d(self, node="", lab="", value="", value2="", nend="", ninc="",
          lab2="", lab3="", lab4="", lab5="", lab6="", **kwargs):
        """APDL Command: D

        Defines degree-of-freedom constraints at nodes.

        Parameters
        ----------
        node
            Node at which constraint is to be specified. If ALL, NEND and NINC
            are ignored and constraints are applied to all selected nodes
            (NSEL). If Node = P, graphical picking is enabled and all remaining
            command fields are ignored (valid only in the GUI).  A component
            name may also be substituted for Node.

        lab
            Valid degree-of-freedom label.  If ALL, use all appropriate labels.

        value
            Degree-of-freedom value or table name reference for tabular
            boundary conditions.  To specify a table, enclose the table name in
            percent (%) signs (for example, D,Node,TEMP,%tabname%). Use the
            *DIM command to define a table.

        value2
            Second degree-of-freedom value (if any).  If the analysis type and
            the degree of freedom allow a complex input, Value (above) is the
            real component and VALUE2 is the imaginary component.

        nend, ninc
            Specifies the same values of constraint at the range of nodes from
            Node to NEND (defaults to Node), in steps of NINC (defaults to 1).

        lab2, lab3, lab4, lab5, lab6
            Additional degree-of-freedom labels. The same values are applied to
            the nodes for these labels.

        Notes
        -----
        The available degrees of freedom per node are listed under "Degrees of
        Freedom" in the input table for each element type in the Element
        Reference.  Degrees of freedom are defined in the nodal coordinate
        system.  The positive directions of structural translations and
        rotations are along and about the positive nodal axes directions.
        Structural rotations should be input in radians.  The node and the
        degree-of-freedom label must be selected (NSEL, DOFSEL).

        In a structural analysis, you can apply only one displacement,
        velocity, or acceleration load at any degree of freedom. If multiple
        loads are specified, the last applied load overrides the previous ones.
        For example, the following commands apply loads to node 100:

        In this case, the velocity load (VELX) applied in the last command will
        override the displacement load (UX).

        For elements used in static and low frequency electromagnetic analysis
        (SOLID236 and SOLID237), the AZ degree of freedom is not a z-component
        of a vector potential, but rather the flux contribution on the element
        edge.  To specify a flux-parallel condition, set AZ = 0.  For more
        information, see 3-D Magnetostatics and Fundamentals of Edge-based
        Analysis in the Low-Frequency Electromagnetic Analysis Guide.

        In an explicit dynamic analysis, the D command can only be used to fix
        nodes in the model. The degree-of-freedom value must be zero; no other
        values are valid. Use the EDLOAD command to apply a nonzero
        displacement in an explicit dynamic analysis.

        For ELBOW290 cross-section degrees of freedom (Lab = SE, SO, SW, SRA,
        SRT, or SECT), the D command can only specify fixed constraints. The
        degree-of-freedom value must be zero; no other values are valid.

        For hydrostatic fluid elements (HSFLD241 and HSFLD242), the HDSP
        degree-of-freedom constraint at the pressure node prescribes the
        pressure value for all the fluid elements sharing the pressure node.

        Tabular boundary conditions (VALUE = %tabname%) are available only for
        the following degree-of-freedom labels: Electric (VOLT), structural
        (UX, UY, UZ, ROTX, ROTY, ROTZ, and velocity and acceleration loads
        VELX, VELY, VELZ, OMGX, OMGY, OMGZ, ACCX, ACCY, ACCZ, DMGX, DMGY,
        DMGZ), acoustic (PRES, UX, UY, UZ,), and temperature (TEMP, TBOT, TE2,
        TE3, . . ., TTOP). All labels are valid only in static (ANTYPE,STATIC)
        and full transient (ANTYPE,TRANS) analyses.

        %_FIX% is an ANSYS reserved table name. When VALUE is set to %_FIX%,
        ANSYS will prescribe the degree of freedom to the "current" relative
        displacement value. This option is only valid for the following labels:
        UX, UY, UZ, ROTX, ROTY, ROTZ. Alternatively, functions UX(), UY(), etc.
        may be used (see *GET for a complete list of available functions). In
        most cases, %_FIX% usage is efficient and recommended for all
        structural degrees of freedom.

        When Value = SUPPORT, specify only the minimum number of displacement
        constraints necessary to prevent rigid body motion: three constraints
        (or fewer, depending on the element type) for 2-D models and six (or
        fewer) for 3-D models.

        If constraints and initial conditions (IC) are applied at the same
        node, the constraint specification overrides. This combination is
        useful when a constraint degree-of-freedom value needs to start with a
        nonzero value at time = 0.0. For example, if the constraint degree-of-
        freedom value is prescribed to be a cosine function, then specifying an
        initial condition for the same node and degree of freedom ensures that
        the initial value for the constraint degree of freedom at time = 0.0 is
        same as the cosine function evaluated at time = 0.0. If initial
        conditions are not specified, the constraint degree-of-freedom value
        ramps from zero in the first substep of the first loadstep.

        If more than one rotational degrees of freedom are constrained with
        non-zero rotations (ROTX, ROTY, ROTZ), rotational velocities (OMGX,
        OMGY, OMGZ), or rotational accelerations (DMGX, DMGY, DMGZ), then the
        rotation of the constrained node from its initial configuration to its
        final configuration depends on the combination and the sequence in
        which the constraints are applied. See Rotations in a Large-Deflection
        Analysis in Structural Analysis Guide.

        This command is also valid in PREP7.
        """
        command = "D,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(lab), str(value), str(value2), str(nend), str(ninc), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    
    def fsplot(self, nloc="", nev="", item="", **kwargs):
        """APDL Command: FSPLOT

        Displays a fatigue stress item for a fatigue location and event.

        Parameters
        ----------
        nloc
            Display stresses associated with location NLOC.

        nev
            Display stresses associated with event NEV.

        item
            Display stresses associated with item number ITEM.  Items are as
            follows:

            1-6 - SX, SY, SZ, SXY, SYZ, SXZ total stress components

            7 - Temperature

            8-13 - SX, SY, SZ, SXY, SYZ, SXZ membrane-plus-bending stress components.

            14 - Time

        Notes
        -----
        Displays a fatigue stress item as a function of loading number for a
        particular fatigue location and event.
        """
        command = "FSPLOT,%s,%s,%s" % (str(nloc), str(nev), str(item))
        return self.run(command, **kwargs)

    def cformat(self, nfirst="", nlast="", **kwargs):
        """APDL Command: /CFORMAT

        Controls the graphical display of alphanumeric character strings for
        parameters, components, assemblies, and tables.

        Parameters
        ----------
        nfirst
            Display the first n characters of the parameter, component,
            assembly, or table name, up to 32. Defaults to 32.

        nlast
            Display the last n characters of the parameter, component,
            assembly, or table name, up to 32. Defaults to 0.

        Notes
        -----
        Use this command to control the length of the character string that is
        shown in the graphics window for a parameter, component, assembly, or
        table name.

        The total number of characters (NFIRST + NLAST +3) cannot exceed 32.

        If NFIRST is greater than zero and NLAST = 0, only the NFIRST
        characters are displayed, followed by an ellipsis.

        If NFIRST = 0 and NLAST is greater than zero, only the NLAST characters
        are displayed, preceded by an ellipsis (...).

        If both NFIRST and NLAST are greater than zero, the name will be shown
        as NFIRST, followed by an ellipsis (...), followed by NLAST, up to a
        maximum of 32 characters.

        For example, if NFIRST = 6 and NLAST = 3, and the character string is
        LENGTHOFSIDEONE, then it will appear in the graphics window as
        LENGTH...ONE.

        If the actual length of the character string is less than the specified
        combination of NFIRST + NLAST +3, then the actual string will be used.

        This command is valid in any processor.
        """
        command = "/CFORMAT,%s,%s" % (str(nfirst), str(nlast))
        return self.run(command, **kwargs)

    
    def tiff(self, kywrd="", opt="", **kwargs):
        """APDL Command: TIFF

        Provides TIFF file Export for ANSYS Displays.

        Parameters
        ----------
        kywrd
            Specifies various TIFF file export options.

            COMP - If Kywrd = COMP, then OPT controls data compression
                   for the output file. If COMP = 0, then compression
                   is off. If COMP = 1 (default), then compression is
                   on.

            ORIENT - If Kywrd = ORIENT, then OPT will determine the
                     orientation of the entire plot.  OPT can be
                     either Horizontal (default) or Vertical.

            COLOR - If Kywrd = COLOR, then OPT will determine the
                    color attribute of the saved file. OPT can be 0,
                    1, or 2, corresponding to Black and White,
                    Grayscale, and Color (default), respectively.

            TMOD - If Kywrd = TMOD, then OPT will determine the text
                   method. OPT can be either 1 or 0, corresponding to
                   bitmap text (default) or line stroke text,
                   respectively.

            DEFAULT - If Kywrd = DEFAULT, then all of the default
                      values, for all of the Kywrd parameters listed
                      above, are active.

        opt 
            OPT can have the following names or values, depending on
            the value for Kywrd (see above).

            1 or 0 - If Kywrd = COMP, a value or 1 (on) or 0 (off)
                     will control compression for the TIFF file.

            Horizontal, Vertical - If Kywrd = ORIENT, the terms
                                   Horizontal or Vertical determine
                                   the orientation of the plot.

            0, 1, 2 - If Kywrd = COLOR, the numbers 0, 1, and 2
                      correspond to Black and White , Grayscale and
                      Color, respectively.

            1, 0 - If Kywrd = TMOD, the values 1 and 0 determine
                   whether bitmap (1) or stroke text (0) fonts will be
                   used
        """
        command = "TIFF,%s,%s" % (str(kywrd), str(opt))
        return self.run(command, **kwargs)

    def impd(self, vpath="", ipath="", vsymm="", isymm="", **kwargs):
        """APDL Command: IMPD

        Calculates the impedance of a conductor at a reference plane.

        Parameters
        ----------
        vpath
            Path name for a predefined path [PATH command] for
            calculating the EMF (voltage drop) from the conductor to a
            reference point. The path should start at the outer
            conductor wall and end at a reference voltage point.

        ipath
            Path name for a predefined path [PATH command] for
            calculating the MMF (current) in a conductor. The path
            should traverse a closed contour surrounding the
            conductor, and you should define the path in a
            counterclockwise direction.

        vsymm
            Symmetry factor applied to the calculated EMF (voltage
            drop). The EMF (voltage drop) from the conductor to the
            reference point is multiplied by Vsymm.

        isymm
            Symmetry factor applied to the calculated current. The
            calculated current is multiplied by Isymm.

        Notes
        -----
        Used in a harmonic high-frequency electromagnetic analysis,
        IMPD calculates the impedance of a conductor at a reference
        plane from the EMF (voltage) and MMF (current) at the
        reference plane. The EMF (voltage drop) is calculated by a
        line integral from the input path name (specified by the Vpath
        argument) that extends from the conductor to a reference
        point. The MMF (current) is calculated by a closed path around
        the conductor from the input path name (specified with Ipath).
        In cases having modeled symmetry, you can multiply the voltage
        drop or current by symmetry factors (Vsymm and Isymm
        respectively).

        This command macro returns the scalar parameters Zre and Zim,
        representing the real and imaginary components of the
        impedance.

        See magnetic macros for further details.

        Distributed ANSYS Restriction: This command is not supported
        in Distributed ANSYS.
        """
        command = "IMPD,%s,%s,%s,%s" % (str(vpath), str(ipath), str(vsymm), str(isymm))
        return self.run(command, **kwargs)

    
    def sfl(self, line="", lab="", vali="", valj="", val2i="", val2j="",
            **kwargs):
        """APDL Command: SFL

        Specifies surface loads on lines of an area.

        Parameters
        ----------
        line
            Line to which surface load applies.  If ALL, apply load to all
            selected lines [LSEL].  If Line = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component name may be substituted for Line.

        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.

        vali, valj
            Surface load values at the first keypoint (VALI) and at the second
            keypoint (VALJ) of the line, or table name for specifying tabular
            boundary conditions.  If VALJ is blank, it defaults to VALI.  If
            VALJ is zero, a zero is used.  If Lab = CONV, VALI and VALJ are the
            film coefficients and VAL2I and VAL2J are the bulk temperatures.
            To specify a table, enclose the table name in percent signs (%),
            e.g., %tabname%.  Use the *DIM command to define a table.  If Lab =
            CONV and VALI = -N, the film coefficient may be a function of
            temperature and is determined from the HF property table for
            material N [MP].  If Lab = RAD, VALI and VALJ values are surface
            emissivities and VAL2I and VAL2J are ambient temperatures.  The
            temperature used to evaluate the film coefficient is usually the
            average between the bulk and wall temperatures, but may be user
            defined for some elements.  If Lab = RDSF, VALI is the emissivity
            value; the following condition apply: If VALI = -N, the emissivity
            may be a function of the temperature and is determined from the
            EMISS property table for material N [MP]. If Lab = FSIN in a Multi-
            field solver (single or multiple code coupling) analysis, VALI is
            the surface interface number. If Lab = FSIN in a unidirectional
            ANSYS to CFX analysis, VALJ is the surface interface number (not
            available from within the GUI) and VALI is not used unless the
            ANSYS analysis is performed using the Multi-field solver.

        val2i, val2j
            Second surface load values (if any).  If Lab = CONV, VAL2I and
            VAL2J are the bulk temperatures. If Lab = RAD, VAL2I and VAL2J are
            the ambient temperatures. If Lab = RDSF, VAL2I is the enclosure
            number. Radiation will occur between surfaces flagged with the same
            enclosure numbers. If the enclosure is open, radiation will occur
            to the ambient. VAL2I and VAL2J are not used for other surface load
            labels.  If VAL2J is blank, it defaults to VAL2I.  If VAL2J is
            zero, a zero is used.  To specify a table (Lab = CONV), enclose the
            table name in percent signs (%), e.g., %tabname%.  Use the *DIM
            command to define a table.

        Notes
        -----
        Specifies surface loads on the selected lines of area regions.  The
        lines represent either the edges of area elements or axisymmetric shell
        elements themselves.  Surface loads may be transferred from lines to
        elements with the SFTRAN or SBCTRAN commands.  See the SFE command for
        a description of surface loads.  Loads input on this command may be
        tapered.  See the SFGRAD command for an alternate tapered load
        capability.

        You can specify a table name only when using structural (PRES) and
        thermal (CONV [film coefficient and/or bulk temperature], HFLUX), and
        surface emissivity and ambient temperature (RAD) surface load labels.
        VALJ and VAL2J are ignored for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "SFL,%s,%s,%s,%s,%s,%s" % (str(line), str(lab), str(vali), str(valj), str(val2i), str(val2j))
        return self.run(command, **kwargs)

    def srss(self, signif="", label="", abssumkey="", forcetype="", **kwargs):
        """APDL Command: SRSS

        Specifies the square root of sum of squares mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF threshold.  For single point, multipoint, or DDAM response
            (SPOPT,SPRS, MPRS or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes.  Any mode whose significance level
            is less than SIGNIF is considered insignificant and is not
            contributed to the mode combinations.  The higher the SIGNIF
            threshold, the fewer the number of modes combined. SIGNIF defaults
            to 0.001.  If SIGNIF is specified as 0.0, it is taken as 0.0.
            (This mode combination method is not valid for SPOPT,PSD.)

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default).  Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution.  Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution.  Accelerations, "stress accelerations," "force
                   accelerations," etc., are available.

        abssumkey
            Absolute Sum combination key (for SPOPT,MPRS only):

            NO - Do not use the Absolute Sum method (default).

            YES - Combine the modes per excitation direction using the Absolute Sum method, then
                  combine the resulting quantities using the square root of sum
                  of squares method.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        This command is also valid for PREP7.
        """
        command = "SRSS,%s,%s,%s,%s" % (str(signif), str(label), str(abssumkey), str(forcetype))
        return self.run(command, **kwargs)

    
    def smin(self, labr="", lab1="", lab2="", fact1="", fact2="", **kwargs):
        """APDL Command: SMIN

        Forms an element table item from the minimum of two other items.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        lab1
            First labeled result item in operation.

        lab2
            Second labeled result item in operation (may be blank).

        fact1
            Scale factor applied to Lab1. A (blank) or '0' entry defaults to
            1.0.

        fact2
            Scale factor applied to Lab2. A (blank) or '0' entry defaults to
            1.0.

        Notes
        -----
        Forms a labeled result item (see ETABLE command) for the selected
        elements by comparing two existing labeled result items according to
        the operation:

        LabR = (FACT1 x Lab1) cmn (FACT2 x Lab2)

        where "cmn" means "compare and save minimum."  If absolute values are
        requested [SABS,1], the absolute values of Lab1 and Lab2 are used.
        """
        command = "SMIN,%s,%s,%s,%s,%s" % (str(labr), str(lab1), str(lab2), str(fact1), str(fact2))
        return self.run(command, **kwargs)

    
    def neqit(self, neqit="", forcekey="", **kwargs):
        """APDL Command: NEQIT

        Specifies the maximum number of equilibrium iterations for nonlinear
        analyses.

        Parameters
        ----------
        neqit
            Maximum number of equilibrium iterations allowed each substep.

        forcekey
            One iteration forcing key:

            FORCE - Forces one iteration per substep. Leave this field blank otherwise.

        Notes
        -----
        This command is also valid in PREP7.
        """
        command = "NEQIT,%s,%s" % (str(neqit), str(forcekey))
        return self.run(command, **kwargs)

    def bfescal(self, lab="", fact="", tbase="", **kwargs):
        """APDL Command: BFESCAL

        Scales element body force loads.

        Parameters
        ----------
        lab
            Valid body load label.  If ALL, use all appropriate labels.

        fact
            Scale factor for the element body load values.  Zero (or blank)
            defaults  to 1.0.  Use a small number for a "zero" scale factor.
            The scale factor is not applied to body load phase angles.

        tbase
            Base temperature for temperature difference.  Used only with Lab =
            TEMP.  Scale factor is applied to the temperature difference (T -
            TBASE)  and then added to TBASE.  T is the current temperature.

        Notes
        -----
        Scales element body force loads on the selected elements in the
        database.  Issue the BFELIST command to list the element body loads.
        Solid model boundary conditions are not scaled by this command, but
        boundary conditions on the FE model are scaled.  (Note that such scaled
        FE boundary conditions may still be overwritten by unscaled solid model
        boundary conditions if a subsequent boundary condition transfer
        occurs.)

        BFESCAL does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "BFESCAL,%s,%s,%s" % (str(lab), str(fact), str(tbase))
        return self.run(command, **kwargs)

    def arctrm(self, lab="", val="", node="", dof="", **kwargs):
        """APDL Command: ARCTRM

        Controls termination of the solution when the arc-length method is
        used.

        Parameters
        ----------
        lab
            Specifies the basis of solution termination:

            OFF - Does not use ARCTRM to terminate analysis (default).

            L - Terminates the analysis if the first limit point has been reached.  The first
                limit point is that point in the response history when the
                tangent stiffness matrix becomes singular (i.e., the point at
                which the structure becomes unstable).  If Lab = L, arguments
                VAL, NODE, DOF are ignored.

            U - Terminates the analysis when the displacement first equals or exceeds the
                maximum desired value.

        val
            Maximum desired displacement (absolute value).  Valid only if Lab =
            U.  The analysis terminates whenever the calculated displacement
            first equals or exceeds this value.  For rotational degrees of
            freedom, VAL must be in radians (not degrees).

        node
            Node number corresponding to displacement used to compare with
            displacement specified by VAL.  If blank, the maximum displacement
            will be used.  Valid only if Lab = U.

        dof
            Valid degree of freedom label for nodal displacement specified by
            NODE.  Valid labels are UX, UY, UZ, ROTX, ROTY, ROTZ.  Valid only
            if NODE>0 and Lab = U.

        Notes
        -----
        The ARCTRM command is valid only when the arc-length method (ARCLEN,ON)
        is used.

        It can be convenient to use this command to terminate the analysis when
        the first limit point is reached. In addition, the NCNV command should
        be used to limit the maximum number of iterations. If the ARCTRM
        command is not used, and the applied load is so large that the solution
        path can never reach that load, the arc-length solution will continue
        to run until a CPU time limit or a "maximum number of iterations" is
        reached.
        """
        command = "ARCTRM,%s,%s,%s,%s" % (str(lab), str(val), str(node), str(dof))
        return self.run(command, **kwargs)

    def bfv(self, volu="", lab="", val1="", val2="", val3="", phase="",
            **kwargs):
        """APDL Command: BFV

        Defines a body force load on a volume.

        Parameters
        ----------
        volu
            Volume to which body load applies.  If ALL, apply to all selected
            volumes [VSEL]. A component name may also be substituted for Volu.

        lab
            Valid body load label. Load labels are listed under "Body Loads" in
            the input table for each element type in the Element Reference.

        val1, val2, val3
            Value associated with the Lab item or a table name for specifying
            tabular boundary conditions.  Use only VAL1 for TEMP, FLUE, HGEN,
            and CHRGD.  Use VAL1, VAL2, and VAL3 for the X, Y, and Z components
            of JS.  For Lab = JS in magnetics, use VAL1, VAL2, and VAL3 for the
            X, Y, and Z components. For acoustics, if Lab = JS,  use VAL1 for
            mass source in a harmonic analysis or mass source rate in a
            transient analysis, and ignoreVAL2 and VAL3. For Lab = VLTG, VAL1
            is the voltage drop and VAL2 is the phase angle.  When specifying a
            table name, you must enclose the table name in percent signs (%),
            e.g., BFV,Volu,Lab,%tabname%.  Use the *DIM command to define a
            table.

        phase
            Phase angle in degrees associated with the JS label.

        Notes
        -----
        Defines a body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.) on a
        volume.  Body loads may be transferred from volumes to volume elements
        (or to nodes if volume elements do not exist) with the BFTRAN or
        SBCTRAN commands.  Body loads default to the value specified on the
        BFUNIF command, if it was previously specified.

        You can specify a table name only when using temperature (TEMP) and
        heat generation rate (HGEN) body load labels.

        Body loads specified by the BFV command can conflict with other
        specified body loads.  See Resolution of Conflicting Body Load
        Specifications in the Basic Analysis Guide for details.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFV,%s,%s,%s,%s,%s,%s" % (str(volu), str(lab), str(val1), str(val2), str(val3), str(phase))
        return self.run(command, **kwargs)

    def anfile(self, lab="", fname="", ext="", **kwargs):
        """APDL Command: /ANFILE

        Saves or resumes an animation sequence to or from a file.

        Parameters
        ----------
        lab
            Label type.

            SAVE - Save the current animation to a file.

            RESUME - Resume an animation from a file.

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        This command saves an animation to a file from local terminal segments
        or resumes an animation from a file to local terminal segments.  See
        the /SEG command for details on segment storage.  See the ANCNTR macro
        for a convenient method of storing graphics frames in terminal memory
        segments.  This command is device dependent and is valid in any
        processor.
        """
        command = "/ANFILE,%s,%s,%s" % (str(lab), str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def smcons(self, **kwargs):
        """APDL Command: SMCONS

        Specifies "Constraints on the solid model" as the subsequent status
        topic.

        Notes
        -----
        This is a status [STAT] topic command. Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SMCONS,"
        return self.run(command, **kwargs)

    def tref(self, tref="", **kwargs):
        """APDL Command: TREF

        Defines the reference temperature for the thermal strain calculations.

        Parameters
        ----------
        tref
            Reference temperature for thermal expansion.

        Notes
        -----
        Defines the reference temperature for the thermal strain calculations
        in structural analyses and explicit dynamic analyses.  Thermal strains
        are given by : α *(T-TREF), where α is the coefficient of thermal
        expansion (for more on this see the Mechanical APDL Theory Reference).
        Input the strain via ALPX, ALPY, ALPZ (the secant or mean coefficient
        value), or CTEX, CTEY, CTEZ (the instantaneous coefficient value), or
        the thermal strain value (THSX, THSY, THSZ). T is the element
        temperature. If α is temperature-dependent, TREF should be in the range
        of temperatures you define using the MPTEMP command.

        Reference temperatures may also be input per material by specifying a
        value on the MP material property command:

        MP,REFT,MAT,C0.

        Only a constant (non-temperature-dependent) value is valid. The value
        input on the TREF command applies to all materials not having a
        specified material property definition.

        To convert temperature-dependent secant coefficients of thermal
        expansion (SCTE) data (properties ALPX, ALPY, ALPZ) from the definition
        temperature to the reference temperature defined via a TREF (or
        MP,REFT) command, issue the MPAMOD command.

        This command is also valid in PREP7.
        """
        command = "TREF,%s" % (str(tref))
        return self.run(command, **kwargs)

    def cbdof(self, fname1="", ext1="", fname2="", ext2="", kpos="", clab="",
              kshs="", tolout="", tolhgt="", tolthk="", **kwargs):
        """APDL Command: CBDOF

        Activates cut-boundary interpolation (for submodeling).

        Parameters
        ----------
        fname1
            File name and directory path (248 characters maximum,
            including directory) from which to read boundary node
            data. If no specified directory path exists, the path
            defaults to your working directory and you can use all 248
            characters for the file name.

        ext1
            Filename extension (eight-character maximum).

        fname2
            File name and directory path (248 characters maximum,
            including directory) to which cut-boundary D commands are
            written. If no specified directory path exists, the path
            defaults to your working directory and you can use all 248
            characters for the file name.

        ext2
            Filename extension (eight-character maximum).

        kpos
            Position on Fname2 to write block of D commands:

            0 - Beginning of file (overwrite existing file).

            1 - End of file (append to existing file).

        clab
            Label (eight characters maximum, including the colon) for
            this block of D commands on Fname2.  his label is appended
            to the colon (:).  Defaults to CBn, where n is the
            cumulative iteration number for the data set currently in
            the database.  For imaginary data (see KIMG on the *SET
            command), Clab defaults to CIn.

        kshs
            Shell-to-solid submodeling key:

            0 - Solid-to-solid or shell-to-shell submodel.

            1 - Shell-to-solid submodel.

        tolout
            Extrapolation tolerance about elements, based on a
            fraction of the element dimension. Submodel nodes outside
            the element by more than TOLOUT are not accepted as
            candidates for DOF extrapolation.  Defaults to 0.5 (50
            percent).

        tolhgt
            Height tolerance above or below shell elements, in units
            of length.  Used only for shell-to-shell submodeling (KSHS
            = 0). Submodel nodes off the element surface by more than
            TOLHGT are not accepted as candidates for
            degree-of-freedom interpolation or extrapolation.
            Defaults to 0.0001 times the maximum element dimension.

        tolthk
            Height tolerance above or below shell elements, based on a
            fraction of the shell element thickness. Used only for
            shell-to-solid submodeling (KSHS = 1). Submodel nodes off
            the element surface by more than TOLTHK are not accepted
            as candidates for DOF interpolation or
            extrapolation. Defaults to 0.1 times the average shell
            thickness.

        Notes
        -----
        File Fname1 should contain a node list for which boundary
        conditions are to be interpolated (NWRITE).  File Fname2 is
        created to contain interpolated boundary conditions written as
        a block of D commands.

        Boundary conditions are written for the active
        degree-of-freedom set for the element from which interpolation
        is performed. Interpolation occurs on the selected set of
        elements.  The block of D commands begins with an identifying
        colon label and ends with a /EOF command.  The colon label is
        of the form :Clab (described above).

        Interpolation from multiple results sets can be performed by
        looping through the results file in a user-defined macro.
        Additional blocks can be appended to Fname2 by using KPOS and
        unique colon labels.  To read the block of commands, issue the
        /INPUT command with the appropriate colon label.

        If the model has coincident (or very close) nodes, the CBDOF
        must be applied to each part of the model separately to ensure
        that the mapping of the nodes is correct.  For example, if
        nodes belonging to two adjacent parts linked by springs are
        coincident, the operation should be performed on each part of
        the model separately.

        Resume the coarse model database at the beginning of the
        cut-boundary procedure. The database should have been saved
        after the first coarse model solution, as the number of nodes
        in the database and the results file must match, and internal
        nodes are sometimes created during the solution.

        Caution: Relaxing the TOLHGT or TOLTHK tolerances to allow
        submodel nodes to be "found" can produce poor submodel
        results.
        """
        command = f"CBDOF,{fname1},{ext1},,{fname2},{ext2},,{kpos},{clab},{kshs},{tolout},{tolhgt},{tolthk}"
        return self.run(command, **kwargs)

    def nladaptive(self, component="", action="", criterion="", option="",
                   val1="", val2="", val3="", **kwargs):
        """APDL Command: NLADAPTIVE

        Defines the criteria under which the mesh is refined or modified during
        a nonlinear solution.

        Parameters
        ----------
        component
            Specifies the element component upon which this command should act:

            ALL  - All selected components, or all selected elements if no component is selected
                   (default).

            Name - Component name.

        action
            The action to perform on the selected component(s):

            ADD  - Add a criterion to the database.

            LIST  - List the criteria defined for the specified component(s).

            DELETE  - Delete the criteria defined for the specified component(s).

            ON - Enable the defined criteria for the specified component(s) and specify how
                 frequently and when to check them (via ON,,,VAL1,VAL2,VAL3):

            VAL1 -- Checking frequency. If > 0, check criteria at every VAL1 substeps. If < 0, check criteria at each of the VAL1 points (approximately equally spaced) between VAL2 and VAL3. (Default = -1.) - VAL2 -- Checking start time, where VAL2 < VAL3. (Default is the start time of
                              the load step.)

            VAL3 -- Checking end time, where VAL3 > VAL2. (Default is the end time of the load step.)  - OFF

        criterion
            The type of criterion to apply to the selected component(s):

            CONTACT  - Contact-based. (Valid only for Action = ADD, Action = LIST, or Action =
                       DELETE.)

            ENERGY  - Energy-based. (Valid only for Action = ADD, Action = LIST, or Action = DELETE.)

            BOX  - A position-based criterion, defined by a box. (Valid only for Action = ADD,
                   Action = LIST, or Action = DELETE.)

            MESH  - A mesh-quality-based criterion. (Valid only for Action = LIST, or Action =
                    DELETE.)

            ALL  - All criteria and options. (Valid only for Action = LIST or Action = DELETE.
                   Option and all subsequent arguments are ignored.)

        option
            Criterion option to apply to the selected component(s):

            NUMELEM  - For target elements only, define the minimum number of contact elements to
                       contact with each target element. If this criterion is
                       not satisfied, the program refines the contact elements
                       and the associated solid elements. For this option, VAL1
                       must be a positive integer. (Valid only for Action =
                       ADD, Action = LIST, or Action = DELETE. )

            MEAN  - Check the strain energy of any element that is part of the defined component
                    for the condition Ee ≥ c1 * Etotal / NUME (where c1 = VAL1,
                    Etotal is the total strain energy of the component, and
                    NUME is the number of elements of the component). If this
                    criterion is satisfied at an element, the program refines
                    the element. For this option, VAL1 must be non-negative and
                    defaults to 1. (Valid only for Action = ADD, Action = LIST,
                    or Action = DELETE.)

            XYZRANGE  - Define the location box in which all elements within are to be split or
                        refined. Up to six values following the Option argument
                        (representing the x1, x2, y1, y2, z1, and z2
                        coordinates) are allowed. An unspecified coordinate is
                        not checked. (Valid only for Action = ADD, Action =
                        LIST, or Action = DELETE.)

            SKEWNESS - Mesh-quality control threshold for element SOLID285. Valid values (VAL1) are
                       0.0 through 1.0. Default = 0.9. (Valid only for Action =
                       ADD, Action = LIST, or Action = DELETE.)

            WEAR - This option is valid only for contact elements having surface wear specified
                   (TB,WEAR). Define VAL1 as a critical ratio of magnitude of
                   wear to the average depth of the solid element underlying
                   the contact element. Once this critical ratio is reached for
                   any element, the program morphs the mesh to improve the
                   quality of the elements. VAL1 must be a positive integer.
                   (Valid only for Action = ADD, Action = LIST, or Action =
                   DELETE.) The WEAR criterion cannot be combined with any
                   other criterion.

            ALL  - All options. (Valid only for Action = LIST or Action = DELETE. All subsequent
                   arguments are ignored.)

        Notes
        -----
        If a specified component (Component) is an assembly, the defined
        criterion applies to all element components included in the assembly.

        All components must be defined and selected before the first solve
        (SOLVE), although their nonlinear adaptivity criteria can be modified
        from load step to load step, and upon restart. For nonlinear adaptivity
        to work properly, ensure that all components are selected before each
        solve.

        After using this command to define a new criterion, the new criterion
        becomes active and is checked one time during each load step, roughly
        in mid-loading (unless this behavior is changed via Action = ON).

        When a criterion is defined, it overwrites a previously defined
        criterion (if one exists) through the same component, or through the
        component assembly that includes the specified component.

        During solution, the same criteria defined for an element through
        different components are combined, and the tightest criteria and action
        control (Action,ON,,,VAL1) are used. If an ON action is defined by a
        positive VAL1 value through one component and a negative VAL1 value
        through another, the program uses the positive value.

        For Action = ON, if VAL2 (start time) and/or VAL3 (end time) are
        unspecified or invalid, the program uses the start and/or end time
        (respectively) of the load step. If VAL1 < 0, the program checks VAL1
        points between VAL2 and VAL3. The time interval between each check
        points is determined by (VAL3 - VAL2) / (VAL1 + 1), with the first
        check point as close to VAL2 + (VAL3 - VAL2) / (VAL1 + 1) as possible.
        Fewer check points can be used if the number of substeps during
        solution is insufficient (as the program can only check at the end of a
        substep).

        Option = SKEWNESS applies to linear tetrahedral element SOLID285 only.
        When the skewness of a SOLID285 element is >= the defined value, the
        element is used as the core (seed) element of the remeshed region(s).
        If this criterion is used together with any other criteria for the same
        component, the other criteria defined for the component are ignored.
        The most desirable skewness value is 0, applicable when the element is
        a standard tetrahedral element; the highest value is 1, applicable when
        the element becomes flat with zero volume. For more information about
        skewness and remeshing, see Mesh Nonlinear Adaptivity in the Advanced
        Analysis Guide.

        For more granular control of the source mesh geometry, see NLMESH.
        """
        command = "NLADAPTIVE,%s,%s,%s,%s,%s,%s,%s" % (str(component), str(action), str(criterion), str(option), str(val1), str(val2), str(val3))
        return self.run(command, **kwargs)

    
    def cycspec(self, label="", node="", item="", comp="", **kwargs):
        """APDL Command: CYCSPEC

        Defines the set of result items for a subsequent CYCCALC command in
        postprocessing a cyclic harmonic mode-superposition analysis.

        Parameters
        ----------
        label
            One of the following labels:

            ADD - Adds a new specification to the set (default). The maximum number of
                  specifications that can be defined is 50.

            LIST - Lists the current set of specifications. Node, Item, Comp are ignored.

            ERASE - Erases the current set of specifications. Node, Item, Comp are ignored.

            DELETE - Deletes an existing specification. Item, Comp are ignored.

        node
            The node at which to evaluate the results. If Node is a nodal
            component, then all nodes in the component are included. All
            sectors containing this node (or set of nodes) are evaluated.

        item
            Specifies the type of values to evaluate:

            U - Displacement

            S - Stress

            EPEL - Elastic strain

        comp
            Specifies the specific component of displacement, stress, or strain
            to evaluate:

            X,Y,Z - Direct components

            XY,YZ,XZ - Shear components (stress and strain only)

            1,2,3 - Principal values (stress and strain only)

            EQV - Equivalent value (stress and strain only)

            SUM - Vector sum (displacement only)

            NORM - L2 norm for the set of nodes (displacement only)

        Notes
        -----
        Up to 50 specifications can be defined for use in a subsequent CYCCALC
        command. If more than 50 specifications are desired, erase the table
        after the CYCCALC operation and add new specifications and repeat the
        CYCCALC command. All the specified nodes, items, and components are
        evaluated for all sectors and the maximum amplitude value output. For
        combined stresses and strains (Comp = 1,2,3 or EQV) or displacement
        vector sum (Comp = SUM), a 360 degree phase sweep is performed at each
        location to determine the maximum.

        Additional POST1 controls are used to refine the specification. For
        component values, components are in the RSYS direction. For shell
        elements, the results are at the SHELL location. For EPEL,EQV, the
        results are based on the EFFNU value on the AVPRIN command. The
        controls active when the CYCCALC command is issued determine the result
        values. If results at another SHELL location are desired, issue the new
        SHELL command and then re-issue the CYCCALC command.

        If a single node is input, the Item/Comp value at that location in each
        sector is output. If a node component is given, then the maximum
        Item/Comp value within the set of nodes of each sector is output, one
        value for each sector (the node of the maximum may vary from sector to
        sector). For stress and strain items, only corner nodes are valid.

        For the displacement norm option (Item = U, Comp = NORM), the L2 norm
        computed from all the nodes in the component is output, one per sector.
        """
        command = "CYCSPEC,%s,%s,%s,%s" % (str(label), str(node), str(item), str(comp))
        return self.run(command, **kwargs)

    def adams(self, nmodes="", kstress="", kshell="", **kwargs):
        """APDL Command: ADAMS

        Performs solutions and writes flexible body information to a modal
        neutral file (Jobname.MNF) for use in an ADAMS analysis.

        Parameters
        ----------
        nmodes
            Number of normal modes to be written to Jobname.MNF file (no
            default).

        kstress
            Specifies whether to write stress or strain results:

            0 - Do not write stress or strain results (default).

            1 - Write stress results.

            2 - Write strain results.

            3 - Write both stress and strain results.

        kshell
            Shell element output location. This option is valid only for shell
            elements.

            0, 1 - Shell top surface (default).

            2 - Shell middle surface.

            3 - Shell bottom surface.

        Notes
        -----
        ADAMS invokes a predefined ANSYS macro that solves a series of analyses
        and then writes the modal neutral file, Jobname.MNF. This file can be
        imported into the ADAMS program in order to perform a rigid body
        dynamics simulation. For detailed information on how to use the ADAMS
        command macro to create a modal neutral file, see Rigid Body Dynamics
        and the ANSYS-ADAMS Interface in the Substructuring Analysis Guide.

        Before running the ADAMS command macro, you must specify the units with
        the /UNITS command. The interface points should be the only selected
        nodes when the command macro is initiated. (Interface points are nodes
        where constraints may be applied in ADAMS.) Only selected elements will
        be considered in the calculations.

        By default, stress and strain data is transferred to the ADAMS program
        for all nodes, as specified by the KSTRESS value.  If you want to
        transfer stress/strain data for only a subset of nodes, select the
        desired subset and create a node component named "STRESS" before
        running the ADAMS command macro.  For example, you may want to select
        exterior nodes for the purpose of visualization in the ADAMS program.

        The default filename for the modal neutral file is Jobname.MNF. In
        interactive (GUI) mode, you can specify a filename other than
        Jobname.MNF. In batch mode, there is no option to change the filename,
        and the modal neutral file is always written to Jobname.MNF.
        """
        command = "ADAMS,%s,%s,%s" % (str(nmodes), str(kstress), str(kshell))
        return self.run(command, **kwargs)

    
    def mfrc(self, freq="", maxfiles="", **kwargs):
        """APDL Command: MFRC

        Controls file writing for multiframe restarts for the ANSYS Multi-field
        solver.

        Parameters
        ----------
        freq
            Frequency at which the .Xnnn files are written.

            0 - Do not write any .Xnnn files for this simulation

            LAST - Write the .Xnnn files for the last multifield time step (default).

            N - If N is a positive number, write the .Xnnn file every Nth multifield time step.

        maxfiles
            Maximum number of .Xnnn files to save for a multifield analysis.

            0 - Do not overwrite existing .Xnnn files (default). The total maximum number of
                .Xnnn files for one run is 999. If this number is reached
                before the analysis is complete, the analysis will continue,
                but will no longer write .Xnnn files.

            N - The maximum number of .Xnnn file to keep for this multifield simulation. When
                this number of .Rnnn have been written, ANSYS will overwrite
                the first .Xnnn file of the subsequent multifield time step.

        Notes
        -----
        This command sets up the restart parameters for a multiframe restart,
        allowing you to restart an analysis from any multifield time step for
        which there is a .Rnnn file. You can perform a multiframe restart only
        for nonlinear static and full transient structural, thermal and
        thermal- structural (see RESCONTROL for details).

        If you have many multifield time steps, and are writing .Xnnn files
        frequently, use MAXFILES to limit the number of .Xnnn files saved,
        since these files can fill up your disk quickly.

        For a CFX analysis, you must also configure the MFOUTPUT and MFRSTART
        settings to ensure consistent time points for postprocessing and
        restart simulation.

        For MFX simulation, the RESCONTROL command will be ignored.

        Default Behavior

        In nonlinear static and full transient analyses, the default behavior
        is multiframe restart. (MFRC,LAST). By default, the .Rnnn file is
        written at the last multifield time step . An .Rnnn file and
        corresponding load set of .ldhi files is also written at the multifield
        time step prior to the abort point of the run if an abort file was
        used, or if the job terminated because of a failure to converge or some
        other solution error. No information at the aborted multifield time
        step is saved in either the .Rnnn file or the .ldhi file.

        This command cannot be issued after restarting a multifield analysis.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFRC,%s,%s" % (str(freq), str(maxfiles))
        return self.run(command, **kwargs)

    def mmass(self, option="", zpa="", **kwargs):
        """APDL Command: MMASS

        Specifies the missing mass response calculation.

        Parameters
        ----------
        option
            Flag to activate or deactivate missing mass response calculation.

            0 (OFF or NO) - Deactivate (default).

            1 (ON or YES) - Activate.

        zpa
            Zero Period Acceleration Value. If a scale factor FACT is defined
            on the SVTYP command, it is applied to this value.

        Notes
        -----
        The missing mass calculation is valid only for single point excitation
        response spectrum analysis (SPOPT, SPRS) and for multiple point
        response spectrum analysis (SPOPT, MPRS) performed with base excitation
        using acceleration response spectrum loading. Missing mass is supported
        in a spectrum analysis only when the preceding modal analysis is
        performed with the Block Lanczos, PCG Lanczos, Supernode, or Subspace
        eigensolver (Method =LANB, LANPCG, SNODE, or SUBSP on the MODOPT
        command).

        The velocity solution is not available (Label = VELO on the combination
        command: SRSS, CQC...) when the missing mass calculation is activated.

        The missing mass calculation is not supported when the spectrum
        analysis is based on a linear perturbation modal analysis performed
        after a nonlinear base analysis.

        The missing mass is not supported when superelements are present.

        To take into account the contribution of the truncated modes, the
        residual vector (RESVEC) can be used in place of the missing mass
        response. This is of particular interest if the velocity solution is
        requested or if a nonlinear prestress is included in the analysis
        (linear perturbation), or if a superelement is present, since the
        missing mass cannot be used in these cases.

        In a multiple point response spectrum analysis (SPOPT,MPRS), the MMASS
        command must precede the participation factor calculation command
        (PFACT).

        This command is also valid in PREP7.
        """
        command = "MMASS,%s,%s" % (str(option), str(zpa))
        return self.run(command, **kwargs)

    def trpdel(self, ntrp1="", ntrp2="", trpinc="", **kwargs):
        """APDL Command: TRPDEL

        Deletes particle flow or charged particle trace points.

        Parameters
        ----------
        ntrp1, ntrp2, trpinc
            Delete points from NTRP1 to NTRP2 (defaults to NTRP1) in steps of
            TRPINC (defaults to 1).  If NTRP1 = ALL, NTRP2 and TRPINC are
            ignored and all trace points are deleted.  If NTRP1 = P, graphical
            picking is enabled and all remaining command fields are ignored
            (valid only in the GUI).

        Notes
        -----
        Deletes particle flow or charged particle trace points defined with the
        TRPOIN command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "TRPDEL,%s,%s,%s" % (str(ntrp1), str(ntrp2), str(trpinc))
        return self.run(command, **kwargs)

    def wsprings(self, **kwargs):
        """APDL Command: WSPRINGS

        Creates weak springs on corner nodes of a bounding box of the currently
        selected elements.

        Notes
        -----
        WSPRINGS invokes a predefined ANSYS macro that is used during the
        import of loads from the ADAMS program into the ANSYS program. WSPRINGS
        creates weak springs on the corner nodes of the bounding box of the
        currently selected elements. The six nodes of the bounding box are
        attached to ground using COMBIN14 elements. The stiffness is chosen as
        a small number and can be changed by changing the real constants of the
        COMBIN14 elements. This command works only for models that have a
        geometric extension in two or three dimensions. One dimensional
        problems (pure beam in one axis) are not supported.

        For more information on how WSPRINGS is used during the transfer of
        loads from the ADAMS program to ANSYS, see Import Loads into ANSYS in
        the Substructuring Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WSPRINGS,"
        return self.run(command, **kwargs)

    def fsnode(self, node="", nev="", nlod="", **kwargs):
        """APDL Command: FSNODE

        Calculates and stores the stress components at a node for fatigue.

        Parameters
        ----------
        node
            Node number for which stress components are stored.

        nev
            Event number to be associated with these stresses (defaults to 1).

        nlod
            Loading number to be associated with these stresses (defaults to
            1).

        Notes
        -----
        Calculates and stores the total stress components at a specified node
        for fatigue.  Stresses are stored according to the event number and
        loading number specified.  The location is associated with that
        previously defined for this node [FL] or else it is automatically
        defined.  Stresses are stored as six total components (SX through SYZ).
        Temperature and current time are also stored along with the total
        stress components.  Calculations are made from the stresses currently
        in the database (last SET or LCASE command).  Stresses stored are in
        global Cartesian coordinates, regardless of the active results
        coordinate system [RSYS].  The FSLIST command may be used to list
        stresses.  The FS command can be used to modify stored stresses.
        """
        command = "FSNODE,%s,%s,%s" % (str(node), str(nev), str(nlod))
        return self.run(command, **kwargs)

    
    def spopt(self, sptype="", nmode="", elcalc="", modereusekey="", **kwargs):
        """APDL Command: SPOPT

        Selects the spectrum type and other spectrum options.

        Parameters
        ----------
        sptype
            Spectrum type:

            SPRS - Single point excitation response spectrum (default).  See also the SVTYP
                   command.

            MPRS - Multiple point excitation response spectrum.

            DDAM - Dynamic design analysis method.

            PSD - Power spectral density.

        nmode
            Use the first NMODE modes from the modal analysis.  Defaults to all
            extracted modes, as specified by the MODOPT and BUCOPT commands.
            NMODE cannot be larger than 10000.

        elcalc
            Element results calculation key (for Sptype = PSD only):

            NO - Do not calculate element results and reaction forces (default).

            YES - Calculate element results and reaction forces, as well as the nodal degree of
                  freedom solution.

        modereusekey
            Key for existing MODE file reuse when running multiple spectrum
            analyses:

            NO - No spectrum analysis has been performed yet (default).

            YES - This is not the first spectrum analysis.  The MODE file will be reused and the
                  necessary files will be cleaned up for the new spectrum
                  analysis.

        Notes
        -----
        Valid only for a spectrum analysis (ANTYPE,SPECTR).  This operation
        must be preceded by a modal solution (ANTYPE,MODAL) with the
        appropriate files available.  Both the spectrum analysis and the
        preceding modal analysis must be performed under the same ANSYS version
        number.

        If used in SOLUTION, this command is valid only within the first load
        step.

        This command is also valid in PREP7.

        Only Sptype = SPRS is allowed in ANSYS Professional.
        """
        command = "SPOPT,%s,%s,%s,%s" % (str(sptype), str(nmode), str(elcalc), str(modereusekey))
        return self.run(command, **kwargs)

    def dlist(self, node1="", node2="", ninc="", **kwargs):
        """APDL Command: DLIST

        Lists DOF constraints.

        Parameters
        ----------
        node1, node2, ninc
            List constraints for nodes NODE1 to NODE2 (defaults to NODE1) in
            steps of NINC (defaults to 1).  If ALL (default), NODE2 and NINC
            are ignored and constraints for all selected nodes [NSEL] are
            listed.  If NODE1 = P, graphical picking is enabled and all
            remaining command fields are ignored (valid only in the GUI).  A
            component name may also be substituted for NODE1(NODE2 and NINC are
            ignored).

        Notes
        -----
        Listing applies to the selected nodes [NSEL] and the selected degree of
        freedom labels [DOFSEL].

        This command is valid in any processor.
        """
        command = "DLIST,%s,%s,%s" % (str(node1), str(node2), str(ninc))
        return self.run(command, **kwargs)

    
    
    def fmagsum(self, cnam1="", cnam2="", cnam3="", cnam4="", cnam5="",
                cnam6="", cnam7="", cnam8="", cnam9="", **kwargs):
        """APDL Command: FMAGSUM

        Summarizes electromagnetic force calculations on element components.

        Parameters
        ----------
        cnam1, cnam2, cnam3, . . . , cnam9
            Names of existing element components for which Maxwell or virtual
            work boundary conditions were applied in the preprocessor.  Must be
            enclosed in single quotes (e.g., `Cnam1') when the command is
            manually typed in.

        Notes
        -----
        FMAGSUM invokes an ANSYS macro that summarizes the Maxwell and virtual
        work forces.  The element components must have had appropriate Maxwell
        or virtual work boundary conditions established in the preprocessor
        prior to solution in order to retrieve forces (see FMAGBC, SF, BF
        commands). The forces are also stored on a per-element basis for the
        adjacent air layer surrounding the components in the element table
        [ETABLE].  Maxwell forces are stored as items FMX_X, FMX_Y, and FMX_Z,
        and virtual work forces are stored as items FVW_X, FVW_Y, and FVW_Z.
        Use the PLETAB and PRETAB commands to plot and list the element table
        items.

         If using elements PLANE121, SOLID122, SOLID123, PLANE233, SOLID236,
        and SOLID237, use EMFT to summarize electromagnetic force and torque.

        FMAGSUM can also be used to summarize time-average forces from a 2-D
        harmonic analysis.
        """
        command = "FMAGSUM,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cnam1), str(cnam2), str(cnam3), str(cnam4), str(cnam5), str(cnam6), str(cnam7), str(cnam8), str(cnam9))
        return self.run(command, **kwargs)

    def ui(self, func="", type_="", format_="", screen="", color="", krev="",
           orient="", compress="", quality="", **kwargs):
        """APDL Command: /UI

        Activates specified GUI dialog boxes.

        Parameters
        ----------
        func
            Label identifying the dialog box to be activated:

            HELP - Activates the online help system. Valid only in non-UI graphics mode
                   (/MENU,GRPH).

            VIEW - Activates the Pan, Zoom, Rotate dialog box

            WPSE - Activates the Working Plane Settings dialog box.

            WPVI - Activates the Offset Working Plane dialog box.

            RESULT - Activates the Query Picking Menu for reviewing results.

            QUERY - Activates the Query Picked Entities (preprocess) dialog box.

            COPY - Activates the Hard Copy dialog box.

            ANNO - Activates the 2D Annotation dialog box.

            AN3D - Activates the 3D Annotation dialog box.

            SELECT - Activates the Select Entities dialog box.

            NSEL - Activates a picking menu to select nodes.

            ESEL - Activates a picking menu to select elements.

            KSEL - Activates a picking menu to select keypoints.

            LSEL - Activates a picking menu to select lines.

            ASEL - Activates a picking menu to select areas.

            VSEL - Activates a picking menu to select volumes.

            REFRESH - Refreshes the graphics window (non-UI mode only).

            COLL - Controls the collapse of the ANSYS Main Menu when a FINISH command is issued.
                   See Type below for a discussion of the arguments.

        type\_
            Label identifying the type of select operation.  Valid only for the
            following Func labels; NSEL, ESEL, KSEL, LSEL, ASEL, and VSEL:

            S - Select a new set.

            R - Reselect a set from the current set.

            A - Additionally select a set and extend the current set.

            U - Unselect a set from the current set.

        Notes
        -----
        Allows you to activate specified GUI dialog boxes directly in either
        GUI or non-GUI mode.
        """
        command = "/UI,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(func), str(type_), str(format_), str(screen), str(color), str(krev), str(orient), str(compress), str(quality))
        return self.run(command, **kwargs)

    
    def rmflvec(self, **kwargs):
        """APDL Command: RMFLVEC

        Writes eigenvectors of fluid nodes to a file for use in damping
        parameter extraction.

        Notes
        -----
        RMFLVEC extracts the modal information from the modal results file for
        all nodes specified in a node component called 'FLUN'. This component
        should include all nodes which are located at the fluid-structural
        interface. Mode shapes, element normal orientation, and a scaling
        factor are computed and stored in a file Jobname.EFL. For damping
        parameter extraction, use the DMPEXT command macro. See Introduction
        for more information on thin film analyses.

        FLUID136 and FLUID138 are used to model the fluid interface. Both the
        structural and fluid element types must be active. The fluid interface
        nodes must be grouped into a component 'FLUN'. A results file of the
        last modal analysis must be available.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "RMFLVEC,"
        return self.run(command, **kwargs)

    def mfrelax(self, lab="", value="", option="", **kwargs):
        """APDL Command: MFRELAX

        Sets relaxation values for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        lab
            Valid labels:

        value
            Relaxation value. Defaults to 0.75 for all labels.

        option
            Valid options are:

            RELX  - Uses relaxation method for load transfer (default).

            LINT  - Uses a linear interpolation for loaf transfer.

        Notes
        -----
        MFRELAX sets relaxation values for the load transfer variables at a
        surface or volume interface. Option = RELX will usually give you a more
        stable and smooth load transfer and is suitable for strongly coupled
        problems (such as FSI problems). Option = LINT is suitable for weakly
        coupled problems because it will transfer the full load in fewer
        stagger iterations.

        See the MFFR and MFITER commands for more information on relaxation in
        the ANSYS Multi-field solver.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFRELAX,%s,%s,%s" % (str(lab), str(value), str(option))
        return self.run(command, **kwargs)

    
    def qrdopt(self, reusekey="", symmeth="", cmccoutkey="", **kwargs):
        """APDL Command: QRDOPT

        Specifies additional QRDAMP modal analysis options.

        Parameters
        ----------
        reusekey
            Reuse key for method=QRDAMP specified in MODOPT command.

            ON - Reuse the symmetric eigensolution from the previous
                 load steps or from the previous solution.

            OFF - Do not reuse (calculates symmetric eigensolution at
                  current load step). This is the default.

        symmeth
            Mode-extraction method to be used for the symmetric eigenvalue
            problem.

            LANB - Block Lanczos (default for shared-memory parallel processing).

            SUBSP - Subspace algorithm (default for distributed-memory
                    parallel processing).

        cmccoutkey
            Complex Modal Contribution Coefficients (CMCC) output
            key. See Calculate the Complex Mode Contribution
            Coefficients (CMCC) in the Structural Analysis Guide for
            details and usage.

            ON - Output the CMCC to the text file Jobname.CMCC.

            OFF - Do not output the CMCC. This is the default.

        Notes
        -----
        If the filename.modesym file exists in the working directory
        and ReuseKey = ON, filename.modesym will be reused. If
        filename.modesym does not exist in the working directory, the
        symmetric eigensolution will be calculated.

        When ReuseKey=ON, both the new modal analysis
        (filename.modesym usage) and the preceding modal analysis
        (filename.modesym generation) must be performed using the same
        product version number.

        The mode-extraction method changes depending on the type of
        parallelism involved. For performance reasons, the subspace
        method is used with distributed-memory parallel processing
        (Distributed ANSYS) runs, while the Block Lanczos method is
        used with shared-memory parallel processing runs.
        """
        return self.run(f"QRDOPT,{reusekey},,,{symmeth},{cmccoutkey}", **kwargs)

    
    def rigid(self, dof1="", dof2="", dof3="", dof4="", dof5="", dof6="",
              **kwargs):
        """APDL Command: RIGID

        Specifies known rigid body modes (if any) of the model.

        Parameters
        ----------
        dof1, dof2, dof3, . . . , dof6
            Up to six global Cartesian directions of the rigid modes.
            For a completely free 2-D model, use ALL or UX, UY, ROTZ.
            For a completely free 3-D model, use ALL or UX, UY, UZ,
            ROTX, ROTY, ROTZ.  For a constrained model, use UX, UY,
            UZ, ROTX, ROTY, or ROTZ, as appropriate, to specify each
            and every unconstrained direction which exists in the
            model (not specifying every direction may cause
            difficulties in extracting the modes).

        Notes
        -----
        Specifies known rigid body modes (if any) of the model.  This
        command applies only to a component mode synthesis (CMS)
        analysis (see the CMSOPT command).  Any rigid body modes
        specified must be permitted by the applied displacement
        constraints (i.e., do not specify a rigid body mode in a
        constrained direction).  Reissue the command to redefine the
        specification.  If used in SOLUTION, this command is valid
        only within the first load step.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "RIGID,%s,%s,%s,%s,%s,%s" % (str(dof1), str(dof2), str(dof3), str(dof4), str(dof5), str(dof6))
        return self.run(command, **kwargs)

    def svtyp(self, ksv="", fact="", keyinterp="", **kwargs):
        """APDL Command: SVTYP

        Defines the type of single-point response spectrum.

        Parameters
        ----------
        ksv
            Response spectrum type:

            0 - Seismic velocity response spectrum loading (SV values interpreted as velocities
                with units of length/time).

            1 - Force response spectrum loading (SV values interpreted as force amplitude
                multipliers).

            2 - Seismic acceleration response spectrum loading (SV values interpreted as
                accelerations with units of length/time2).

            3 - Seismic displacement response spectrum loading (SV values interpreted as
                displacements with units of length).

            4 - PSD loading (SV values interpreted as acceleration2/(cycles/time), such as
                (in/sec2)2/Hz (not g2/Hz)).  (Not recommended)

        fact
            Scale factor applied to spectrum values (defaults to 1.0).  Values
            are scaled when the solution is initiated [SOLVE].  Database values
            remain the same.

        keyinterp
            Key to activate or deactivate the linear interpolation between
            input response spectrum points and input response spectrum curves:

            0 (OFF or NO) - Deactivate linear and use logarithmic interpolation. This value is the default.

            1 (ON or YES) - Activate linear interpolation.

        Notes
        -----
        Defines the type of single-point response spectrum [SPOPT].  The
        seismic excitation direction is defined with the SED command.

        This command is also valid in PREP7.
        """
        command = "SVTYP,%s,%s,%s" % (str(ksv), str(fact), str(keyinterp))
        return self.run(command, **kwargs)

    def axlab(self, axis="", lab="", **kwargs):
        """APDL Command: /AXLAB

        Labels the X and Y axes on graph displays.

        Parameters
        ----------
        axis
            Axis specifier:

            X - Apply label to X axis.

            Y - Apply label to Y axis.

        lab
            Axis label (user defined text up to 30 characters long).  Leave
            blank to reestablish the default for Axis axis.

        Notes
        -----
        This command is valid in any processor.
        """
        command = "/AXLAB,%s,%s" % (str(axis), str(lab))
        return self.run(command, **kwargs)

    
    def icscale(self, wn="", factor="", **kwargs):
        """APDL Command: /ICSCALE

        Scales the icon size for elements supported in the circuit builder.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        factor
            Factor applied to the default icon size (defaults to 1).

        Notes
        -----
        Scaling the icon size can provide better visualization of the circuit
        components when using the Circuit Builder (an interactive builder
        available in the ANSYS GUI).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "/ICSCALE,%s,%s" % (str(wn), str(factor))
        return self.run(command, **kwargs)

    def kuse(self, key="", **kwargs):
        """APDL Command: KUSE

        Specifies whether or not to reuse the factorized matrix.

        Parameters
        ----------
        key
            Reuse key:

            0  - Program decides whether or not to reuse the previous factorized stiffness
                 matrix.

            1  - Force the previous factorized stiffness matrix to be reused.  Used mainly in a
                 restart.  Forcing reuse of the matrix is a nonstandard use of
                 the program, and should be done with caution.  For instance,
                 using this option and changing the number of elements, or the
                 number or type of degrees of freedom, may cause an abort.

            -1  - All element matrices are reformed and are used to reform a new factorized
                  stiffness matrix.

        Notes
        -----
        Overrides the program logic to determine whether or not to reuse the
        previous factorized stiffness matrix for each substep of this load
        step.  Applies only to static or full transient analyses and to full
        harmonic analyses if the frequency is not changed for continuing
        loadsteps. For full harmonic analyses, only KEY = 1 or KEY = 0 is
        valid.

        This command is also valid in PREP7.
        """
        command = "KUSE,%s" % (str(key))
        return self.run(command, **kwargs)

    
    def torqsum(self, cnam1="", cnam2="", cnam3="", cnam4="", cnam5="",
                cnam6="", cnam7="", cnam8="", cnam9="", **kwargs):
        """APDL Command: TORQSUM

        Summarizes electromagnetic torque calculations on element components.

        Parameters
        ----------
        cnam1, cnam2, cnam3, . . . , cnam9
            Names of existing element components for which Maxwell or virtual
            work boundary conditions were applied in the preprocessor.  Must be
            enclosed in single quotes (e.g., 'CNAM1') when the command typed in
            the command input box.

        Notes
        -----
        TORQSUM invokes an ANSYS macro that summarizes the Maxwell and virtual
        work torque values.  The element components must have had appropriate
        Maxwell or virtual work boundary conditions established in the
        preprocessor prior to solution in order to retrieve torques (see the
        FMAGBC command).  The torque values are stored on a per-element basis
        for the adjacent air layer elements surrounding the components and are
        retrieved and summed by the macro.  For a harmonic analysis, the
        calculated torque represents a time-average value.

        TORQSUM is valid only for 2-D planar analysis.
        """
        command = "TORQSUM,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cnam1), str(cnam2), str(cnam3), str(cnam4), str(cnam5), str(cnam6), str(cnam7), str(cnam8), str(cnam9))
        return self.run(command, **kwargs)

    def plcrack(self, loc="", num="", **kwargs):
        """APDL Command: PLCRACK

        Displays cracking and crushing locations in SOLID65 elements.

        Parameters
        ----------
        loc
            Location at which symbols are to be displayed:

            0 - Plot symbols at integration points (default).

            1 - Plot symbol at element centroids (averaged).

        num
            Crack to be displayed:

            0 - Plot all cracks (default).

            1 - Plot only the first crack.

            2 - Plot only the second crack.

            3 - Plot only the third crack.

        Notes
        -----
        PLCRACK displays circles at locations of cracking or crushing in
        concrete elements.  Cracking is shown with a circle outline in the
        plane of the crack, and crushing is shown with an octahedron outline.
        If the crack has opened and then closed, the circle outline will have
        an X through it.  Each integration point can crack in up to three
        different planes.  The first crack at an integration point is shown
        with a red circle outline, the second crack with a green outline, and
        the third crack with a blue outline.

        Symbols shown at the element centroid (LOC = 1) are based on the status
        of all of the element's integration points.  If any integration point
        in the element has crushed, the crushed (octahedron) symbol is shown at
        the centroid.  If any integration point has cracked or cracked and
        closed, the cracked symbol is shown at the element centroid.  If at
        least five integration points have cracked and closed, the cracked and
        closed symbol is shown at the element centroid.  Finally, if more than
        one integration point has cracked, the circle outline at the element
        centroid shows the average orientation of all cracked planes for that
        element.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "PLCRACK,%s,%s" % (str(loc), str(num))
        return self.run(command, **kwargs)

    
    def susel(self, type_="", name1="", name2="", name3="", name4="", name5="",
              name6="", name7="", name8="", **kwargs):
        """APDL Command: SUSEL

        Selects a subset of surfaces

        Parameters
        ----------
        type\_
            Label identifying the type of select:

            S - Selects a new set (default).

            R - Reselects a set from the current set.

            A - Additionally selects a set and extends the current set.

            U - Unselects a set from the current set.

            ALL - Also selects all surfaces.

            NONE - Unselects all surfaces.

        name1, name2, name3, . . . , name8
            Eight character surface names

        Notes
        -----
        The selected set of surfaces is used in the following operations:
        SUMAP, SUDEL, SUCALC, SUEVAL, and SUVECT.
        """
        command = "SUSEL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(type_), str(name1), str(name2), str(name3), str(name4), str(name5), str(name6), str(name7), str(name8))
        return self.run(command, **kwargs)

    def oczone(self, zonetype="", zonename="", compnameint="", compnameext="",
               **kwargs):
        """APDL Command: OCZONE

        Specifies the type of ocean zone data to follow.

        Parameters
        ----------
        zonetype
            The type of ocean zone data to be input following this command:

            COMP - Define by a component.

            ZLOC - Define by Z levels.

            PIP - Associate an internal pipe or pipes with an external pipe.

        zonename
            The ocean zone name. If no name is specified, the program assigns
            one.

        compnameint
            For Zonetype = COMP, the required name of a component.

        compnameext
            For Zonetype = PIP, the required name of an external pipe
            component.

        Notes
        -----
        The OCZONE command specifies the type of ocean zone data to follow
        (component, Z-level, or internal pipes associated with an external
        pipe). An ocean zone is a local space where you can override global
        ocean-loading parameters.

        Names specified for ZoneName, CompNameInt, and CompNameExt can consist
        of up to 32 alphanumeric characters. The name cannot contain
        punctuation, special characters, or spaces.

        For Zonetype = COMP, the zone is defined by a component. Only the
        elements in the component are affected by the local parameters. A
        partial component can be defined as the zone via the Z input on the
        OCTABLE command.

        For Zonetype = ZLOC, the zone is defined by Z levels. Structural
        elements (such as BEAM188, BEAM189, PIPE288, PIPE289, and LINK180) in
        the Z levels are included in the zone.

        For Zonetype = PIP, the zone is prepared for a special configuration of
        pipes. It associates an internal pipe or pipes with an external pipe to
        remove the hydrodynamic effect on the internal pipe. Only hydrostatic
        pressure is applied on the internal pipe.

        This command is also valid in PREP7.

        Figure: 6:: : Ocean Zone Types (Specified via ZoneType)

        Issue this command before defining your ocean load data (OCDATA or
        OCTABLE). Define components before defining a component-type or a pipe-
        type zone (OCZONE,COMP or OCZONE,PIP, respectively).
        """
        command = "OCZONE,%s,%s,%s,%s" % (str(zonetype), str(zonename), str(compnameint), str(compnameext))
        return self.run(command, **kwargs)

    
    def sallow(self, strs1="", strs2="", strs3="", strs4="", strs5="",
               strs6="", **kwargs):
        """APDL Command: SALLOW

        Defines the allowable stress table for safety factor calculations.

        Parameters
        ----------
        strs1, strs2, strs3, . . . , strs6
            Input up to six allowable stresses corresponding to the temperature
            points [TALLOW].

        Notes
        -----
        Defines the allowable stress table for safety factor calculations
        [SFACT,SFCALC].  Use the STAT command to list current allowable stress
        table.  Repeat SALLOW to zero table and redefine points (6 maximum).

        Safety factor calculations are not supported by PowerGraphics. Both the
        SALLOW and TALLOW commands must be used with the Full Model Graphics
        display method active.
        """
        command = "SALLOW,%s,%s,%s,%s,%s,%s" % (str(strs1), str(strs2), str(strs3), str(strs4), str(strs5), str(strs6))
        return self.run(command, **kwargs)

    
    def pscontrol(self, option="", key="", **kwargs):
        """APDL Command: PSCONTROL

        Enables or disables shared-memory parallel operations.

        Parameters
        ----------
        option
            Specify the operations for which you intend to enable/disable
            parallel behavior:

            ALL  - Enable/disable parallel for all areas (default).

            PREP  - Enable/disable parallel during preprocessing (/PREP7).

            SOLU  - Enable/disable parallel during solution (/SOLU).

            FORM  - Enable/disable parallel during element matrix generation.

            SOLV  - Enable/disable parallel during equation solver.

            RESU - Enable/disable parallel during element results calculation.

            POST  - Enable/disable parallel during postprocessing (/POST1 and /POST26).

            STAT - List parallel operations that are enabled/disabled.

        key
             Option control key. Used for all Option values except STAT.

            ON  - Enable parallel operation.

            OFF  - Disable parallel operation.

        Notes
        -----
        Use this command in shared-memory parallel operations.

        This command is useful when you encounter minor discrepancies in a
        nonlinear solution when using different numbers of processors. A
        parallel operation applied to the element matrix generation can produce
        a different nonlinear solution with a different number of processors.
        Although the nonlinear solution converges to the same nonlinear
        tolerance, the minor discrepancy created may not be desirable for
        consistency.

        Enabling/disabling parallel behavior for the solution (Option = SOLU)
        supersedes the activation/deactivation of parallel behavior for element
        matrix generation (FORM), equation solver (SOLV), and element results
        calculation (RESU).

        The SOLV option supports only the sparse direct and PCG solvers
        (EQSLV,SPARSE or PCG). No other solvers are supported.

        This command applies only to shared-memory architecture. It does not
        apply to the Distributed ANSYS product.
        """
        command = "PSCONTROL,%s,%s" % (str(option), str(key))
        return self.run(command, **kwargs)

    def gtype(self, wn="", label="", key="", **kwargs):
        """APDL Command: /GTYPE

        Controls the entities that the GPLOT command displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which this command applies (defaults to
            1)

        label
            This represents the type of entity to display:

            NODE - Nodes

            ELEM - Elements

            KEYP - Keypoints

            LINE - Lines

            AREA - Areas

            VOLU - Volumes

            GRPH - Graph displays

        key
            Switch:

            0 - Turns the entity type off.

            1 - Turns the entity type on.

        Notes
        -----
        The /GTYPE command controls which entities the GPLOT command displays.
        NODE, ELEM, KEYP, LINE, AREA, and VOLU are on by default.  When ELEM is
        activated, you can control the type of element displayed via the /GCMD
        command (which also controls the type of graph display).  When the GRPH
        entity type is activated, all other entity types are deactivated.
        Conversely, when any of the NODE, ELEM, KEYP, LINE, AREA, and VOLU
        entity types are active, the GRPH entity type is deactivated.

        The /GTYPE command gives you several options for multi-window layout:

        One window

        Two windows (left and right or top and bottom of the screen)

        Three windows (two at the top and one at the bottom of the screen, or
        one top and two bottom windows

        Four windows (two at the top and two at the bottom)



        Once you choose a window layout, you can choose one of the following:
        multiple plots, replotting, or no redisplay.

        This command is valid in any processor.
        """
        command = "/GTYPE,%s,%s,%s" % (str(wn), str(label), str(key))
        return self.run(command, **kwargs)

    
    def cycfiles(self, fnamerst="", extrst="", fnamerfrq="", extrfrq="",
                 **kwargs):
        """APDL Command: CYCFILES

        Specifies the data files where results are to be found for a cyclic
        symmetry mode-superposition harmonic analysis.

        Parameters
        ----------
        fnamerst
            The file name and directory path of the results file from the
            cyclic modal solution. Defaults to Jobname.

        extrst
            File name extension for FnameRst. Defaults to rst.

        fnamerfrq
            The file name and directory path of the results file from the
            cyclic mode-superposition harmonic solution. Defaults to the value
            of the FnameRst argument.

        extrfrq
            File name extension for FnameRfrq. Defaults to rfrq.
        """
        command = "CYCFILES,%s,%s,%s,%s" % (str(fnamerst), str(extrst), str(fnamerfrq), str(extrfrq))
        return self.run(command, **kwargs)

    
    def smsurf(self, **kwargs):
        """APDL Command: SMSURF

        Specifies "Surface loads on the solid model" as the subsequent status
        topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SMSURF,"
        return self.run(command, **kwargs)

    def plmc(self, lstep="", sbstep="", timfrq="", kimg="", hibeg="", hiend="",
             **kwargs):
        """APDL Command: PLMC

        Plots the modal coordinates from a mode-superposition solution.

        Parameters
        ----------
        lstep, sbstep
            Plot the solution identified as load step LSTEP and substep SBSTEP

        timfrq
            As an alternative to LSTEP and SBSTEP, plot the solution at the
            time value TIMFRQ (for ANTYPE,TRANS) or frequency value TIMFRQ (for
            ANTYPE,HARMIC). LSTEP and SBSTEP should be left blank.

        kimg
            If 0 (or blank), plot the real solution. If 1, plot the imaginary
            solution. Only valid for ANTYPE,HARMIC.

        hibeg, hiend
            For cyclic symmetry solutions, plot the solutions in the harmonic
            index solution range HIbeg to HIend. Defaults to all harmonic
            indices (all modes).

        Notes
        -----
        PLMC plots a histogram of the modal coordinates (the response
        amplitudes applied to each mode shape) at a certain time point
        (transient analyses) or frequency point (harmonic analyses). The
        absolute values of the modal coordinates are plotted. Use /XRANGE to
        plot only modes in a certain range, if desired.

        For transient analyses, the Jobname.RDSP file must be available. For
        harmonic analyses, the Jobname.RFRQ must be available. No SET command
        is required and no expansion pass is required.

        For a cyclic harmonic mode-superposition analysis, use the CYCFILES
        command to identify the Jobname.RFRQ and modal Jobname.RST file. You
        may limit the plot to display only those modes in a certain harmonic
        index range. The modes having the same harmonic index are each plotted
        in a unique color. If there are less than 10 harmonic indices, they are
        identified in the graphics legend.

        This is a graphical representation of the optional Jobname.MCF text
        file. (see the TRNOPT and HROPT commands). For more information on
        modal coordinates, see Mode-Superposition Method in the Mechanical APDL
        Theory Reference.
        """
        command = "PLMC,%s,%s,%s,%s,%s,%s" % (str(lstep), str(sbstep), str(timfrq), str(kimg), str(hibeg), str(hiend))
        return self.run(command, **kwargs)

    
    
    def sexp(self, labr="", lab1="", lab2="", exp1="", exp2="", **kwargs):
        """APDL Command: SEXP

        Forms an element table item by exponentiating and multiplying.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        lab1
            First labeled result item in operation.

        lab2
            Second labeled result item in operation (may be blank).

        exp1
            Exponent applied to Lab1.

        exp2
            Exponent applied to Lab2.

        Notes
        -----
        Forms a labeled result item (see ETABLE command) for the selected
        elements by exponentiating and multiplying two existing labeled result
        items according to the operation:

        LabR = (|Lab1|EXP1) x (|Lab2|EXP2)

        Roots, reciprocals, and divides may also be done with this command.
        """
        command = "SEXP,%s,%s,%s,%s,%s" % (str(labr), str(lab1), str(lab2), str(exp1), str(exp2))
        return self.run(command, **kwargs)

    
    
    def nlgeom(self, key="", **kwargs):
        """APDL Command: NLGEOM

        Includes large-deflection effects in a static or full transient
        analysis.

        Parameters
        ----------
        key
            Large-deflection key:

            OFF - Ignores large-deflection effects (that is, a small-deflection analysis is
                  specified). This option is the default.

            ON - Includes large-deflection (large rotation) effects or large strain effects,
                 according to the element type.

        Notes
        -----
        Large-deflection effects are categorized as either large deflection (or
        large rotation) or large strain, depending on the element type. These
        are listed (if available) under Special Features in the input data
        table for each element in the Element Reference. When large deflection
        effects are included (NLGEOM,ON), stress stiffening effects are also
        included automatically.

        If used during the solution (/SOLU), this command is valid only within
        the first load step.

        In a large-deflection analysis, pressure loads behave differently than
        other load types. For more information, see Load Direction in a Large-
        Deflection Analysis.

        The gyroscopic matrix (that occurs due to rotational angular velocity)
        does not support large-deflection effects. The theoretical formulations
        for the gyroscopic matrix support small deflection (linear formulation)
        only.

        When large-deflection effects are included in a substructure or CMS
        transient analysis use pass, the OUTRES command ignores DSUBres = ALL.

        This command is also valid in PREP7.

        In ANSYS Professional NLT, large deflection effects should not be
        turned on if 2-D solid (PLANEn) or 3-D solid (SOLIDn) elements are
        defined. ANSYS Professional NLS supports NLGEOM,ON for plane and solid
        elements.
        """
        command = "NLGEOM,%s" % (str(key))
        return self.run(command, **kwargs)

    def cgomga(self, cgomx="", cgomy="", cgomz="", **kwargs):
        """APDL Command: CGOMGA

        Specifies the rotational velocity of the global origin.

        Parameters
        ----------
        cgomx, cgomy, cgomz
            Rotational velocity of the global origin about the acceleration
            system X, Y, and Z axes.

        Notes
        -----
        Specifies the rotational velocity of the global origin about each of
        the acceleration coordinate system axes.  The location of the
        acceleration coordinate system is defined with the CGLOC command.
        Rotational velocities may be defined in analysis types ANTYPE,STATIC,
        HARMIC (full or mode-superposition), TRANS (full or mode-
        superposition), and SUBSTR.  See Acceleration Effect in the Mechanical
        APDL Theory Reference for details.  Units are radians/time.  Related
        commands are ACEL, CGLOC, DCGOMG,   DOMEGA, and OMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        The CGOMGA command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for CGOMGA_X, CGOMGA_Y, and CGOMGA_Z
        input values (*DIM) for full transient and harmonic analyses.

        This command is also valid in PREP7.
        """
        command = "CGOMGA,%s,%s,%s" % (str(cgomx), str(cgomy), str(cgomz))
        return self.run(command, **kwargs)

    
    def sfact(self, type_="", **kwargs):
        """APDL Command: SFACT

        Allows safety factor or margin of safety calculations to be made.

        Parameters
        ----------
        type\_
            Type of calculation:

            0 - No nodal safety factor or margin of safety calculations.

            1 - Calculate and store safety factors in place of nodal stresses.

            2 - Calculate and store margins of safety in place of nodal stresses.

        Notes
        -----
        Allows safety factor (SF) or margin of safety (MS) calculations to be
        made for the average nodal stresses according to:

        SF = SALLOW/|Stress|

        MS = (SALLOW/|Stress|) -- 1.0

        Calculations are done during the display, select, or sort operation (in
        the active coordinate system [RSYS]) with results stored in place of
        the nodal stresses.  Use the PRNSOL or PLNSOL command to display the
        results.

        Note:: : The results are meaningful only for the stress (SIG1, SIGE,
        etc.) upon which SALLOW is based.  Nodal temperatures used are those
        automatically stored for the node.  Related commands are SFCALC,
        SALLOW, TALLOW.
        """
        command = "SFACT,%s" % (str(type_))
        return self.run(command, **kwargs)

    def mmf(self, **kwargs):
        """APDL Command: MMF

        Calculates the magnetomotive force along a path.

        Notes
        -----
        MMF invokes an ANSYS macro which calculates the magnetomotive force
        (mmf) along a predefined path [PATH].  It  is valid for both 2-D and
        3-D magnetic field analyses.  The calculated mmf value is stored in the
        parameter MMF.

        A closed path [PATH], passing through the magnetic circuit for which
        mmf is to be calculated, must be defined before this command is issued.
        A counterclockwise ordering of points on the PPATH command will yield
        the correct sign on the mmf.  The mmf is based on Ampere's Law.  The
        macro makes use of calculated values of field intensity (H), and uses
        path operations for the calculations.  All path items are cleared upon
        completion.  The MMF macro sets the "ACCURATE" mapping method and "MAT"
        discontinuity option of the PMAP command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MMF,"
        return self.run(command, **kwargs)

    
    def gcolumn(self, curve="", string="", **kwargs):
        """APDL Command: /GCOLUMN

        Allows the user to apply a label to a specified curve.

        Parameters
        ----------
        curve
            Curve number on which label will be applied (integer value
            between 1 and 10).

        string
            Name or designation that will be applied to the curve (8
            characters max).

        Notes
        -----
        This command is used for an array parameter plot (a plot created by the
        *VPLOT command).  Normally the label for curve 1 is "COL 1", the label
        for curve 2 is "COL 2" and so on; the column number is the field
        containing the dependent variables for that particular curve. Issuing
        /GCOLUMN,CURVE, with no string value specified resets the label to the
        original value.
        """
        command = "/GCOLUMN,%s,%s" % (str(curve), str(string))
        return self.run(command, **kwargs)

    
    def fk(self, kpoi="", lab="", value="", value2="", **kwargs):
        """APDL Command: FK

        Defines force loads at keypoints.

        Parameters
        ----------
        kpoi
            Keypoint at which force is to be specified.  If ALL, apply to all
            selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        lab
            Valid force label.  Structural labels:  FX, FY, or FZ (forces); MX,
            MY, or MZ (moments).  Thermal labels:  HEAT, HBOT, HE2, HE3, . . .,
            HTOP (heat flow).  Fluid labels:  FLOW (fluid flow).  Electric
            labels:  AMPS (current flow), CHRG (electric charge).  Magnetic
            labels:  FLUX (magnetic flux);  CSGX, CSGY, or CSGZ (magnetic
            current segments). Diffusion labels: RATE (diffusion flow rate).

        value
            Force value or table name reference for specifying tabular boundary
            conditions.  To specify a table, enclose the table name in percent
            signs (%), e.g., FK, KPOI, HEAT,%tabname%).  Use the *DIM command
            to define a table.

        value2
            Second force value (if any).  If the analysis type and the force
            allow a complex input, VALUE (above) is the real component and
            VALUE2 is the imaginary component.

        Notes
        -----
        Forces may be transferred from keypoints to nodes with the FTRAN or
        SBCTRAN commands.  See the F command for a description of force loads.

        Tabular boundary conditions (VALUE = %tabname%) are available only for
        the following labels: Fluid (FLOW), Electric (AMPS), Structural force
        (FX, FY, FZ, MX, MY, MZ), and Thermal (HEAT, HBOT, HE2, HE3, . . .,
        HTOP).

        This command is also valid in PREP7.
        """
        command = "FK,%s,%s,%s,%s" % (str(kpoi), str(lab), str(value), str(value2))
        return self.run(command, **kwargs)

    def rsopt(self, opt="", filename="", ext="", dir_="", **kwargs):
        """APDL Command: RSOPT

        Creates or loads the radiosity mapping data file for SURF251 or SURF252
        element types.

        Parameters
        ----------
        opt
            File option:

            SAVE - Write the radiosity mapping data to a file. (Default)

            LOAD - Read in the specified mapping data file.

        fname
            File name for radiosity mapping data file. Defaults to Jobname.

        ext
            Filename extension for radiosity mapping data file (default =
            .rsm).

        dir\_
            Directory path for radiosity mapping data file. If you do not
            specify a directory path, it will default to your working
            directory.

        Notes
        -----
        Use this command to manually create or load a radiosity mapping data
        file. This command is useful if you want to create the mapping data
        file without issuing SAVE or CDWRITE, or if you want to specify that
        the file be located in a directory other than your working directory.
        Also use this command to manually load an existing mapping data file
        during a restart.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "RSOPT,%s,%s,%s,%s" % (str(opt), str(filename), str(ext), str(dir_))
        return self.run(command, **kwargs)

    def pnum(self, label="", key="", **kwargs):
        """APDL Command: /PNUM

        Controls entity numbering/coloring on plots.

        Parameters
        ----------
        label
            Type of numbering/coloring:

            NODE - Node numbers on node and element plots.

            ELEM - Element numbers and colors on element plots.

            SEC - Section numbers and colors on element and solid model plots (see "Notes").

            MAT - Material set numbers and colors on element and solid model plots  (see
                  "Notes").

            TYPE - Element type reference numbers and colors on element and solid model plots (see
                   "Notes").

            REAL - Real constant set numbers and colors on element and solid model plots (see
                   "Notes").

            ESYS - Element coordinate system numbers on element and solid model plots (see
                   "Notes").

            PART - Element part numbers and colors on element plots (applicable to ANSYS LS-DYNA
                   only).

            LOC - Location numbers/colors of the element in matrix assembly order on element
                  plots.

            Note:LOC and ELEM numbers will be the same unless the model has been reordered. - KP

            Keypoint numbers on solid model plots. - LINE

            Line numbers on solid model plots (both numbers and colors on line plots). - AREA

            Area numbers on solid model plots (both numbers and colors on area plots). - VOLU

            Volume numbers on solid model plots (both numbers and colors on volume plots). - SVAL

            Stress (or any contour) values on postprocessing plots, and surface load values and colors on model plots (when surface load symbols are on [/PSF]).  For tabular boundary conditions, the table-evaluated values will be displayed on node, element, or contour displays in POST1 when load symbols (/PBF, /PSF, /PBC) are on and TABNAM is OFF. - TABNAM

            Table names for tabular boundary conditions.  If this label is turned on, the table name appears next to the appropriate symbol, arrow, face outline, or contour as dictated by the /PSF, /PBC, and /PBF commands. - STAT

            Shows current settings for /PNUM. - DEFA

        key
            Switch:

            0 - Turns OFF numbers/colors for specified label.

            1 - Turns ON numbers/colors for specified label.

        Notes
        -----
        This command specifies entity numbering and coloring for subsequent
        plots.

        The MAT, TYPE, REAL, and ESYS labels activate both the numbering and
        coloring of the corresponding attributes for  EPLOT, KPLOT, LPLOT,
        APLOT, and VPLOT. The ELEM, MAT, TYPE, REAL, ESYS, PART (ANSYS LS-DYNA
        only), and LOC labels are mutually exclusive, i.e., only one can be
        specified at a time. Also, turning on a LINE, AREA, or VOLU label will
        turn off the MAT, TYPE, REAL, and PART labels.

        PowerGraphics [/GRAPHICS,POWER] displays for/PNUM can be problematic.
        /PNUM,ELEM will display erratically depending on other display command
        specifications, while /PNUM,LOC and /PNUM,ESYS are not supported.

        Element and volume numbers are not visible for 3-D elements and volumes
        when Z-buffering is turned on (/TYPE,,[6,7, or 8]).

        Use /PSTATUS or /PNUM,STAT to show settings. Use /PNUM,DEFA to reset
        all specifications back to default. Use the /NUMBER command to control
        whether numbers and colors are displayed together.

        This command is valid in any processor
        """
        command = "/PNUM,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    
    
    def prrfor(self, lab="", **kwargs):
        """APDL Command: PRRFOR

        Prints the constrained node reaction solution. Used with the FORCE
        command.

        Parameters
        ----------
        lab
            Nodal reaction load type.  If blank, use the first ten of all
            available labels. Valid labels are:

        Notes
        -----
        PRRFOR has the same functionality as the PRRSOL command; use PRRFOR
        instead of PRRSOL when a FORCE command has been issued.

        In a non-spectrum analysis, if either contact or pretension elements
        exist in the model, PRRFOR uses the PRRSOL command internally and the
        FORCE setting is ignored.

        Because modal displacements cannot be used to calculate contact element
        nodal forces,: those forces are not included in the spectrum and PSD
        analyses reaction solution. As a consequence, the: PRRFOR: command is
        not supported when constraints on contact element pilot nodes are
        present.
        """
        command = "PRRFOR,%s" % (str(lab))
        return self.run(command, **kwargs)

    def slashfdele(self, ident="", stat="", **kwargs):
        """APDL Command: /FDELE

        Deletes a binary file after it is used.

        Parameters
        ----------
        ident
            ANSYS file name identifier.  Valid identifiers are:  EMAT, ESAV,
            FULL, SUB, MODE, DSUB, USUB, OSAV, and SELD.  See the Basic
            Analysis Guide for file descriptions.

        stat
            Keep or delete key:

            KEEP - Keep this file.

            DELE - Delete (or do not write, if not necessary) this file.

        Notes
        -----
        Deletes as soon as possible (or prevents writing) a binary file created
        by the ANSYS program to save space.

        Caution:: : Deleting files that are necessary for the next substep,
        load step, or analysis will prevent continuation of the run.

        This command is valid only at the Begin Level.
        """
        command = "/FDELE,%s,%s" % (str(ident), str(stat))
        return self.run(command, **kwargs)

    
    def emft(self, **kwargs):
        """APDL Command: EMFT

        Summarizes electromagnetic forces and torques.

        Notes
        -----
        Use this command to summarize electromagnetic force and torque in both
        static electric and magnetic problems. To use this command, select the
        nodes in the region of interest and make sure that all elements are
        selected. If RSYS = 0, the force is reported in the global Cartesian
        coordinate system. If RSYS ≠ 0, force is reported in the specified
        coordinate system. However, for torque, if RSYS ≠ 0, this command will
        account for the shift and rotation as specified by RSYS, but will
        report only the Cartesian components.

        Forces are stored as items _FXSUM, _FYSUM, _FZSUM, and _FSSUM. Torque
        is stored as items _TXSUM, _TYSUM, _TZSUM, and _TSSUM.

        This command is valid only with PLANE121, SOLID122, SOLID123, PLANE233,
        SOLID236 and SOLID237 elements. For any other elements, you must use
        FMAGSUM.
        """
        command = "EMFT,"
        return self.run(command, **kwargs)

    
    
    def smax(self, labr="", lab1="", lab2="", fact1="", fact2="", **kwargs):
        """APDL Command: SMAX

        Forms an element table item from the maximum of two other items.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        lab1
            First labeled result item in operation.

        lab2
            Second labeled result item in operation (may be blank).

        fact1
            Scale factor applied to Lab1. A (blank) or '0' entry defaults to
            1.0.

        fact2
            Scale factor applied to Lab2. A (blank) or '0' entry defaults to
            1.0.

        Notes
        -----
        Forms a labeled result item (see ETABLE command) for the selected
        elements by comparing two existing labeled result items according to
        the operation:

        LabR = (FACT1 x Lab1) cmx (FACT2 x Lab2)

        where "cmx" means "compare and save maximum."  If absolute values are
        requested [SABS,1], the absolute values of Lab1 and Lab2 are used.
        """
        command = "SMAX,%s,%s,%s,%s,%s" % (str(labr), str(lab1), str(lab2), str(fact1), str(fact2))
        return self.run(command, **kwargs)

    def emf(self, **kwargs):
        """APDL Command: EMF

        Calculates the electromotive force (emf), or voltage drop along a
        predefined path.

        Notes
        -----
        EMF invokes an ANSYS macro which calculates the electromotive force
        (emf), or voltage drop along a predefined path (specified with the PATH
        command). It is valid for both 2-D and 3-D electric field analysis or
        high-frequency electromagnetic field analysis. The calculated emf value
        is stored in the parameter EMF.

        You must define a line path (via the PATH command) before issuing the
        EMF command macro. The macro uses calculated values of the electric
        field (EF), and uses path operations for the calculations. All path
        items are cleared when the macro finishes executing.

        The EMF macro sets the "ACCURATE" mapping method and "MAT"
        discontinuity option on the PMAP command. The ANSYS program retains
        these settings after executing the macro.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "EMF,"
        return self.run(command, **kwargs)

    
    
    def pldisp(self, kund="", **kwargs):
        """APDL Command: PLDISP

        Displays the displaced structure.

        Parameters
        ----------
        kund
            Undisplaced shape key:

            0 - Display only displaced structure.

            1 - Overlay displaced display with similar undisplaced
                display (appearance is system-dependent).

            2 - Same as 1 except overlay with undisplaced edge display
                (appearance is system-dependent).

        Notes
        -----
        Displays the displaced structure for the selected elements.

        For information on true scale plots, refer to the description of the
        /DSCALE command [/DSCALE,,1.0].
        """
        command = "PLDISP,%s" % (str(kund))
        return self.run(command, **kwargs)

    
    
    def pspec(self, pcolor="", kfill="", kbordr="", **kwargs):
        """APDL Command: /PSPEC

        Creates annotation polygon attributes (GUI).

        Parameters
        ----------
        pcolor
            Polygon color (0  PCOLOR   15):

            0 - Black.

            1 - Red-Magenta.

            2 - Magenta.

            3 - Blue-Magenta.

            4 - Blue.

            5 - Cyan-Blue.

            6 - Cyan.

            7 - Green-Cyan.

            8 - Green.

            9 - Yellow-Green.

            10 - Yellow.

            11 - Orange.

            12 - Red.

            13 - Dark Gray.

            14 - Light Gray.

            15 - White.

        kfill
            Polygon fill key:

            0 - Hollow polygon.

            1 - Filled polygon.

        kbordr
            Polygon border key:

            0 - No border.

            1 - Border.

        Notes
        -----
        Creates annotation polygon attributes to control certain
        characteristics of the polygons created via the /POLYGON, /PMORE,
        /PCIRCLE and /PWEDGE commands.  This is a command generated by the
        Graphical User Interface (GUI) and will appear in the log file
        (Jobname.LOG) if annotation is used.  This command is not intended to
        be typed in directly in an ANSYS session (although it can be included
        in an input file for batch input or for use with the /INPUT command).

        This command is valid in any processor.
        """
        command = "/PSPEC,%s,%s,%s" % (str(pcolor), str(kfill), str(kbordr))
        return self.run(command, **kwargs)

    def gline(self, wn="", style="", **kwargs):
        """APDL Command: /GLINE

        Specifies the element outline style.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        style
            Outline key:

             0  - Solid element outlines (default)

             1  - Dashed element outlines

            -1  - No element outlines

        Notes
        -----
        Determines the element outline style.  Often used when node numbers are
        displayed to prevent element lines from overwriting node numbers.

        Unless you are using an OpenGL or Starbase driver, the dashed element
        outline option (/GLINE,WN,1) is not available in the following
        situations:

        Z-buffered displays (/TYPE,WN,6).

        Capped Z-buffered displays (/TYPE,WN,7).

        Qslice Z-buffered displays (/TYPE,WN,8).

        This command is valid in any processor.
        """
        command = "/GLINE,%s,%s" % (str(wn), str(style))
        return self.run(command, **kwargs)

    
    def addam(self, af="", aa="", ab="", ac="", ad="", amin="", **kwargs):
        """APDL Command: ADDAM

        Specifies the acceleration spectrum computation constants for the
        analysis of shock resistance of shipboard structures.

        Parameters
        ----------
        af
            Direction-dependent acceleration coefficient for elastic or
            elastic-plastic analysis option (default = 0).

        aa, ab, ac, ad
            Coefficients for the DDAM acceleration spectrum equations. Default
            for these coefficients is zero.

        amin
            The minimum acceleration value in inch/sec2.  It defaults to 2316
            inch/sec2 which equals 6g, where g is acceleration due to gravity
            (g = 386 inch/sec2).

        Notes
        -----
        This command specifies acceleration coefficients to analyze shock
        resistance of shipboard equipment.  These coefficients are used to
        compute mode coefficients according to the equations given in Dynamic
        Design Analysis Method in the Mechanical APDL Theory Reference.  The
        form of these equations is based on the Naval NRL Dynamic Design
        Analysis Method.  This command, along with the VDDAM and SED commands,
        is used with the spectrum (ANTYPE,SPECTR) analysis as a special purpose
        alternative to the SV, FREQ, and SVTYP commands.  The mass and length
        units of the model must be in pounds and inches, respectively.

        DDASPEC may alternatively be used to calculate spectrum coefficients.

        This command is also valid in PREP7.
        """
        command = "ADDAM,%s,%s,%s,%s,%s,%s" % (str(af), str(aa), str(ab), str(ac), str(ad), str(amin))
        return self.run(command, **kwargs)

    
    
    def pdinqr(self, rpar="", name="", type_="", val="", **kwargs):
        """APDL Command: PDINQR

        Evaluates statistical characteristics of a random input variable.

        Parameters
        ----------
        rpar
            Name of scalar ANSYS parameter into which the characteristic value
            is stored.

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable using the PDVAR command.

        type\_
            Keyword for the type of information you need to retrieve.

            MEAN - Mean value of the random input variable specified in Name.

            STDV - Standard deviation of the random input variable

            PDF - Probability density function of the random input variable specified in Name at
                  a given value specified by VAL.

            CDF - Cumulative distribution function of the random input variable specified in Name
                  at a given value specified by VAL.

            INV - Inverse cumulative distribution function of the random input variable specified
                  in Name at a given probability specified by VAL.

        val
            Value needed for Type = PDF, CDF, or INV. For Type = PDF and Type =
            CDF, this is the value of the random input variable at which the
            probabilistic density or cumulative distribution function should be
            evaluated. For Type = INV, VAL indicates the probability at which
            you want the inverse cumulative distribution function evaluated.

        Notes
        -----
        Evaluates statistical characteristics of a random input variable. The
        result is stored in the ANSYS parameter Rpar.
        """
        command = "PDINQR,%s,%s,%s,%s" % (str(rpar), str(name), str(type_), str(val))
        return self.run(command, **kwargs)

    def asol(self, lab="", opt="", **kwargs):
        """APDL Command: ASOL

        Specifies the output type of an acoustic scattering analysis.

        Parameters
        ----------
        lab
            Acoustic solver specification (no default):

            SCAT - Set acoustic solver to the scattered field formulation.

        opt
            Option identifying an acoustic solver status:

            OFF - Deactivate the specified acoustic solver (default).

            ON - Activate the specified acoustic solver.

        Notes
        -----
        Use the ASOL command to activate the specified acoustic solution
        process.

        The scattered option (Lab = SCAT) sets the acoustic solver to the
        scattered-pressure field formulation.

        Issue the AWAVE command to define the incident pressure pinc. If the
        AWAVE command is defined with Opt2 = INT, the acoustic solver is set to
        the scattered field formulation regardless of the ASOL command issued.
        """
        command = "ASOL,%s,%s" % (str(lab), str(opt))
        return self.run(command, **kwargs)

    def trlcy(self, lab="", tlevel="", n1="", n2="", ninc="", **kwargs):
        """APDL Command: /TRLCY

        Specifies the level of translucency.

        Parameters
        ----------
        lab
            Apply translucency level to the items specified by the following
            labels:

            ELEM - Elements.  Use N1, N2, NINC fields for element numbers.

            AREA - Solid model areas.  Use N1, N2, NINC fields for area numbers.

            VOLU - Solid model volumes.  Use N1, N2, NINC fields for volume numbers.

            ISURF - Isosurfaces (surfaces of constant stress, etc., value).  Translucency varies
                    with result value, to a maximum of the specified
                    translucency level.

            CM - Component group.  Use N1 for component name, ignore N2 and NINC.

            CURVE - Filled areas under curves of line graphs.  Use N1, N2, NINC fields for curve
                    numbers.

            ZCAP - If /TYPE,WN,ZCAP is the current display type, then /TRLCY,ZCAP,TLEVEL will
                   display the model in window WN with the portion of the model
                   in front of the section plane displayed at the translucency
                   level TLEVEL.

            ON, OFF - Sets the specified translucency display on or off. All other fields are
                      ignored.

        tlevel
            Translucency level:  0.0 (opaque) to 1.0 (transparent).

        n1, n2, ninc
            Used only with labels as noted above.  Apply translucency level to
            Lab items numbered N1 to N2 (defaults to N1) in steps of NINC
            (defaults to 1).  If N1 is blank or ALL, apply specified
            translucency level to entire selected range.  If Lab is CM, use
            component name for N1 and ignore N2 and NINC. A value of N1 = P
            allows you to graphically pick elements, areas, and volumes. You
            can then assign translucency levels to the entities via the picker.
            The Lab and TLEVEL fields are ignored when translucency is applied
            by picking.

        Notes
        -----
        Specifies the level of translucency for various items.  Issue
        /TRLCY,DEFA to reset the default (0) translucency levels.  This command
        is valid only on selected 2-D and 3-D graphics devices; see  in the
        Basic Analysis Guide for more information on applying translucency.

        For 2-D devices, ANSYS displays only the visible faces of the items
        being displayed.  The information behind the facing planes is not
        displayed.  Issuing the /SHRINK command will force the hardware to
        display information behind the translucent items.

        This command is valid in any processor.
        """
        command = "/TRLCY,%s,%s,%s,%s,%s" % (str(lab), str(tlevel), str(n1), str(n2), str(ninc))
        return self.run(command, **kwargs)

    def pdexe(self, slab="", mrun="", nfail="", fopt="", fname="", **kwargs):
        """APDL Command: PDEXE

        Executes the probabilistic analysis.

        Parameters
        ----------
        slab
            Solution label. This is the name given to the files containing the
            results of different probabilistic analyses performed with a
            particular probabilistic model. Different solutions using different
            probabilistic methods or method options are stored in separate
            solution sets identified with this solution label. If the solution
            label is blank, ANSYS automatically assigns Slab = "SOLUnn", where
            nn is the current two-digit number of the probabilistic analysis
            (PDS allows a maximum of 10 solution sets identified by 10 solution
            labels); for example, the first analysis is SOLU01, the second is
            SOLU02, and so on up to SOLU10). This field cannot contain blanks.
            Maximum length of this field is 32 characters; if the field
            contains more than 32 characters, it will be truncated to 32
            characters.

        mrun
            Keyword for the processing of the simulation loops

            SER - Executes the simulation loops of the probabilistic analysis using a single
                  machine; serial processing (default).

            PAR - Executes the simulation loops of the probabilistic analysis in parallel using
                  the ANSYS parallel-processing tool. See Probabilistic Design
                  in the Advanced Analysis Guide.

        nfail
            This parameter sets the number of loops that are allowed to fail
            before the execution of the probabilistic analysis is terminated.
            For example, if geometric parameters are used as random variables
            then for some simulations (loops) the loop will fail because
            meshing was not successful. This might happen infrequently which
            might be acceptable. However, if the probabilistic problem is
            incorrectly defined then loops could fail frequently or even in
            every loop. You can define an upper limit for the number of failed
            loops that will be tolerated before the probabilistic analysis will
            be terminated. If you use NFAIL = 0 (default) then failed loops are
            not tolerated and the probabilistic analysis will terminate the
            first time a loop fails. NFAIL is used only if MRUN = PAR.

        fopt
            Keyword for the file option. This determines if a copy of the
            sample file should be saved or not.

            DEL - The sample file will be deleted (default).

            COPY - A copy of the sample file will be saved as the file name specified with the
                   Fname option.

        fname
            Name of the copy of the sample file. The directory for storing the
            sample file is always the current working directory. The file
            extension is always .csmp. This option is ignored for FOPT = DEL.

        Notes
        -----
        Runs the probabilistic analysis. The results of the probabilistic
        analysis are identified with the solution label specified here. This
        solution label is used for the postprocessing of the results. The
        maximum number of probabilistic analyses that can be executed, stored,
        and post-processed based on the same deterministic and probabilistic
        model in one session with the PDS is 10. However, it is not counted as
        a separate probabilistic analysis if the same solution label is used
        multiple times in order to append to or overwrite previous results.

        The probabilistic results are stored in result files in ASCII format.

        If you specify a solution label that has already been used, the results
        will be appended at the end of the results file.

        After the PDEXE command has been issued, you can no longer change the
        probabilistic model using probabilistic preprocessing commands; doing
        so would invalidate the probabilistic analysis results and potentially
        corrupt the probabilistic database. Also, you are not allowed to change
        the probabilistic analysis file using a PDANL command after the first
        PDEXE has been executed.

        If you need to change the probabilistic model (analysis file, random
        input variables, etc.) after the PDEXE command has been issued, you
        should use the PDCLR, POST command to clear the probabilistic results.
        We recommend that you first save the results using the PDSAVE command.

        By default, ANSYS creates a sample file (called Jobname.samp)
        containing all values of all random input parameters; unless you
        specify otherwise, this file is deleted after the analysis is finished.
        With the FOPT and Fname options you can determine if and where a copy
        of that file should be stored for later use in another analysis.
        """
        command = "PDEXE,%s,%s,%s,%s,%s" % (str(slab), str(mrun), str(nfail), str(fopt), str(fname))
        return self.run(command, **kwargs)

    
    
    def waves(self, wopt="", oldmax="", oldrms="", **kwargs):
        """APDL Command: WAVES

        Initiates reordering.

        Parameters
        ----------
        wopt
            Option for comparison:

            MAX - Use maximum wavefront value for comparison (default).

            RMS - Use RMS wavefront value for comparison.

        oldmax, oldrms
            Maximum and RMS wavefront values of model to be used in place of
            the old values.  OLDRMS defaults to OLDMAX  (and vice versa).  If
            neither is specified, each defaults to its calculated old value.

        Notes
        -----
        Initiates the element reordering based upon the previously defined
        starting wave lists (if any).  Reordering affects only the element
        order for the solution phase and not the element numbers (input
        referring to element numbers, such as element pressures, is unaffected
        by reordering).

        Note:: : The new order is retained only if new the new maximum or RMS
        wavefront values are lower than the old values, as described below.
        See the WSORT command for another reordering procedure.  The resulting
        element ordering can be shown by listing the wavefront history
        [WFRONT,1] or by displaying elements with their element location
        numbers [/PNUM].

        The WAVES reordering procedure is based upon a list of nodes defining
        where the element reordering is to start (either input on the WSTART
        command, or automatically determined if not input).  If a list is
        input, additional starting wave lists may be defined to allow the user
        to block or guide the wave.  An input starting list usually consists of
        one node for a line element model, a line of nodes for an area element
        model, or a plane of nodes for a volume element model.  Elements are
        ordered from the first starting wave list in a direction that attempts
        to minimize the wavefront.  Nodes are deleted and added to the total
        wave list set as reordering progresses through the model.  Elements
        attached to nodes on succeeding starting lists, if any, are ignored at
        this time, thereby temporarily blocking that path.  Whenever no more
        elements can be reordered, the procedure is repeated starting from the
        nodes defined on the second starting list (if any).  The same node
        number should not appear on more than one list.  If no starting list is
        input, a starting node is automatically selected from an element
        weighting procedure (see Element Reordering in the Mechanical APDL
        Theory Reference).

        Reordering may be made from the previously reordered model or from the
        initial model (by issuing the SAVE command before reordering and then
        restoring that model back to PREP7 with the RESUME command after
        reordering).  The WFRONT command is useful for calculating and printing
        the current wavefront statistics at any time without causing any
        reordering of the elements.  If a model is to be used for both a
        thermal and a structural analysis, the reordered statistics should be
        based upon the structural model (because of the higher number of
        degrees of freedom per node).

        The reordering procedure treats separate portions of the model (i.e.,
        not connected by elements) as discontinuous.  Reordering automatically
        continues across a discontinuity as best as possible.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WAVES,%s,%s,%s" % (str(wopt), str(oldmax), str(oldrms))
        return self.run(command, **kwargs)

    def vup(self, wn="", label="", **kwargs):
        """APDL Command: /VUP

        Specifies the global Cartesian coordinate system reference orientation.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        label
            Orientation:

            Y  - Y vertical upward, X horizontal to the right, Z out from the screen (default).

            -Y  - Y vertical downward, X horizontal to the left, Z out from the screen.

            X  - X vertical upward, Y horizontal to the left, Z out from the screen.

            -X  - X vertical downward, Y horizontal to the right, Z out from the screen.

            Z  - Z vertical upward, Y horizontal to the right, X out from the screen.  With this
                 choice, you should use a view other than the /VIEW default of
                 (0,0,1).

            -Z  - Z vertical downward, Y horizontal to the left, X out from the screen.  With
                  this choice, you should use a view other than the /VIEW
                  default of (0,0,1).

        Notes
        -----
        Specifies the global Cartesian coordinate system reference orientation.
        The /VIEW and /ANGLE commands may be used to reorient the view and are
        relative to this reference orientation.  All coordinate systems are
        right-handed.

        This command is valid in any processor.
        """
        command = "/VUP,%s,%s" % (str(wn), str(label))
        return self.run(command, **kwargs)

    def anmres(self, delay="", min_="", max_="", inc="", autocntrky="", freq="",
               ext="", **kwargs):
        """APDL Command: ANMRES

        Performs animation of results over multiple results files in an
        explicit dynamic structural analysis or fluid flow analysis with
        remeshing.

        Parameters
        ----------
        delay
            Time delay during animation (default = 0.5 seconds).

        min\_
            Minimum results file number to animate. Default = 1 (for
            Jobname.RS01).

        max\_
            Maximum results file number to animate. Defaults to the highest
            numbered results file, Jobname.RSnn.

        inc
            Increment between results file numbers. Default = 1.

        autocntrky
            Automatic contour scaling option.

            0 - No auto-scaling (default).

            1 - Auto-scaling on.

        freq
             Results frequency key.

            0 or 1 - Animate every results set in each Jobname.EXT file (default).

            2 - Animate every other results set in each Jobname.EXT file.

            n - Animate every nth results set in each Jobname.EXT file.

        ext
            Extension of result files

            'rfl' - Animate Jobname.rflnn

            'rs' - Animate Jobname.rsnn. Default = 'rs'.

        Notes
        -----
        ANMRES invokes an ANSYS macro that performs animation across multiple
        results files (Jobname.EXT, Jobname.EXT, etc.) produced by an explicit
        dynamic structural analysis or fluid flow analysis with remeshing.
        Multiple results files typically occur when adaptive meshing is used in
        an explicit dynamic structural analysis or fluid flow analysis with
        remeshing. Each results file must have more than one set of results.
        ANMRES cannot be used for multiple results files that are caused by
        file splitting.

        ANMRES animates results from files having the currently specified
        jobname (Jobname.EXT - Jobname.EXT).  To change the current jobname,
        use  the /FILNAME command. The animation is based on the last plot
        command (e.g., PLDISP).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "ANMRES,%s,%s,%s,%s,%s,%s,%s" % (str(delay), str(min_), str(max_), str(inc), str(autocntrky), str(freq), str(ext))
        return self.run(command, **kwargs)

    def dmpoption(self, filetype="", combine="", **kwargs):
        """APDL Command: DMPOPTION

        Specifies distributed memory parallel (Distributed ANSYS) file
        combination options.

        Parameters
        ----------
        filetype
            Type of solution file to combine after a distributed memory
            parallel solution. There is no default; if (blank), the command is
            ignored.

            RST - Results files (.RST, .RTH, .RMG, .RSTP)

            EMAT - Element matrix files (.EMAT).

            ESAV - Element saved data files (.ESAVE)

            MODE - Modal results files (.MODE)

            MLV - Modal load vector file (.MLV)

            IST - Initial state file (.IST)

            FULL - Full matrix file (.FULL)

            RFRQ - Reduced complex displacement file (.RFRQ)

            RDSP - Reduced displacement file (.RDSP)

        combine
            Option to combine solution files.

            Yes - Combine solution files (default).

            No - Do not combine solution files.

        Notes
        -----
        The DMPOPTION command controls how solution files are written during a
        distributed memory parallel (Distributed ANSYS) solution. This command
        is most useful for controlling how results files (.RST,.RTH, etc.) are
        written.

        In a distributed memory parallel solution, a local results file is
        written by each process (JobnameN.ext, where N is the process number).
        By default, the program automatically combines the local results files
        (for example, JobnameN.RST) upon leaving the SOLUTION processor (for
        example, upon the FINISH command) into a single global results file
        (Jobname.RST) which can be used in ANSYS postprocessing. To reduce the
        amount of communication and I/O performed by this operation, you can
        issue the command DMPOPTION,RST,NO to bypass this step of combining the
        local results files; the local files will remain on the local disks in
        the current working directory. You can then use the RESCOMBINE command
        macro in the POST1 general postprocessor (/POST1) to read all results
        into the database for postprocessing.

        The RESCOMBINE command macro is intended for use with POST1. If you
        want to postprocess distributed parallel solution results using the
        POST26 time-history postprocessor (/POST26), it is recommended that you
        combine your local results files into one global results file
        (DMPOPTION,RST,YES or COMBINE).

        Local .EMAT, .ESAV, .MODE, .MLV, .IST, .RFRQ, .RDSP, and .FULL files
        are also written (when applicable) by each process in a distributed
        memory parallel solution. If these files are not needed for a
        downstream solution or operation, you can issue the command
        DMPOPTION,FileType,NO for each file type to bypass the file combination
        step and thereby improve performance. You should not bypass the file
        combination step if a downstream PSD analysis or modal expansion pass
        will be performed.

        If DMPOPTION,MODE,NO or DMPOPTION,RST,NO is specified in a modal
        analysis, element results cannot be written to the combined mode file
        (Jobname.MODE). In this case, if Distributed ANSYS is used in a
        downstream harmonic or transient analysis that uses the mode-
        superposition method, the MSUPkey on the MXPAND command can retain its
        value. However, if shared memory parallel processing is used in the
        downstream harmonic or transient analysis, the MSUPkey is effectively
        set to NO.

        The DMPOPTION command can be changed between load steps; however, doing
        so will not affect which set of solution files are combined. Only the
        last values of FileType and Combine upon leaving the solution processor
        will be used to determine whether the solution files are combined. For
        example, given a two load step solution and FileType = RST, setting
        Combine = NO for the first load step and YES for the second load step
        will cause all sets on the local results files to be combined. If the
        opposite is true (Combine = YES for the first load step and NO for the
        second load step), no results will be combined.

        After using DMPOPTION to suppress file combination, you may find it
        necessary to combine the local files for a specific FileType for use in
        a subsequent analysis. In this case, use the COMBINE command to combine
        local solution files into a single, global file.
        """
        command = "DMPOPTION,%s,%s" % (str(filetype), str(combine))
        return self.run(command, **kwargs)

    def pasave(self, lab="", fname="", ext="", **kwargs):
        """APDL Command: PASAVE

        Saves selected paths to an external file.

        Parameters
        ----------
        lab
            Write operation:

            S - Saves only selected paths.

            ALL - Saves all paths (default).

            Pname - Saves the named path (from the PSEL command).

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Saves the paths selected with the PSEL command to an external file
        (Jobname.path by default).  Previous paths on this file, if any, will
        be overwritten.  The path file may be read with the PARESU command.

        This command is valid in POST1.
        """
        command = "PASAVE,%s,%s,%s" % (str(lab), str(fname), str(ext))
        return self.run(command, **kwargs)

    def mftol(self, key="", value="", toler="", **kwargs):
        """APDL Command: MFTOL

        Activates or deactivates normal distance checking for surface mapping
        in an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        key
            Normal distance key

            ON - Activates normal distance checking.

            OFF - Deactivates normal distance checking (default).

        value
            The normal distance tolerance for surface mapping.  Defaults to
            1.0e-6. If Toler = REL, Value is dimensionless. If Toler = ABS,
            Value has the dimensions of length.

        toler
            Tolerance definition key

            REL - Activates relative gap tolerance, which is independent of units (default).

            ABS - Activates absolute gap tolerance.

        Notes
        -----
        For a dissimilar mesh interface, the nodes of one mesh are mapped to
        the local coordinates of an element in the other mesh. When normal
        distance checking is activated, the mapping tool checks the normal
        distance from the node to the nearest element. The node is considered
        improperly mapped if the normal distance exceeds the tolerance value.
        The mapping tool creates a component to graphically display the
        improperly mapped nodes. See Mapping Diagnostics in the Coupled-Field
        Analysis Guide for more information.

        When using relative gap tolerance (Toler = REL), the normal distance
        tolerance is derived from the product of the relative tolerance Value
        and the largest dimension of the Cartesian bounding box for a specific
        interface. Therefore, each interface will have a different normal
        distance tolerance , even though MFTOL is a global command.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFTOL,%s,%s,%s" % (str(key), str(value), str(toler))
        return self.run(command, **kwargs)

    def light(self, wn="", num="", int_="", xv="", yv="", zv="", refl="",
              **kwargs):
        """APDL Command: /LIGHT

        Specifies the light direction for the display window.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        num
            Ambient or directional light key:

            0 - Ambient light (default).

            1 - Directional light.

        int\_
            Light intensity factor (defaults to 0.3 for ambient, 1.0 for
            directional). This option is valid only for 3-D devices).

        xv, yv, zv
            Light direction (valid only for NUM = 1).  The directional light
            source is parallel to the line from point XV, YV, ZV to the origin,
            in the global Cartesian system origin.  Defaults to the viewing
            direction [/VIEW].

        refl
            Light reflectance factor (valid only for NUM = 1 and 3-D devices).

        Notes
        -----
        Defines the light direction for the window.  Use this command only with
        3-D graphics devices or 2-D devices when Z-buffering is used [/TYPE,,(6
        or 7)].  The ambient light has no direction, only an intensity.  You
        can position the directional light source  by defining a point (in the
        global Cartesian coordinate system) representing a point along the
        light directional line.  This point, and the global Cartesian
        coordinate system origin, define the line along which the light is
        positioned looking toward the origin.  You can use any point along the
        light line; for example, both (1.,1.,1.) and (2.,2.,2.) give the same
        light effect.  For 3-D graphics devices only, the directional light
        source also has intensity and reflectance factors.

        By choosing the highest intensity ambient light for 3-D graphics
        devices (via the command /LIGHT,WN,0,1), you can nullify color shading
        and other effects of directional lighting.

        This command is valid in any processor.
        """
        command = "/LIGHT,%s,%s,%s,%s,%s,%s,%s" % (str(wn), str(num), str(int_), str(xv), str(yv), str(zv), str(refl))
        return self.run(command, **kwargs)

    
    def focus(self, wn="", xf="", yf="", zf="", ktrans="", **kwargs):
        """APDL Command: /FOCUS

        Specifies the focus point (center of the window).

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        xf, yf, zf
            Location of the object to be at the focus point (center of the
            window) in the global Cartesian coordinate system.  If XF = AUTO,
            allow automatic location calculation.  If XF = USER, use focus
            location of last display (useful when last display had auto focus).

        ktrans
            Translate key:

            0 - Interpret numerical XF, YF, ZF values as described above.

            1 - Interpret XF, YF, ZF values as multiples of half-screens to translate from the
                current position in the screen coordinate system.  Example: XF
                of 2.4 translates the display approximately 2.4 half-screens to
                the left in the screen X (horizontal) direction.

            2 - Interpret XF, YF, ZF values as multiples of half-screens to translate from the
                current position in the global Cartesian coordinate system.
                Example: XF of 1.5 translates the display approximately 1.5
                half-screens in the global Cartesian X direction of the model.

        Notes
        -----
        Specifies the location on (or off) the model which is to be located at
        the focus point (center of the window).  For section and capped
        displays, the cutting plane is also assumed to pass through this
        location (unless the working plane is used via /CPLANE).  See also
        /AUTO and /USER commands.

        This command is valid in any processor.
        """
        command = "/FOCUS,%s,%s,%s,%s,%s" % (str(wn), str(xf), str(yf), str(zf), str(ktrans))
        return self.run(command, **kwargs)

    def dcum(self, oper="", rfact="", ifact="", tbase="", **kwargs):
        """APDL Command: DCUM

        Specifies that DOF constraint values are to be accumulated.

        Parameters
        ----------
        oper
            Accumulation key:

            REPL - Subsequent values replace the previous values (default).

            ADD - Subsequent values are added to the previous values.

            IGNO - Subsequent values are ignored.

        rfact
            Scale factor for the real component.  Zero (or blank) defaults to
            1.0.  Use a small number for a zero scale factor.

        ifact
            Scale factor for the imaginary component.  Zero (or blank) defaults
            to 1.0.  Use a small number for a zero scale factor.

        tbase
            Base temperature for temperature difference.  Used only with
            temperature degree of freedom.  Scale factor is applied to the
            temperature difference (T-TBASE) and then added to TBASE.  T is the
            current temperature.

        Notes
        -----
        Allows repeated degree of freedom constraint values (displacement,
        temperature, etc.)  to be replaced, added, or ignored.  Operations
        apply to the selected nodes [NSEL] and the selected degree of freedom
        labels [DOFSEL]. This command also operates on velocity and
        acceleration loads applied in a structural analysis.

        The operations occur when the next degree of freedom constraints are
        defined.  For example, issuing the command D,1,UX,.025 after a previous
        D,1,UX,.020 causes the new value of the displacement on node 1 in the
        x-direction to be 0.045 with the add operation, 0.025 with the replace
        operation, or 0.020 with the ignore operation.  Scale factors are also
        available to multiply the next value before the add or replace
        operation.  A scale factor of 2.0 with the previous "add" example
        results in a displacement of 0.070.  Scale factors are applied even if
        no previous values exist.  Issue DCUM,STAT to show the current label,
        operation, and scale factors.  Solid model boundary conditions are not
        affected by this command, but boundary conditions on the FE model are
        affected.

        Note:: : FE boundary conditions may still be overwritten by existing
        solid model boundary conditions if a subsequent boundary condition
        transfer occurs.

        DCUM does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "DCUM,%s,%s,%s,%s" % (str(oper), str(rfact), str(ifact), str(tbase))
        return self.run(command, **kwargs)

    def display(self, **kwargs):
        """APDL Command: DISPLAY

        Specifies "Display settings" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "DISPLAY,"
        return self.run(command, **kwargs)

    
    def trpoin(self, x="", y="", z="", vx="", vy="", vz="", chrg="", mass="",
               **kwargs):
        """APDL Command: TRPOIN

        Defines a point through which a particle flow or charged particle trace
        will travel.

        Parameters
        ----------
        x, y, z
            Coordinate location of the trace point (in the active coordinate
            system).  If X = P, graphical picking is enabled and all remaining
            command fields are ignored (valid only in the GUI).

        vx, vy, vz
            Particle velocities in the X, Y and Z directions (in the active
            coordinate system).

        chrg
            Particle charge.

        mass
            Particle mass.

        Notes
        -----
        Defines a point through which a particle flow or charged particle trace
        [PLTRAC] will travel.  Multiple points (50 maximum) may be defined
        which will result in multiple flow traces.  Use TRPLIS to list the
        currently defined trace points and TRPDEL to delete trace points.

        The VX, VY, VZ, CHRG, and MASS arguments only apply to charged
        particles.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "TRPOIN,%s,%s,%s,%s,%s,%s,%s,%s" % (str(x), str(y), str(z), str(vx), str(vy), str(vz), str(chrg), str(mass))
        return self.run(command, **kwargs)

    
    def pcross(self, labxr="", labyr="", labzr="", labx1="", laby1="",
               labz1="", labx2="", laby2="", labz2="", **kwargs):
        """APDL Command: PCROSS

        Calculates the cross product of two path vectors along the current
        path.

        Parameters
        ----------
        labxr
            Label assigned to X-component of resultant vector.

        labyr
            Label assigned to Y-component of resultant vector.

        labzr
            Label assigned to Z-component of resultant vector.

        labx1
            X-component of first vector label (labeled path item).

        laby1
            Y-component of first vector label.

        labz1
            Z-component of first vector label.

        labx2
            X-component of second vector label (labeled path item).

        laby2
            Y-component of second vector label.

        labz2
            Z-component of second vector label.
        """
        command = "PCROSS,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(labxr), str(labyr), str(labzr), str(labx1), str(laby1), str(labz1), str(labx2), str(laby2), str(labz2))
        return self.run(command, **kwargs)

    
    def oclist(self, datatype="", zonename="", **kwargs):
        """APDL Command: OCLIST

        Summarizes all currently defined ocean loads.

        Parameters
        ----------
        datatype
            Ocean data type to list. Valid values are BASIC, CURRENT, WAVE,
            ZONE, and ALL.

        zonename
            The name of an ocean zone to list. If no name is specified, all
            defined ocean zones are listed. Valid only when DataType = ZONE.

        Notes
        -----
        The OCLIST command summarizes the ocean properties for all defined
        ocean loads in the current session.

        When this command follows the SOLVE command, certain waves types also
        list the calculated wave length.

        This command is also valid in PREP7.
        """
        command = "OCLIST,%s,%s" % (str(datatype), str(zonename))
        return self.run(command, **kwargs)

    def fsum(self, lab="", item="", **kwargs):
        """APDL Command: FSUM

        Sums the nodal force and moment contributions of elements.

        Parameters
        ----------
        lab
            Coordinate system in which to perform summation.

            (blank) - Sum all nodal forces in global Cartesian coordinate system (default).

            RSYS - Sum all nodal forces in the currently active RSYS coordinate system.

        item
            Selected set of nodes.

            (blank) - Sum all nodal forces for all selected nodes (default), excluding contact
                      elements.

            CONT - Sum all nodal forces for contact nodes only.

            BOTH - Sum all nodal forces for all selected nodes, including contact elements.

        Notes
        -----
        Sums and prints, in each component direction for the total selected
        node set, the nodal force and moment contributions of the selected
        elements attached to the node set. Selecting a subset of nodes [NSEL]
        and then issuing this command will give the total force acting on that
        set of nodes (default), excluding surface-to-surface, node-to-surface,
        line-to-line, and line-to-surface contact elements (TARGE169, TARGE170,
        CONTA171, CONTA172, CONTA173, CONTA174, CONTA175, CONTA176, and
        CONTA177).

        Setting ITEM = CONT sums the nodal forces and moment contributions of
        the selected contact elements (CONTA171, CONTA172, CONTA173, CONTA174,
        CONTA175, CONTA176, and CONTA177). Setting ITEM = BOTH sums the nodal
        forces for all selected nodes, including contact elements.

        Nodal forces associated with surface loads are not included. The
        effects of nodal coupling and constraint equations are ignored. Moment
        summations are about the global origin unless another point is
        specified with the SPOINT command. This vector sum is printed in the
        global Cartesian system unless it is transformed [RSYS] and a point is
        specified with the SPOINT command. By default, the sum is done in
        global Cartesian, and the resulting vector is transformed to the
        requested system.

        The LAB = RSYS option transforms each of the nodal forces into the
        active coordinate system before summing and printing. The FORCE command
        can be used to specify which component (static, damping, inertia, or
        total) of the nodal load is to be used. This command output is included
        in the NFORCE command.

        The command should not be used with axisymmetric elements because it
        might calculate a moment where none exists. Consider, for example, the
        axial load on a pipe modeled with an axisymmetric shell element.  The
        reaction force on the end of the pipe is the total force (for the full
        360 degrees) at that location. The net moment about the centerline of
        the pipe would be zero, but the program would incorrectly calculate a
        moment at the end of the element as the force multiplied by the radius.

        The command is not valid for elements that operate solely within the
        nodal coordinate system with 1-D option activated and rotated nodes
        (NROTAT).
        """
        command = "FSUM,%s,%s" % (str(lab), str(item))
        return self.run(command, **kwargs)

    
    def bfk(self, kpoi="", lab="", val1="", val2="", val3="", phase="",
            **kwargs):
        """APDL Command: BFK

        Defines a body force load at a keypoint.

        Parameters
        ----------
        kpoi
            Keypoint to which body load applies.  If ALL, apply to all selected
            keypoints [KSEL].  A component name may also be substituted for
            Kpoi.

        lab
            Valid body load label. Load labels are listed under "Body Loads" in
            the input table for each element type in the Element Reference.

        val1, val2, val3
            Value associated with the Lab item or a table name for specifying
            tabular boundary conditions.  Use only VAL1 for TEMP, FLUE, HGEN,
            MVDI and CHRGD.  For magnetics, use VAL1, VAL2, and VAL3 for the X,
            Y, and Z components of JS . For acoustics, if Lab = JS,  use VAL1
            for mass source in a harmonic analysis or mass source rate in a
            transient analysis, and ignoreVAL2 and VAL3. When specifying a
            table name, you must enclose the table name in percent signs (%),
            e.g., BFK,Kpoi,Lab,%tabname%.  Use the *DIM command to define a
            table.

        phase
            Phase angle in degrees associated with the JS label.

        Notes
        -----
        Defines a body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.) at a
        keypoint.  Body loads may be transferred from keypoints to nodes with
        the BFTRAN or SBCTRAN commands.  Interpolation will be used to apply
        loads to the nodes on the lines between keypoints.  All keypoints on a
        given area (or volume) must have the same BFK specification, with the
        same values, for the loads to be transferred to interior nodes in the
        area (or volume).  If only one keypoint on a line has a BFK
        specification, the other keypoint defaults to the value specified on
        the BFUNIF command.

        You can specify a table name only when using temperature (TEMP) and
        heat generation rate (HGEN) body load labels.

        Body loads specified by the BFK command can conflict with other
        specified body loads.  See Resolution of Conflicting Body Load
        Specifications in the Basic Analysis Guide for details.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFK,%s,%s,%s,%s,%s,%s" % (str(kpoi), str(lab), str(val1), str(val2), str(val3), str(phase))
        return self.run(command, **kwargs)

    def bfklist(self, kpoi="", lab="", **kwargs):
        """APDL Command: BFKLIST

        Lists the body force loads at keypoints.

        Parameters
        ----------
        kpoi
            Keypoint at which body load is to be listed.  If ALL (or blank),
            list for all selected keypoints [KSEL].  If KPOI = P, graphical
            picking is enabled and all remaining command fields are ignored
            (valid only in the GUI).  A component name may also be substituted
            for KPOI

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFK command for
            labels.

        Notes
        -----
        Lists the body force loads for the specified keypoint and label.
        Keypoint body loads may be defined with the BFK command.

        This command is valid in any processor.
        """
        command = "BFKLIST,%s,%s" % (str(kpoi), str(lab))
        return self.run(command, **kwargs)

    def mlist(self, node1="", node2="", ninc="", **kwargs):
        """APDL Command: MLIST

        Lists the MDOF of freedom.

        Parameters
        ----------
        node1, node2, ninc
            List master degrees of freedom from NODE1 to NODE2 (defaults
            toNODE1) in steps of NINC (defaults to 1).  If NODE1 = ALL
            (default), NODE2 and NINC are ignored and masters for all selected
            nodes [NSEL] are listed.  If NODE1 = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for NODE1
            (NODE2 and NINC are ignored).

        Notes
        -----
        Lists the master degrees of freedom.
        """
        command = "MLIST,%s,%s,%s" % (str(node1), str(node2), str(ninc))
        return self.run(command, **kwargs)

    def fjdele(self, elem="", lab="", **kwargs):
        """APDL Command: FJDELE

        Deletes forces (or moments) on the components of the relative motion of
        a joint element.

        Parameters
        ----------
        elem
            Element number, or ALL. (leaving this blank defaults to ALL)

        lab
            Valid labels are:

            FX - Force in local x direction.

            FY - Force in local y direction.

            FZ - Force in local z direction.

            MX - Moment about local x axis.

            MY - Moment about local y axis.

            MZ - Moment about local z axis.

            ALL, or (blank) - Delete all valid forces or moments.

        Notes
        -----
        Valid for MPC184 (joint options in KEYOPT(1)).

        See FJ for information on specifying forces (or moments).
        """
        command = "FJDELE,%s,%s" % (str(elem), str(lab))
        return self.run(command, **kwargs)

    def detab(self, elem="", lab="", v1="", v2="", v3="", v4="", v5="", v6="",
              **kwargs):
        """APDL Command: DETAB

        Modifies element table results in the database.

        Parameters
        ----------
        elem
            Element for which results are to be modified.  If ALL, modify all
            selected elements [ESEL] results.  If ELEM = P, graphical picking
            is enabled and all remaining command fields are ignored (valid only
            in the GUI).  A component name may also be substituted for ELEM.

        lab
            Label identifying results.  Valid labels are as defined with the
            ETABLE command.  Issue ETABLE,STAT to display labels and values.

        v1
            Value assigned to this element table result in the database.  If
            zero, a zero value will be assigned.  If blank, value remains
            unchanged.

        v2, v3, v4, . . . , v6
            Additional values (if any) assigned to consecutive element table
            columns.

        Notes
        -----
        Modifies element table [ETABLE] results in the database.  For example,
        DETAB,35,ABC,1000,2000,1000 assigns 1000, 2000, and 1000 to the first
        three table columns starting with label ABC for element 35.  Use the
        PRETAB command to list the current results.  After deleting a column of
        data using ETABLE,Lab,ERASE, the remaining columns of data are not
        shifted to compress the empty slot.  Therefore, the user must allocate
        null (blank) values for V1, V2...V6 for any ETABLE entries which have
        been deleted by issuing ETABLE,Lab,ERASE.  All data are stored in the
        solution coordinate system but will be displayed in the results
        coordinate system [RSYS].
        """
        command = "DETAB,%s,%s,%s,%s,%s,%s,%s,%s" % (str(elem), str(lab), str(v1), str(v2), str(v3), str(v4), str(v5), str(v6))
        return self.run(command, **kwargs)

    def dsym(self, lab="", normal="", kcn="", **kwargs):
        """APDL Command: DSYM

        Specifies symmetry or antisymmetry degree-of-freedom constraints on
        nodes.

        Parameters
        ----------
        lab
            Symmetry label:

            SYMM - Generate symmetry constraints as described below (default).

            ASYM - Generate antisymmetry constraints as described below.

        normal
            Surface orientation label to determine the constraint set (surface
            is assumed to be perpendicular to this coordinate direction in
            coordinate system KCN):

            X - Surface is normal to coordinate X direction (default).  Interpreted as R
                direction for non-Cartesian coordinate systems.

            Y - Surface is normal to coordinate Y direction.   θ direction for non-Cartesian
                coordinate systems.

            Z - Surface is normal to coordinate Z direction.   Φ direction for spherical or
                toroidal coordinate systems.

        kcn
            Reference number of global or local coordinate system used to
            define surface orientation.

        Notes
        -----
        Specifies symmetry or antisymmetry degree-of-freedom constraints on the
        selected nodes. The nodes are first automatically rotated (any
        previously defined rotations on these nodes are redefined) into
        coordinate system KCN, then zero-valued constraints are generated, as
        described below, on the selected degree-of-freedom set (limited to
        displacement, velocity, and magnetic degrees of freedom) [DOFSEL].
        Constraints are defined in the (rotated) nodal coordinate system, as
        usual. See the D and NROTAT commands for additional details about
        constraints and nodal rotations.

        This command is also valid in PREP7.

        Symmetry or antisymmetry constraint generations are based upon the
        valid degrees of freedom in the model, i.e., the degrees of freedom
        associated with the elements attached to the nodes.  The labels for
        degrees of freedom used in the generation depend on the Normal label.

        For displacement degrees of freedom, the constraints generated are:

        For velocity degrees of freedom, the constraints generated are:

        For magnetic degrees of freedom, the SYMM label generates flux normal
        conditions (flux flows normal to the surface).  Where no constraints
        are generated, the flux normal condition is "naturally" satisfied.  The
        ASYM label generates flux parallel conditions (flux flows parallel to
        the surface).
        """
        command = "DSYM,%s,%s,%s" % (str(lab), str(normal), str(kcn))
        return self.run(command, **kwargs)

    
    def nocolor(self, key="", **kwargs):
        """APDL Command: NOCOLOR

        Removes color from graphics displays.

        Parameters
        ----------
        key
            Color key:

            0 - Color the displays.

            1 - Do not color the displays.

            2 - Do not shade the displays.
        """
        command = "NOCOLOR,%s" % (str(key))
        return self.run(command, **kwargs)

    def rsys(self, kcn="", **kwargs):
        """APDL Command: RSYS

        Activates a coordinate system for printout or display of element and
        nodal results.

        Parameters
        ----------
        kcn
            The coordinate system to use for results output:

            0 - Global Cartesian coordinate system (default, except for spectrum analyses).

            1 - Global cylindrical coordinate system.

            2 - Global spherical coordinate system.

            > 10 - Any existing local coordinate system.

            SOLU - Solution coordinate systems. For element quantities, these are the element
                   coordinate system for each element.  For nodal quantities,
                   these are the nodal coordinate systems. If an element or
                   nodal coordinate system is not defined, ANSYS uses the
                   global Cartesian coordinate system. If you issue a LAYER,N
                   command (where N refers to a layer number), the results
                   appear in the layer coordinate system. (SOLU is the default
                   for spectrum analyses.)

            LSYS - Layer coordinate system. For layered shell and solid elements, the results
                   appear in their respective layer coordinate systems.  For a
                   specific layer of interest, issue a LAYER,N command (where N
                   refers to a layer number). If a model has both nonlayered
                   and layered elements, you can use RSYS,SOLU and RSYS,LSYS
                   simultaneously (with RSYS,SOLU applicable to nonlayered
                   elements and RSYS,LSYS applicable to layered elements).  To
                   reverse effects of the LSYS option, issue an RSYS,0 command.
                   LSYS is the default for spectrum analysis.

        Notes
        -----
        The RSYS command activates a coordinate system for printing or
        displaying element results data such as stresses and heat fluxes, and
        nodal results data such as degrees of freedom and reactions. ANSYS
        rotates the results data to the specified coordinate system during
        printout, display, or element table operations (such as PRNSOL, PRESOL,
        PLNSOL, and ETABLE). You can define coordinate systems with various
        ANSYS commands such as LOCAL, CS, CLOCAL, and CSKP.

        If you issue RSYS with KCN > 10 (indicating a local coordinate system),
        and the specified system is subsequently redefined, you must reissue
        RSYS for results to be rotated into the redefined system.

        Note:: : The default coordinate system for certain elements, notably
        shells, is not global Cartesian and is frequently not aligned at
        adjacent elements.

        The use of RSYS,SOLU with these elements can make nodal averaging of
        component element results, such as SX, SY, SZ, SXY, SYZ, and SXZ,
        invalid and is not recommended.

        The RSYS command has no effect on beam or pipe stresses, which ANSYS
        displays (via /ESHAPE,1 and PowerGraphics) in the element coordinate
        system.

        Element results such as stresses and heat fluxes are in the element
        coordinate systems when KCN = SOLU. Nodal requests for element results
        (for example, PRNSOL,S,COMP) average the element values at the common
        node; that is, the orientation of the node is not a factor in the
        output of element quantities.  For nearly all solid elements, the
        default element coordinate systems are parallel to the global Cartesian
        coordinate system. For shell elements and the remaining solid elements,
        the default element coordinate system can differ from element to
        element. For layered shell and layered solid elements, ANSYS initially
        selects the element coordinate system when KCN = SOLU; you can then
        select the layer coordinate system via the LAYER command.

        Nodal results such as degrees of freedom and reactions can be properly
        rotated only if the resulting component set is consistent with the
        degree-of-freedom set at the node. (The degree-of-freedom set at a node
        is determined by the elements attached to the node.) For example, if a
        node does not have a UZ degree of freedom during solution, then any Z
        component resulting from a rotation does not print or display in POST1.
        Therefore, results at nodes with a single degree-of-freedom (UY only,
        for example) should not be rotated; that is, they should be viewed only
        in the nodal coordinate system or a system parallel to the nodal
        system. (The global Cartesian system--the RSYS command default--may not
        be parallel to the nodal system.) Results at nodes with a 2-D degree-
        of-freedom set (UX and UY, for example) should not be rotated out of
        the 2-D plane.

        PowerGraphics

        For PowerGraphics, ANSYS plots PLVECT vector arrow displays (such
        temperature, velocity, and force) in the global Cartesian coordinate
        system (RSYS = 0). Subsequent operations revert to your original
        coordinate system.

        PGR File

        When you generate a .PGR file in SOLUTION, you can use the Results
        Viewer to display your stresses only in the coordinate system in which
        you write your .PGR file. To view stresses in other coordinate systems,
        load your results file into the Results Viewer and regenerate the data.

        Large Deflections

        If large deflection is active (NLGEOM,ON), ANSYS rotates the element
        component result directions by the amount of rigid body rotation.

        ANSYS displays the element component results in the initial global
        coordinate system for the following elements: SHELL181, SHELL281,
        ELBOW290, PLANE182, PLANE183, SOLID185, SOLID186, SOLID187, SOLID272,
        SOLID273, SOLID285, SOLSH190, SHELL208, and SHELL209. All other element
        result transformations are, therefore, also relative to the initial
        global system. Nodal degree-of-freedom results are based on the initial
        (and not the updated) geometry. For all other element types, component
        results displayed in the co-rotated coordinate system include the
        element rigid body rotation from the initial global coordinate system,
        and all other element result transformations are relative to the
        rotated global system.

        LS-DYNA

        You can use the RSYS command to rotate stress data for all explicit
        (ANSYS LS-DYNA) elements except BEAM161, COMBI165, and composite
        SHELL163 (KEYOPT(3) = 1). In models that contain these element types
        combined with other explicit elements, you must unselect the
        unsupported elements before issuing the RSYS command. The command does
        not support strain data for any explicit element types. If you request
        strain results for explicit elements when RSYS is not set to the global
        Cartesian coordinate system (KCN = 0), ANSYS ignores the printing or
        plotting command. (ANSYS always rotates displacements into the results
        coordinate system, independent of the explicit element type.)
        """
        command = "RSYS,%s" % (str(kcn))
        return self.run(command, **kwargs)

    
    def sfgrad(self, lab="", slkcn="", sldir="", slzer="", slope="", **kwargs):
        """APDL Command: SFGRAD

        Specifies a gradient (slope) for surface loads.

        Parameters
        ----------
        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.

        slkcn
            Reference number of slope coordinate system (used with Sldir and
            SLZER to determine COORD).  Defaults to 0 (the global Cartesian
            coordinate system).

        sldir
            Slope direction in coordinate system SLKCN:

            X - Slope is along X direction (default).  Interpreted as R direction for non-
                Cartesian coordinate systems.

            Y - Slope is along Y direction.  Interpreted as  θ direction for non-Cartesian
                coordinate systems.

            Z - Slope is along Z direction.  Interpreted as Φ direction for spherical or
                toroidal coordinate systems.

        slzer
            Coordinate location (degrees for angular input) where slope
            contribution is zero (CVALUE = VALUE).  Allows the slope
            contribution to be shifted along the slope direction.  For angular
            input, SLZER should be between ±180° if the singularity [CSCIR]  is
            at 180° and should be between 0° and 360° if the singularity is at
            0°.

        slope
            Slope value (load per unit length or per degree).

        Notes
        -----
        Specifies a gradient (slope) for surface loads.  All surface loads
        issued with the SF, SFE, SFL, or SFA commands while this specification
        is active will have this gradient applied (for complex pressures, only
        the real component will be affected; for convections, only the bulk
        temperature will be affected).  The load value, CVALUE, calculated at
        each node is:

        CVALUE = VALUE + (SLOPE X (COORD-SLZER))

        where VALUE is the load value specified on the subsequent SF, SFE, SFL,
        or SFA commands and COORD is the coordinate value (in the Sldir
        direction of coordinate system SLKCN) of the node.  Only one SFGRAD
        specification may be active at a time (repeated use of this command
        replaces the previous specification with the new specification).  Issue
        SFGRAD (with blank fields) to remove the specification.  Issue
        SFGRAD,STAT to show the current command status.  The SFGRAD
        specification (if active) is removed when the LSREAD (if any) command
        is issued.

        SFGRAD does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "SFGRAD,%s,%s,%s,%s,%s" % (str(lab), str(slkcn), str(sldir), str(slzer), str(slope))
        return self.run(command, **kwargs)

    def elseif(self, val1="", oper1="", val2="", conj="", val3="", oper2="",
               val4="", **kwargs):
        """APDL Command: *ELSEIF

        Separates an intermediate if-then-else block.

        Parameters
        ----------
        val1
            First numerical value (or parameter which evaluates to numerical
            value) in the conditional comparison operation. VAL1, VAL2, VAL3,
            and VAL4 can also be character strings (enclosed in quotes) or
            parameters for Oper = EQ and NE only.

        oper1
            Operation label. A tolerance of 1.0E-10 is used for comparisons
            between real numbers:

            Equal (for VAL1 = VAL2). - Not equal (for VAL1 ≠VAL2).

            Less than (for VAL1<VAL2). - Greater than (for VAL1>VAL2).

            Less than or equal (for VAL1 VAL2). - Greater than or equal (for VAL1 VAL2).

            Absolute values of VAL1 and VAL2 before < operation. - Absolute values of VAL1 and VAL2 before > operation.

        val2
            Second numerical value (or parameter which evaluates to numerical
            value) in the conditional comparison operation.

        conj
            (Optional) Connection between two logical clauses.

            True if both clauses (Oper1 and Oper2) are true.  - True if either clause is true.

        val3
            (Optional) Third numerical value (or parameter which evaluates to
            numerical value).

        oper2
            (Optional) Operation label.  This will have the same labels as
            Oper1, except it uses Val3 and Val4. A tolerance of 1.0E-10 is used
            for comparisons between real numbers.

        val4
            (Optional) Fourth numerical value (or parameter value which
            evaluates to a numerical value).

        Notes
        -----
        Optional intermediate block separator within an if-then-else construct.
        All seven characters of the command name (*ELSEIF) must be input. This
        command is similar to the *IF  command except that the Base field is
        not used. The *IF, *ELSEIF, *ELSE, and *ENDIF commands for each if-
        then-else construct must all be read from the same file (or keyboard).

        This command is valid in any processor.
        """
        command = "*ELSEIF,%s,%s,%s,%s,%s,%s,%s" % (str(val1), str(oper1), str(val2), str(conj), str(val3), str(oper2), str(val4))
        return self.run(command, **kwargs)

    def prsect(self, rho="", kbr="", **kwargs):
        """APDL Command: PRSECT

        Calculates and prints linearized stresses along a section path.

        Parameters
        ----------
        rho
            In-plane (X-Y) average radius of curvature of the inside and
            outside surfaces of an axisymmetric section.  If zero (or blank), a
            plane or 3-D structure is assumed.  If nonzero, an axisymmetric
            structure is assumed.  Use any large number (or -1) for an
            axisymmetric straight section.

        kbr
            Through-thickness bending stresses key for an axisymmetric analysis
            (RHO  ≠ 0):

            0 - Include the thickness-direction bending stresses.

            1 - Ignore the thickness-direction bending stresses.

            2 - Include the thickness-direction bending stress using the same formula as the Y
                (axial direction ) bending stress. Also use the same formula
                for the shear stress.

        Notes
        -----
        You may choose to linearize the stresses through a section and separate
        them into categories for various code calculations.  PRSECT calculates
        and reports linearized stresses along a section path.  The linearized
        stresses are also separated into membrane, bending, membrane plus
        bending, peak, and total stress categories.

        First, define your section path using the PATH and PPATH (with the NODE
        option) commands.  Your path must lie entirely within the selected set
        of elements (that is, there must be no element gaps along the path).
        PATH and PPATH are used only to retrieve the two end nodes.  The path
        data is not retained.  The section path is defined by the two end
        nodes, and by 47 intermediate points that are automatically determined
        by linear interpolation in the active display coordinate system [DSYS].
        The number and location of the intermediate points are not affected by
        the number of divisions set by PATH,,,,nDiv.

        Your  linearized component stress values are obtained by interpolating
        each element’s  average corner nodal values along the section path
        points within each path element.  PRSECT reports the linearized
        component and principal stresses for each stress category at the
        beginning, mid-length, and end of the section path.  PRPATH can be used
        to report the total stresses at the intermediate points.

        Section paths may be through any set of solid (2-D plane, 2-D
        axisymmetric or 3-D) elements.  However, section paths are usually
        defined to be through the thickness of the structure and normal to the
        inner and outer structure surfaces.  Section paths (in-plane only) may
        also be defined for shell element structures.  See the Mechanical APDL
        Theory Reference for details.

        If the RHO option is set to indicate the axisymmetric option (non-
        zero), PRSECT reports the linearized stresses in the section
        coordinates (SX – along the path, SY – normal to the path, and SZ –
        hoop direction).  If the RHO option is set to indicate the 2-D planar
        or 3-D option (zero or blank), PRSECT reports the linearized stresses
        in the active results coordinate system [RSYS].  If the RHO option is
        zero or blank and either RSYS, SOLU or RSYS, -1 are active, the
        linearized stresses are calculated and reported in the global Cartesian
        coordinate system.  It is recommended that linearized stress
        calculations be performed in a rectangular coordinate system.
        Principal stresses are recalculated from the component stresses and are
        invariant with the coordinate system as long as SX is in the same
        direction at all points along the defined path.  The PLSECT command
        displays the linearized stresses in the same coordinate system as
        reported by PRSECT.

        Stress components through the section are linearized by a line integral
        method and separated into constant membrane stresses, bending stresses
        varying linearly between end points, and peak stresses (defined as the
        difference between the actual (total) stress and the membrane plus
        bending combination).

        For nonaxisymmetric structures,  the bending stresses are calculated
        such that the neutral axis is at the midpoint of the path.
        Axisymmetric results include the effects of both the radius of
        revolution (automatically determined from the node locations) and the
        in-plane average radius of curvature of the section surfaces (user
        input).

        For axisymmetric cases, Mechanical APDL calculates the linearized
        bending stress in the through-thickness direction as the difference
        between the total outer fiber stress and the membrane stress if KBR =
        1. The calculation method may be conservative for locations with a
        highly nonlinear variation of stress in the through-thickness
        direction.  Alternatively, you can specify KBR = 2 to calculate the
        bending stress using the same method and formula as the Y (axial
        direction) bending stress. For more information, see the discussion of
        axisymmetric cases (specifically Equation: 17–40) in the Mechanical
        APDL Theory Reference.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "PRSECT,%s,%s" % (str(rho), str(kbr))
        return self.run(command, **kwargs)

    def spmwrite(self, method="", nmode="", inputs="", inputlabels="",
                 outputs="", outputlabels="", nic="", velacckey="",
                 fileformat="", **kwargs):
        """APDL Command: SPMWRITE

        Calculates the state-space matrices and writes them to the SPM file.

        Parameters
        ----------
        method
            Reduction method for the calculation of the state-space matrices.

            MODAL - Method based on modal analysis results from LANB, LANPCG, SNODE, or SUBSP
                    eigensolver (default).

        nmode
            Number of modes to be used. Defaults to all modes.

        inputs
            Definition of the inputs. Defaults to all load vectors on the MODE
            file.

        inputlabels
            Definition of the input labels. Defaults to the load vector numbers
            or input definition (node and degree of freedom array parameter),
            depending on the Inputs specification.

        outputs
            Definition of the outputs. Defaults to the inputs.

        outputlabels
            Definition of the output labels. Defaults to the output definition
            (node and degree of freedom) if used, else defaults to the
            InputLabels.

        nic
            Load vector on the MODE file used for the calculation of the
            initial conditions. Defaults to no initial condition.

        velacckey
            Output velocities and accelerations key.

            OFF - Output displacements only (default).

            ON - Output displacements, velocities and accelerations.

        fileformat
            The format of the SPM file.

            0 - Dense format.

            1 - Matrix Market Exchange format (non-zero terms only).

            2 - Simplorer SML format without reference (default).

            3 - Simplorer SML format with common reference.

            4 - Simplorer SML format with independent references.

        Notes
        -----
        The SPMWRITE generates the file Jobname.SPM containing the state-space
        matrices and other information.

        The following applies to the SML formats (FileFormat = 2, 3, and 4):

        For conservative systems where the outputs are equal to the inputs
        (Outputs is left blank):

        The labels for the inputs (InputLabels) are required.

        The Inputs must use the array parameter option so that the input
        degrees of freedom (DOFs) are known.

        For non-conservative systems where the outputs are not equal to the
        inputs:

        The labels for the outputs (OutputLabels) are required.

        The file formats with references (FileFormat = 3 and 4) do not apply.

        Velocity and acceleration results are not included in the state-space
        matrices calculation (VelAccKey = OFF)

        File format with common reference (FileFormat = 3) does not apply if
        the inputs are based on DOFs of a different nature.  All input DOFs
        must be either all rotational or all translational and not a mix of the
        two.

        A graphics file (Jobname_SPM.PNG) is generated. It contains an element
        plot of the model.

        For more details about the reduction method and the generation of the
        state-space matrices, see Reduced-Order Modeling for State-Space
        Matrices Export in the Mechanical APDL Theory Reference.

        For examples of the command usage, see State-Space Matrices Export.
        """
        command = "SPMWRITE,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(method), str(nmode), str(inputs), str(inputlabels), str(outputs), str(outputlabels), str(nic), str(velacckey), str(fileformat))
        return self.run(command, **kwargs)

    
    
    def lsymbol(self, x="", y="", symang="", symtyp="", symsiz="", keybmp="",
                **kwargs):
        """APDL Command: /LSYMBOL

        Creates annotation symbols (GUI).

        Parameters
        ----------
        x
            X location for symbol (-1.0 < X < 2.0).

        y
            Y location for symbol (-1.0 < Y < 1.0).

        symang
            Symbol orientation angle.

        symtyp
            Symbol type:

            1 - Arrow.

            2 - Tee.

            3 - Circle.

            4 - Triangle.

            5 - Star.

        symsiz
            Symbol size multiplier (0.1 to 20.0).  Defaults to 1.0.

        keybmp
            If KEYBMP = 1, the annotation is a bitmap. SYMTYP will then be a
            number from 1-99, indicating the bitmap type (see notes), and X and
            Y will define the lower left corner of the bitmap. The SYMANG,
            SYMSIZarguments are ignored. If KEYBMP = 0, or blank, then the
            argument definitions above apply.

        Notes
        -----
        Defines annotation symbols to be written directly onto the display at a
        specified location.  This is a command generated by the GUI and will
        appear in the log file (Jobname.LOG) if annotation is used.  This
        command is not intended to be typed in directly in an ANSYS session
        (although it can be included in an input file for batch input or for
        use with the /INPUT command).

        All symbols are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC command to set the attributes of
        the symbol.

        The KEYBMP argument reads the symtype argument to determine which
        bitmap to insert. This bitmap is defined by an integer between 1 and
        99. Numbers 1 through 40 correspond to the standard texture values
        found in the /TXTRE  command, while numbers 51 through 99 correspond to
        user supplied bitmaps, as defined using the Filename option of the
        /TXTRE command. Numbers 51 through 57 are predefined (the logos, clamps
        and arrows available from the GUI) but can be overridden. Numbers 41
        through 50 are reserved.

        This command is valid in any processor.
        """
        command = "/LSYMBOL,%s,%s,%s,%s,%s,%s" % (str(x), str(y), str(symang), str(symtyp), str(symsiz), str(keybmp))
        return self.run(command, **kwargs)

    
    def plot(self, nstrt="", nend="", ninc="", **kwargs):
        """APDL Command: PLOT

        Forms a display.

        Parameters
        ----------
        nstrt, nend, ninc
            Display plots sequentially from number NSTRT to NEND in steps of
            NINC. NSTRT defaults to the next plot.  NEND defaults to NSTRT.
            NINC defaults to 1.  If NSTRT = ALL, display all plots from the
            beginning of the file.  If NEND = ALL, display to the end of the
            file.

        Notes
        -----
        Output will be to the terminal or to a file, depending on the driver
        [/SHOWDISP].  The INTERLEAF and DUMP drivers produce an output file for
        each plot named INTLnn and DUMPnn, with nn sequentially ranging from 00
        to 99.  A blank line after the PLOT command causes the next plot to be
        formed.
        """
        command = "PLOT,%s,%s,%s" % (str(nstrt), str(nend), str(ninc))
        return self.run(command, **kwargs)

    def bfa(self, area="", lab="", val1="", val2="", val3="", val4="",
            **kwargs):
        """APDL Command: BFA

        Defines a body force load on an area.

        Parameters
        ----------
        area
            Area to which body load applies.  If ALL, apply to all selected
            areas [ASEL]. A component name may also be substituted for Area.

        lab
            Valid body load label. Load labels are listed under "Body Loads" in
            the input table for each element type in the Element Reference.

        val1, val2, val3
            Value associated with the Lab item or a table name for specifying
            tabular boundary conditions. Use only VAL1 for TEMP, FLUE, HGEN,
            CHRGD. For Lab = JS in magnetics, use VAL1, VAL2, and VAL3 for the
            X, Y, and Z components. For acoustics, if Lab = JS, use VAL1 for
            mass source in a harmonic analysis or mass source rate in a
            transient analysis, and ignore VAL2 and VAL3. For Lab = VLTG, VAL1
            is the voltage drop and VAL2 is the phase angle. If Lab = IMPD,
            VAL1 is the resistance and VAL2 is the reactance in ohms/square.
            When specifying a table name, you must enclose the table name in
            percent signs (%), e.g., BFA,Area,Lab,%tabname%. Use the *DIM
            command to define a table.

        val4
            If Lab = JS, VAL4 is the phase angle in degrees.

        Notes
        -----
        Defines a body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.) on an area.
        Body loads may be transferred from areas to area elements (or to nodes
        if area elements do not exist) with the BFTRAN or SBCTRAN commands.
        Body loads default to the value specified on the BFUNIF command, if it
        was previously specified.

        You can specify a table name only when using temperature (TEMP) and
        heat generation rate (HGEN) body load labels.

        Body loads specified by the BFA command can conflict with other
        specified body loads.  See Resolution of Conflicting Body Load
        Specifications in the Basic Analysis Guide for details.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFA,%s,%s,%s,%s,%s,%s" % (str(area), str(lab), str(val1), str(val2), str(val3), str(val4))
        return self.run(command, **kwargs)

    def lczero(self, **kwargs):
        """APDL Command: LCZERO

        Zeroes the results portion of the database.

        Notes
        -----
        Often used before the LCOPER command.  Same as LCOPER,ZERO.
        """
        command = "LCZERO,"
        return self.run(command, **kwargs)

    def lumpm(self, key="", **kwargs):
        """APDL Command: LUMPM

        Specifies a lumped mass matrix formulation.

        Parameters
        ----------
        key
            Formulation key:

            OFF - Use the element-dependent default mass matrix formulation (default).

            ON - Use a lumped mass approximation.

        Notes
        -----
        This command is also valid in PREP7.  If used in SOLUTION, this command
        is valid only within the first load step.
        """
        command = "LUMPM,%s" % (str(key))
        return self.run(command, **kwargs)

    def aremesh(self, lcomb="", angle="", **kwargs):
        """APDL Command: AREMESH

        Generates an area in which to create a new mesh for rezoning.

        Parameters
        ----------
        lcomb
            Specifies how to combine adjacent line segments:

             0 - Line segments combined by connecting ends to ends. This value is the default.

            -1 - No line segments combined.

        angle
            The maximum angle (in degrees) allowed for connecting two line
            segments together. The default value is 30. This value is valid
            only when LCOMB = 0.

        Notes
        -----
        Issue the AREMESH command after issuing a REMESH,START command and
        before issuing a REMESH,FINISH command.

        The AREMESH command cannot account for an open area (or "hole") inside
        a completely enclosed region. Instead, try meshing around an open area
        by selecting two adjoining regions; for more information, see Hints for
        Remeshing Multiple Regions .
        """
        command = "AREMESH,%s,%s" % (str(lcomb), str(angle))
        return self.run(command, **kwargs)

    def pretab(self, lab1="", lab2="", lab3="", lab4="", lab5="", lab6="",
               lab7="", lab8="", lab9="", **kwargs):
        """APDL Command: PRETAB

        Prints the element table items.

        Parameters
        ----------
        lab1, lab2, lab3, . . . , lab9
            Print selected items.  Valid labels are (blank) or any label as
            specified with the ETABLE command.  Convenience labels may be used
            for Lab1 to select groups of labels (10 labels maximum):  GRP1 for
            first 10 stored items; GRP2 for items 11 to 20; GRP3 for items 21
            to 30; GRP4 for items 31 to 40; GRP5 for items 41 to 50.  Enter
            ETABLE,STAT command to list stored item order.  If all labels are
            blank, print first 10 stored items (GRP1).

        Notes
        -----
        Prints the items stored in the table defined with the ETABLE command.
        Item values will be listed for the selected elements in the sorted
        sequence [ESORT].  The FORCE command can be used to define which
        component of the nodal load is to be used (static,  damping, inertia,
        or total).

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "PRETAB,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(lab1), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6), str(lab7), str(lab8), str(lab9))
        return self.run(command, **kwargs)

    
    
    def gsbdata(self, labz="", valuez="", labx="", valuex="", laby="",
                valuey="", **kwargs):
        """APDL Command: GSBDATA

        Specifies the constraints or applies the load at the ending point for
        generalized plane strain option.

        Parameters
        ----------
        labz
            Constraint or load at the ending point in the fiber Z direction.

            F - Apply a force in the fiber direction (default).

            LFIBER - Define a length change in the fiber direction.

        valuez
            Value for LabZ. The default is zero.

        labx
            Constraint or load on rotation about X.

            MX - Supply a moment to cause the rotation of the ending plane about X (default).

            ROTX - Define a rotation angle (in radians) of the ending plane about X.

        valuex
            Value for LabX. The default is zero.

        laby
            Constraint or load on rotation about Y

            MY - Supply a moment to cause the rotation of the ending plane about Y (default).

            ROTY - Define a rotation angle (in radians) of the ending plane about Y.

        valuey
            Value for LabY. The default is zero.

        Notes
        -----
        All inputs are in the global Cartesian coordinate system. For more
        information about the generalized plane strain feature, see Generalized
        Plane Strain Option of Current-Technology Solid Elements in the Element
        Reference.

        This command is also valid in PREP7.
        """
        command = "GSBDATA,%s,%s,%s,%s,%s,%s" % (str(labz), str(valuez), str(labx), str(valuex), str(laby), str(valuey))
        return self.run(command, **kwargs)

    
    def pddmcs(self, nsim="", astop="", accmean="", accstdev="", check="",
               seed="", **kwargs):
        """APDL Command: PDDMCS

        This command appears to have been removed by V18.2

        Specifies options for Monte Carlo Simulations using direct
        sampling.

        Parameters
        ----------
        nsim
            Number of simulation loops of the analysis.

        astop
            Autostop option label.

            AUTO - Enable Autostop. When Autostop is used, the PDS
                   feature continues the simulation loops until the
                   convergence criteria for the mean value and the
                   standard deviation have been met or until the
                   number of simulations NSIM are complete, whichever
                   comes first. The convergence criteria (mean value
                   and standard deviations of all random output
                   parameters) are specified by the ACCMEAN and
                   ACCSTDEV parameters. The criteria are met if the
                   mean value and the standard deviations converge
                   within the accuracy specified in the ACCMEAN and
                   ACCSTDEV options.  The convergence check is done
                   every i-th loop, where i is specified in the CHECK
                   parameter.

            ALL - Disable Autostop option. All Monte Carlo Simulations
                  as specified by NSIM are performed (default).

        accmean
            Accuracy of the mean values of all random output
            parameters that must be met for the Autostop
            option. Default is 0.01 (1%). ACCMEAN is ignored for Astop
            = ALL. The convergence of the mean values is met if for
            all random output parameters y the equation holds:

        accstdev
            Accuracy of the standard deviations of all random output parameters
            that must be met for the Autostop option. The default is 0.02 (2%).
            ACCSTDEV is ignored for Astop = ALL. The convergence for the
            standard deviations is met if for all random output parameters y
            the equation holds:

        check
            Sets how often conditions for convergence are checked for Autostop.
            The PDS checks if the convergence criteria are met every i-th loop,
            where i is given by the CHECK parameter. The default value is 10.
            It is not recommended to use CHECK = 1, because it could cause
            Autostop to terminate the simulations prematurely. The mean values
            and standard deviation might not show large differences between
            consecutive simulation loops but might still have a visible
            "global" trend if viewed over several simulations. This behavior
            indicates that convergence has not really been achieved. If you set
            CHECK = 1 (or another small number), then Autostop is not able to
            detect such a global trend. CHECK is ignored for Astop = ALL.

        seed
            Seed value label. Random number generators require a seed value
            that is used to calculate the next random number. After each random
            number generation finishes, the seed value is updated and is used
            again to calculate the next random number. ANSYS initializes the
            seed value with the system time when the ANSYS session started.

            CONT - Continues updating using the derived seed value (default).

            TIME - Initializes the seed value with the system time. You can use this if you want
                   the seed value set to a specific value for one analysis and
                   then you want to continue with a "random" seed in the next
                   analysis. It is not recommended to "randomize" the seed
                   value with the Seed = TIME option for multiple analyses. If
                   the Monte Carlo simulations requested with this command will
                   be appended to previously existing simulations, then the
                   Seed option is ignored and Seed = CONT is used.

            INIT - Initializes the seed value using 123457 (a typical recommendation). This option
                   leads to identical random numbers for all random input
                   variables when the exact analysis will be repeated, making
                   it useful for benchmarking and validation purposes (where
                   identical random numbers are desired). If the Monte Carlo
                   simulations requested with this command will be appended to
                   previously existing simulations, then the Seed option is
                   ignored and Seed = CONT is used.

            Value - Uses the specified (positive) value for the initialization of the seed value.
                    This option has the same effect as Seed = INIT, except you
                    can chose an arbitrary (positive) number for the
                    initialization. If the Monte Carlo simulations requested
                    with this command will be appended to previously existing
                    simulations, then the Seed option is ignored and Seed =
                    CONT is used.

        Notes
        -----
        Defines the number of simulations, the specification of the Autostop
        option, how frequently the Autostop option is checked and the seed
        value for random number generation. If the Autostop option is enabled,
        then the number of simulations given for NSIM can be regarded as the
        maximum number of simulations to be performed. The Autostop option may
        terminate the simulations before NSIM simulations are done if the
        convergence criteria are met.
        """
        command = f"PDDMCS,{nsim},,{astop},{accmean},{accstdev},{check},{seed}"
        return self.run(command, **kwargs)

    def ascres(self, opt="", **kwargs):
        """APDL Command: ASCRES

        Specifies the output type for an acoustic scattering analysis.

        Parameters
        ----------
        opt
            Output option:

            TOTAL - Output the total pressure field (default).

            SCAT - Output the scattered pressure field.

        Notes
        -----
        Use the ASCRES command to specify the output type for an acoustic
        scattering analysis.

        The scattered option (Opt = SCAT) provides a scattered pressure output,
        psc, required for calculating target strength (TS).

        The default behavior (Opt = TOTAL) provides a sum of the incident and
        scattering fields, ptotal = pinc + psc.

        Issue the AWAVE command to define the incident pressure pinc. If the
        AWAVE command is defined with Opt2 = INT, only the total pressure field
        is output regardless of the ASCRES,Opt command.
        """
        command = "ASCRES,%s" % (str(opt))
        return self.run(command, **kwargs)

    def nldpost(self, label="", key="", fileid="", prefix="", **kwargs):
        """APDL Command: NLDPOST

        Gets element component information from nonlinear diagnostic files.

        Parameters
        ----------
        label
            Specifies the type of command operation:

            EFLG - Element flag for nonlinear diagnostics.

            NRRE - Newton-Raphson residuals.

        key
            Specifies the command action:

            STAT - List information about the diagnostic files (Jobname.ndxxx or Jobname.nrxxx) in
                   the current directory.

            For Label = EFLG, the listing gives a summary that associates the loadstep, substep, time, equilibrium iteration number, cumulative iteration number, and the number of elements that fail each criteria with a specific file ID (Jobname.ndxxx). Use the list to create element components (via the CM option) based on the cumulative iteration number. - For Label = NRRE, the listing provides a summary that associates the loadstep,
                              substep, time, equilibrium iteration number, and
                              cumulative iteration number with a specific file
                              ID (Jobname.nrxxx).  Use the list to identify the
                              respective file ID for creating Newton-Raphson
                              residual contour plots (PLNSOL,NRRE,…,FileID).

            DEL - Delete Jobname.ndxxx or Jobname.nrxxx files in the working directory, if any
                  exist.

            CM - Create components for elements that violate criteria. This value is valid only
                 when Label = EFLG.

        fileid
            Valid only when Label = EFLG and Key = CM, this value specifies
            file IDs:

            IDnum - The file ID number. Creates the element components from the diagnostic files
                    corresponding to the specified file ID number in the
                    working directory.

            ALL - Creates element components from all available diagnostic files residing in the
                  working directory. This value is the default if you do not
                  specify an IDnum value.

        prefix
            Sets the prefix name for components. Specify up to 21 alphanumeric
            characters.

        Notes
        -----
        Based on the nonlinear diagnostic results (created via the NLDIAG,EFLG
        command), the NLDPOST command creates element components with
        predefined names.

        The following table lists the diagnostic criteria and component names
        (with specified prefix and without). Here xxx corresponds to the file
        ID (FileID) of Jobname.ndxxx or Jobname.nrxxx.

        If you have trouble viewing specific element components, see Viewing
        Hidden Element Components in the Basic Analysis Guide.

        For more information, see Performing Nonlinear Diagnostics.
        """
        command = "NLDPOST,%s,%s,%s,%s" % (str(label), str(key), str(fileid), str(prefix))
        return self.run(command, **kwargs)

    def mfcmmand(self, fnumb="", fname="", ext="", **kwargs):
        """APDL Command: MFCMMAND

        Captures field solution options in a command file.

        Parameters
        ----------
        fnumb
            Field number specified by the MFELEM command.

        fname
            Command file name specified for the field number. Defaults to field
            "FNUMB".

        ext
            Extension for Fname. Defaults to .cmd.

        Notes
        -----
        All relevant solution option commands for the specified field are
        written to a file with the extension .cmd. Refer to the commands in the
        following tables in the Command Reference: Analysis Options, Nonlinear
        Options, Dynamic Options, and Load Step Options.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFCMMAND,%s,%s,%s" % (str(fnumb), str(fname), str(ext))
        return self.run(command, **kwargs)

    def psdwav(self, tblno="", vx="", vy="", vz="", **kwargs):
        """APDL Command: PSDWAV

        Defines a wave propagation excitation in a PSD analysis.

        Parameters
        ----------
        tblno
            Input PSD table number defined with PSDVAL command.

        vx
            Global Cartesian X-velocity of traveling wave.

        vy
            Global Cartesian Y-velocity of traveling wave.

        vz
            Global Cartesian Z-velocity of traveling wave.

        Notes
        -----
        Defines a traveling wave in a PSD analysis. This command is not
        available for a pressure PSD analysis.

        This command is also valid in PREP7.
        """
        command = "PSDWAV,%s,%s,%s,%s" % (str(tblno), str(vx), str(vy), str(vz))
        return self.run(command, **kwargs)

    def rstmac(self, file1="", lstep1="", sbstep1="", file2="", lstep2="",
               sbstep2="", tolern="", maclim="", cname="", keyprint="",
               unvscale="", keym_ass="", **kwargs):
        """APDL Command: RSTMAC

        Calculates modal assurance criterion (MAC) and matches nodal solutions
        from two results files or from one results file and one universal
        format file.

        Parameters
        ----------
        file1
            File name (32 characters maximum) corresponding to the first
            results file (.rst or .rstp file). If the file name does not
            contain the extension, it defaults to .rst.

        lstep1
            Load step number of the results to be read in File1.

            N  - Reads load step N. Defaults to 1.

        sbstep1
            Substep number of the results to be read in File1.

            N  - Reads substep N.

            All  - Reads all substeps. This value is the default.

        file2
            File name (32 characters maximum) corresponding to the second file
            (.rst, .rstp, or .unv file). If the file name does not contain the
            extension, it defaults to .rst.

        lstep2
            Load step number of the results to be read in File2.

            N  - Reads load step N. Defaults to 1.

        sbstep2
            Substep number of the results to be read in File2.

            N  - Reads substep N.

            All  - Reads all substeps. This value is the default.

        tolern
            Tolerance for nodes matching. If TolerN = -1, the nodes on File2
            are mapped into the selected elements of File1. If TolerN is
            positive, the selected nodes of File1 are matched to the nodes of
            File2. The default value is 0.01.

        maclim
            Smallest acceptable MAC value. Must be  0 and  1. The default value
            is 0.90.

        cname
            Name of the component from the first file (File1). The component
            must be based on nodes. If unspecified, all nodes are matched and
            used for MAC calculations. If a component name is specified, only
            nodes included in the specified component are used. Not applicable
            to node mapping (TolerN=-1).

        keyprint
            Printout options:

            0  - Printout matched solutions table. This value is the default.

            1  - Printout matched solutions table and full MAC table.

            2  - Printout matched solutions table, full MAC table and matched nodes table.

        unvscale
            Scaling of the nodal coordinates when File2 is a universal format
            file (.unv).

            Blank or 0  - No scaling (default).

            Non-zero value  - Scaling factor applied to the nodal coordinates.

        keymass
            Key to include the mass matrix diagonal in the calculations.

            ON  - Include the mass matrix diagonal. This is the default.

            OFF  - Do not include the mass matrix diagonal.

        Notes
        -----
        The RSTMAC command allows the comparison of the solutions from either:

        Two different results files

        One result file and one universal format file

        The modal assurance criterion (MAC) is used.

        The meshes read on File1 and File2 may be different. If TolerN>0, the
        nodes are matched. This is the default. If TolerN = -1, the nodes are
        mapped and the solutions are interpolated from File1.

        Units and coordinate systems must be the same for both models. When a
        universal format file is used, the nodal coordinates can be scaled
        using UNVscale.

        The corresponding database file (.db) for File1 must be resumed before
        running the command only if a component (Cname) is used or if the nodes
        are mapped (TolerN = -1).

        Results may be real or complex; however, if results from File1 have a
        different type from results in File2, only the real parts of the
        solutions are taken into account in MAC calculations. The analysis type
        can be arbitrary.

        Only structural degrees of freedom are considered. Degrees of freedom
        can vary between File1 and File2, but at least one common degree of
        freedom must exist.

        When node mapping and solution interpolation is performed (TolerN=-1),
        File1 must correspond to a model meshed in solid and/or shell elements.
        Other types of elements can be present but the node mapping is not
        performed for those elements. Interpolation is performed on UX, UY, and
        UZ degrees of freedom.

        The solutions read on the results files are not all written to the
        database, therefore, subsequent plotting or printing of solutions is
        not possible.  A SET command must be issued after the RSTMAC command to
        post-process each solution.

        RSTMAC comparison on cyclic symmetry analysis works only if the number
        of sectors on File1 and File2 are the same. Also comparison cannot be
        made between cyclic symmetry results and full 360 degree model results
        (File1 – cyclic solution, File2 – full 360 degree model solution).
        Comparing cyclic symmetry solutions written on selected set of node
        (OUTRES) is not supported.

        The modal assurance criterion values can be retrieved as parameters
        using the *GET command (Entity = RSTMAC).

        For more information and an example, see Comparing Nodal Solutions From
        Two Models (RSTMAC) in the Basic Analysis Guide.
        """
        command = "RSTMAC,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(file1), str(lstep1), str(sbstep1), str(file2), str(lstep2), str(sbstep2), str(tolern), str(maclim), str(cname), str(keyprint), str(unvscale), str(keym_ass))
        return self.run(command, **kwargs)

    
    
    def ddele(self, node="", lab="", nend="", ninc="", rkey="", **kwargs):
        """APDL Command: DDELE

        Deletes degree-of-freedom constraints.

        Parameters
        ----------
        node
            Node for which constraint is to be deleted.  If ALL, NEND and NINC
            are ignored and constraints for all selected nodes [NSEL] are
            deleted.  If NODE = P, graphical picking is enabled and all
            remaining command fields are ignored (valid only in the GUI).  A
            component name may also be substituted for NODE.

        lab
            Valid degree of freedom label.  If ALL, use all selected labels
            [DOFSEL].  Structural labels:  UX, UY, or UZ (displacements); ROTX,
            ROTY, or ROTZ (rotations); WARP (warping).  Thermal labels: TEMP,
            TBOT, TE2, TE3, . . ., TTOP (temperature).  Acoustic labels:  PRES
            (pressure); UX, UY, or UZ (displacements for FSI coupled elements).
            Electric label:  VOLT (voltage).  Magnetic labels:  MAG (scalar
            magnetic potential); AX, AY, or AZ (vector magnetic potentials).
            Diffusion label: CONC (concentration).

        nend, ninc
            Delete constraints from NODE to NEND (defaults to NODE) in steps of
            NINC (defaults to 1).

        rkey
            Ramping key:

            OFF  - Loads are step-removed (default).

            ON or FORCE  - Forces on the specified degrees of freedom (Lab) are ramped during the next
                           load step. The forces are ramped from the reaction
                           forces of the previous load step, regardless of
                           whether or not a constraint was present. If the
                           specified node(s) and degree(s) of freedom has a
                           force value currently defined, the force is ramped
                           from the reaction force value to the currently
                           applied force value. If no force is currently
                           applied, the force is ramped from the reaction force
                           value to zero.

        Notes
        -----
        Deleting a constraint is not the same as setting it to zero (which
        "fixes" the degree of freedom to a zero value).  Deleting a constraint
        has the same effect as deactivating, releasing, or setting the
        constraint "free."  The node and the degree of freedom label must be
        selected [NSEL, DOFSEL].

        This command is also valid in PREP7.
        """
        command = "DDELE,%s,%s,%s,%s,%s" % (str(node), str(lab), str(nend), str(ninc), str(rkey))
        return self.run(command, **kwargs)

    def thexpand(self, key="", **kwargs):
        """APDL Command: THEXPAND

        Enables or disables thermal loading

        Parameters
        ----------
        key
            Activation key:

            ON  - Thermal loading is included in the load vector (default).

            OFF - Thermal loading is not included in the load vector.

        Notes
        -----
        Temperatures applied in the analysis are used by default to evaluate
        material properties and contribute to the load vector if the
        temperature does not equal the reference temperature and a coefficient
        of thermal expansion is specified.

        Use THEXPAND,OFF to evaluate the material properties but not contribute
        to the load vector. This capability is particularly useful when
        performing a harmonic analysis where you do not want to include
        harmonically varying thermal loads. It is also useful in a modal
        analysis when computing a modal load vector but excluding the thermal
        load.

        This command is valid for all analysis types except linear perturbation
        modal and linear perturbation harmonic analyses. For these two linear
        perturbation analysis types, the program internally sets THEXPAND,OFF,
        and it cannot be set to ON by using this command (THEXPAND,ON is
        ignored).
        """
        command = "THEXPAND,%s" % (str(key))
        return self.run(command, **kwargs)

    def plf2d(self, ncont="", olay="", anum="", win="", **kwargs):
        """APDL Command: PLF2D

        Generates a contour line plot of equipotentials.

        Parameters
        ----------
        ncont
            Number of contour lines to display.  Issue in multiples of 9 (i.e.,
            9, 18, 27, etc.).  Default is 27 contour lines.

        olay
            Overlay:

            0 - Overlay edge outlines by material number.

            1 - Overlay edge outlines by real constant number.

        anum
            Highest material or real constant attribute number.  Command will
            cycle through ANUM element display overlays.  Defaults to 10.

        win
            Window number to which command applies.  Defaults to 1.

        Notes
        -----
        PLF2D invokes an ANSYS macro which plots equipotentials of the degree
        of freedom AZ.  These equipotential lines are parallel to flux lines
        and thus give a good representation of flux patterns.  In the
        axisymmetric case, the display is actually r*AZ where "r" is the node
        radius.  The macro overlays (OLAY) edge outlines by material number or
        real constant number (ANUM) and allows user control over the number of
        contour lines to display (NCONT).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLF2D,%s,%s,%s,%s" % (str(ncont), str(olay), str(anum), str(win))
        return self.run(command, **kwargs)

    
    
    def emagerr(self, **kwargs):
        """APDL Command: EMAGERR

        Calculates the relative error in an electrostatic or electromagnetic
        field analysis.

        Notes
        -----
        The relative error is an approximation of the mesh discretization error
        associated with a solution. It is based on the discrepancy between the
        unaveraged, element-nodal field values and the averaged, nodal field
        values. The calculation is valid within a material boundary and does
        not consider the error in continuity of fields across dissimilar
        materials.

        For electrostatics, the field values evaluated are the electric field
        strength (EFSUM) and the electric flux density (DSUM). A relative error
        norm of each is calculated on a per-element basis and stored in the
        element table [ETABLE] with the labels EF_ERR and D_ERR. Normalized
        error values EFN_ERR and DN_ERR are also calculated and stored in the
        element table. Corresponding quantities for electromagnetics are H_ERR,
        B_ERR, HN_ERR, and BN_ERR, which are calculated from the magnetic field
        intensity (HSUM) and the magnetic flux density (BSUM).  The normalized
        error value is the relative error norm value divided by the peak
        element-nodal field value for the currently selected elements.

        Use the PLETAB and PRETAB commands to plot and list the error norms and
        normalized error values.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "EMAGERR,"
        return self.run(command, **kwargs)

    def iclist(self, node1="", node2="", ninc="", lab="", **kwargs):
        """APDL Command: ICLIST

        Lists the initial conditions.

        Parameters
        ----------
        node1, node2, ninc
            List initial conditions for nodes NODE1 to NODE2 (defaults to
            NODE1) in steps of NINC (defaults to 1).  If NODE1 = ALL (default),
            NODE2 and NINC are ignored and initial conditions for all selected
            nodes [NSEL] are listed.  If NODE1 = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may be substituted for NODE1 (NODE2 and
            NINC are ignored).

        lab
            Velocity key:

            DISP - Specification is for first order degree of freedom value (displacements,
                   temperature, etc.) (default).

            VELO - Specification is for second order degree of freedom value (velocities).

        Notes
        -----
        Lists the initial conditions specified by the IC command.  Listing
        applies to all the selected nodes [NSEL] and DOF labels.  ICLIST is not
        the same as the DLIST command.  All the initial conditions including
        the default conditions are listed for the selected nodes.

        This command is valid in any processor.
        """
        command = "ICLIST,%s,%s,%s,%s" % (str(node1), str(node2), str(ninc), str(lab))
        return self.run(command, **kwargs)

    def plesol(self, item="", comp="", kund="", fact="", **kwargs):
        """APDL Command: PLESOL

        Displays the solution results as discontinuous element contours.

        Parameters
        ----------
        item
            Label identifying the item.  Valid item labels are shown in
            Table 219: PLESOL - Valid Item and Component Labels for Element
            Results below.  Some items also require a component label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in Table 219: PLESOL - Valid Item and Component Labels for
            Element Results below.

        kund
            Undisplaced shape key:

            0 - Do not overlay undeformed structure display

            1 - Overlay displaced contour plot with undeformed display (appearance is system-
                dependent)

            2 - Overlay displaced contour plot  with undeformed edge display (appearance is
                system-dependent)

        fact
            Scale factor for 2-D display of contact items (defaults to 1). A
            negative scaling factor may be used to invert the display.

        Notes
        -----
        Displays the solution results as element contours discontinuous across
        element boundaries for the selected elements.  For example, PLESOL,S,X
        displays the X component of stress S (that is, the SX stress
        component).  Various element results depend on the calculation method
        and the selected results location (AVPRIN, RSYS, and ESEL).  Contours
        are determined by linear interpolation within each element, unaffected
        by the surrounding elements (i.e., no nodal averaging is performed).
        The discontinuity between contours of adjacent elements is an
        indication of the gradient across elements.  Component results are
        displayed in the active results coordinate system [RSYS] (default is
        the global Cartesian).  See the ETABLE and PLETAB commands for
        displaying items not available through this command (such as line
        element results).

        For PowerGraphics displays [/GRAPHICS,POWER], results are plotted only
        for the model exterior surface.  The items marked with [1] in Table:
        219:: PLESOL - Valid Item and Component Labels for Element Results are
        not supported by PowerGraphics.

        Table: 219:: : PLESOL - Valid Item and Component Labels for Element
        Results
        """
        command = "PLESOL,%s,%s,%s,%s" % (str(item), str(comp), str(kund), str(fact))
        return self.run(command, **kwargs)

    
    
    
    def jpeg(self, kywrd="", opt="", **kwargs):
        """APDL Command: JPEG

        Provides JPEG file export for ANSYS displays.

        Parameters
        ----------
        kywrd
            Specifies various JPEG file export options.

            QUAL - If Kywrd = QUAL, then OPT is an integer value defining the JPEG quality index
                   on an arbitrary scale ranging from 1 to 100. The default
                   value is 75.

            ORIENT - If Kywrd = ORIENT, then OPT will determine the orientation of the entire plot.
                     OPT can be either Horizontal (default) or Vertical.

            COLOR - If Kywrd = COLOR, then OPT will determine the color depth of the saved file.
                    OPT can be 0, 1, or 2, corresponding to Black and White,
                    Grayscale, and Color (default), respectively.

            TMOD - If Kywrd = TMOD, then OPT will determine the text method. OPT can be either 1
                   or 0, corresponding to bitmap text (default) or line stroke
                   text, respectively.

            DEFAULT - If Kywrd = DEFAULT, then all of the default values, for all of the Kywrd
                      parameters listed above, are active.

        opt
            OPT can have the following names or values, depending on the value
            for Kywrd (see above).

            1 to 100 - If Kywrd = QUAL, a value between 1 and 100 will determine the quality index of
                       the JPEG file.

            Horizontal, Vertical - If Kywrd = ORIENT, the terms Horizontal or Vertical determine the orientation
                              of the plot.

            0,1,2 - If Kywrd = COLOR, the numbers 0, 1, and 2 correspond to Black and White,
                    Grayscale and Color, respectively.

            1,0 - If Kywrd = TMOD, the values 1 and 0 determine whether bitmap (1) or stroke text
                  (0) fonts will be used
        """
        command = "JPEG,%s,%s" % (str(kywrd), str(opt))
        return self.run(command, **kwargs)

    
    def gp(self, node1="", node2="", lab="", stif="", gap="", damp="",
           **kwargs):
        """APDL Command: GP

        Defines a gap condition for transient analyses.

        Parameters
        ----------
        node1
            Node I of gap.  If NODE1 = P, graphical picking is enabled and all
            remaining command fields are ignored (valid only in the GUI).

        node2
            Node J of gap (must be different from NODE1).  Non-grounded gap
            nodes must be defined as master degrees of freedom or be
            unconstrained, active DOF in a full analysis type.  Grounded gap
            nodes (those not defined as MDOF) need not appear elsewhere in the
            model.

        lab
            Direction of gap action in the nodal coordinate system (implied
            from the following force labels): FX, FY, FZ, MX, MY, MZ.

        stif
            Stiffness (Force/Length) of closed gap (may be positive or
            negative).

        gap
            Initial size of gap.  A zero (or positive) value assumes an
            initially open gap.  A negative value defines an interference
            condition.  For a rotational gap, GAP should be in radians.

        damp
            Damping coefficient (Force*Time/Length) of closed gap using pseudo
            velocity (Newmark finite difference expansion scheme).

        Notes
        -----
        Defines a gap condition for the mode superposition transient analysis
        (ANTYPE,TRANS with TRNOPT,MSUP). If used in SOLUTION, this command is
        valid only within the first load step. Gap conditions specified in
        subsequent load steps are ignored.

        Repeat GP command for additional gap conditions. Gaps are numbered
        sequentially as input.

        Note:: : Gaps may be renumbered by the program during the solution (see
        output listing)

        The mode-superposition transient analysis does not allow gap action
        with the standard gap elements. However, you can define gap conditions
        which are similar to gap elements; gap conditions can be specified
        between surfaces that are expected to contact (impact) each other
        during the transient. The gap condition simulates the basic gap action
        of the COMBIN40 element.

        The gap condition is treated as an explicit force (equal to the
        interference times contact stiffness) and affects only the load vector
        calculation and not the stiffness matrix. The interference is
        calculated from the displacement extrapolated from the previous time
        points.

        Gap conditions can only be defined between two master degree of freedom
        (DOF) nodes or between master DOF nodes and ground, as shown in the
        following figure.

        Master degrees of freedom are the unconstrained and active degrees of
        freedom. Gap nodes not defined as active degrees of freedom or attached
        to an element are assumed to be grounded. Grounded gap nodes do not
        need a spatial location, nor do they need to be located on an element.

        Gap conditions may be defined in parallel (across the same nodes), with
        varying gap and stiffness values, to simulate a nonlinear (piecewise)
        force-deflection curve.

        The gap direction is determined from the force label input on the GP
        command; i.e., FX defines a translational gap acting in the UX nodal
        degree of freedom direction, and MZ defines a rotational gap acting in
        the nodal ROTZ degree of freedom direction. The actual degree of
        freedom directions available for a particular node depends upon the
        degrees of freedom associated with the element types [ET] at that node.

        If the coordinate systems of the nodes connecting the gap are rotated
        relative to each other, the same degree of freedom may be in different
        directions. The gap, however, assumes only a one-dimensional action.
        Nodes I and J may be anywhere in space (preferably coincident).  No
        moment effects are included due to noncoincident nodes. That is, if the
        nodes are offset from the line of action, moment equilibrium may not be
        satisfied.

        The contact stiffness value represents the stiffness of the closed gap.
        Stiffness values are related to the integration time step size and
        should be physically reasonable. High stiffness will require a small
        integration time step; otherwise, due to the displacement
        extrapolation, the solution may go unstable. Negative stiffness values
        may be used with gaps in parallel to produce a decreasing force-
        deflection curve.

        The order of specifying the gap nodes is important; i.e., a gap
        condition connecting two nodes will act differently depending upon
        which node is specified first on the GP command.  For example, for Node
        1 at X = 0.0, Node 2 at X = 0.1, and the gap defined from Node 1 to 2,
        a displacement of Node 1 greater than Node 2 will cause the gap to
        close.  For the gap defined from Node 2 to 1, a displacement of Node 2
        greater than Node 1 will cause the gap to close (like a hook action).
        In general, the gap closes whenever the separation (defined as UJ - UI
        + GAP) is negative.  UJ is the displacement of node J, UI is the
        displacement of node I, and GAP is the input gap value.  The gap force
        output appears in the printout only for the time steps for which the
        gap is closed.  A negative spring force is always associated with a
        closed gap (even with the hook option).

        Some guidelines to define gap conditions are presented below:

        Use enough gap conditions to obtain a smooth contact stress
        distribution between the contacting surfaces.

        Define a reasonable gap stiffness. If the stiffness is too low, the
        contacting surfaces may overlap too much. If the stiffness is too high,
        a very small time step will be required during impact. A general
        recommendation is to specify a gap stiffness that is one or two orders
        of magnitude higher than the adjacent element stiffness. You can
        estimate the adjacent element stiffness using AE/L, where A is the
        contributing area around the gap condition, E is the elastic modulus of
        the softer material at the interface, and L is the depth of the first
        layer of elements at the interface.

        A mode-superposition transient using the nonlinear gap damping provided
        through the DAMP field runs faster than a full transient analysis using
        a gap element (COMBIN40).

        Use the GPLIST command to list gap conditions and the GPDELE command to
        delete gap conditions.

        This command is also valid in PREP7.
        """
        command = "GP,%s,%s,%s,%s,%s,%s" % (str(node1), str(node2), str(lab), str(stif), str(gap), str(damp))
        return self.run(command, **kwargs)

    def adapt(self, nsoln="", stargt="", ttargt="", facmn="", facmx="",
              kykps="", kymac="", **kwargs):
        """APDL Command: ADAPT

        Adaptively meshes and solves a model.

        Parameters
        ----------
        nsoln
            Number of solutions allowed (1 or more) (defaults to 5).

        stargt
            Target percentage for structural percent error in energy norm
            (SEPC) (defaults to 5).  If -1, no target value is used.

        ttargt
            Target percentage for thermal percent error in energy norm (TEPC)
            (defaults to 1).  If -1, no target value is used.

        facmn
            Minimum factor for the keypoint element size changes (defaults to
            0.25).

        facmx
            Maximum factor for the keypoint element size changes (defaults to
            2.0).

        kykps
            Specifies whether element size is to be modified at selected
            keypoints:

            0 - Modify element size regardless of selected keypoint set (default).

            1 - Modify element size only at selected keypoints.

        kymac
            Specifies which user-written auxiliary macro files are to be used:

            0 - Ignore user-written auxiliary macro files, if any (default).

            1 - Use user-written auxiliary macro files (if they exist) as follows:  Use
                ADAPTMSH.MAC instead of the default meshing command sequence.
                Use ADAPTSOL.MAC instead of the default solution command
                sequence (/SOLU ... SOLVE ... FINISH).

        Notes
        -----
        ADAPT invokes a predefined ANSYS macro for adaptive meshing and
        solution.  The macro causes repeated runs of the PREP7, SOLUTION, and
        POST1 phases of the ANSYS program with mesh density refinements based
        upon the percentage error in energy norm.  See the Advanced Analysis
        Guide for additional details.   After the adaptive meshing process is
        complete, the ADAPT macro automatically turns element shape checking on
        (SHPP,ON).

        A copy of the macro, called UADAPT.MAC, is available on the ANSYS
        distribution medium (system dependent), and may be copied and modified
        by the user to suit a particular need.  The modified file should be
        given a suitable name (cmd.MAC) and run as described above with the
        ADAPT command name replaced by your "cmd" name.

        This command is also valid at the Begin level.
        """
        command = "ADAPT,%s,%s,%s,%s,%s,%s,%s" % (str(nsoln), str(stargt), str(ttargt), str(facmn), str(facmx), str(kykps), str(kymac))
        return self.run(command, **kwargs)

    
    def eextrude(self, action="", nelem="", space="", dist="", theta="",
                 tfact="", **kwargs):
        """APDL Command: EEXTRUDE

        Extrudes 2-D plane elements into 3-D solids.

        Parameters
        ----------
        action
            Specifies one of the following command behaviors:

            AUTO - Extrudes plane elements (PLANE182 and PLANE183) based on the KEYOPT(3) setting.
                   Complementary elements are also extruded. (See Notes for
                   more information.) This behavior is the default.

            PLANE - Extrudes elements in the global Z direction. KEYOPT(3) of the parent elements
                    is ignored.

            AXIS - Extrudes elements about the global Y axis. KEYOPT(3) of the parent elements is
                   ignored.

            TANGENT - Similar to Action = AXIS, except that target elements are extruded in the
                      global Z direction.

        nelem
            Number of elements to generate in the extruded direction. If you do
            not specify a number, the program calculates a number automatically
            based on the average element size and extrusion distance.

        space
            Spacing ratio. If positive, this value is the nominal ratio of the
            last division size to the first division size (if > 1.0, sizes
            increase, if < 1.0, sizes decrease). If negative, |SPACE| is the
            nominal ratio of the center division size to the end division size.
            The default value is 1.0 (uniform spacing).

        dist
            Distance to extrude in the global Z direction for the plane strain
            case (Action = PLANE). The default is 1.

        theta
            Ending angle (in degrees) to extrude about the global Y axis for
            the axisymmetric case (Action = AXIS). The beginning angle is
            always 0 degrees. The ending angle defaults to 360 degrees.

        tfact
            Factor for increasing the rigid target size. The size of the
            extruded rigid target elements is determined automatically based on
            the size of the contact elements. The default value is 0.2.

        Notes
        -----
        The EEXTRUDE command extrudes current-technology elements PLANE182 and
        PLANE183. Complementary elements TARGE169, CONTA171, CONTA172, and
        REINF263 will also extrude. Extrusion operates automatically on
        elements in the selected element set.

        For automatic PLANE182 and PLANE183 extrusion (Action = AUTO), based on
        the element behavior of the plane elements, the command performs as
        follows:

        Plane stress; the element is ignored.

        Axisymmetric; the element is extruded 360 degrees about the Y-axis.
        THETA is ignored.

        Plane strain (Z strain = 0.0); the element is extruded a unit distance
        in the global Z direction.

        Plane stress with thickness input; the element is extruded in the
        Z-direction as specified by the thickness input via a real constant.

        Generalized plane strain; the element is ignored.

        For an axisymmetric extrusion (Action = AUTO with KEYOPT(3) = 1, Action
        = AXIS, or Action = TANGENT), the command merges any nodes within the
        specified tolerance (SELTOL,TOLER) of the axis into a single node, then
        forms degenerate tetrahedrons, pyramids, or wedges. The default
        tolerance value is 1.0E-6.

        When issuing the EEXTRUDE command within the MAP2DTO3D environment
        using KEYOPT(3) = 3, mapping results do not provide the correct 3-D
        results state; therefore, KEYOPT(3) = 3 is suggested only as a tool for
        extruding the mesh itself as a geometric feature.

        For an axisymmetric extrusion, SHELL208 and SHELL209 will extrude.

        You can control shape-checking options via the SHPP command.

        The extrusion behavior of accompanying contact (CONTA171 and CONTA172)
        is determined by the plane element settings. Rigid target (TARGE169)
        elements are extruded in the global Z direction unless axisymmetric
        extrusion (Action = AXIS) is in effect.

        The following table shows each 2-D element capable of extrusion and its
        corresponding post-extrusion 3-D element:

        All element properties are also transferred consistently during
        extrusion. For example, a  2-D element is extruded to a  3-D element,
        and a mixed u-P 2-D element is extruded to a mixed u-P 3-D element.
        """
        command = "EEXTRUDE,%s,%s,%s,%s,%s,%s" % (str(action), str(nelem), str(space), str(dist), str(theta), str(tfact))
        return self.run(command, **kwargs)

    def rose(self, signif="", label="", td="", forcetype="", **kwargs):
        """APDL Command: ROSE

        Specifies the Rosenblueth mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF threshold. For single point, multipoint, or DDAM response
            (SPOPT, SPRS, MPRS, or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes. Any mode whose significance level is
            less than SIGNIF is considered insignificant and does not
            contribute to the mode combinations. The higher the SIGNIF
            threshold, the fewer the number of modes combined. SIGNIF defaults
            to 0.001. If SIGNIF is specified as 0.0, it is taken as 0.0.

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default). Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution. Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution. Accelerations, "stress accelerations," "force
                   accelerations," etc. are available.

        td
            Time duration for earthquake or shock spectrum. TD defaults to 10.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        For more information on spectrum analysis combination methods, see
        Combination of Modes

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "ROSE,%s,%s,%s,%s" % (str(signif), str(label), str(td), str(forcetype))
        return self.run(command, **kwargs)

    def arclen(self, key="", maxarc="", minarc="", **kwargs):
        """APDL Command: ARCLEN

        Activates the arc-length method.

        Parameters
        ----------
        key
            Arc-length key:

            OFF - Do not use the arc-length method (default).

            ON - Use the arc-length method.

        maxarc
            Maximum multiplier of the reference arc-length radius (default =
            25).

        minarc
            Minimum multiplier of the reference arc-length radius (default =
            1/1000).

        Notes
        -----
        Activates the arc-length method and sets the minimum and maximum
        multipliers for controlling the arc-length radius based on the initial
        arc-length radius.

        The initial arc-length radius, t0, is proportional (in absolute value)
        to the initial load factor. The initial load factor is given by:

        Initial Load Factor = TIME / NSBSTP

        where TIME is the time specified by the TIME command for the arc-length
        load step, and NSBSTP is the number of substeps specified by the NSUBST
        command.

        The factors MAXARC and MINARC are used to define the range for the arc-
        length radius to expand and shrink during the substep solution:

        In each substep, the arc-length radius is kept constant throughout the
        equilibrium iterations. After each converged substep, the arc-length
        radius for the next substep is modified depending on the convergence
        behavior. If the substep converges and the program heuristic predicts
        an easy convergence, the arc-length radius is enlarged. If the enlarged
        value is greater than tMAX, the arc-length radius is reset to tMAX. If
        the substep does not converge, bisection will take place until the arc-
        length radius is reduced to tMIN. If further nonconvergence is
        encountered, the solution terminates.

        The arc-length method predicts the next time increment (that is, load
        factor increment). Therefore, the AUTOTS and PRED commands are ignored
        when the arc-length method is used.

        The STABILIZE and LNSRCH commands are also ignored.

        The arc-length method cannot be used in a multiframe restart.

        For difficult problems, one suggestion is to increase the initial
        number of substeps (NSUBST), and to prevent the arc-length radius from
        increasing too rapidly (MAXARC = 1).

        ARCLEN cannot be used for any load step that has no applied load or
        displacement.

        The arc-length method does not support tabular loads. In order to use
        the arc-length method, you must replace tabular loads by other load
        types and then run the analysis again.
        """
        command = "ARCLEN,%s,%s,%s" % (str(key), str(maxarc), str(minarc))
        return self.run(command, **kwargs)

    def cmomega(self, cm_name="", omegax="", omegay="", omegaz="", x1="",
                y1="", z1="", x2="", y2="", z2="", **kwargs):
        """APDL Command: CMOMEGA

        Specifies the rotational velocity of an element component about a user-
        defined rotational axis.

        Parameters
        ----------
        cm_name
            The name of the element component.

        omegax, omegay, omegaz
            If the X2, Y2, Z2 fields are not defined, OMEGAX, OMEGAY, and
            OMEGAZ specify the components of the rotational velocity vector in
            the global Cartesian X, Y, Z directions.

        x1, y1, z1
            If the X2, Y2, Z2 fields are defined,X1, Y1, and Z1 define the
            coordinates of the beginning point of the rotational axis vector.
            Otherwise, X1, Y1, and Z1 are the coordinates of a point through
            which the rotational axis passes.

        x2, y2, z2
            The coordinates of the end point of the rotational axis vector.

        Notes
        -----
        Specifies the rotational velocity components OMEGAX, OMEGAY, and OMEGAZ
        of an element component CM_NAME about a user-defined rotational axis.
        The rotational axis can be defined either as a vector passing through a
        single point or a vector connecting two points.

        You can define rotational velocity and rotational axis for these
        analysis types:

        Static (ANTYPE,STATIC)

        Harmonic (ANTYPE,HARMIC) -- Full or modal superposition

        Transient (ANTYPE,TRANS)  -- Full or modal superposition

        Substructuring (ANTYPE,SUBSTR)

        Modal (ANTYPE,MODAL)

        Rotational velocities are combined with the element mass matrices to
        form a body force load vector term. Units are radians/time. Related
        commands are ACEL, CGLOC, CGLOC,  CGOMGA, CMDOMEGA, DCGOMG, DOMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        You can use the CMOMEGA command in conjunction with either one of the
        following two groups of commands, but not with both groups
        simultaneously:

        Components for which you want to specify rotational loading must
        consist of elements only. The elements you use cannot be part of more
        than one component, and elements that share nodes cannot exist in
        different element components. You cannot apply the loading to an
        assembly of element components.

        If you have applied the Coriolis effect (CORIOLIS) using a stationary
        reference frame, the CMOMEGA command takes the gyroscopic damping
        matrix into account for the elements listed under "Stationary Reference
        Frame" in the notes section of the CORIOLIS command. ANSYS verifies
        that the rotation vector axis is parallel to the axis of the element;
        if not, the gyroscopic effect is not applied. If you issue a CMOMEGA
        command when the Coriolis or gyroscopic effect is present, a
        subsequently issued OMEGA command has no effect.

        The CMOMEGA command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for CMOMEGA_X, CMOMEGA_Y, and CMOMEGA_Z
        input values (*DIM) for full transient and harmonic analyses.

        In a mode-superposition harmonic or transient analysis, you must apply
        the load in the modal portion of the analysis. Mechanical APDL
        calculates a load vector and writes it to the MODE file, which you can
        apply via the LVSCALE command.
        """
        command = "CMOMEGA,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cm_name), str(omegax), str(omegay), str(omegaz), str(x1), str(y1), str(z1), str(x2), str(y2), str(z2))
        return self.run(command, **kwargs)

    def time(self, time="", **kwargs):
        """APDL Command: TIME

        Sets the time for a load step.

        Parameters
        ----------
        time
            Time at the end of the load step.

        Notes
        -----
        Associates the boundary conditions at the end of the load step with a
        particular TIME value.

        TIME must be a positive, nonzero, monotonically increasing quantity
        that "tracks" the input history.  Units of time should be consistent
        with those used elsewhere (for properties, creep equations, etc.).

        Typically, for the first load step TIME defaults to 1. However, for the
        first load step of a mode-superposition transient analysis
        (ANTYPE,TRANS and TRNOPT,MSUP), the TIME command is ignored and a
        static solution is performed at TIME = 0.

        For a full transient analyses, the command's default behavior does not
        apply. You must specify a time for each load step and it must be
        greater than the time at the end of the prior load step.

        TIME does not apply to modal (ANTYPE,MODAL), harmonic (ANTYPE,HARMIC),
        or substructure (ANTYPE,SUBSTR) analyses.

        This command is also valid in PREP7.
        """
        command = "TIME,%s" % (str(time))
        return self.run(command, **kwargs)

    
    def fluread(self, fname="", ext="", kdim="", kout="", limit="", listopt="",
                **kwargs):
        """APDL Command: FLUREAD

        Reads one-way Fluent-to-Mechanical APDL coupling data via a .cgns file
        with one-side fast Fourier transformation complex pressure peak value.

        Parameters
        ----------
        --
            Reserved.

        fname
            File name and directory path of a one-way Fluent-to-Mechanical APDL
            coupling data file (248 characters maximum, including the
            characters needed for the directory path). An unspecified directory
            path defaults to the working directory; in this case, you can use
            all 248 characters for the file name. Defaults to jobname.

        ext
            File name extension of the one-way Fluent-to-Mechanical APDL
            coupling data file. Defaults to .cgns).

        kdim
            Interpolation data for mapping. A value of 0 (default) or 2 applies
            2-D interpolation (where interpolation occurs on a surface).

        kout
            Outside region results for mapping:

            0 - Use the value(s) of the nearest region point for points outside of the region.
                This behavior is the default.

            1 - Set results extrapolated outside of the region to zero.

        limit
            Number of nearby nodes considered for mapping interpolation.
            Minimum = 5. Default = 20.

        listopt
            Type of items picked:

            (blank) - No listing (default).

            SOURCE - List the node coordinates and complex pressure values on the Fluent source side
                     during the solution.

            TARGET - List the node coordinates and complex pressure values on the mapped Mechanical
                     APDL target side during the solution.

            BOTH - List the node coordinates and complex pressure values on both the Fluent source
                   side and the mapped Mechanical APDL target side during the
                   solution.

        Notes
        -----
        The FLUREAD command reads one-way Fluent-to-Mechanical APDL coupling
        data from a .cgns file. The Fluent one-side fast Fourier transformation
        (FFT) peak complex pressure values are mapped to the Mechanical APDL
        structure model during the acoustic-structural solution at each FFT
        frequency.

        The command can be used only for the model with the acoustic elements.

        To apply complex pressure to the structure model, define the SURF154
        surface element, then define the one-way coupling interface (SF,,FSIN)
        on the element.

        You can define the solving frequency range via the HARFRQ command. The
        solver selects the FFT frequencies between the beginning and ending
        frequencies. The number of substeps is determined by the number of FFT
        frequencies over the frequency range. The number of substeps defined
        via the NSUBST command is overwritten.

        For better mapping performance, consider the following:

        Calculations for out-of-bound points require much more processing time
        than do points that are within bounds.

        For each point in the structural destination mesh, the command searches
        all possible triangles in the Fluent source mesh to find the best
        triangle containing each point, then performs a linear interpolation
        inside this triangle. For faster and more accurate results, consider
        your interpolation method and search criteria carefully. (See LIMIT.)

        It is possible to apply one-way coupling excitation to multiple
        frequencies. The one-side FFT peak complex pressure values are
        necessary to do so.
        """
        command = "FLUREAD,%s,%s,%s,%s,%s,%s" % (str(fname), str(ext), str(kdim), str(kout), str(limit), str(listopt))
        return self.run(command, **kwargs)

    def mfmap(self, lab1="", lab2="", filename="", opt="", **kwargs):
        """APDL Command: MFMAP

        Calculates, saves, resumes, or deletes mapping data in an ANSYS Multi-
        field solver analysis.

        Parameters
        ----------
        lab1
            Operation label:

            CALC  - Calculate mapping data and keep it in memory (default).

            SAVE  - Calculate mapping data, keep it in memory, and save it to a file. (If
                    MFMAP,CALC or MFMAP,RESU have been issued, just save it to
                    a file.)

            RESU  - Resume the mapping from a file and keep it in memory.

            DELE  - Free the mapping memory.

        lab2
            Applicable mapping label:

            ALL  - Surface and volumetric mapping.

            SURF  - Surface mapping only.

            VOLU  - Volumetric mapping only.

        filename
            The file name for a mapping data file (filename.sur for surface
            mapping and filename.vol for volumetric mapping). Defaults to
            Jobname. Applies to the commands MFMAP,SAVE and MFMAP,RESU only.

        opt
            File format:

            BINA  - Binary file (default).

            ASCI  - ASCII file.

        Notes
        -----
        This command calculates, saves, resumes, or deletes mapping data. It
        defaults to calculating the mapping data. If MFMAP has not been
        previously issued, the mapping data will be automatically calculated
        during the solution process. On the other hand, the ANSYS Multi-field
        solver will use previously created mapping data. Resumed mapping files
        must have load transfer specifications that are consistent with those
        of the current MFSURFACE and MFVOLUME commands and the ANSYS database.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFMAP,%s,%s,%s,%s" % (str(lab1), str(lab2), str(filename), str(opt))
        return self.run(command, **kwargs)

    
    
    def sadd(self, labr="", lab1="", lab2="", fact1="", fact2="", const="",
             **kwargs):
        """APDL Command: SADD

        Forms an element table item by adding two existing items.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        lab1
            First labeled result item in operation.

        lab2
            Second labeled result item in operation (may be blank).

        fact1
            Scale factor applied to Lab1. A (blank) or '0' entry defaults to
            1.0.

        fact2
            Scale factor applied to Lab2. A (blank) or '0' entry defaults to
            1.0.

        const
            Constant value.

        Notes
        -----
        Forms a labeled result (see ETABLE command) for the selected elements
        by adding two existing labeled result items according to the operation:

        LabR = (FACT1 x Lab1) + (FACT2 x Lab2) + CONST

        May also be used to scale results for a single labeled result item.  If
        absolute values are requested [SABS,1], absolute values of Lab1 and
        Lab2 are used.
        """
        command = "SADD,%s,%s,%s,%s,%s,%s" % (str(labr), str(lab1), str(lab2), str(fact1), str(fact2), str(const))
        return self.run(command, **kwargs)

    def mflist(self, option="", value="", **kwargs):
        """APDL Command: MFLIST

        Lists the settings for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        option
            ALL

            ALL - Lists all ANSYS Multi-field solver analysis options.

            SOLU - Lists all solution-related ANSYS Multi-field solver options.

            FIELD - Lists all ANSYS Multi-field solver options related to the specified field
                    number.

            SINT - Lists all surface interface information for the specified surface interface
                   number.

            VINT - Lists all volumetric interface information for the specified volumetric
                   interface number.

        value
            Use only for Option = FIELD, SINT, or VINT.

        Notes
        -----
        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFLIST,%s,%s" % (str(option), str(value))
        return self.run(command, **kwargs)

    def wait(self, dtime="", **kwargs):
        """APDL Command: /WAIT

        Causes a delay before the reading of the next command.

        Parameters
        ----------
        dtime
            Time delay (in seconds). Maximum time delay is 59 seconds.

        Notes
        -----
        You should consider using ``time.sleep(dtime)``

        The command following the /WAIT will not be processed until the
        specified wait time increment has elapsed.  Useful when reading from a
        prepared input file to cause a pause, for example, after a display
        command so that the display can be reviewed for a period of time.
        Another "wait" feature is available via the *ASK command.

        This command is valid in any processor.
        """
        command = "/WAIT,%s" % (str(dtime))
        return self.run(command, **kwargs)

    def mfoutput(self, freq="", **kwargs):
        """APDL Command: MFOUTPUT

        Specifies results file output frequency for an ANSYS
        Multi-field solver analysis.

        Parameters
        ----------
        freq
            N

            N - Write solution every Nth (and the last) time
                 step. Defaults to 1, for every time step.

            -N - Writes up to -N equally spaced results (for multifield auto time stepping).

            NONE - Suppresses writing of results for all multifield time steps.

            ALL - Writes results for every multifield time step (default).

            LAST - Writes results for only the last multifield time step.

            %array% - Where %array% is the name of an n X 1 X 1
                      dimensional array parameter defining n key
                      times, the data for the specified solution
                      results item is written at those key times. Key
                      times in the array parameter must appear in
                      ascending order. Value must be greater than or
                      equal to the ending time values for the load
                      step.

            For restart runs (see MFRSTART command), either change the parameter values to fall between the beginning and ending time values of the load step, or erase the current settings and reissue the command with a new array parameter.  - For more information about defining array parameters, see the *DIM command
                              documentation.

        Notes
        -----
         A MFOUTPUT setting overrides any other output frequency setting
        (OUTRES). To select the solution items, use the OUTRES command.

        For the case of Freq = -n and Freq = %array%, the results at the time
        points which first time reaches or exceeds the targeting ouptupt time
        points will be written.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFOUTPUT,%s" % (str(freq))
        return self.run(command, **kwargs)

    def pdsave(self, fname="", ext="", **kwargs):
        """APDL Command: PDSAVE

        Writes the probabilistic model data to a file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Writes the probabilistic model data to a file. Saved data include
        probabilistic data only; the results of the probabilistic analyses are
        not stored in the file (rather, these are stored in separate result
        files).
        """
        command = "PDSAVE,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    
    
    def slashdscale(self, wn="", dmult="", **kwargs):
        """APDL Command: /DSCALE

        Sets the displacement multiplier for displacement displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        dmult
            AUTO or 0

            AUTO or 0 - Scale displacements automatically so that maximum  displacement (vector
                        amplitude) displays as 5 percent of the maximum model
                        length, as measured in the global Cartesian X, Y, or Z
                        directions.

            1 - Do not scale displacements (i.e., scale displacements by 1.0, true to
                geometry).  Often used with large deflection results.

            FACTOR - Scale displacements by numerical value input for FACTOR.

            OFF - Remove displacement scaling (i.e., scale displacements by 0.0, no distortion).

            USER - Set DMULT to that used for last display (useful when last DMULT value was
                   automatically calculated).

        Notes
        -----
        If Multi-Plots are not being displayed, and the current device is a 3-D
        device [/SHOW,3D], then the displacement scale in all active windows
        will be the same, even if separate /DSCALE commands are issued for each
        active window. For efficiency, ANSYS 3-D graphics logic maintains a
        single data structure (segment), which contains only one displacement
        scale. The program displays the same segment (displacement scale) in
        all windows. Only the view settings will be different in each of the
        active windows.

        This command is valid in any processor.
        """
        command = "/DSCALE,%s,%s" % (str(wn), str(dmult))
        return self.run(command, **kwargs)

    def lcabs(self, lcno="", kabs="", **kwargs):
        """APDL Command: LCABS

        Specifies absolute values for load case operations.

        Parameters
        ----------
        lcno
            Load case pointer number.  If ALL, apply to all selected load cases
            [LCSEL].

        kabs
            Absolute value key:

            0 - Use algebraic values of load case LCNO in operations.

            1 - Use absolute values of load case LCNO in operations.

        Notes
        -----
        Causes absolute values to be used in the load case operations [LCASE or
        LCOPER].  Absolute values are taken prior to assigning a load case
        factor [LCFACT] and are applied only to defined load cases [LCDEF].
        """
        command = "LCABS,%s,%s" % (str(lcno), str(kabs))
        return self.run(command, **kwargs)

    def qsopt(self, opt="", **kwargs):
        """APDL Command: QSOPT

        Specifies quasi static radiation options.

        Parameters
        ----------
        opt
            Quasi static option:

            OFF - Do not run transient radiation problem to steady-state (default).

            ON - Run transient radiation problem to steady-state.

        Notes
        -----
        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "QSOPT,%s" % (str(opt))
        return self.run(command, **kwargs)

    
    def trtime(self, time="", spacing="", offset="", size="", length="",
               **kwargs):
        """APDL Command: TRTIME

        Defines the options used for the PLTRAC (particle flow or charged
        particle trace) command.

        Parameters
        ----------
        time
            Total Trace Time (seconds) (defaults to 0, which is the full flow
            trace).

        spacing
            Particle spacing in seconds (defaults to 0).

        offset
            Particle offset in seconds (defaults to 0).  It is used internally
            in the ANFLOW macro to produce an animation of particle flow in a
            flowing fluid or charged particle motion in an electric or magnetic
            field.

        size
            Particle size (defaults to 0, which is a line).

        length
            Particle length fraction (defaults to .1).

        Notes
        -----
        The TRTIME command varies the type of   PLTRAC display produced.
        Particle flow or charged particle traces follow a particle's path in
        the forward and backward direction of travel. The DOF selected
        determines the color of the particle trace.  SPACING defines the
        particle spacing in seconds from adjacent particles in the stream line.
        OFFSET defines the offset in seconds from the spacing set by the
        SPACING argument.

        LENGTH defines the particle length fraction.  The default value (.1),
        means the particle occupies 10% of the flow region, and the other 90%
        is a color-coded line.

        SIZE sets the radius of the particle. Use SPACING, OFFSET and LENGTH
        only when SIZE is nonzero (i.e., the particle is bigger than the line).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "TRTIME,%s,%s,%s,%s,%s" % (str(time), str(spacing), str(offset), str(size), str(length))
        return self.run(command, **kwargs)

    
    def genopt(self, **kwargs):
        """APDL Command: GENOPT

        Specifies "General options" as the subsequent status topic.

        Notes
        -----
        This is a status (STAT) topic command. Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "GENOPT,"
        return self.run(command, **kwargs)

    def inrtia(self, **kwargs):
        """APDL Command: INRTIA

        Specifies "Inertial loads" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "INRTIA,"
        return self.run(command, **kwargs)

    def pdot(self, labr="", labx1="", laby1="", labz1="", labx2="", laby2="",
             labz2="", **kwargs):
        """APDL Command: PDOT

        Calculates the dot product of two path vectors along the current path.

        Parameters
        ----------
        labr
            Label assigned to dot product result.

        labx1
            X-component of first vector label (labeled path item).

        laby1
            Y-component of first vector label (labeled path item).

        labz1
            Z-component of first vector label (labeled path item).

        labx2
            X-component of second vector label (labeled path item).

        laby2
            Y-component of second vector label (labeled path item).

        labz2
            Z-component of second vector label (labeled path item).
        """
        command = "PDOT,%s,%s,%s,%s,%s,%s,%s" % (str(labr), str(labx1), str(laby1), str(labz1), str(labx2), str(laby2), str(labz2))
        return self.run(command, **kwargs)

    def dflx(self, node="", bx="", by="", bz="", bx2="", by2="", bz2="",
             **kwargs):
        """APDL Command: DFLX

        Imposes a uniform magnetic flux B on an edge-element electromagnetic
        model.

        Parameters
        ----------
        node
            Nodes at which the edge-flux (AZ) constraints corresponding to the
            uniform magnetic flux are to be specified.  Valid options are ALL
            (default) or Component Name. If ALL, constraints are applied to all
            selected nodes (NSEL).

        bx, by, bz
            Real components of magnetic flux B.

        bx2, by2, bz2
            Imaginary components of magnetic flux B.

        Notes
        -----
        The DFLX command sets the constraints on the edge-flux (AZ) degrees of
        freedom to produce a uniform magnetic flux B in an edge-based
        electromagnetic analysis using elements SOLID236 and SOLID237. The
        command ignores the corner nodes of the elements (even if they were
        selected) and imposes the AZ-constraints on the mid-side nodes only.
        The AZ-constraints are imposed in the active Cartesian coordinate
        system. A non-Cartesian coordinate system will be ignored by the DFLX
        command.

        The edge-flux constraints at the mid-side nodes are derived from  the
        magnetic vector potential A, which is related to the imposed magnetic
        flux B as follows:

        where r is the position of the mid-side node.

        The DFLX command creates a component named _DFLX for the constrained
        midside nodes. You can use this component to delete the constraints
        imposed by the DFLX command.

        This command is also valid in PREP7.
        """
        command = "DFLX,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(bx), str(by), str(bz), str(bx2), str(by2), str(bz2))
        return self.run(command, **kwargs)

    
    def gpdele(self, gap1="", gap2="", ginc="", **kwargs):
        """APDL Command: GPDELE

        Deletes gap conditions.

        Parameters
        ----------
        gap1, gap2, ginc
            Delete gap conditions from GAP1 to GAP2 (defaults to GAP1) in steps
            of GINC  (defaults to 1).

        Notes
        -----
        Deletes gap conditions defined with the GP command.  Gap conditions
        following those deleted are automatically compressed and renumbered.
        If used in SOLUTION, this command is valid only within the first load
        step.

        This command is also valid in PREP7.
        """
        command = "GPDELE,%s,%s,%s" % (str(gap1), str(gap2), str(ginc))
        return self.run(command, **kwargs)

    
    
    def pdvar(self, name="", type_="", par1="", par2="", par3="", par4="",
              **kwargs):
        """APDL Command: PDVAR

        Specifies the parameters to be treated as probabilistic design
        variables.

        Parameters
        ----------
        name
            Parameter name (must be a scalar ANSYS parameter). The parameter
            must have been previously defined as a random input variable or a
            random output parameter with the PDVAR command. See the *SET
            command for restrictions about ANSYS parameters.

        type\_
            Probabilistic design variable type. This is the statistical
            distribution type. For more information on each of these types, see
            Probabilistic Design in the Advanced Analysis Guide.

            BETA - Beta distributed random variable.

            PAR1 = Shape parameter. Defaults to 2.0. - PAR2 = Shape parameter. Defaults to 2.0.

            PAR3 = Lower minimum value. Defaults to 0.0.  - PAR4 = Upper maximum value. Defaults to 1.0.

            EXPO - Exponential distributed random variable.

            PAR1 = Decay parameter λ. Must be larger then 0.0 and defaults to 1.0.  - PAR2 = Shift or minimum value. Defaults to 0.0.

            PAR3, PAR4 are ignored. - GAMA

            Gamma distributed random variable. - PAR1 = Decay parameter λ. Must be larger then 0.0 and defaults to 1.0.

            PAR2 = Exponential parameter k. Must be larger then 0.0 and defaults to 1.0.  - PAR3, PAR4 are ignored. Exponential distributed random variable.

            GAUS - Gaussian (Normal) distributed random variable.

            PAR1 = Mean value. Defaults to 0.0. - PAR2 = Standard deviation. Must be larger then 0.0 and defaults to 1.0.

            PAR3, PAR4 are ignored. - LOG1

            Lognormal distributed random variable specified directly with the statistical parameters mean value and standard deviation. - PAR1 = Mean value. Must be larger then 0.0 and defaults to 1.0.

            PAR2 = Standard deviation. Must be larger then 0.0 and defaults to 1.0. - PAR3, PAR4 are ignored.

            LOG2 - Lognormal distributed random variable specified with the statistical parameters
                   mean value and standard deviation of the logarithm of the
                   random values.

            PAR1 and PAR2 must also be defined. PAR1 = Mean value of the logarithm of the data. Defaults to 0.0.  - PAR2 = Standard deviation of the logarithm of the data. Must be larger then 0.0
                              and defaults to 1.0.

            PAR3, PAR4 are ignored. - UNIF

            Uniform distributed random variable. Note that PAR1 must be less than PAR2. - PAR1 = Minimum value. Defaults to 0.0.

            PAR2 = Maximum value. Defaults to 1.0. - PAR3, PAR4 are ignored.

            TGAU - Truncated Gaussian distributed random variable. Note that PAR3 must be less
                   than PAR4.

            PAR1 = Mean value of the untruncated Gaussian distribution. Defaults to 0.0. -  PAR2 = Standard deviation of the untruncated Gaussian distribution. Must be
                              larger then 0.0 and defaults to 1.0.

            PAR3 = Minimum value and lower truncation boundary. Defaults to -3.0. - PAR4 = Maximum value and upper truncation boundary. Defaults to +3.0.

            TRIA - Triangular distributed random variable. Note that PAR1 must be less than PAR2
                   which must be less than PAR3.

            PAR1 = Minimum value. Defaults to 0.0.  - PAR2 = Most Likely Value (MLV). Defaults to 0.5.

            PAR3 = Maximum value. Defaults to 1.0.  - PAR4 is ignored.

            WEIB - Weibull (Type III smallest) distributed random variable. Note that PAR2 must be
                   greater than PAR3. If PAR3 = 0.0, the random distribution is
                   equivalent to a two-parameter Weibull distribution.

            PAR1 = Weibull exponent. Must be larger then 0.0 and defaults to 1.0. - PAR2 = Characteristic value. Must be larger then 0.0 and defaults to 1.0.

            PAR3 = Shift or minimum value. Defaults to 0.0. - PAR4 is ignored.

            RESP - Random output or response parameter.PAR1 to PAR4 are not used.

            DEL - Deletes this probabilistic design variable (does not delete the ANSYS
                  parameter). This option is only valid if the parameter Name
                  was previously defined as a probabilistic design variable
                  (using Type = BETA, ..., WEIB or Type = RESP). The parameter
                  retains the value assigned during the last probabilistic
                  design loop.PAR1 to PAR4 are not used.

        par1, par2, par3, par4
            Parameters of the distribution function. The parameters must be
            specified according to the requirements of the individual
            distribution types described above.

        Notes
        -----
        Specifies the parameters to be treated as probabilistic design
        variables. A random input variable is specified by the name of the
        ANSYS parameter, the type of the distribution function (Type) and its
        distribution parameters (PAR1, ..., PAR4). A random output parameter is
        specified by the name of the ANSYS parameter and the type identifying
        it as a random output parameter (Type = RESP).
        """
        command = "PDVAR,%s,%s,%s,%s,%s,%s" % (str(name), str(type_), str(par1), str(par2), str(par3), str(par4))
        return self.run(command, **kwargs)

    
    
    def cmsopt(self, cmsmeth="", nmode="", freqb="", freqe="", fbddef="",
               fbdval="", iokey="", **kwargs):
        """APDL Command: CMSOPT

        Specifies component mode synthesis (CMS) analysis options.

        Parameters
        ----------
        cmsmeth
            The component mode synthesis method to use. This value is required.

            FIX - Fixed-interface method.

            FREE - Free-interface method.

            RFFB - Residual-flexible free-interface method.

        nmode
            The number of normal modes extracted and used in the superelement
            generation. This value is required; the minimum is 1.

        freqb
            Beginning, or lower end, of frequency range of interest. This value
            is optional.

        freqe
            Ending, or upper end, of frequency range of interest. This value is
            optional.

        fbddef
            In a free-interface (CMSMETH = FREE) or residual-flexible free-
            interface (CMSMETH = RFFB) CMS analysis, the method to use for
            defining free body modes:

            FNUM - The number (FDBVAL) of rigid body modes in the calculation.

            FTOL - Employ a specified tolerance (FDBVAL) to determine rigid body modes in the
                   calculation.

            FAUTO - Automatically determine rigid body modes in the calculation. This method is the
                    default.

            RIGID - If no rigid body modes exist, define your own via the RIGID command.

        fbdval
            In a free-interface CMS analysis (CMSMETH = FREE), the number of
            rigid body modes if FBDDEF = fnum (where the value is an integer
            from 0 through 6), or the tolerance to employ if FBDDEF = ftol
            (where the value is a positive real number representing rad/sec).
            This value is required only when FBDDEF = fnum or FBDDEF = ftol;
            otherwise, any specified value is ignored.

        iokey
            Output key to control writing of the transformation matrix to the
            .TCMS file (FIX or FREE methods) or body properties to the .EXB
            file (FIX method).

            TCMS - Write the transformation matrix of the nodal component defined by the OUTPR
                   command to a .TCMS file. Refer to TCMS File Format in the
                   Programmer's Reference for more information on the this
                   file.

            EXB - Write a body property input file (.EXB file) containing the condensed
                  substructure matrices and other body properties for use with
                  AVL EXCITE. Refer to ANSYS Interface to AVL EXCITE in the
                  Substructuring Analysis Guide for more information.

        Notes
        -----
        CMS employs the Block Lanczos eigensolution method in the generation
        pass.

        CMS supports damping matrix reduction when a damping matrix exists. Set
        the matrix generation key to 3 (SEOPT,Sename,SEMATR) to generate and
        then reduce stiffness, mass, and damping matrices.

        CMS does not support the SEOPT,,,,,RESOLVE command. Instead, ANSYS sets
        the expansion method for the expansion pass (EXPMTH) to BACKSUB.

        For more information about performing a CMS analysis, see Component
        Mode Synthesis in the Substructuring Analysis Guide.

        If IOKEY = TCMS is used to output the transformation matrix, then only
        ITEM = NSOL is valid in the OUTPR command.  In the interactive
        sessions, the transformation matrix will not be output if the model has
        more than 10 elements.

        This command is also valid in /PREP7.
        """
        command = "CMSOPT,%s,%s,%s,%s,%s,%s,%s" % (str(cmsmeth), str(nmode), str(freqb), str(freqe), str(fbddef), str(fbdval), str(iokey))
        return self.run(command, **kwargs)

    def del_(self, val1="", val2="", **kwargs):
        """APDL Command: *DEL

        Deletes a parameter or parameters (GUI).

        Parameters
        ----------
        val1
            Command behavior key:

            Delete all user-defined parameters, or all user-defined parameters and all system parameters, as specified by Val2. - Delete the parameter(s) specified by Val2.

        val2
            The parameter or parameters to delete (used only when Val1 = ALL or
            (blank)):

            When Val1 is (blank), specifies the location of the parameter within the Array Parameters dialog box.  The location number is based on an alphabetically ordered list of all parameters in the database.   - When Val1 is ALL, deletes all parameters, including those named with a leading
                              underscore (_) (except _STATUS and _RETURN). When
                              Val1 is (blank), deletes only those parameters
                              named with a leading underscore (_) (except
                              _STATUS and _RETURN).

            When Val1 is (blank), deletes only those parameters named with a trailing underscore (_).  - When Val1 is ALL, a (blank) value for Val2 causes all user-defined parameters
                              to be deleted.

        Notes
        -----
        This is a command generally created by the graphical user interface
        (GUI).  It appears in the log file (Jobname.LOG) if an array parameter
        is deleted from within the Array Parameters dialog.

        Usage examples:

        Delete all user-defined parameters: *DEL,ALL

        Delete only those user-defined parameters named with a trailing
        underscore: *DEL,,PRM_

        Delete all user-defined and all system parameters (except for _STATUS
        and _RETURN): *DEL,ALL,_PRM

        Delete a parameter by specifying its location within the Array
        Parameters dialog: *DEL,,LOC

        Delete a single specified parameter by name: *DEL,ParmName (You cannot
        specify more than one named parameter at a time.)

        This command is valid in any processor.
        """
        command = "*DEL,%s,%s" % (str(val1), str(val2))
        return self.run(command, **kwargs)

    
    def grtyp(self, kaxis="", **kwargs):
        """APDL Command: /GRTYP

        Selects single or multiple Y-axes graph displays.

        Parameters
        ----------
        kaxis
            Axis selection key:

            0 or 1 - Single Y-axis.  Up to 10 curves scaled to a single Y-axis.

            2 - Additional Y-axes (one for each curve) (3 curves maximum).  Allows better
                scaling of curves with widely differing numbering ranges.

            3 - Same as 2 but with additional Y-axis and curves projected out of the plane (6
                curves maximum).  Allows clearer display with an isometric
                view.  The default view when KAXIS = 3 is View,1,1,2,3.

        Notes
        -----
        The basic line graph has one or more curves plotted against the same Y
        and X axes.  Multiple curve graphs can also be plotted with individual
        Y axes and the same X axis.  The Y axis of the first curve is referred
        to as the base Y-axis and the Y axes of the other curves as additional
        Y axes.  Curves are numbered sequentially from 1 (the base curve) in
        the order in which they are displayed.  See the /AXLAB, /GROPT, /GRID,
        and /GTHK commands for other display options.

        This command is valid in any processor.
        """
        command = "/GRTYP,%s" % (str(kaxis))
        return self.run(command, **kwargs)

    
    def sscale(self, wn="", smult="", **kwargs):
        """APDL Command: /SSCALE

        Sets the contour multiplier for topographic displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        smult
            Contour multiplier that factors in results based on the product of
            the multiplier and the result being plotted. Defaults to 0.0 (no
            topographic effects).

        Notes
        -----
        Use this command to scale values to the geometry when the contours are
        shown elevated.  For section displays [/TYPE], the elevation is
        performed perpendicular to the section face.

        Nonzero contour multipliers factoring in large results (stresses or
        displacements) can produce very large distortion, causing images to
        disappear.  To bring a distorted image back into view, reduce the
        contour multiplier value.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "/SSCALE,%s,%s" % (str(wn), str(smult))
        return self.run(command, **kwargs)

    
    def psymb(self, label="", key="", **kwargs):
        """APDL Command: /PSYMB

        Shows various symbols on displays.

        Parameters
        ----------
        label
            Show symbols as selected from the following labels:

            CS - Local coordinate systems.

            NDIR - Nodal coordinate systems (on rotated nodes only).

            ESYS - Element coordinate systems (element displays only).

            LDIR - Line directions (line displays only).

            LDIV - Controls the display of element divisions on lines.

            ADIR - Area direction symbol (for keypoint, line, area and volume plots).

            LAYR - Layer orientations (relative to the projected element x-axis) or fiber
                   orientations in smeared reinforcing elements. Used only
                   within an element display. Use KEY to specify the layer
                   number.

            ECON - Element mesh symbols on keypoints and lines.

            DOT - Larger symbols displayed for node and keypoint locations.  When Label = DOT,
                  KEY = 1 by default.

            XNOD - Extra node of surface or circuit elements.

            FBCS - Force boundary condition scaling. Subsequent KEY value determines whether or
                   not to scale the applied and derived forces/moments to the
                   same maximum value.

            DEFA - Resets the symbol keys so that ANSYS displays none of the symbols controlled by
                   the /PSYMB command.  The value of the KEY field is ignored.

            STAT - Prints the status of the settings of the symbol keys controlled by the /PSYMB
                   command.  The KEY field is ignored.

        key
            Symbol key:

            -1  - Effective only if Label = LAYR and solid shape element display (/ESHAPE) is
                  active. Orientation of all layers appears with the solid
                  shape element display.

            0  - No symbol (default). If Label = LDIV, then KEY= 0 indicates that the displayed
                 element divisions will correspond to the existing mesh (the
                 word MESHED or EXISTING can also be substituted). Also, for
                 Label = LDIV, if you execute any meshing command (such as
                 AMESH or VMESH), KEY is set to 0 (MESHED) automatically. If
                 Label = FBCS, then KEY= 0 indicates that boundary condition
                 scaling will not be common. The applied and derived
                 forces/moments will be scaled to their respective maximum
                 values.

            1  - Include symbol. If Label = LDIV, then KEY = 1 indicates that the displayed line
                 divisions will correspond to the value assigned by LESIZE (the
                 word LESIZE can also be substituted). Also, for Label = LDIV,
                 if you execute the LESIZE command, KEY is set to 1 (LESIZE)
                 automatically. If Label = FBCS, then KEY= 1 indicates that
                 boundary condition scaling will be common. The applied and
                 derived forces/moments will be scaled to the same maximum
                 value.

            N  - If Label = LAYR, then N is equal to the layer number. If Label = DOT, then N
                 can be equal to 0,1,.....15, indicating the dot size. If Label
                 = LDIV, then KEY = -1, indicates that no element divisions
                 will be displayed (the word OFF can also be substituted).

        Notes
        -----
        Includes various symbols on the display.  Triads are right-handed with
        x displayed as the longest leg.  Where color is displayed, x is white,
        y is green, and z is blue.  For beams, x is always along the length of
        the element.   For lines, an arrow represents the direction of a line,
        from the beginning keypoint to the end keypoint.  See /PLOPTS command
        for additional display options.  Use /PSTATUS or /PSYMB,STAT to display
        settings.  Use /PSYMB,DEFA to reset all specifications back to their
        defaults.  The command /PSYMB,ECON,1 causes the symbol "M" to be
        displayed on keypoints and lines associated with meshed entities.  When
        you issue the command /PSYMB,DOT,1, a larger symbol is displayed for
        each node and keypoint location.

        PowerGraphics (/GRAPHICS,POWER) does not support /PSYMB,ESYS and
        /PSYMB,LAYR.

        If KEY = N and PowerGraphics is off, the centroid of the surface
        elements is connected to the extra node using a gray line.  However, if
        PowerGraphics is on, the color of the line connecting the centroid to
        the extra node is the same as that for the elements themselves (as
        determined by /PNUM).

        When Label = LAYR, the layer systems can be visualized with all
        current-technology layered elements and the smeared reinforcing element
        REINF265. To use /PSYMB,LAYR with REINF265, first set the vector-mode
        graphics option (/DEVICE,VECTOR,1).

        This command is valid in any processor.
        """
        command = "/PSYMB,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    def gap(self, **kwargs):
        """APDL Command: GAP

        Specifies "mode-superposition transient gap conditions" as the
        subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "GAP,"
        return self.run(command, **kwargs)

    
    
    def tallow(self, temp1="", temp2="", temp3="", temp4="", temp5="",
               temp6="", **kwargs):
        """APDL Command: TALLOW

        Defines the temperature table for safety factor calculations.

        Parameters
        ----------
        temp1, temp2, temp3, . . . , temp6
            Input up to six temperatures covering the range of nodal
            temperatures.  Temperatures must be input in ascending order.

        Notes
        -----
        Defines the temperature table for safety factor calculations [SFACT,
        SALLOW].  Use STAT command to list current temperature table.  Repeat
        TALLOW command to zero table and redefine points (6 maximum).

        Safety factor calculations are not supported by PowerGraphics. Both the
        SALLOW and TALLOW commands must be used with the Full Model Graphics
        display method active.
        """
        command = "TALLOW,%s,%s,%s,%s,%s,%s" % (str(temp1), str(temp2), str(temp3), str(temp4), str(temp5), str(temp6))
        return self.run(command, **kwargs)

    def ancntr(self, nfram="", delay="", ncycl="", **kwargs):
        """APDL Command: ANCNTR

        Produces an animated sequence of a contoured deformed shape.

        Parameters
        ----------
        nfram
            Number of frames captures (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        Notes
        -----
        ANCNTR involves an ANSYS macro which produces an animation of a
        contoured deformed shape of the last plot action command.  This command
        operates only on graphic display platforms supporting the /SEG command.
        After executing ANCNTR, you can replay the animated sequence by issuing
        the ANIM command.

        The command functions only in the postprocessor.
        """
        command = "ANCNTR,%s,%s,%s" % (str(nfram), str(delay), str(ncycl))
        return self.run(command, **kwargs)

    def magsolv(self, opt="", nramp="", cnvcsg="", cnvflux="", neqit="",
                biot="", cnvtol="", **kwargs):
        """APDL Command: MAGSOLV

        Specifies magnetic solution options and initiates the solution.

        Parameters
        ----------
        opt
            Static magnetic solution option:

            0 - Vector potential (MVP) or edge formulation  (default).

            1 - Combined vector potential and reduced scalar potential (MVP-RSP).

            2 - Reduced scalar potential (RSP).

            3 - Difference scalar potential (DSP).

            4 - General scalar potential (GSP).

        nramp
            Number of ramped substeps for the first load step of a nonlinear
            MVP or MVP-RSP solution.  Defaults to 3.  If NRAMP = -1, ignore the
            ramped load step entirely.NRAMP is ignored for linear
            magnetostatics.

        cnvcsg
            Tolerance value on the program-calculated reference value for the
            magnetic current-segment convergence.  Used for the MVP, the MVP-
            RSP, and the edge formulation solution options (OPT = 0 and 1).
            Defaults to 0.001.

        cnvflux
            Tolerance value on the program-calculated reference value for the
            magnetic flux convergence.  Used for all scalar potential solution
            options (OPT = 2, 3, 4).  Defaults to 0.001.

        neqit
            Maximum number of equilibrium iterations per load step.  Defaults
            to 25.

        biot
            Option to force execution of a Biot-Savart integral solution
            [BIOT,NEW] for the scalar potential options.  Required if multiple
            load steps are being performed with different current source
            primitives (SOURC36 elements).

            0 - Do not force execution of Biot-Savart calculation (default); Biot-Savart is
                automatically calculated only for the first solution.

            1 - Force execution of Biot-Savart calculation.

        cnvtol
            Sets the convergence tolerance for AMPS reaction. Defaults to 1e-3.

        Notes
        -----
        MAGSOLV invokes an ANSYS macro which specifies magnetic solution
        options and initiates the solution.  The macro is applicable to any
        ANSYS magnetostatic analysis using the magnetic vector potential (MVP),
        reduced scalar potential (RSP), difference scalar potential (DSP),
        general scalar potential (GSP), or combined MVP-RSP formulation
        options.  Results are only stored for the final converged solution.
        (In POST1, issue *SET,LIST to identify the load step of solution
        results.)  The macro internally determines if a nonlinear analysis is
        required based on magnetic material properties.

        If you use the BIOT option and issue SAVE after solution or
        postprocessing, the Biot-Savart calculations are saved to the database,
        but will be overwritten upon normal exit from the program.  To save
        this data after issuing SAVE, use the /EXIT,NOSAVE command.  You can
        also issue the /EXIT,SOLU command to exit ANSYS and save all solution
        data, including the Biot-Savart calculations, in the database.
        Otherwise, when you issue RESUME, the Biot-Savart calculation will be
        lost (resulting in a zero solution).

        The MVP, MVP-RSP, and edge formulation options perform a two-load-step
        solution sequence.  The first load step ramps the applied loads over a
        prescribed number of substeps (NRAMP), and the second load step
        calculates the converged solution.  For linear problems, only a single
        load step solution is performed.  The ramped load step can be bypassed
        by setting NRAMP to -1.

        The RSP option solves in a single load step using the adaptive descent
        procedure.  The DSP option uses two load steps, and the GSP solution
        uses three load steps.

        The following analysis options and nonlinear options are controlled by
        this macro:  KBC, NEQIT, NSUBST, CNVTOL, NROPT, MAGOPT, and OUTRES.

        You cannot use constraint equations with OPT = 4.
        """
        command = "MAGSOLV,%s,%s,%s,%s,%s,%s,%s" % (str(opt), str(nramp), str(cnvcsg), str(cnvflux), str(neqit), str(biot), str(cnvtol))
        return self.run(command, **kwargs)

    def hrexp(self, angle="", **kwargs):
        """APDL Command: HREXP

        Specifies the phase angle for the harmonic analysis expansion pass.

        Parameters
        ----------
        angle
            Phase angle (degrees) for expansion pass.  If ALL (default), use
            both 0.0° (real) and 90.0° (imaginary) phase angles.

        Notes
        -----
        Specifies the phase angle where the expansion pass will be done for a
        harmonic mode-superposition expansion pass.

        For a specific angle, the following real solution is stored in the
        results (*.rst) file:

        Where:

        i is the degree of freedom number.

         is the amplitude of the i th degree of freedom solution

        Φi is the phase shift angle of the i th degree of freedom solution

        ϕ is the supplied phase shift angle (ANGLE)

        If ANGLE is ALL, both the real and imaginary parts of the solution are
        stored in the results file.

        For more details about the solution equations, see Harmonic Analyses in
        the Mechanical APDL Theory Reference.

        This command is ignored if the HROPT command has been issued with
        Method = VT or Method = VTRU.

        This command is also valid in PREP7.
        """
        command = "HREXP,%s" % (str(angle))
        return self.run(command, **kwargs)

    
    
    def plnear(self, lab="", opt="", kcn="", val1="", val2="", val3="",
               val4="", val5="", val6="", val7="", val8="", val9="", **kwargs):
        """APDL Command: PLNEAR

        Plots the pressure in the near zone exterior to the equivalent source
        surface.

        Parameters
        ----------
        lab
            Plot the maximum pressure or sound pressure level:

            SPHERE - on the spherical structure

            PATH - along the path

        opt
            PSUM

            PSUM  - Maximum complex pressure for acoustics.

            PHAS  - Phase angle of complex pressure for acoustics.

            SPL  - Sound pressure level for acoustics.

            SPLA - A-weighted sound pressure level for acoustics (dBA).

        kcn
            KCN is the coordinate system reference number. It may be 0
            (Cartesian) or any previously defined local coordinate system
            number (>10). Defaults to 0.

        val1, val2, val3, . . . , val9
            For LAB = SPHERE:

            VAL1 - Radius of spherical surface in spherical coordinate system.

            VAL2 - Starting φ angle (degree) in the spherical coordinate system. Defaults to 0.

            VAL3 - Ending φ angle (degree) in the spherical coordinate system. Defaults to 0.

            VAL4 - Number of divisions between the starting and ending φ angles for data
                   computations. Defaults to 0.

            VAL5 - Starting θ angle (degrees) in the spherical coordinate system. Defaults to 0 in
                   3-D and 90 in 2-D extension.

            VAL6 - Ending θ angle (degrees) in the spherical coordinate system. Defaults to 0 in
                   3-D and 90 in 2-D extension.

            VAL7 - Number of divisions between the starting and ending θ angles for data
                   computations. Defaults to 0.

            VAL8 - Reference rms sound pressure. Defaults to 2x10-5 Pa.

            VAL9 - Thickness of 2-D model extension in z direction (defaults to 0).

        Notes
        -----
        PLNEAR uses the equivalent source principle to calculate the pressure
        in the near zone exterior to the equivalent source surface (flagged
        with the Maxwell surface flag in the preprocessor) for one of the
        following locations:

        A spherical surface in the KCN coordinate system

        A path defined by the PATH and PPATH commands

        To plot the pressure results for a path, use the PLPAGM or PLPATH
        commands. See the HFSYM command for the model symmetry.

        To retrieve saved equivalent source data, issue the
        SET,Lstep,Sbstep,,REAL command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLNEAR,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(opt), str(kcn), str(val1), str(val2), str(val3), str(val4), str(val5), str(val6), str(val7), str(val8), str(val9))
        return self.run(command, **kwargs)

    def starexit(self, **kwargs):
        """APDL Command: *EXIT

        Exits a do-loop.

        Notes
        -----
        The command following the *ENDDO is executed next. The exit option may
        also be conditional [Use the *IF].  The *EXIT command must appear on
        the same file as the  *DO command.

        This command is valid in any processor.
        """
        command = "*EXIT,"
        return self.run(command, **kwargs)

    def color(self, lab="", clab="", n1="", n2="", ninc="", **kwargs):
        """APDL Command: /COLOR

        Specifies the color mapping for various items.

        Parameters
        ----------
        lab
            Apply color to the items specified by the following labels:

            AXES - Determines the color (specified in next argument, Clab) that the axes of a
                   graph will be plotted in.

            AXNUM - Determines the color (specified in next argument, Clab) that the numbering on
                    the axes of a graph will be plotted in.

            NUM - Discretely numbered items (such as element types, element materials, etc., as
                  shown on the /PNUM command).  Also specify number (1 to 11)
                  in the N1 field.  For example, /COLOR,NUM,RED,3 will assign
                  the color red to all items having the discrete number 3
                  (material displays would show elements having material 3 as
                  red).

            OUTL - Outline of elements, areas, and volumes.  Ex: /COLOR,OUTL,BLUE.

            ELEM - Elements. Use N1, N2, NINC fields for element numbers.

            LINE - Solid model lines.  Use N1, N2, NINC fields for line numbers.

            AREA - Solid model areas.  Use N1, N2, NINC fields for area numbers.

            VOLU - Solid model volumes.  Use N1, N2, NINC fields for volume numbers.

            ISURF - Isosurfaces (surfaces of constant stress, etc.).   This option is particularly
                    useful when capturing frames for animating a single
                    isosurface value.

            WBAK - Window background.  Use N1, N2, NINC fields for window numbers. The options
                   that you select using Lab = PBAK will supersede those
                   applied using Lab = WBAK.

            b.c.label - Boundary condition label.  Enter U, ROT, TEMP, PRES, V, VOLT, MAG, A, EMF,
                        CURR, F, M, HEAT, FLOW, VF, AMPS, FLUX, CSG, CURT,
                        VLTG, MAST, CP, CE, NFOR, NMOM, RFOR, RMOM, PATH. See
                        the /PBC command for boundary condition label
                        definitions.

            GRBAK - Graph background.

            GRID - Graph grid lines.

            AXLAB - Graph X and Y axis labels.

            CURVE - Graph curves (identify curve numbers (1-10) in N1, N2, NINC fields).

            CM - Component group.  Use N1 field for component name, ignore N2 and NINC.

            CNTR - ANSYS contour stress colors.  The maximum number of contours available is 128.
                   The number of colors that can be specified interactively
                   (GUI) is 9. (/CONTOUR, , 9). Any other setting will yield
                   inconsistent results.

            SMAX - Specifies that all stress values above the maximum value entered in /CONTOUR
                   will be displayed in the color designated in the Clab field.
                   Defaults to dark grey.

            SMIN - Specifies that all stress values below the minimum value entered in /CONTOUR
                   will be displayed in the color designated in the Clab field.
                   Defaults to dark grey.

            PBAK - Activates background shading options (see command syntax at end of argument
                   descriptions below). The options that you select using Lab =
                   PBAK will supersede those applied using Lab = WBAK.

        clab
            Valid color labels are:

            BLAC (0) - Black

            MRED (1) - Magenta-Red

            MAGE (2) - Magenta

            BMAG (3) - Blue-Magenta

            BLUE (4) - Blue

            CBLU (5) - Cyan-Blue

            CYAN (6) - Cyan

            GCYA ((7) - Green-Cyan

            GREE (8) - Green

            YGRE (9) - Yellow-Green

            YELL (10) - Yellow

            ORAN (11) - Orange

            RED (12) - Red

            DGRA (13) - Dark Gray

            LGRA (14) - Light Gray

            WHIT (15) - White

        n1, n2, ninc
            Apply color to Lab items numbered N1 to N2 (defaults to N1) in
            steps of NINC (defaults to 1).  If N1 is blank, apply color to
            entire selected range.  If Lab is CM, use component name for N1 and
            ignore N2 and NINC.  If N1 = P, graphical picking of elements,
            lines, areas and volumes is enabled; your can assign colors to the
            entities via the picker. When picking is enabled, the Lab and Clab
            fields are ignored.
        """
        command = "/COLOR,%s,%s,%s,%s,%s" % (str(lab), str(clab), str(n1), str(n2), str(ninc))
        return self.run(command, **kwargs)

    
    def prenergy(self, energytype="", cname1="", cname2="", cname3="",
                 cname4="", cname5="", cname6="", **kwargs):
        """APDL Command: PRENERGY

        Prints the total energies of a model or the energies of the specified
        components.

        Parameters
        ----------
        energytype
            Type of energies to be printed:

            ALL - All energies are printed: potential, kinetic, artificial hourglass/drill
                  stiffness, contact stabilization energy, and artificial
                  stabilization energy when applicable. This is the default.

            SENE - Potential energy.

            KENE - Kinetic energy.

        cname1, cname2, cname3,…
            Component names for energies of the components printout.

        Notes
        -----
        The PRENERGY command prints out either the total energies of the entire
        model or the energies of the components depending on the Cname1
        specification.

        Only existing components based on elements (defined with the CM
        command) are supported when component energies are listed.

        This command applies to structural elements only.
        """
        command = "PRENERGY,%s,%s,%s,%s,%s,%s,%s" % (str(energytype), str(cname1), str(cname2), str(cname3), str(cname4), str(cname5), str(cname6))
        return self.run(command, **kwargs)

    
    def annot(self, lab="", val1="", val2="", **kwargs):
        """APDL Command: /ANNOT

        Activates graphics for annotating displays (GUI).

        Parameters
        ----------
        lab
            Annotation control key:

            OFF - Turns off annotation for each subsequent display (default).

            ON - Turns on annotation for each subsequent display.

            DELE - Deletes all annotation.

            SAVE - Saves annotation on a file.  Use VAL1 for file name (defaults to Jobname) and
                   VAL2 for the extension (defaults to ANO).

            SCALE - Sets annotation scale factor (direct input only).  Use VAL1 for value (0.1 to
                    10.0) (defaults to 1.0).

            XORIG - Sets the annotation x origin (direct input only).  Use VAL1 for value (-3.0 to
                    3.0).

            YORIG - Sets annotation y origin (direct input only).  Use VAL1 for value (-3.0 to
                    3.0).

            SNAP - Sets annotation snap (menu button input only).  Use VAL1 for value (0.002 to
                   0.2) (defaults to 0.002).

            STAT - Displays current annotation status.

            DEFA - Sets annotation specifications to the default values.

            REFR - Redisplays annotation graphics.

            TMOD - Sets the annotation text mode. If VAL1 = 1, annotation text will be drawn in
                   scalable bitmap fonts (default). If VAL1 = 0, annotation
                   text will be drawn with stroke text.

        val1
            Value (or file name) as noted with label above.

        val2
            Value (or file name extension) as noted with label above.

        Notes
        -----
        This is a command generated by the GUI and will appear in the log file
        (Jobname.LOG) if annotation is used.  This command is not intended to
        be typed in directly in an ANSYS session (although it can be included
        in an input file for batch input or for use with the /INPUT command).

        You cannot use the "!" and "$" characters in ANSYS text annotation.

        /ANNOT activates annotation graphics for adding annotation to displays.
        Commands representing the annotation instructions are automatically
        created by the annotation functions in the GUI and written to
        Jobname.LOG.  The annotation commands are /ANNOT, /ANUM, /TLABEL,
        /LINE, /LARC, /LSYMBOL, /POLYGON, /PMORE, /PCIRCLE, /PWEDGE, /TSPEC,
        /LSPEC, and /PSPEC.  Annotation graphics are relative to the full
        Graphics Window and are not affected by ANSYS window-specific commands
        (/WINDOW, /VIEW, etc.).

        This command is valid in any processor.
        """
        command = "/ANNOT,%s,%s,%s" % (str(lab), str(val1), str(val2))
        return self.run(command, **kwargs)

    def mfpsimul(self, gname="", fname1="", fname2="", **kwargs):
        """APDL Command: MFPSIMUL

        Sets up a field solver group to simultaneously process with code
        coupling analyses.

        Parameters
        ----------
        gname
            Sets the group name with a character string of up to 80 characters.

        fname1, fname2
            Sets the field solver 1 and field solver 2 names, which are
            processed simultaneously, with a character string of up to 80
            characters.

        Notes
        -----
        This command is used to define a group of simultaneously-processed
        field solvers in an MFX analysis. For example, to define group g1 with
        field solvers ansys-code and cfx-code, enter MFPS,g1,ansys-code,cfx-
        code.

        To indicate groups of sequentially-processed field solvers for your MFX
        analysis, create two groups (g1 and g2).

        A field solver refers to a specific instance of an ANSYS or CFX solver
        execution that is defined by the respective input file(s) referenced
        when starting the solver (through the launcher or from the command
        line). The field solver names that are referenced in several MFX
        commands must be consistent with the names that will be used when
        starting the coupled simulation.

        Note:: : When running MFX from the launcher, you must use ANSYS and CFX
        (uppercase) as the field solver names (MFPSIMUL) in your input file.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFPSIMUL,%s,%s,%s" % (str(gname), str(fname1), str(fname2))
        return self.run(command, **kwargs)

    def dk(self, kpoi="", lab="", value="", value2="", kexpnd="", lab2="",
           lab3="", lab4="", lab5="", lab6="", **kwargs):
        """APDL Command: DK

        Defines DOF constraints at keypoints.

        Parameters
        ----------
        kpoi
            Keypoint at which constraint is to be specified.  If ALL, apply to
            all selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        lab
            Valid degree of freedom label.  If ALL, use all appropriate labels
            except HDSP.  Structural labels:  UX, UY, or UZ (displacements);
            ROTX, ROTY, or ROTZ (rotations); WARP (warping); HDSP (hydrostatic
            pressure).  Thermal labels: TEMP, TBOT, TE2, TE3, . . ., TTOP
            (temperature). Acoustic labels:  PRES (pressure); UX, UY, or UZ
            (displacements for FSI coupled elements). Electric labels:  VOLT
            (voltage). Magnetic labels:  MAG (scalar magnetic potential); AX,
            AY, or AZ (vector magnetic potentials). Diffusion labels: CONC
            (concentration).

        value
            Degree of freedom value or table name reference for tabular
            boundary conditions.  To specify a table, enclose the table name in
            percent signs (%) (e.g., DK,NODE,TEMP,%tabname%).  Use the *DIM
            command to define a table.

        value2
            Second degree of freedom value (if any).  If the analysis type and
            the degree of freedom allow a complex input, VALUE (above) is the
            real component and VALUE2 is the imaginary component.

        kexpnd
            Expansion key:

            0 - Constraint applies only to the node at this keypoint.

            1 - Flags this keypoint for constraint expansion.

        lab2, lab3, lab4, . . . ,  lab6
            Additional degree of freedom labels.  The same values are applied
            to the keypoints for these labels.

        Notes
        -----
        A keypoint may be flagged using KEXPND to allow its constraints to be
        expanded to nodes on the attached solid model entities having similarly
        flagged keypoint constraints.  Constraints are transferred from
        keypoints to nodes with the DTRAN or SBCTRAN commands.  The expansion
        uses interpolation to apply constraints to the nodes on the lines
        between flagged keypoints.  If all keypoints of an area or volume
        region are flagged and the constraints (label and values) are equal,
        the constraints are applied to the interior nodes of the region.  See
        the D command for a description of nodal constraints.

        Tabular boundary conditions (VALUE = %tabname%) are available only for
        the following degree of freedom labels: Electric (VOLT), structural
        (UX, UY, UZ, ROTX, ROTY, ROTZ), Acoustic (PRES, UX, UY, UZ), and
        temperature (TEMP, TBOT, TE2, TE3, . . ., TTOP).

        Constraints specified by the DK command can conflict with other
        specified constraints.  See Resolution of Conflicting Constraint
        Specifications in the Basic Analysis Guide for details.

        This command is also valid in PREP7.
        """
        command = "DK,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(kpoi), str(lab), str(value), str(value2), str(kexpnd), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    def prange(self, linc="", vmin="", vmax="", xvar="", **kwargs):
        """APDL Command: PRANGE

        Determines the path range.

        Parameters
        ----------
        linc, vmin, vmax
            Set the range for listing or displaying the table locations between
            a minimum value (VMIN) and a maximum value (VMAX) of the path
            distance with a location increment of LINC (defaults to 1).  The
            first location begins at VMIN.

        xvar
            Path variable item to be used as the x-axis plot variable.  Any
            valid path variable may be used (PDEF command).  Default variable
            is the path distance, S.

        Notes
        -----
        Determines the path distance range for use with the PRPATH and PLPATH
        commands.
        """
        command = "PRANGE,%s,%s,%s,%s" % (str(linc), str(vmin), str(vmax), str(xvar))
        return self.run(command, **kwargs)

    
    def lswrite(self, lsnum="", **kwargs):
        """APDL Command: LSWRITE

        Writes load and load step option data to a file.

        Parameters
        ----------
        lsnum
            Number to be assigned to the load step file name for identification
            purposes.  Defaults to 1 + highest LSNUM used in the current
            session.  Issue LSWRITE,STAT to list the current value of LSNUM.
            Issue LSWRITE,INIT to reset to 1.  The load step file will be named
            Jobname.Sn, where n is the specified LSNUM value (preceded by "0"
            for values 1-9).  On systems with a 3-character limit on the file
            name extension, the "S" is dropped for LSNUM > 99.

        Notes
        -----
        Writes all load and load step option data for the selected model to a
        load step file for later use.  LSWRITE does not capture changes made to
        real constants (R), material properties (MP), couplings (CP), or
        constraint equations (CE).

        Solid model loads will not be saved if the model is not meshed. Solid
        model loads, if any, are transferred to the finite element model. Issue
        LSCLEAR,FE to delete finite element loads.

        One file is written for each load step. Use the LSREAD command to read
        a single load step file, and the LSDELE command to delete load step
        files.  Use the LSSOLVE command to read and solve the load steps
        sequentially.

        Solution control commands are typically not written to the file unless
        you specifically change a default solution setting.

        LSWRITE does not support the following commands: DJ, FJ, GSBDATA,
        GSGDATA, ESTIF, EKILL, EALIVE, MPCHG, and OUTRES. These commands will
        not be written to the load step file.

        LSWRITE cannot be used with the birth-death option.

        This command is also valid in PREP7.
        """
        command = "LSWRITE,%s" % (str(lsnum))
        return self.run(command, **kwargs)

    def xrange(self, xmin="", xmax="", **kwargs):
        """APDL Command: /XRANGE

        Specifies a linear abscissa (X) scale range.

        Parameters
        ----------
        xmin
            Minimum abscissa scale value.

        xmax
            Maximum abscissa scale value.

        Notes
        -----
        Specifies a linear abscissa (X) scale range for the line graph display.
        Use /XRANGE,DEFAULT to return to automatic scaling.

        Automatic scaling will often yield inappropriate range values for
        logarithmic scales (/GROPT, LOGX).

        This command is valid in any processor.
        """
        command = "/XRANGE,%s,%s" % (str(xmin), str(xmax))
        return self.run(command, **kwargs)

    
    def deact(self, **kwargs):
        """APDL Command: DEACT

        Specifies "Element birth and death" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "DEACT,"
        return self.run(command, **kwargs)

    def andyna(self, delay="", ncycl="", start="", end="", inc="",
               autocontourkey="", **kwargs):
        """APDL Command: ANDYNA

        Produces an animated sequence of contour values through substeps.

        Parameters
        ----------
        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        start
            Number of the starting substep (defaults to 1).

        end
            Number of the ending substep (defaults to the maximum substep).

        inc
            Increment between substeps (defaults to 1).

        autocontourkey
            Auto-scales contour values, based on the overall subset range of
            values  (defaults to 0, no auto-scaling).

        Notes
        -----
        ANDYNA involves an ANSYS macro which produces an animation of contour
        values through all the substeps of the last plot action command.  This
        command operates only on graphic display platforms supporting the /SEG
        command.  After executing ANDYNA, you can replay the animated sequence
        by issuing the ANIM command.

        The command functions only in the postprocessor.
        """
        command = "ANDYNA,%s,%s,%s,%s,%s,%s" % (str(delay), str(ncycl), str(start), str(end), str(inc), str(autocontourkey))
        return self.run(command, **kwargs)

    
    def cnkmod(self, itype="", knum="", value="", **kwargs):
        """APDL Command: CNKMOD

        Modifies contact element key options.

        Parameters
        ----------
        itype
            Contact element type number as defined on the ET command.

        knum
            Number of the KEYOPT to be modified (KEYOPT(KNUM)).

        value
            Value to be assigned to the KEYOPT.

        Notes
        -----
        The CNKMOD command has the same syntax as the KEYOPT command. However,
        it is valid only in the SOLUTION processor. This command is intended
        only for use in a linear perturbation analysis, and can only be used to
        modify certain contact element KEYOPT values as described below.

        Modifying KEYOPT(12)

        One use for this command is to modify contact interface behavior
        between load steps in a linear perturbation analysis; it allows the
        user to control the contact status locally per contact pair. For this
        application, this command is limited to changing the contact interface
        behavior key option: KEYOPT(12) of CONTA171, CONTA172, CONTA173,
        CONTA174, CONTA175, CONTA176, and CONTA177; and KEYOPT(10) of CONTA178.

        When used for this purpose, the command adjusts the contact status from
        the linear perturbation base analysis (at the point of restart) as
        described in the table below. Note that CNKMOD allows you to take
        points in the base analysis that are near contact (within the pinball
        region) and modify them to be treated as "in contact" in the
        perturbation analysis; see the "1 - near-field" row with KEYOPT(12)
        values set to 4 or 5. CNKMOD also allows you to take points that are
        sliding in the base analysis and treat them as sticking in the
        perturbation analysis, irrespective of the MU value; see the "2 -
        sliding" row with KEYOPT(12) values set to 1,3, 5, or 6.

        Table: 128:: : Adjusted Contact Status with CNKMOD is Issued

        (if outside of the adjusted pinball region)

        (if inside of the adjusted pinball region)

        (if outside of the adjusted pinball region)

        (if inside of the adjusted pinball region)

        If an open gap exists at the end of the previous load step and the
        contact status is adjusted as sliding or sticking due to a "bonded" or
        "no seperation" contact behavior definition, then the program will
        treat it as near-field contact when executing CNKMOD in the subsequent
        load steps.

        In the linear perturbation analysis procedure, contact status can also
        be controlled or modified by the PERTURB command. The contact status
        always follows local controls defined by the CNKMOD command first, and
        is then adjusted by the global sticking or bonded setting (ContKey =
        STICKING or BONDED) on the PERTURB command (see the PERTURB command for
        details).

        Modifying KEYOPT(3)

        Another use for this command is to change the units of normal contact
        stiffness (contact element real constant FKN) in a linear perturbation
        modal analysis that is used to model brake squeal. For contact elements
        CONTA171, CONTA172, CONTA173, and CONTA174, KEYOPT(3) controls the
        units of normal contact stiffness. You can issue the command
        CNKMOD,ITYPE,3,1 during the first phase of the linear perturbation
        analysis in order to change the units of normal contact stiffness from
        FORCE/LENGTH3 (in the base analysis) to FORCE/LENGTH. Note that
        KEYOPT(3) = 1 is valid only when a penalty-based algorithm is used
        (KEYOPT(2) = 0 or 1) and the absolute normal contact stiffness value is
        explicitly specified (that is, a negative value input for real constant
        FKN).
        """
        command = "CNKMOD,%s,%s,%s" % (str(itype), str(knum), str(value))
        return self.run(command, **kwargs)

    def curr2d(self, **kwargs):
        """APDL Command: CURR2D

        Calculates current flow in a 2-D conductor.

        Notes
        -----
        CURR2D invokes an ANSYS macro which calculates the total current
        flowing in a conducting body for a 2-D planar or axisymmetric magnetic
        field analysis.  The currents may be applied source currents or induced
        currents (eddy currents).  The elements of the conducting region must
        be selected before this command is issued.  The total current
        calculated by the macro is stored in the parameter TCURR.  Also, the
        total current and total current density are stored on a per-element
        basis in the element table [ETABLE] with the labels TCURR and JT,
        respectively.  Use the PLETAB and PRETAB commands to plot and list the
        element table items.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "CURR2D,"
        return self.run(command, **kwargs)

    
    def betad(self, value="", **kwargs):
        """APDL Command: BETAD

        Defines the stiffness matrix multiplier for damping.

        Parameters
        ----------
        value
            Stiffness matrix multiplier for damping.

        Notes
        -----
        This command defines the stiffness matrix multiplier β used to form the
        viscous damping matrix [C] = β [K] where [K] is the stiffness matrix.

        Values of : β may also be input as a material property (use the BETD
        label on the MP command).  If BETD is included, the BETD value is added
        to the BETAD value as appropriate (see Damping Matrices in the
        Mechanical APDL Theory Reference).  Damping is not used in the static
        (ANTYPE,STATIC) or buckling (ANTYPE,BUCKLE) analyses.

        This command is also valid in PREP7.
        """
        command = "BETAD,%s" % (str(value))
        return self.run(command, **kwargs)

    def harfrq(self, freqb="", freqe="", logopt="", freqarr="", toler="",
               **kwargs):
        """APDL Command: HARFRQ

        Defines the frequency range in a harmonic analysis.

        Parameters
        ----------
        freqb
            Frequency (Hz) at the beginning of the FREQB to FREQE range (if
            FREQE > FREQB).  If FREQE is blank, the solution is done only at
            frequency FREQB (the central frequency of octave bands, when LogOpt
            = OB1, OB2, OB3, OB6, OB12 or OB24).

        freqe
            Frequency at end of this range.  Solutions are done at an interval
            of (FREQE-FREQB) / NSBSTP, ending at FREQE.  No solution is done at
            the beginning of the frequency range.  NSBSTP is input via the
            NSUBST command.  See the EXPSOL command documentation for expansion
            pass solutions.

        --
            Reserved.

        logopt
            Logarithm frequency span. Solutions are done at an interval of
            (log(FREQE) - log(FREQB)) / (NSBSTP-1), (NSBSTP>1). The central
            frequency or beginning frequency is used for NSBSTP = 1. Valid
            values are:

            OB1 - Octave band.

            OB2 - 1/2 octave band.

            OB3 - 1/3 octave band.

            OB6 - 1/6 octave band.

            OB12 - 1/12 octave band.

            OB24 - 1/24 octave band.

            LOG - General logarithm frequency span.

        freqarr
            An array containing frequency values (Hz). Combined with the
            tolerance argument, Toler, these values are merged with values
            calculated based on the specifications from FREQB, FREQE, and
            LogOpt, as well NSBSTP on the NSUBST command and Clust on the HROUT
            command. Enclose the array name in percent (%) signs (for example,
            HARFRQ,,,,,%arrname%). Use *DIM to define the array.

        toler
            Tolerance to determine if a user input frequency value in FREQARR
            is a duplicate and can be ignored. Two frequency values are
            considered duplicates if their difference is less than the
            frequency range multiplied by the tolerance. The default value is 1
            x 10-5.

        Notes
        -----
        Defines the frequency range for loads in the harmonic analysis
        (ANTYPE,HARMIC).

        Do not use this command for a harmonic ocean wave analysis (HROCEAN).

        When frequencies are user-defined, the array FREQARR must be one-
        dimensional and contain positive values. User-defined frequency input
        is not supported in the following cases:

        in a cyclic symmetry harmonic analysis

        when the Variational Technology method is used (Method = VT on the
        HROPT command)

        This command is also valid in PREP7.
        """
        command = "HARFRQ,%s,%s,%s,%s,%s" % (str(freqb), str(freqe), str(logopt), str(freqarr), str(toler))
        return self.run(command, **kwargs)

    def mdplot(self, function="", dmpname="", scale="", **kwargs):
        """APDL Command: MDPLOT

        Plots frequency-dependent modal damping coefficients calculated by
        DMPEXT.

        Parameters
        ----------
        function
            Function to display.

            d_coeff - Damping coefficient

            s_coeff - Squeeze coefficient

            d_ratio - Damping ratio

            s_ratio - Squeeze stiffness ratio

        dmpname
            Array parameter name where damping information is stored. Defaults
            to d_damp.

        scale
            Indicates whether to perform a linear or a double logarithmic plot.

            LIN - Perform a linear plot. Default

            LOG - Perform a double logarithmic plot.

        Notes
        -----
        See Thin Film Analysis for more information on thin film analyses.
        """
        command = "MDPLOT,%s,%s,%s" % (str(function), str(dmpname), str(scale))
        return self.run(command, **kwargs)

    def pivcheck(self, key="", prntcntrl="", **kwargs):
        """APDL Command: PIVCHECK

        Controls the behavior of an analysis when a negative or zero equation
        solver pivot value is encountered.

        Parameters
        ----------
        key
            Determines whether to stop or continue an analysis when a negative
            or zero equation solver pivot value is encountered:

            AUTO - Check for negative or zero pivot values for analyses performed with the sparse
                   and PCG solvers. When one is encountered, an error or
                   warning is issued, per various criteria relating to the type
                   of analysis being solved. An error causes the analysis to
                   stop; a warning allows the analysis to continue. A negative
                   pivot value may be valid for some nonlinear and multiphysics
                   analyses (for example, electromagnetic and thermal
                   analyses); this key has no effect in these cases.

            ERROR - Check for negative or zero pivot values for analyses performed with the sparse
                    and PCG solvers. When one is encountered, an error is
                    issued, stopping the analysis. A negative pivot value may
                    be valid for some nonlinear and multiphysics analyses (for
                    example, electromagnetic and thermal analyses); this key
                    has no effect in these cases.

            WARN - Check for negative or zero pivot values for analyses performed with the sparse
                   and PCG solvers. When one is encountered, a warning is
                   issued and the analysis continues. A negative pivot value
                   may be valid for some nonlinear and multiphysics analyses
                   (for example, electromagnetic and thermal analyses); this
                   key has no effect in these cases.

            OFF - Pivot values are not checked. This key causes the analysis to continue in spite
                  of a negative or zero pivot value.

        prntcntrl
            Provides print options. Print output with these options will be
            sent to the default output file, not to the files created by the
            nonlinear diagnostic tools (NLDIAG).

            ONCE - Print only the maximum and minimum pivot information on the first call to the
                   sparse solver (which is the default solver). This is the
                   default behavior.

            EVERY - Print the maximum and minimum pivot information at every call to the sparse
                    solver. This option is provided for nonlinear analysis
                    diagnostics.

        Notes
        -----
        This command is valid for all analyses. In a nonlinear analysis, a
        negative pivot may be valid. In some cases, rigid body motions in a
        nonlinear analysis will be trapped by error routines checking
        infinitely large displacements (DOF limit exceeded) or nonconvergence
        status. An under-constrained model may avoid the pivot check, but fail
        with a DOF limit exceeded error.

        Machine precision may affect whether a small pivot triggers an error or
        bypasses this checking logic. You may wish to review the ratio of the
        maximum to absolute minimum pivot values. For ratios exceeding 12 to 14
        orders of magnitude, the accuracy of the computed solution may be
        degraded by the severe ill-conditioning of the assembled matrix.

        Note that negative pivots corresponding to Lagrange multiplier based
        mixed u-P elements are not checked or reported by this command.
        Negative pivots arising from the u-P element formulation and related
        analyses can occur and lead to correct solutions.

        This command is also valid in PREP7.
        """
        command = "PIVCHECK,%s,%s" % (str(key), str(prntcntrl))
        return self.run(command, **kwargs)

    def pred(self, sskey="", lskey="", **kwargs):
        """APDL Command: PRED

        Activates a predictor in a nonlinear analysis.

        Parameters
        ----------
        sskey
            Substep predictor key:

            OFF - No prediction occurs.

            ON - Use a predictor on all substeps after the first.

            AUTO - The program uses a predictor but, within certain
                   exceptions, automatically switches prediction
                   off. This behavior is the default; see "Command
                   Default" for details.

        lskey
            Load step predictor:

            OFF - No prediction across load steps occurs. This is the
                  default behavior.

            ON - Use a predictor also on the first substep of the load
                 step. (Sskey = ON is required.)

        Notes
        -----
        Activates a predictor in a nonlinear analysis on the
        degree-of-freedom solution for the first equilibrium iteration
        of each substep.

        When using the arc-length method (ARCLEN, ARCTRM), you cannot
        issue the DOF solution predictor command (PRED), the automatic
        time stepping command (AUTOTS), or the line search command
        (LNSRCH). If you activate the arc-length method after you set
        PRED, AUTOTS, or LNSRCH, a warning message appears. If you
        elect to proceed with the arc-length method, the program
        disables your DOF predictor, automatic time stepping, and line
        search settings, and the time step size is controlled by the
        arc- length method internally.

        When using step-applied loads, such as TUNIF, BFUNIF, etc., or
        other types of non-monotonic loads, the predictor may
        adversely affect the convergence. If the solution is
        discontinuous, the predictor may need to be turned off.

        When performing a nonlinear analysis involving large
        rotations, the predictor may require using smaller substeps.

        This command is also valid in PREP7.
        """
        command = f"PRED,{sskey},,{lskey}"
        return self.run(command, **kwargs)

    def pdcorr(self, name1="", name2="", corr="", **kwargs):
        """APDL Command: PDCORR

        Specifies the correlation between two random input variables.

        Parameters
        ----------
        name1
            Parameter name. The parameter must have been previously defined as
            a random input variable with the PDVAR command.

        name2
            Parameter name. The parameter must have been previously defined as
            a random input variable with the PDVAR command. Must be different
            from Name1.

        corr
            Specification of the correlation:

            Value - Sets the correlation coefficient between Name1 and Name2 to the specified
                    value. If this correlation coefficient was already defined
                    it will be changed to this new value. The correlation
                    coefficient must be between -1.0 and +1.0.

            DEL - Delete the previously defined correlation between Name1 and Name2.

        Notes
        -----
        Specifies the correlations between two random input variables. The PDS
        tool generates correlated samples if correlations exist. This applies
        to both probabilistic methods (Monte Carlo Simulation and Response
        Surface Methods).

        If there are correlated random input variables, the sampled locations
        of the random input variables reflect the correlation as illustrated
        below for the case of two standard normal distributed variables X1 and
        X2. The illustrations show no correlation (correlation coefficient
        0.0), a relatively moderate negative correlation (correlation
        coefficient -0.6), and a relative strong positive correlation
        (correlation coefficient 0.9).

        : : :
        """
        command = "PDCORR,%s,%s,%s" % (str(name1), str(name2), str(corr))
        return self.run(command, **kwargs)

    def cmap(self, fname="", ext="", kywrd="", ncntr="", **kwargs):
        """APDL Command: /CMAP

        Changes an existing or creates a new color mapping table.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

        ext
            Filename extension (eight-character maximum).

        kywrd
            Keyword indicating the disposition of the color map file.

            (blank) - Loads existing color map file.

            CREATE - Starts the CMAP utility and modifies or creates
            the specified file.

            SAVE - Writes the active color map to the specified file,
            which can be imported into future sessions.

        ncntr
            Number of contours to be defined. Default = 9 (even if an existing
            file is being modified). Maximum = 128.

        Notes
        -----
        Reads the color map file (RGB index specifications) to change
        from current specifications.  Only one color map may be active
        at a time.

        For 2-D drivers (especially Win32c), modifying the color map
        can produce anomalies, including legend/contour disagreement.

        When Kywrd equals CREATE, the 2-D drivers (X11c and Win32c)
        display the CMAP utility with an additional contour color
        picker called CONTOURS.  Colors selected via the CONTOURS
        picker affect result contour displays (such as stresses). No
        other drivers offer the CONTOURS picker in the CMAP utility.

        Changing the color map using the /CMAP command changes the
        meaning of the color labels on the /COLOR command. See /COLOR
        for other color controls.

        This command is valid anywhere.
        """
        return self.run(f"/CMAP,{fname},{ext},,{kywrd},{ncntr}", **kwargs)

    
    
    def ssum(self, **kwargs):
        """APDL Command: SSUM

        Calculates and prints the sum of element table items.

        Notes
        -----
        Calculates and prints the tabular sum of each existing labeled result
        item [ETABLE] for the selected elements.  If absolute values are
        requested [SABS,1], absolute values are used.
        """
        command = "SSUM,"
        return self.run(command, **kwargs)

    def inres(self, item1="", item2="", item3="", item4="", item5="", item6="",
              item7="", item8="", **kwargs):
        """APDL Command: INRES

        Identifies the data to be retrieved from the results file.

        Parameters
        ----------
        item1, item2, item3, . . . , item8
            Data to be read into the database from the results file.  May
            consist of any of the following labels:

            ALL - All solution items (default).

            BASIC - NSOL, RSOL, NLOAD, STRS, FGRAD, and FFLUX items.

            NSOL - Nodal DOF solution.

            RSOL - Nodal reaction loads.

            ESOL - Element solution items (includes all of the following):

            NLOAD - Element nodal loads.

            STRS - Element nodal stresses.

            EPEL - Element elastic strains.

            EPTH - Element thermal, initial, and swelling strains.

            EPPL - Element plastic strains.

            EPCR - Element creep strains.

            FGRAD - Element nodal gradients.

            FFLUX - Element nodal fluxes.

            MISC - Element miscellaneous data (SMISC and NMISC).

        Notes
        -----
        Identifies the type of data to be retrieved from the results file for
        placement into the database through commands such as SET, SUBSET, and
        APPEND.  INRES is a companion command to the OUTRES command controlling
        data written to the database and the results file.  Since the INRES
        command can only flag data that has already been written to the results
        file, care should be taken when using the OUTRES command to include all
        data you wish to retrieve for postprocessing later on.
        """
        command = "INRES,%s,%s,%s,%s,%s,%s,%s,%s" % (str(item1), str(item2), str(item3), str(item4), str(item5), str(item6), str(item7), str(item8))
        return self.run(command, **kwargs)

    
    def bcsoption(self, memory_option="", memory_size="", solve_info="",
                  **kwargs):
        """APDL Command: BCSOPTION

         Sets memory option for the sparse solver.

        Parameters
        ----------
        memory_option
            Memory allocation option:

            DEFAULT - Use the default memory allocation strategy for
                      the sparse solver. The default strategy attempts
                      to run in the INCORE memory mode. If there is
                      not enough available physical memory when the
                      solver starts to run in the INCORE memory mode,
                      the solver will then attempt to run in the
                      OUTOFCORE memory mode.

            INCORE - Use a memory allocation strategy in the sparse
                     solver that will attempt to obtain enough memory
                     to run with the entire factorized matrix in
                     memory. This option uses the most amount of
                     memory and should avoid doing any I/O. By
                     avoiding I/O, this option achieves optimal solver
                     performance. However, a significant amount of
                     memory is required to run in this mode, and it is
                     only recommended on machines with a large amount
                     of memory. If the allocation for in-core memory
                     fails, the solver will automatically revert to
                     out-of-core memory mode.

            OUTOFCORE - Use a memory allocation strategy in the sparse
                        solver that will attempt to allocate only
                        enough work space to factor each individual
                        frontal matrix in memory, but will store the
                        entire factorized matrix on disk. Typically,
                        this memory mode results in poor performance
                        due to the potential bottleneck caused by the
                        I/O to the various files written by the
                        solver.

            FORCE - This option, when used in conjunction with the
                    Memory_Size option, allows you to force the sparse
                    solver to run with a specific amount of
                    memory. This option is only recommended for the
                    advanced user who understands sparse solver memory
                    requirements for the problem being solved,
                    understands the physical memory on the system, and
                    wants to control the sparse solver memory usage.

        memory_size
            Initial memory size allocation for the sparse solver in
            MB. This argument allows you to tune the sparse solver
            memory and is not generally required. Although there is no
            upper limit for Memory_Size, the Memory_Size setting
            should always be well within the physical memory
            available, but not so small as to cause the sparse solver
            to run out of memory. Warnings and/or errors from the
            sparse solver will appear if this value is set too low. If
            the FORCE memory option is used, this value is the amount
            of memory allocated for the entire duration of the sparse
            solver solution.

        solve_info
            Solver output option:

            OFF - Turns off additional output printing from the sparse
            solver (default).

            PERFORMANCE - Turns on additional output printing from the
                          sparse solver, including a performance
                          summary and a summary of file I/O for the
                          sparse solver. Information on memory usage
                          during assembly of the global matrix (that
                          is, creation of the Jobname.FULL file) is
                          also printed with this option.

        Notes
        -----
        This command controls options related to the sparse solver in
        all analysis types where the sparse solver can be used. It
        also controls the Block Lanczos eigensolver in a modal or
        buckling analysis.

        The sparse solver runs from one large work space (that is, one
        large memory allocation). The amount of memory required for
        the sparse solver is unknown until the matrix structure is
        preprocessed, including equation reordering. The amount of
        memory allocated for the sparse solver is then dynamically
        adjusted to supply the solver what it needs to compute the
        solution.

        If you have a very large memory system, you may want to try
        selecting the INCORE memory mode for larger jobs to improve
        performance. When running the sparse solver on a machine with
        very slow I/O performance (for example, slow hard drive
        speed), you may want to try using the INCORE memory mode to
        achieve better performance. However, doing so may require much
        more memory compared to running in the OUTOFCORE memory mode.

        Running with the INCORE memory mode is best for jobs which
        comfortably fit within the limits of the physical memory on a
        given system. If the sparse solver work space exceeds physical
        memory size, the system will be forced to use virtual memory
        (or the system page/swap file). In this case, it is typically
        more efficient to run with the OUTOFCORE memory mode. Assuming
        the job fits comfortably within the limits of the machine,
        running with the INCORE memory mode is often ideal for jobs
        where repeated solves are performed for a single matrix
        factorization.  This occurs in a modal or buckling analysis or
        when doing multiple load steps in a linear, static analysis.

        For repeated runs with the sparse solver, you may set the
        initial sparse solver memory allocation to the amount required
        for factorization. This strategy reduces the frequency of
        allocation and reallocation in the run to make the INCORE
        option fully effective. If you have a very large memory
        system, you may use the Memory_Size argument to increase the
        maximum size attempted for in-core runs.
        """
        command = f"BCSOPTION,,{memory_option},{memory_size},,,{solve_info}"
        return self.run(command, **kwargs)

    def prjsol(self, item="", comp="", **kwargs):
        """APDL Command: PRJSOL

        Prints joint element output.

        Parameters
        ----------
        item
            Label identifying the item. Some items also require a component
            label.

            DISP - Relative displacements.

            ROT - Relative rotations.

            VEL - Relative linear velocities.

            OMG - Relative angular velocities.

            ACC - Relative linear accelerations.

            DMG - Relative angular accelerations.

            SMISC - Summable miscellaneous quantities.

        comp
            Component of the item (if required). For Item = DISP, ROT, VEL,
            OMG, ACC, and DMG, enter the direction label, X, Y, or Z. For Item
            = SMISC, enter a valid number.

        Notes
        -----
        Prints element output for the MPC184 joint element. The joint element
        quantities printed are the values for the free or unconstrained
        relative degrees of freedom.

        This command is valid in POST1 only.
        """
        command = "PRJSOL,%s,%s" % (str(item), str(comp))
        return self.run(command, **kwargs)

    def avprin(self, key="", effnu="", **kwargs):
        """APDL Command: AVPRIN

        Specifies how principal and vector sums are to be calculated.

        Parameters
        ----------
        key
            Averaging key:

            0 - Average the component values from the elements at a common node, then calculate
                the principal or vector sum from the averaged components
                (default).

            1 - Calculate the principal or vector sum values on a per element basis, then
                average these values from the elements at a common node.

        effnu
            Effective Poisson's ratio used for computing the von Mises
            equivalent strain (EQV). This command option is intended for use
            with line elements or in load case operations (LCOPER) only; ANSYS
            automatically selects the most appropriate effective Poisson's
            ratio, as discussed below.

        Notes
        -----
        Selects the method of combining components for certain derived nodal
        results when two or more elements connect to a common node.  The
        methods apply to the calculations of derived nodal principal stresses,
        principal strains, and vector sums for selects, sorts, and output
        [NSEL, NSORT, PRNSOL, PLNSOL, etc.].

        This command also defines the effective Poisson's ratio (EFFNU) used
        for equivalent strain calculations.  If you use EFFNU, the default
        effective Poisson's ratios shown below will be overridden for all
        elements by the EFFNU value. To return to the default settings, issue
        the RESET command. The default value for EFFNU is:

        Poisson's ratio as defined on the MP commands for EPEL and EPTH

        0.5 for EPPL and EPCR

        0.5 if the referenced material is hyperelastic

        0.0 for line elements (includes beam, link, and pipe elements, as well
        as discrete elements), cyclic symmetry analysis, mode superposition
        analyses (with MSUPkey = YES on the MXPAND command), and load case
        operations (LCOPER).

        For the von Mises equivalent strain (EQV), it is always computed using
        the average of the equivalent strains from the elements at a common
        node irrespective of the value of the averaging KEY. If EFFNU is input,
        though, the calculation will be performed according to the KEY setting.

        For a random vibration (PSD) analysis, issuing either AVPRIN,0 or
        AVPRIN,1 calculates the principal stresses using the appropriate
        averaging method. They are then used to determine SEQV.  The output
        will have non-zero values for the principal stresses.

        If AVPRIN is not issued, the Segalman-Fulcher method is used to
        calculate SEQV. This method does not calculate principal stresses, but
        directly calculates SEQV from the component stresses; therefore, the
        output will have zero values for the principal stresses. Beam and pipe
        elements are excluded

        This command is also valid in POST26, where applicable.

        See Combined Stresses and Strains in the Mechanical APDL Theory
        Reference for more information.
        """
        command = "AVPRIN,%s,%s" % (str(key), str(effnu))
        return self.run(command, **kwargs)

    
    def sv(self, damp="", sv1="", sv2="", sv3="", sv4="", sv5="", sv6="",
           sv7="", sv8="", sv9="", **kwargs):
        """APDL Command: SV

        Defines spectrum values to be associated with frequency points.

        Parameters
        ----------
        damp
            Damping ratio for this response spectrum curve.  If the same as a
            previously defined curve, the SV values are added to the previous
            curve.  Up to four different curves may be defined, each with a
            different damping ratio.  Damping values must be input in ascending
            order.

        sv1, sv2, sv3, . . . , sv9
            Spectrum values corresponding to the frequency points [FREQ].
            Values are interpreted as defined with the SVTYP command.   SV
            values should not be zero.  Values required outside the frequency
            range use the extreme input values.

        Notes
        -----
        Defines the spectrum values to be associated with the previously
        defined frequency points [FREQ].  Applies only to the single-point
        response spectrum.  Damping has no effect on the frequency solution.
        Damping values are used only to identify SV curves for the mode
        combinations calculation.  Only the curve with the lowest damping value
        is used in the initial mode coefficient calculation.  Use STAT command
        to list current spectrum curve values.

        Repeat SV command for additional SV points (100 maximum per DAMP
        curve).  SV values are added to the DAMP curve after the last nonzero
        SV value.

        The interpolation method between response spectrum points and curves is
        specified using KeyInterp in the SVTYP command. It is logarithmic by
        default.

        This command is also valid in PREP7.
        """
        command = "SV,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(damp), str(sv1), str(sv2), str(sv3), str(sv4), str(sv5), str(sv6), str(sv7), str(sv8), str(sv9))
        return self.run(command, **kwargs)

    
    def spfreq(self, tblno="", freq1="", freq2="", freq3="", freq4="",
               freq5="", freq6="", freq7="", **kwargs):
        """APDL Command: SPFREQ

        Defines the frequency points for the input spectrum tables SPVAL vs.
        SPFREQ for multi-point spectrum analysis.

        Parameters
        ----------
        tblno
            Input table number. Up to 200 tables may be defined.

        freq1, freq2, freq3,..., freq7
            Frequency points (Hz) for spectrum vs. frequency tables. FREQ1
            should be greater than zero, and values must be in ascending order.

        Notes
        -----
        The spectrum values are input with the SPVAL command. A separate SPFREQ
        command must be used for each table defined. Frequencies must be in
        ascending order.

        Repeat SPFREQ command for additional frequency points. Values are added
        after the last nonzero frequency.

        If all fields after SPFREQ are blank, all input vs. frequency tables
        are erased. If TBLNO is the only non-blank field, all corresponding
        SPVAL curves are erased.

        Use the SPTOPT and STAT commands to list current frequency points.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "SPFREQ,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno), str(freq1), str(freq2), str(freq3), str(freq4), str(freq5), str(freq6), str(freq7))
        return self.run(command, **kwargs)

    
    def pdclr(self, type_="", **kwargs):
        """APDL Command: PDCLR

        Clears the probabilistic design database.

        Parameters
        ----------
        type\_
            Specifies the part of the probabilistic database to be cleared.

            ALL - Clear the entire probabilistic database. Both the preprocessing and
                  postprocessing parts are cleared.

            POST - Clear only the postprocessing part of the probabilistic database. This is
                   necessary if you want to modify the deterministic model (the
                   analysis file) or probabilistic model (random variables,
                   correlations between random variables, or the random output
                   parameter) after a probabilistic analysis has already been
                   performed.

        Notes
        -----
        Clears the probabilistic design system (PDS) database. The settings are
        reset to their default values and the memory is cleared. Remember that
        the result files containing the results of the probabilistic loops are
        never deleted unless you intentionally delete them. We recommend that
        you use this command before switching to a new probabilistic analysis
        using a different probabilistic model (a different analysis loop file
        or deterministic model), or changing random input variables, their
        correlations, or random output parameters. Clearing the probabilistic
        database is not necessary if the probabilistic model remains the same
        and will be analyzed with a different probabilistic method or different
        method options. See the PDEXE command for restrictions. Before issuing
        the PDCLR command, you should save the probabilistic database using the
        PDSAVE command.
        """
        command = "PDCLR,%s" % (str(type_))
        return self.run(command, **kwargs)

    def mftime(self, time="", **kwargs):
        """APDL Command: MFTIME

        Sets end time for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        time
            End time of an ANSYS Multi-field solver analysis. Defaults to 1.

        Notes
        -----
        A MFTIME setting overrides any other end time setting (TIME).

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFTIME,%s" % (str(time))
        return self.run(command, **kwargs)

    def trnopt(self, method="", maxmode="", minmode="", mcfwrite="",
               tintopt="", vaout="", dmpsfreq="", engcalc="", mckey="", **kwargs):
        """APDL Command: TRNOPT

        Specifies transient analysis options.

        Parameters
        ----------
        method
            Solution method for the transient analysis:

            FULL - Full method (default).

            MSUP - Mode-superposition method.

            VT - Variational Technology method.  (Removed by V18.2)

        maxmode
            Largest mode number to be used to calculate the response
            (for Method = MSUP).  Defaults to the highest mode
            calculated in the preceding modal analysis.

        minmode
            Smallest mode number to be used (for Method = MSUP).
            Defaults to 1.

        mcfwrite
            Modal coordinates output key to the .mcf file (valid only
            for the mode-superposition method):

            NO - No output of modal coordinates (default).

            YES - Output modal coordinates to the text file Jobname.MCF.

        tintopt
            Time integration method for the transient analysis:

            NMK or 0 - Newmark algorithm (default).

            HHT or 1 - HHT algorithm (valid only for the full transient method).

        vaout
            Velocities and accelerations output key (valid only for
            mode- superposition transient analysis):

            NO - No output of velocities and accelerations (default).

            YES - Write velocities and accelerations on the reduced displacement file
                  Jobname.RDSP.

        dmpsfreq
            Average excitation frequency (Hz) for the calculation of
            equivalent viscous damping from structural damping input
            (DMPSTR and MP,DMPS). See Damping for more
            details. Defaults to zero. If an excitation frequency is
            not specified, structural damping is ignored. If tabular
            excitation frequency data is provided in a full transient
            analysis (DMPSFreqTab on DMPSTR), it supersedes this
            value.

        engcalc
            Additional element energies calculation key:

            NO - Do not calculate additional element energies
            (default).

            YES - Calculate damping energy and work done by external
            loads.

        mckey
            Modal coordinates output key to the .rdsp file (valid only
            for the mode-superposition method):

            AUTO - Writing depends on the modal analysis settings of
            the MXPAND command (default).

            YES - Always write the modal coordinates to the file
            Jobname.rdsp. A subsequent expansion pass (EXPASS) is not
            supported.

        Notes
        -----
        Specifies transient analysis (ANTYPE,TRANS) options. If used
        in SOLUTION, this command is valid only within the first load
        step. Use the TINTP command to set transient integration
        parameters.

        To include residual vectors in your mode-superposition
        transient analysis (Method = MSUP), specify RESVEC,ON.

        Method = MSUP is not available for ocean loading.

        By default in a mode-superposition transient analysis,
        reaction force and other force output contains only static
        contributions. If you want to postprocess the velocities,
        accelerations, and derived results (Lab = TOTAL, DAMP, or
        INERT on the FORCE command), set VAout = YES to activate
        velocity and acceleration output.

        The calculation of additional energies (EngCalc = YES) is
        valid only for the full solution method (Method = FULL). The
        Jobname.ESAV file is always saved in this case. The numerical
        integration for damping energy and work are consistent only if
        solution data are written to the database for every substep
        (OUTRES,ALL,ALL, OUTRES,ESOL,ALL, or OUTRES,VENG, ALL). For
        more information, see Damping Energy and Work Done by External
        Loads in the Mechanical APDL Theory Reference.

        This command is also valid in PREP7.
        """
        command = f"TRNOPT,{method},{maxmode},,{minmode},{mcfwrite},{tintopt},{vaout},{dmpsfreq},{engcalc},{mckey}"
        return self.run(command, **kwargs)

    
    def prcamp(self, option="", slope="", unit="", freqb="", cname="",
               stabval="", keyallfreq="", keynegfreq="", **kwargs):
        """APDL Command: PRCAMP

        Prints Campbell diagram data for applications involving rotating
        structure dynamics.

        Parameters
        ----------
        option
            Flag to activate or deactivate sorting of forward or backward whirl
            frequencies:

            0 (OFF or NO) - No sorting.

            1 (ON or YES) - Sort. This value is the default.

        slope
            The slope of the line to be printed. This value must be positive.

            SLOPE > 0  - The line represents the number of excitations per revolution of the rotor. For
                         example, SLOPE = 1 represents one excitation per
                         revolution, usually resulting from unbalance.

            SLOPE = 0  - The line represents the stability threshold for stability values or logarithmic
                         decrements printout (STABVAL = 1 or 2)

        unit
            Specifies the unit of measurement for rotational angular
            velocities:

            RDS - Rotational angular velocities in radians per second (rad/s). This value is the
                  default.

            RPM - Rotational angular velocities in revolutions per minute (RPMs).

        freqb
            The beginning, or lower end, of the frequency range of interest.
            The default is zero.

        cname
            The rotating component name.

        stabval
            Flag to print the stability values:

            0 (OFF or NO) - Print the frequencies (the imaginary parts of the eigenvalues in Hz). This
                            value is the default.

            1 (ON or YES) - Print the stability values (the real parts of the eigenvalues in Hz).

            2 - Print the logarithmic decrements.

        keyallfreq
            Key to specify if all frequencies above FREQB are printed out:

            0 (OFF or NO) - A maximum of 10 frequencies are printed out. They correspond to the frequencies
                            displayed via the PLCAMP command. This value is the
                            default.

            1 (ON or YES) - All frequencies are printed out.

        keynegfreq
            Key to specify if the negative frequencies are printed out. It only
            applies to solutions obtained with the damped eigensolver
            (Method=DAMP on the MODOPT command):

            0 (OFF or NO) - Only positive frequencies are printed out. This value is the default.

            1 (ON or YES) - Negative and positive frequencies are printed out.

        Notes
        -----
        The following items are required when generating a Campbell diagram:

        Take the gyroscopic effect into account by issuing the CORIOLIS command
        in the SOLUTION module.

        Run a modal analysis using the QR damped (MODOPT,QRDAMP) or damped
        (MODOPT,DAMP) method. Complex eigenmodes are necessary
        (MODOPT,QRDAMP,,,,Cpxmod  = ON), and you must specify the number of
        modes to expand (MXPAND).

        Define two or more load step results with an ascending order of
        rotational velocity (OMEGA or CMOMEGA).

        In some cases where modes are not in the same order from one load step
        to the other, sorting the frequencies (Option = 1) can help to obtain a
        correct printout. Sorting is based on the comparison between complex
        mode shapes calculated at two successive load steps.

        At each load step, the application compares the mode shape to the loads
        to determine the whirl direction. If applicable, a label appears (on
        the rows of output data) representing the whirl mode (BW for backward
        whirl and FW for forward whirl).

        If you specify a non-zero slope (SLOPE > 0), the command prints the
        critical speeds corresponding to the intersection points of the
        frequency curves and the added line. In the case of a named component
        (Cname), critical speeds relate to the rotational velocity of the
        component. Critical speeds are available only if the frequencies are
        printed (STABVAL = OFF).

        If you specify a zero slope (SLOPE = 0), the command prints the
        stability threshold corresponding to the sign change of the stability
        values (or logarithmic decrements). In the case of a named component
        (Cname), stability thresholds relate to the rotational velocity of the
        component. Stability thresholds are available only if the stability
        values or logarithmic decrements are printed (STABVAL = 1 or 2).

        At each load step, the program checks for instability (based on the
        sign of the real part of the eigenvalue). The label "U" appears on the
        printout for each unstable frequency.

        If specified, the rotational velocities of the named component (Cname)
        are printed out along with the natural frequencies.

        In general, printing a Campbell diagram is recommended only when your
        analysis is performed in a stationary reference frame
        (CORIOLIS,,,,RefFrame = ON).

        For information on printing a Campbell diagram for a prestressed
        structure, see Solving for a Subsequent Campbell Analysis of a
        Prestressed Structure Using the Linear Perturbation Procedure in the
        Rotordynamic Analysis Guide.

        For a usage example of the companion command PLCAMP (used for plotting
        a Campbell diagram), see Example Campbell Diagram Analysis.

        For more information on Campbell diagram generation, see Campbell
        Diagram in the Rotordynamic Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PRCAMP,%s,%s,%s,%s,%s,%s,%s,%s" % (str(option), str(slope), str(unit), str(freqb), str(cname), str(stabval), str(keyallfreq), str(keynegfreq))
        return self.run(command, **kwargs)

    def outopt(self, **kwargs):
        """APDL Command: OUTOPT

        Specifies "Output options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "OUTOPT,"
        return self.run(command, **kwargs)

    def nlhist(self, key="", name="", item="", comp="", node="", elem="",
               shell="", layer="", stop_value="", stop_cond="", **kwargs):
        """APDL Command: NLHIST

        Specify result items to track during solution.

        Parameters
        ----------
        key
            Specifies the command operation:

            NSOL - Nodal solution data.

            ESOL - Element nodal data.

            PAIR  - Contact data (for pair-based contact).

            GCN - Contact data (for general contact).

            STAT - Displays a list of items to track.

            OFF or 0 - Deactivates tracking of all variables. This value is the default.

            ON or 1 - Activates tracking of all variables.  Tracking also activates whenever any
                      specification changes.

            DEL - Removes the specified variable from the set of result items to track. If Name =
                  ALL (default), all specifications are removed.

        name
            The 32-character user-specified name.

        item, comp
            Predetermined output item and component label for valid elements.
            See the Element Reference for more information.

        node
            Number identifying one of the following:

        elem
            Valid element number for element results. Used for ESOL items. If
            ELEM is specified, then a node number that belongs to the element
            must also be specified in the NODE field.

        shell
            Valid labels are TOP, MID or BOT. This field can specify the
            location on shell elements for which to retrieve data. Used only
            for element nodal data (ESOL).

        layer
            Layer number (for layered elements only). Used only for element
            nodal data (ESOL).

        stop_value
            Critical value of the tracked variable. This value is used to
            determine if the analysis should be terminated. This field is only
            valid for contact data (Key = PAIR or GCN).

        stop_cond
            Specifies the conditional relationship between the variable being
            tracked and the STOP_VALUE upon which the analysis will be
            terminated:

            -1 - Terminate the analysis when the tracked variable is less than or equal to
                 STOP_VALUE.

            0 - Terminate the analysis when the tracked variable equals STOP_VALUE.

            1 - Terminate the analysis when the tracked variable is greater than or equal to
                STOP_VALUE.

        Notes
        -----
        The NLHIST command is a nonlinear diagnostics tool that enables you to
        monitor diagnostics results of interest in real time during a solution.

        You can track a maximum of 50 variables during solution. The specified
        result quantities are written to the file Jobname.nlh. Nodal results
        and contact results are written for every converged substep
        (irrespective of the OUTRES command setting) while element results are
        written only at time points specified via the OUTRES command. For time
        points where element results data is not available, a very small number
        is written instead. If the conditions for contact to be established are
        not satisfied, 0.0 will be written for contact results.

        Results tracking is available only for a nonlinear structural analysis
        (static or transient), a nonlinear steady-state thermal analysis, or a
        transient thermal analysis (linear or nonlinear). All results are
        tracked in the Solution Coordinate System (that is, nodal results are
        in the nodal coordinate system and element results are in the element
        coordinate system).

        Contact results can be tracked for elements CONTA171 through CONTA177;
        they cannot be tracked for CONTA178.

        When contact results are tracked (Key = PAIR or GCN), the user-
        specified name (Name argument) is used to create a user-defined
        parameter. This enables you to monitor the parameter during solution.
        As an example, you can use a named parameter to easily convert the
        contact stiffness units from FORCE/LENGTH3 to FORCE/LENGTH based on the
        initial contact area CAREA. Be sure to specify Name using the APDL
        parameter naming convention.

        The STOP_VALUE and STOP_COND arguments enable you to automatically
        terminate the analysis when a desired value for a tracked contact
        result has been reached. This capability is only available for contact
        variables (Key = PAIR or GCN).

        The Jobname.nlh file is an ASCII file that lists each time point at
        which a converged solution occurs along with the values of the relevant
        result quantities.

        The GUI option Solution> Results tracking provides an interface to
        define the result items to be tracked. The GUI also allows you to graph
        one or more variables against time or against other variables during
        solution. You can use the interface to graph or list variables from any
        .nlh file generated by the ANSYS program.

        You can also track results during batch runs. Either access the ANSYS
        Launcher and select File Tracking from the Tools menu, or type
        nlhist162 at the command line. Use the supplied file browser to
        navigate to your Jobname.nlh file, and click on it to invoke the
        tracking utility. You can use this utility to read the file at any
        time, even after the solution is complete (the data in the file must be
        formatted correctly).

        Table: 205:: : NLHIST - Valid NSOL Item and Component Labels

        For SHELL131 and SHELL132 elements with KEYOPT(3) = 0 or 1, use the
        labels TBOT, TE2, TE3, . . ., TTOP instead of TEMP.

        For SHELL131 and SHELL132 elements with KEYOPT(3) = 0 or 1, use the
        labels HBOT, HE2, HE3, . . ., HTOP instead of HEAT.

        Table: 206:: : NLHIST - Valid ESOL Item and Component Labels
        """
        command = "NLHIST,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(key), str(name), str(item), str(comp), str(node), str(elem), str(shell), str(layer), str(stop_value), str(stop_cond))
        return self.run(command, **kwargs)

    def supl(self, surfname="", rsetname="", kwire="", **kwargs):
        """APDL Command: SUPL

        Plot result data on all selected surfaces or on a specified surface.

        Parameters
        ----------
        surfname
            Eight character surface name. ALL will plot all selected surfaces.

        rsetname
            Eight character result name.

        kwire
            Plot in context of model.

            0 - Plot results without the outline of selected elements.

            1 - Plot results with the outline of selected elements.

        Notes
        -----
        If RSetName is left blank, then the surface geometry will be plotted.
        If the Setname portion of the argument is a vector prefix (i.e. if
        result sets of name SetNameX, SetNameY and SetNameZ exist), ANSYS will
        plot these vectors on the surface as arrows. For example, SUPL, ALL,
        NORM will plot the surface normals as vectors on all selected surfaces,
        since NORMX NORMY and NORMZ are pre-defined geometry items.
        """
        command = "SUPL,%s,%s,%s" % (str(surfname), str(rsetname), str(kwire))
        return self.run(command, **kwargs)

    def staopt(self, method="", **kwargs):
        """APDL Command: STAOPT

        Specifies static analysis options.

        Parameters
        ----------
        method
            Solution method for the static analysis:

            DEFA - Standard ANSYS solve (default).

            VT - Solve with Variational Technology.

        Notes
        -----
        Specifies the method of solution for a static analysis (ANTYPE,STATIC).
        If used in SOLUTION, this command is valid only within the first load
        step.

        The VT option is valid for either thermal or structural nonlinear
        analyses, where it attempts to reduce the total number of iterations.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: The VT static solution method is not
        supported in Distributed ANSYS.
        """
        command = "STAOPT,%s" % (str(method))
        return self.run(command, **kwargs)

    def msave(self, key="", **kwargs):
        """APDL Command: MSAVE

        Sets the solver memory saving option. This option only applies to the
        PCG solver (including PCG Lanczos).

        Parameters
        ----------
        key
            Activation key:

            0 or OFF - Use global assembly for the stiffness matrix (and mass matrix, when using PCG
                       Lanczos) of the entire model.

            1 or ON - Use an element-by-element approach when possible to save memory during the
                      solution. In this case, the global stiffness (and mass)
                      matrix is not assembled; element stiffness (and mass) is
                      regenerated during PCG or PCG Lanczos iterations.

        Notes
        -----
        MSAVE,ON only applies to and is the default for parts of the model
        using the following element types with linear material properties that
        meet the conditions listed below.

        SOLID186 (Structural Solid only)

        SOLID187

        The following conditions must also be true:

        The PCG solver has been specified.

        Small strains are assumed (NLGEOM,OFF).

        No prestress effects (PSTRES) are included.

        All nodes on the supported element types must be defined (i.e., the
        midside nodes cannot be removed using the EMID command).

        For elements with thermally dependent material properties, MSAVE,ON
        applies only to elements with uniform temperatures prescribed.

        The default element coordinate system must be used.

        If you manually force MSAVE,ON by including it in the input file, the
        model can include the following additional conditions:

        The analysis can be a modal analysis using the PCG Lanczos method
        (MODOPT,LANPCG).

        Large deflection effects (NLGEOM,ON) are included.

        SOLID185 (brick shapes and KEYOPT(2) = 3 only) elements can be
        included.

        All other element types or other parts of the model that don't meet the
        above criteria will be solved using global assembly (MSAVE,OFF). This
        command can result in memory savings of up to 70 percent over the
        global assembly approach for the part of the model that meets the
        criteria. Depending on the hardware (e.g., processor speed, memory
        bandwidth, etc.), the solution time may increase or decrease when this
        feature is used.

        This memory-saving feature runs in parallel when multiple processors
        are used with the /CONFIG command or with Distributed ANSYS. The gain
        in performance with using multiple processors with this feature turned
        on should be similar to the default case when this feature is turned
        off. Performance also improves when using the uniform reduced
        integration option for SOLID186 elements.

        This command does not support the layered option of the SOLID185 and
        SOLID186 elements.

        When using MSAVE,ON with the PCGOPT command, note the following
        restrictions:

        For static and modal analyses, MSAVE,ON is not valid when using a
        Lev_Diff value of 5 on the PCGOPT command; Lev_Diff will automatically
        be reset to 2.

        For modal analyses, MSAVE,ON is not valid with the StrmCk option of the
        PCGOPT command; Strmck will be set to OFF.

        For all analysis types, MSAVE,ON is not valid when the Lagrange
        multiplier option (LM_Key) of the PCGOPT command is set to ON; the
        MSAVE activation key will be set to OFF.

        For linear perturbation static and modal analyses, MSAVE,ON is not
        valid; the MSAVE activation key will be set to OFF.

        When using MSAVE,ON for modal analyses, no .FULL file will be created.
        The .FULL file may be necessary for subsequent analyses (e.g.,
        harmonic, transient mode-superposition, or spectrum analyses). To
        generate the .FULL file, rerun the modal analysis using the WRFULL
        command.
        """
        command = "MSAVE,%s" % (str(key))
        return self.run(command, **kwargs)

    def ic(self, node="", lab="", value="", value2="", nend="", ninc="",
           **kwargs):
        """APDL Command: IC

        Specifies initial conditions at nodes.

        Parameters
        ----------
        node
            Node at which initial condition is to be specified.  If ALL, apply
            to all selected nodes (NSEL).  If NODE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI). A component name may be substituted for NODE.

        lab
            Degree-of-freedom label for which the initial condition is to be
            specified.  If ALL, use all appropriate labels.

        value
            Initial value of the degree of freedom (first-order value).
            Defaults to the program default for that degree of freedom (0.0 for
            structural analysis, TUNIF for thermal analysis, etc.). Values are
            in the nodal coordinate system and in radians for rotational
            degrees of freedom.

        value2
            Second-order degree of freedom value, mainly used to specify
            initial structural velocity.  Defaults to the program default for
            that degree of freedom (0.0 for structural analysis).  Values are
            in the nodal coordinate system and in radians/time for rotational
            degrees of freedom.

        nend, ninc
            Specifies the same initial condition values at the range of nodes
            from NODE to NEND (defaults to NODE), in steps of NINC (defaults to
            1).

        Notes
        -----
        The IC command specifies initial conditions, which are the initial
        values of the specified degrees of freedom. It is valid only for a
        static analysis and full method transient analysis (TIMINT,ON and
        TRNOPT,FULL). For the transient, the initial value is specified at the
        beginning of the first load step, that is, at time = 0.0.

        Initial conditions should always be step applied (KBC,1) and not
        ramped.

        If constraints (D, DSYM, etc.) and initial conditions are applied at
        the same node, the constraint specification overrides. Exercise caution
        when specifying constraints. The degree-of-freedom values start from
        zero, or the first value given in the table when table name is
        specified. To match the nonzero initial condition value with the
        initial value for degree-of-freedom constraint, use a table for the
        degree-of-freedom constraint.

        For thermal analyses, any TUNIF specification should be applied before
        the IC command; otherwise, the TUNIF specification is ignored.  If the
        IC command is input before any TUNIF specification, use the ICDELE
        command and then reissue any TUNIF specification and then follow with
        the IC command.

        When issuing the IC command for elements SOLID278 Layered Thermal Solid
        and SOLID279 Layered Thermal Solid with through-the-thickness degrees
        of freedom (KEYOPT(3) = 2), layers are always interpolated linearly
        based on the location of the degrees of freedom.

        Define consistent initial conditions. For example, if you define an
        initial velocity at a single degree of freedom, the initial velocity at
        every other degree of freedom will be 0.0, potentially leading to
        conflicting initial conditions. In most cases, you should define
        initial conditions at every unconstrained degree of freedom in your
        model. If you define an initial condition for any degree of freedom at
        the pilot node of a rigid body (see Modeling Rigid Bodies in the
        Contact Technology Guide for the definition of rigid body), then the
        same initial condition must also be defined for the same degree of
        freedom on all other nodes of the rigid body.

        After a solution has been performed, the specified initial conditions
        are overwritten by the actual solution and are no longer available. You
        must respecify them if you want to perform a subsequent analysis. You
        may want to keep a database file saved prior to the first solution for
        subsequent reuse.

        If you use the CDWRITE command to archive your model, first-order
        values (initial displacements, temperatures, etc.) specified via the IC
        command are not written to the archive file; however, second-order
        (structural velocity) terms are written.

        This command is also valid in PREP7.
        """
        command = "IC,%s,%s,%s,%s,%s,%s" % (str(node), str(lab), str(value), str(value2), str(nend), str(ninc))
        return self.run(command, **kwargs)

    
    def pdmeth(self, method="", samp="", **kwargs):
        """APDL Command: PDMETH

        Specifies the probabilistic analysis method.

        Parameters
        ----------
        method
            Label for the probabilistic analysis method.

            MCS - Monte Carlo Simulation

            RSM - Response Surface Method

        samp
            Label for the sampling techniques. The sampling technique
            determines the values of the random input variables during the
            simulation loops.

            DIR - Direct or Crude Monte Carlo Sampling. This technique randomly samples the
                  random input variables according to their distribution
                  functions without "memory" of previous simulations.

            The parameters for a Monte Carlo Simulation using direct sampling are specified with the PDDMCS command. - LHS

            Latin Hypercube Sampling (default). Valid only for Method = MCS. For this sampling technique the random input variables are sampled randomly according to their distribution functions, efficiently stratifying the samples into layers and avoiding the re-use of those layers. The sampling process has a "memory" of previous simulations, which prevents accumulation of clusters of samples. In addition, this sampling strategy forces the extreme ends of a distribution function to participate in the sampling. This generally leads to smoother distribution functions of the sampled set. - The parameters for a Monte Carlo Simulation using Latin-Hypercube sampling are
                              specified with the PDLHS command.

            USER - User specified sampling. Valid only for Method = MCS. In this case you provide
                   a file containing the sampling "points" (values) of all
                   random input variables for all simulation loops. These
                   samples are simply executed and it is your responsibility to
                   specify the samples correctly. The probabilistic design
                   system can perform only limited checks on the samples you
                   provide. ANSYS allows Monte Carlo specific postprocessing
                   operations on the results generated with user-specified
                   samples. The parameters for the user-supplied sampling
                   technique are specified with the PDUSER command.

            CCD - Central Composite Design. Valid only for Method = RSM. A central composite
                  design is composed of a center point, axis points, and corner
                  points, called factorial points. Using large numbers of
                  random input variables produces prohibitively large numbers
                  of factorial points; therefore, ANSYS automatically reduces
                  the number of factorial points by switching to a fractional
                  plan for the factorial part of the design. See the PDDOEL
                  command for more information.

            Note:This option is only valid for 2 to 20 random input variables. You will receive an error if you have specified fewer than 2 or more than 20 random input variables. - BBM

            Box-Behnken Matrix Design. Valid only for Method = RSM. A Box-Behnken Matrix design is composed of a center point plus the points at the middle of the edges of the hypercube in the space of random input variables. A Box-Behnken design might be advantageous if the corner points of the hypercube represent very extreme conditions that are undesirable and therefore should not be used for the sampling.  See the PDDOEL command for more information. - Note:  This option is only valid for 3 to 12 random input variables. You will
                              receive an error if you have specified fewer than
                              3 or more than 12 random input variables.

            USER - User specified sampling. In this case you provide a file containing the
                   sampling "points" (values) of all random input variables for
                   all simulation loops. These samples are simply executed and
                   it is your responsibility to specify the samples correctly.
                   The PDS can perform only limited checks on the samples you
                   provide, if user-supplied sampling technique are specified
                   with the PDUSER command.

        Notes
        -----
        Specifies the probabilistic analysis method and the sampling technique
        used for the individual probabilistic analysis method.
        """
        command = "PDMETH,%s,%s" % (str(method), str(samp))
        return self.run(command, **kwargs)

    def bfvlist(self, volu="", lab="", **kwargs):
        """APDL Command: BFVLIST

        Lists the body force loads on a volume.

        Parameters
        ----------
        volu
            Volume at which body load is to be listed.  If ALL (or blank), list
            for all selected volumes [VSEL].  If VOLU = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for VOLU.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFV command for
            labels.

        Notes
        -----
        Lists the body force loads for the specified volume and label.  Body
        loads may be defined on a volume with the BFV command.

        This command is valid in any processor.
        """
        command = "BFVLIST,%s,%s" % (str(volu), str(lab))
        return self.run(command, **kwargs)

    
    
    def vdot(self, labr="", labx1="", laby1="", labz1="", labx2="", laby2="",
             labz2="", **kwargs):
        """APDL Command: VDOT

        Forms an element table item from the dot product of two vectors.

        Parameters
        ----------
        labr
            Label assigned to dot product result.

        labx1, laby1, labz1
            X, Y, and Z-component of first vector label.

        labx2, laby2, labz2
            X, Y, and Z-component of second vector label.

        Notes
        -----
        Forms labeled result items for the selected element from the dot
        product of two vectors:

        LabR = {LabX1, LabY1, LabZ1} : :  {LabX2, LabY2, LabZ2}

        Data must be in a consistent coordinate system.  Labels are those
        associated with the ETABLE command.
        """
        command = "VDOT,%s,%s,%s,%s,%s,%s,%s" % (str(labr), str(labx1), str(laby1), str(labz1), str(labx2), str(laby2), str(labz2))
        return self.run(command, **kwargs)

    def vfsm(self, action="", encl="", opt="", maxiter="", conv="", **kwargs):
        """APDL Command: VFSM

        Adjusts view factor matrix to satisfy reciprocity and/or row sum
        properties.

        Parameters
        ----------
        action
            Action to be performed:

            Define - Define a view factor summation (default)

            Clear - Resets the scaling method to 0 for all enclosures. All subsequent arguments are
                    ignored.

            Status - Outputs the OPT value for each enclosure in the model.

        encl
            Previously defined enclosure number for the view factor adjustment.

        opt
            Option key:

            0 - The view factor matrix values are not adjusted (default).

            1 - The view factor matrix values are adjusted so that the row sum equals 1.0.

            2 - The view factor matrix values are adjusted so that the row sum equals 1.0 and
                the reciprocity relationship is satisfied.

            3 - The view factor matrix values are adjusted so that the original row sum is
                maintained.

            4 - The view factor matrix values are adjusted so that the original row sum is
                maintained and the reciprocity relationship is satisfied.

        maxiter
            Maximum number of iterations to achieve convergence. Valid only
            when OPT = 2 or 4. Default is 100.

        conv
            Convergence value for row sum. Iterations will continue (up to
            MAXITER) until the maximum residual over all the rows is less than
            this value. Valid only when OPT = 2 or 4. Default is 1E-3.

        Notes
        -----
        To have a good energy balance, it is important to satisfy both the row
        sum and reciprocity relationships. For more information, see View
        Factors in the Mechanical APDL Theory Reference.

        OPT = 1 and 2 are suitable for perfect enclosures. OPT = 1 is less
        expensive than OPT = 2 because no iterations are involved. However,
        with OPT = 1, the reciprocity relationship is not satisfied.

        OPT = 3 and 4 are suitable for leaky enclosures. OPT = 3 is less
        expensive than OPT = 4 because no iterations are involved. However,
        with OPT = 3, the reciprocity relationship is not satisfied.

        The VFSM command must be used before VFOPT is issued, or Solve is
        initiated.
        """
        command = "VFSM,%s,%s,%s,%s,%s" % (str(action), str(encl), str(opt), str(maxiter), str(conv))
        return self.run(command, **kwargs)

    
    def ancyc(self, numframes="", kcycl="", delay="", **kwargs):
        """APDL Command: ANCYC

        Applies a traveling wave animation to graphics data in a modal cyclic
        symmetry analysis.

        Parameters
        ----------
        numframes
            The number of plot frames for the animation. Valid values range
            from 5 through 36. The default is 18. A low value (because it
            specifies fewer graphical frames) produces a rougher animation but
            loads faster. A high value produces a smoother animation but
            requires more time to load.

        kcycl
            The animation mode:

            0 - Continuous animation cycle (forward-reverse-forward).

            1 - Discontinuous animation cycle (forward-reset-forward). This option is the
                default.

        delay
            The time delay (in seconds) between animation frames. Valid values
            range from 0.1 through 1.0. The default is 0.1 seconds, which
            produces a seemingly real-time animation. A higher value produces a
            slower animation.

        Notes
        -----
        The ANCYC command is valid in a modal cyclic symmetry analysis only.

        The command animates the cyclic symmetry mode shape plot in the General
        Post Processor (/POST1). When you issue a nodal- or element-results
        plot command (for example, PLNSOL, PLESOL, or PLDISP) and then issue
        the ANCYC command, ANSYS applies a traveling wave animation to the mode
        shape plot.

        Each frame of the animation is created by expanding the cyclic symmetry
        mode shape at increasing phase angles (via the /CYCEXPAND command)
        starting at zero in equal increments over 360°. The phase-angle
        increment is 360 / NUMFRAMES.

        The animation display shows the traveling wave of the result quantity
        being plotted. The traveling wave animation is applicable only to nodal
        diameters (harmonic indices) greater than 0 and less than N / 2 (where
        N is the number of cyclic sectors in the model).

        For more information, see Applying a Traveling Wave Animation to the
        Cyclic Model in the Cyclic Symmetry Analysis Guide.
        """
        command = "ANCYC,%s,%s,%s" % (str(numframes), str(kcycl), str(delay))
        return self.run(command, **kwargs)

    def ocdata(self, val1="", val2="", val3="", val14="", **kwargs):
        """APDL Command: OCDATA

        Defines an ocean load using non-table data.

        Parameters
        ----------
        val1, val2, val3, . . . , val14
            Values describing the basic ocean load or a wave condition.

        Notes
        -----
        The OCDATA command specifies non-table data that defines the ocean
        load, such as the depth of the ocean to the mud line, the ratio of
        added mass over added mass for a circular cross section, or the wave
        type to apply. The terms VAL1, VAL2, etc. are specialized according to
        the input set required for the given ocean load.

        The program interprets the data input via the OCDATA command within the
        context of the most recently issued OCTYPE command.

        Input values in the order indicated.

        This command is also valid in PREP7.

        You can define the following ocean data types:

        For a better understanding of how to set up a basic ocean type, see
        Figure: 5:: Basic Ocean Data Type Components .

        DEPTH -- The depth of the ocean (that is, the distance between the mean
        sea level and the mud line). The water surface is assumed to be level
        in the XY plane, with Z being positive upwards. This value is required
        and must be positive.

        MATOC -- The material number of the ocean. This value is required and
        is used to input the required density. It is also used to input the
        viscosity if the Reynolds number is used (OCTABLE).

        KFLOOD -- The inside-outside fluid-interaction key:

        For beam subtype CTUBE and HREC used with BEAM188 or BEAM189 and ocean
        loading, KFLOOD is always set to 1.

        Cay -- The ratio of added mass of the external fluid over the mass of
        the fluid displaced by the element cross section in the y direction
        (normal). The added mass represents the mass of the external fluid
        (ocean water) that moves with the pipe, beam, or link element when the
        element moves in the element y direction during a dynamic analysis.

        If no value is specified, and the coefficient of inertia CMy is not
        specified (OCTABLE), both values default to 0.0.

        If no value is specified, but CMy is specified, this value defaults to
        Cay = CMy - 1.0.

        If this value should be 0.0, enter 0.0.

        Caz -- The ratio of added mass of the external fluid over the mass of a
        cross section in the element z direction (normal). The added mass
        represents the mass of the external fluid (ocean water) that moves with
        the pipe, beam, or link element when the element moves in the element z
        direction during a dynamic analysis.

        If no value is specified, and Cay is specified, this value defaults to
        Cay.

        If no value is specified, and the coefficient of inertia CMz is not
        specified (OCTABLE), both values default to 0.0.

        If no value is specified, but CMz is specified, this value defaults to
        Cay = CMz - 1.0.

        If this value should be 0.0, enter 0.0.

        Cb -- The ratio of buoyancy force used over buoyancy force based on the
        outside diameter and water density. Accept the default value in most
        cases. Adjust this option only when you must account for additional
        hardware (such as a control valve) attached to the pipe exterior. A
        non-default value may lead to small non-physical inconsistencies;
        testing is therefore recommended for non-default values.

        If no value is specified, this value defaults to 1.0.

        If this value should be 0.0 (useful when troubleshooting your input),
        enter 0.0.

        Zmsl -- A vertical offset from the global origin to the mean sea level.
        The default value is zero (meaning that the origin is located at the
        mean sea level).

        Two example cases for Zmsl are:

        A structure with its origin on the sea floor (Zmsl = DEPTH).

        A tidal change (tc) above the mean sea level (Zmsl = tc, and DEPTH
        becomes DEPTH + tc)

        Ktable -- The dependency of VAL1 on the OCTABLE command:

        Figure: 5:: : Basic Ocean Data Type Components

         KWAVE -- The incident wave type:

        THETA -- Angle of the wave direction θ from the global Cartesian X axis
        toward the global Cartesian Y axis (in degrees).

        WAVELOC (valid when KWAVE = 0 through 3, and 101+) -- The wave location
        type:

        SPECTRUM (valid when KWAVE = 5 through 7) -- The wave spectrum type:

        KCRC -- The wave-current interaction key.

        Adjustments to the current profile are available via the KCRC constant
        of the water motion table. Typically, these options are used only when
        the wave amplitude is large relative to the water depth, such that
        significant wave-current interaction exists.
        """
        command = "OCDATA,%s,%s,%s,%s" % (str(val1), str(val2), str(val3), str(val14))
        return self.run(command, **kwargs)

    def plcamp(self, option="", slope="", unit="", freqb="", cname="",
               stabval="", keyallfreq="", keynegfreq="", **kwargs):
        """APDL Command: PLCAMP

        Plots Campbell diagram data for applications involving rotating
        structure dynamics.

        Parameters
        ----------
        option
            Flag to activate or deactivate sorting of forward or backward whirl
            frequencies:

            0 (OFF or NO) - No sorting.

            1 (ON or YES) - Sort. This value is the default.

        slope
            The slope of the line to be printed. This value must be positive.

            SLOPE > 0  - The line represents the number of excitations per revolution of the rotor. For
                         example, SLOPE = 1 represents one excitation per
                         revolution, usually resulting from unbalance.

            SLOPE = 0  - The line represents the stability threshold for stability values or logarithmic
                         decrements printout (STABVAL = 1 or 2)

        unit
            Specifies the unit of measurement for rotational angular
            velocities:

            RDS - Rotational angular velocities in radians per second (rad/s). This value is the
                  default.

            RPM - Rotational angular velocities in revolutions per minute (RPMs).

        freqb
            The beginning, or lower end, of the frequency range of interest.
            The default is zero.

        cname
            The rotating component name.

        stabval
            Flag to plot the stability values:

            0 (OFF or NO) - Plot the frequencies (the imaginary parts of the eigenvalues in Hz). This value
                            is the default.

            1 (ON or YES) - Plot the stability values (the real parts of the eigenvalues in Hz).

            2 - Plot the logarithmic decrements.

        keyallfreq
            Key to specify if all frequencies above FREQB are plotted:

            0 (OFF or NO) - A maximum of 10 frequencies are plotted. This value is the default.

            1 (ON or YES) - All frequencies are plotted.

        keynegfreq
            Key to specify if the negative frequencies are plotted. It only
            applies to solutions obtained with the damped eigensolver (Method =
            DAMP on the MODOPT command):

            0 (OFF or NO) - Only positive frequencies are plotted. This value is the default.

            1 (ON or YES) - Negative and positive frequencies are plotted.

        Notes
        -----
        The following items are required when generating a Campbell diagram:

        Take the gyroscopic effect into account by issuing the CORIOLIS command
        in the SOLUTION module.

        Run a modal analysis using the QR damped (MODOPT,QRDAMP) or damped
        (MODOPT,DAMP) method. Complex eigenmodes are necessary
        (MODOPT,QRDAMP,,,,Cpxmod  = ON), and you must specify the number of
        modes to expand (MXPAND).

        Define two or more load step results with an ascending order of
        rotational velocity (OMEGA or CMOMEGA).

        In some cases where modes are not in the same order from one load step
        to the other, sorting the frequencies (Option = 1) can help to obtain a
        correct plot. Sorting is based on the comparison between complex mode
        shapes calculated at two successive load steps.

        At each load step, the application compares the mode shape to the loads
        at other load steps to determine whirl direction at the load step. If
        applicable, a label appears (in the plot legend) representing each
        whirl mode (BW for backward whirl and FW for forward whirl).

        At each load step, the program checks for instability (based on the
        sign of the real part of the eigenvalue). The labels "stable" or
        "unstable" appear in the plot legend for each frequency curve.

        The rotational velocities of a named component (Cname) are displayed on
        the X-axis.

        For information on plotting a Campbell diagram for a prestressed
        structure, see Solving for a Subsequent Campbell Analysis of a
        Prestressed Structure Using the Linear Perturbation Procedure in the
        Rotordynamic Analysis Guide.

        In general, plotting a Campbell diagram is recommended only when your
        analysis is performed in a stationary reference frame
        (CORIOLIS,,,,RefFrame = ON).

        For a usage example of the PLCAMP command, see Campbell Diagram in the
        Rotordynamic Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLCAMP,%s,%s,%s,%s,%s,%s,%s,%s" % (str(option), str(slope), str(unit), str(freqb), str(cname), str(stabval), str(keyallfreq), str(keynegfreq))
        return self.run(command, **kwargs)

    
    def sumap(self, rsetname="", item="", comp="", **kwargs):
        """APDL Command: SUMAP

        Map results onto selected surface(s).

        Parameters
        ----------
        rsetname
            Eight-character name for the result being mapped.

        item
            Label identifying the item.

        comp
            Component label of item (if required).

        Notes
        -----
        The SUMAP command maps results in the current coordinate system (RSYS)
        using the selected set of elements.

        The command interpolates and stores the results data on to each of the
        selected surfaces.

        SUMAP,ALL,CLEAR deletes all results sets from all selected surfaces.
        """
        command = "SUMAP,%s,%s,%s" % (str(rsetname), str(item), str(comp))
        return self.run(command, **kwargs)

    
    
    def sffun(self, lab="", par="", par2="", **kwargs):
        """APDL Command: SFFUN

        Specifies a varying surface load.

        Parameters
        ----------
        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.  Issue SFFUN,STATUS to list current command settings.

        par
            Parameter containing list of surface load values.  If Lab = CONV,
            values are typically the film coefficients and Par2 values (below)
            are typically the bulk temperatures.

        par2
            Parameter containing list of second surface load values (if any).
            If Lab = CONV, the Par2 values are typically the bulk temperatures.
            Par2 is not used for other surface load labels.

        Notes
        -----
        Specifies a surface load "function" to be used when the SF or SFE
        command is issued.  The function is supplied through an array parameter
        vector which contains nodal surface load values.  Node numbers are
        implied from the sequential location in the array parameter.  For
        example, a value in location 11 applies to node 11.  The element faces
        are determined from the implied list of nodes when the SF or SFE
        command is issued.  Zero values should be supplied for nodes that have
        no load.  A tapered load value may be applied over the element face.
        These loads are in addition to any loads that are also specified with
        the SF or SFE commands.  Issue SFFUN (with blank remaining fields) to
        remove this specification.  Issue SFFUN,STATUS to list current
        settings.

        Starting array element numbers must be defined for each array parameter
        vector.  For example, SFFUN,CONV,A(1,1),A(1,2) reads the first and
        second columns of array A (starting with the first array element of
        each column) and associates the values with the nodes.  Operations
        continue on successive column array elements until the end of the
        column. Another example to show the order of the commands:

        SFFUN does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "SFFUN,%s,%s,%s" % (str(lab), str(par), str(par2))
        return self.run(command, **kwargs)

    def bfecum(self, lab="", oper="", fact="", tbase="", **kwargs):
        """APDL Command: BFECUM

        Specifies whether to ignore subsequent element body force loads.

        Parameters
        ----------
        lab
            Valid body load label.  If ALL, use all appropriate labels.

        oper
            Replace or ignore key:

            REPL - Subsequent values replace the previous values (default).

            IGNO - Subsequent values are ignored.

        fact
            Scale factor for the element body load values.  Zero (or blank)
            defaults to 1.0.  Use a small number for a zero scale factor.  The
            scale factor is not applied to body load phase angles.

        tbase
            Used (only with  Lab = TEMP) to calculate the temperature used in
            the add or replace operation (see Oper) as:

        Notes
        -----
        Allows repeated element body force loads to be replaced or ignored.
        Element body loads are applied with the BFE command.  Issue the BFELIST
        command to list the element body loads.  The operations occur when the
        next body loads are defined.  For example, issuing the BFE command with
        a temperature value of 25 after a previous BFE command with a
        temperature value of 20 causes the new value of that temperature to be
        25 with the replace operation, or 20 with the ignore operation.  A
        scale factor is also available to multiply the next value before the
        replace operation.  A scale factor of 2.0 with the previous "replace"
        example results in a temperature of 50.  The scale factor is applied
        even if no previous values exist.  Issue BFECUM,STAT to show the
        current label, operation, and scale factors.

        BFECUM does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "BFECUM,%s,%s,%s,%s" % (str(lab), str(oper), str(fact), str(tbase))
        return self.run(command, **kwargs)

    
    def fatigue(self, **kwargs):
        """APDL Command: FATIGUE

        Specifies "Fatigue data status" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "FATIGUE,"
        return self.run(command, **kwargs)

    
    def gmatrix(self, symfac="", condname="", numcond="", matrixname="",
                **kwargs):
        """APDL Command: GMATRIX

        Performs electric field solutions and calculates the self and mutual
        conductance between multiple conductors.

        Parameters
        ----------
        symfac
            Geometric symmetry factor.  Conductance values are scaled by this
            factor which represents the fraction of the total device modeled.
            Defaults to 1.

        condname
            Alphanumeric prefix identifier used in defining named conductor
            components.

        numcond
            Total number of components.  If a ground is modeled, it is to be
            included as a component.

        matrixname
            Array name for computed conductance matrix.  Defaults to GMATRIX.

        Notes
        -----
        To invoke the GMATRIX macro, the exterior nodes of each conductor must
        be grouped into individual components using the CM command.  Each set
        of  independent components is assigned a component name with a common
        prefix followed by the conductor number.  A conductor system with a
        ground must also include the ground nodes as a component.  The ground
        component is numbered last in the component name sequence.

        A ground conductance matrix relates current to a voltage vector.  A
        ground matrix cannot be applied to a circuit modeler.  The lumped
        conductance matrix is a combination of  lumped "arrangements" of
        voltage differences between conductors.  Use the lumped conductance
        terms in a circuit modeler to represent conductances between
        conductors.

        Enclose all name-strings in single quotes in the GMATRIX command line.

        GMATRIX works with the following elements:

        SOLID5 (KEYOPT(1) = 9)

        SOLID98 (KEYOPT(1) = 9)

        LINK68

        PLANE230

        SOLID231

        SOLID232

        This command is available from the menu path shown below only if
        existing results are available.

        This command does not support multiframe restarts

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = f"GMATRIX,{symfac},{condname},{numcond},,{matrixname}"
        return self.run(command, **kwargs)

    def deltim(self, dtime="", dtmin="", dtmax="", carry="", **kwargs):
        """APDL Command: DELTIM

        Specifies the time step sizes to be used for the current load step.

        Parameters
        ----------
        dtime
            Time step size for this step. If automatic time stepping is used
            (AUTOTS), DTIME is the starting time substep.

        dtmin
            Minimum time step (if automatic time stepping is used). The program
            automatically determines the default based on the physics of the
            model.

        dtmax
            Maximum time step (if automatic time stepping is used). The program
            automatically determines the default based on the physics of the
            model.

        carry
            Time step carry over key:

            OFF - Use DTIME as time step at start of each load step.

            ON - Use final time step from previous load step as the starting time step (if
                 automatic time stepping is used).

        Notes
        -----
        See NSUBST for an alternative input.

        Use consistent values for DTIME and TIME (TIME). For example, using 0.9
        for DTIME and 1.0 for TIME results in one time step because 1.0 (TIME)
        is divisible by .9 (DTIME) at most once. If you intend to load in 10
        increments over a time span of 1.0, use 0.1 for DTIME and 1.0 for TIME.

        The program calculates the initial incremental time so that (EndingTime
        - StartingTime)/DTIME is an integer, which may affect the initial
        incremental time that you specify. For example, if the starting time is
        0, the ending time is 1, and the initial incremental time is 0.4, the
        program rounds to the nearest integer and adjusts the time to 0.33333.

        For solution efficiency, specify values for all fields of this command.

        This command is also valid in PREP7.
        """
        command = "DELTIM,%s,%s,%s,%s" % (str(dtime), str(dtmin), str(dtmax), str(carry))
        return self.run(command, **kwargs)

    def usrcal(self, rnam1="", rnam2="", rnam3="", rnam4="", rnam5="",
               rnam6="", rnam7="", rnam8="", rnam9="", **kwargs):
        """APDL Command: USRCAL

        Allows user-solution subroutines to be activated or deactivated.

        Parameters
        ----------
        rnam1, rnam2, rnam3, . . . , rnam9
            User-defined solution subroutine names to be activated.  Up to nine
            may be defined on one command or multiple commands may be used.  If
            Rnam1 = ALL, activate all valid user subroutines.   If Rnam1 =
            NONE, deactivate all valid user subroutines.  All characters are
            required:

            USREFL - Allows user defined scalar field (body force) loads.

            USERCV - Allows user defined convection (surface) loads.

            USERPR - Allows user defined pressure (surface) loads.

            USERFX - Allows user-defined heat flux (surface) loads.

            USERCH - Allows user-defined charge density (surface) loads.

            USERFD - Computes the complex load vector for the frequency domain logic.

            USEROU - Allows user supplied element output.

            USERMC - Allows user control of the hygrothermal growth).

            USOLBEG - Allows user access before each solution.

            ULDBEG - Allows user access before each load step.

            USSBEG - Allows user access before each substep.

            UITBEG - Allows user access before each equilibrium iteration.

            UITFIN - Allows user access after each equilibrium iteration.

            USSFIN - Allows user access after each substep.

            ULDFIN - Allows user access after each load step.

            USOLFIN - Allows user access after each solution.

            UANBEG - Allows user access at start of run.

            UANFIN - Allows user access at end of run.

            UELMATX - Allows user access to element matrices and load vectors.

            UTIMEINC - Allows a user-defined time step, overriding the program-determined time step.

            UCNVRG - Allows user-defined convergence checking, overriding the program-determined
                     convergence.

        Notes
        -----
        Allows certain user-solution subroutines to be activated or deactivated
        (system-dependent).  This command only affects the subroutines named.
        Other user subroutines (such as user elements, user creep, etc.) have
        their own activation controls described with the feature.

        The routines are commented and should be listed after performing a
        custom installation from the distribution media for more details.  See
        also the Advanced Analysis Guide for a general description of user-
        programmable features.

        Users must have system permission, system access, and knowledge to
        write, compile, and link the appropriate subroutines into the program
        at the site where it is to be run.  All routines should be written in
        FORTRAN. (For more information on FORTRAN compilers please refer to
        either the ANSYS, Inc. Windows Installation Guide or the ANSYS, Inc.
        Linux Installation Guide for details specific to your platform or
        operating system.) Issue USRCAL,STAT to list the status of these user
        subroutines.  Since a user-programmed subroutine is a nonstandard use
        of the program, the verification of any ANSYS run incorporating these
        commands is entirely up to the user.  In any contact with ANSYS
        customer support regarding the performance of a custom version of the
        ANSYS program, you should explicitly state that a user programmable
        feature has been used.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "USRCAL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(rnam1), str(rnam2), str(rnam3), str(rnam4), str(rnam5), str(rnam6), str(rnam7), str(rnam8), str(rnam9))
        return self.run(command, **kwargs)

    
    def mfcalc(self, fnumb="", freq="", **kwargs):
        """APDL Command: MFCALC

        Specifies a calculation frequency for a field in an ANSYS Multi-field
        solver analysis.

        Parameters
        ----------
        fnumb
            Field number set by the MFELEM command.

        freq
            Perform calculation every Nth ANSYS Multi-field solver time step.
            Defaults to 1 for every time step.

        Notes
        -----
        This command only applies to a harmonic analysis of the specified
        field. It is useful when a field contributes negligible field
        interaction within a single ANSYS Multi-field solver time step.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFCALC,%s,%s" % (str(fnumb), str(freq))
        return self.run(command, **kwargs)

    
    def kbc(self, key="", **kwargs):
        """APDL Command: KBC

        Specifies ramped or stepped loading within a load step.

        Parameters
        ----------
        key
            Ramping key:

            0 - Loads are linearly interpolated (ramped) for each substep from the values of
                the previous load step to the values of this load step. This is
                the default value.

            1 - Loads are step changed (stepped) at the first substep of this load step to the
                values of this load step (i.e., the same values are used for
                all substeps).  Useful for rate-dependent behavior (e.g.,
                creep, viscoplasticity, etc.) or transient load steps only.

        Notes
        -----
        Specifies whether loads applied to intermediate substeps within the
        load step are to be stepped or ramped. Used only if DTIME on the DELTIM
        command is less than the time span or, conversely, if NSBSTP on the
        NSUBST command is greater than one. Flags (FSI, MXWF, MVDI, etc.) are
        always stepped.

        Changing the ramping KEY (i.e., switching between ramped and stepped
        boundary conditions) between load steps is not recommended.

        For ramped loading (KBC,0), when a load is applied for the first time,
        it is interpolated from zero to the value of the current load step, and
        not from the initial condition or value of the degree of freedom from
        the previous load step.

        Spatially varying tabular loads or boundary conditions do not support
        direct ramping or stepping options and, instead, apply their full
        values according to the supplied tabular functions regardless of the
        KBC setting.

        For a static or harmonic cyclic symmetry analysis, any load that varies
        by sector (CYCOPT,LDSECT) is tabular and is applied as a step change,
        regardless of the KBC setting; however, any non-tabular loads in the
        same analysis are ramped or stepped according to the KBC setting.

        Irrespective of the KBC setting, loads are usually step-removed. See
        Stepping or Ramping Loads in the Basic Analysis Guide for more
        information.

        It is sometimes difficult to obtain successful convergence with stepped
        loading in a nonlinear transient problem. If divergence is encountered,
        determine if stepped loading was used by default, then determine if it
        is appropriate for the analysis.

        This command is also valid in PREP7.
        """
        command = "KBC,%s" % (str(key))
        return self.run(command, **kwargs)

    def gst(self, lab="", lab2="", **kwargs):
        """APDL Command: /GST

        Turns Graphical Solution Tracking (GST) on or off.

        Parameters
        ----------
        lab
            Determines whether the Graphical Solution Tracking feature is
            active.  Specify ON to activate GST, or OFF to deactivate the
            feature.

        lab2
            Activates generation of interface and field convergence files
            (ANSYS MFX analyses only).

        Notes
        -----
        For interactive runs using GUI [/MENU,ON] or graphics [/MENU,GRPH]
        mode, ANSYS directs GST graphics to the screen.  For interactive
        sessions not using GUI or graphics mode, or for batch sessions, GST
        graphics are saved in the ANSYS graphics file Jobname.GST when Lab2 is
        unspecified. The file Jobname.GST can be viewed with the DISPLAY
        program in this case. You must select All File Types to access it. For
        more information on the DISPLAY program see Getting Started with the
        DISPLAY Program in the Basic Analysis Guide. For MFX runs (when
        Lab2=ON), the Jobname.GST file is in XML format, and it can be viewed
        with the Results Tracker Utility, accessed from within the Tools menu
        of the Mechanical APDL Product Launcher.

        The GST feature is available only for nonlinear structural, thermal,
        electric, magnetic, fluid, or CFD simulations. For more information
        about this feature and illustrations of the GST graphics for each
        analysis type, see the ANSYS Analysis Guide for the appropriate
        discipline.  See also the CNVTOL command description.

        When running an ANSYS MFX analysis, specify /GST,ON,ON to generate both
        the interface (Jobname.NLH) and field convergence (Fieldname.GST) files
        for monitoring the analysis. This field is not available on the GUI.
        """
        command = "/GST,%s,%s" % (str(lab), str(lab2))
        return self.run(command, **kwargs)

    
    def grp(self, signif="", label="", forcetype="", **kwargs):
        """APDL Command: GRP

        Specifies the grouping mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF  threshold.  For single point, multipoint, or DDAM response
            (SPOPT,SPRS, MPRS or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes.  Any mode whose significance level
            is less than SIGNIF is considered insignificant and is not
            contributed to the mode combinations.  The higher the SIGNIF
            threshold, the fewer the number of modes combined.  SIGNIF defaults
            to 0.001.  If SIGNIF is specified as 0.0, it is taken as 0.0.
            (This mode combination method is not valid for SPOPT,PSD.)

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default).  Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution.  Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution.  Accelerations, "stress accelerations," "force
                   accelerations," etc., are available.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        The SIGNIF value set with this command (including the default value of
        0.001) overrides the SIGNIF value set with the MXPAND command.

        This command is also valid for PREP7.
        """
        command = "GRP,%s,%s,%s" % (str(signif), str(label), str(forcetype))
        return self.run(command, **kwargs)

    
    def lccalc(self, **kwargs):
        """APDL Command: LCCALC

        Specifies "Load case settings" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.

        This command is also valid for rezoning.
        """
        command = "LCCALC,"
        return self.run(command, **kwargs)

    def sbctran(self, **kwargs):
        """APDL Command: SBCTRAN

        Transfers solid model loads and boundary conditions to the FE model.

        Notes
        -----
        Causes a manual transfer of solid model loads and boundary conditions
        to the finite element model.  Loads and boundary conditions on
        unselected keypoints, lines, areas, and volumes are not transferred.
        Boundary conditions and loads will not be transferred to unselected
        nodes or elements.  The SBCTRAN operation is also automatically done
        upon initiation of the solution calculations [SOLVE].

        This command is also valid in PREP7.
        """
        command = "SBCTRAN,"
        return self.run(command, **kwargs)

    def mfsurface(self, inumb="", fnumb1="", label="", fnumb2="", **kwargs):
        """APDL Command: MFSURFACE

        Defines a surface load transfer for an ANSYS Multi-field solver
        analysis.

        Parameters
        ----------
        inumb
            Interface number for load transfer. The interface number
            corresponds to the interface number specified by the surface flag
            FSIN (SFxxcommands).

        fnumb1
            Field number of sending field.

        label
            Valid surface load labels:

        fnumb2
            Field number for receiving field.

        Notes
        -----
        This command is also valid in PREP7.

        The ANSYS Multi-field solver solver does not allow you to switch the
        load transfer direction for the same load quantity across the same
        interfaces for a restart run. For example, if Field1 sends temperature
        to and receives heat flow from Field2 across Interface 1 in a previous
        solution, then you cannot make Field1 send heat flow to and receive
        temperatures from Field2 across the same interface in a restart run,
        even if you cleared the corresponding load transfer command.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFSURFACE,%s,%s,%s,%s" % (str(inumb), str(fnumb1), str(label), str(fnumb2))
        return self.run(command, **kwargs)

    
    def seg(self, label="", aviname="", delay="", **kwargs):
        """APDL Command: /SEG

        Allows graphics data to be stored in the local terminal memory.

        Parameters
        ----------
        label
            Storage key:

            SINGL - Store subsequent display in a single segment (overwrites last storage).

            MULTI - Store subsequent displays in unique segments [ANIM].

            DELET - Delete all currently stored segments.

            OFF - Stop storing display data in segments.

            STAT - Display segment status.

            PC - This option only applies to PC versions of ANSYS and only when animating via
                 the AVI movie player (i.e., /DEVICE,ANIM,2).  This command
                 appends frames to the File.AVI, so that the animation goes in
                 both directions (i.e., forward--backward--forward).  You must
                 have a current animation file to use this option.

        aviname
            Name of the animation file that will be created when each frame is
            saved. The .AVI extension is applied automatically. Defaults to
            Jobname.AVI if no filename is specified.

        delay
            Delay factor between each frame, in seconds. Defaults to 0.015
            seconds if no value is specified.

        Notes
        -----
        Allows graphics data to be stored in the terminal local memory (device-
        dependent).  Storage occurs concurrently with the display.

        Although the information from your graphics window is stored as an
        individual segment, you cannot plot directly (GPLOT) from the segment
        memory.

        For the DISPLAY program, the Aviname and DELAY fields are ignored.

        This command is valid in any processor.
        """
        command = "/SEG,%s,%s,%s" % (str(label), str(aviname), str(delay))
        return self.run(command, **kwargs)

    
    def prnld(self, lab="", tol="", item="", **kwargs):
        """APDL Command: PRNLD

        Prints the summed element nodal loads.

        Parameters
        ----------
        lab
            Nodal reaction load type.  If blank, use the first ten of all
            available labels.  Valid labels are:

        tol
            Tolerance value about zero within which loads are not printed, as
            follows:

            > 0  - Relative tolerance about zero within which loads are not printed. In this case,
                   the tolerance is TOL * Load, where Load is the absolute
                   value of the maximum load on the selected nodes.

             0  -  Print all nodal loads.

            > 0  - Absolute tolerance about zero within which loads are not printed.

        item
            Selected set of nodes.

            (blank) - Prints the summed element nodal loads for all selected nodes (default),
                      excluding contact elements.

            CONT - Prints the summed element nodal loads for contact nodes only.

            BOTH - Prints the summed element nodal loads for all selected nodes, including contact
                   nodes.

        Notes
        -----
        Prints the summed element nodal loads (forces, moments, heat flows,
        flux, etc.) for the selected nodes in the sorted sequence.  Results are
        in the global Cartesian coordinate directions unless transformed
        [RSYS].  Zero values (within a tolerance range) are not printed.  Loads
        applied to a constrained degree of freedom are not included.  The FORCE
        command can be used to define which component of the nodal load is to
        be used (static, damping, inertia, or total).

        By default, PRNLD excludes elements TARGE169 - CONTA177. Setting ITEM =
        CONT will only account for nodal forces on selected contact elements
        (CONTA171 - CONTA177). Setting ITEM = BOTH will account for nodal
        forces on all selected nodes, including contact nodes.
        """
        command = "PRNLD,%s,%s,%s" % (str(lab), str(tol), str(item))
        return self.run(command, **kwargs)

    def bftran(self, **kwargs):
        """APDL Command: BFTRAN

        Transfers solid model body force loads to the finite element model.

        Notes
        -----
        Body loads are transferred from selected keypoints and lines to
        selected nodes and from selected areas and volumes to selected
        elements.  The BFTRAN operation is also done if the SBCTRAN command is
        either explicitly issued or automatically issued upon initiation of the
        solution calculations [SOLVE].

        This command is also valid in PREP7.
        """
        command = "BFTRAN,"
        return self.run(command, **kwargs)

    def mapvar(self, option="", matid="", istrtstress="", ntenstress="",
               istrtstrain="", ntenstrain="", istrtvect="", nvect="",
               **kwargs):
        """APDL Command: MAPVAR

        Defines tensors and vectors in user-defined state variables for
        rezoning and in 2-D to 3-D analyses.

        Parameters
        ----------
        option
            DEFINE

            DEFINE - Define variables for the specified MatId material ID (default).

            LIST - List the defined variables for the specified MatId material ID.

        matid
            The material ID for the state variables which you are defining
            (Option = DEFINE) or listing (Option = LIST).

        istrtstress
            The start position of stress-like tensors in the state variables.
            This value must be either a positive integer or 0 (meaning no
            stress-like tensors).

        ntenstress
            The number of stress-like tensors in the state variables. This
            value must be either a positive integer (or 0), and all stress-like
            tensors must be contiguous.

        istrtstrain
            The start position of strain-like tensors in the state variables.
            This value must be either a positive integer or 0 (meaning no
            strain-like tensors).

        ntenstrain
            The number of strain-like tensors in the state variables. This
            value must be either a positive integer (or 0), and all strain-like
            tensors must be contiguous.

        istrtvect
            The start position of vectors in the state variables. This value
            must be either a positive integer or 0 (meaning no vectors).

        nvect
            The number of vectors in the state variables. This value must be
            either a positive integer (or 0), and all vectors must be
            contiguous.

        Notes
        -----
        The MAPVAR command identifies the tensors and vectors in user-defined
        state variables (TB,STATE) for user-defined materials (TB,USER and
        UserMat or UserMatTh) or user-defined creep laws (TB,CREEP,,,,100 and
        UserCreep).

        The command ensures that user-defined state variables are mapped
        correctly during rezoning and in 2-D to 3-D analyses.

        In a rezoning operation, MAPVAR must be issued after remeshing
        (REMESH,FINISH) but before mapping (MAPSOLVE).
        """
        command = "MAPVAR,%s,%s,%s,%s,%s,%s,%s,%s" % (str(option), str(matid), str(istrtstress), str(ntenstress), str(istrtstrain), str(ntenstrain), str(istrtvect), str(nvect))
        return self.run(command, **kwargs)

    
    def pdpinv(self, rlab="", name="", prob="", conf="", **kwargs):
        """APDL Command: PDPINV

        Prints the result of the inversion of a probability.

        This command is no longer supported in V18.2 and newer

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses).

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable or a random output parameter with the PDVAR
            command.

        prob
            Target probability for which the random parameter value should be
            determined.

        conf
            Confidence level. The confidence level is used to print the
            confidence bounds on the random parameter value. The value for the
            confidence level must be between 0.0 and 1.0 and it defaults to
            0.95 (95%). Printing of confidence bound is suppressed for CONF
            0.5. This parameter is ignored for response surface methods results
            postprocessing.

        Notes
        -----
        Prints the value for the random parameter Name at which the probability
        that there are simulation values lower than that value is equal to
        PROB. This corresponds to an inversion of the cumulative distribution
        function (see PDCDF command) at a given probability. In this sense the
        PDPINV is doing the opposite of the PDPROB command. The PDPROB command
        evaluates a probability for a given random parameter value and the
        PDPINV command evaluates the random parameter value that corresponds to
        a given probability.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        The confidence level is a probability expressing the confidence that
        the value for the requested result is in fact between the confidence
        bounds. The larger the confidence level, the wider the confidence
        bounds. Printing the confidence bounds only makes sense for
        postprocessing Monte Carlo simulation results, where the confidence
        bounds represent the accuracy of the results. With increasing sample
        sizes, the width of the confidence bounds gets smaller for the same
        confidence level. For response surface analysis methods, the number of
        simulations done on the response surface is usually very large;
        therefore, the accuracy of the results is determined by the response
        surface fit and not by the confidence level.

        The PDPINV command cannot be used to postprocess the results in a
        solution set that is based on Response Surface Methods, only Monte
        Carlo Simulations.
        """
        return self.run(f"PDPINV,{rlab},{name},{prob},,{conf}", **kwargs)

    
    def plls(self, labi="", labj="", fact="", kund="", viewup="", **kwargs):
        """APDL Command: PLLS

        Displays element table items as contoured areas along elements.

        Parameters
        ----------
        labi
            Label of element table item (ETABLE) for node I magnitude.

        labj
            Label of element table item for node J magnitude.

        fact
            Scale factor for display (defaults to 1).  A negative scaling
            factor may be used to invert the display.

        kund
            Undisplaced shape key:

            0 - Display selected items on undeformed shape.

            1 - Display selected items on deformed shape.

        viewup
            View Up key:

            0 - Ignore the view-up (/VUP) vector when calculating trapezoid orientation
                (default).

            1 - Use the view-up (/VUP) vector to calculate trapezoid orientation.

        Notes
        -----
        Displays selected items (such as shears and moments) as a contoured
        area (trapezoid) display along line elements and 2-D axisymmetric shell
        elements (such as shear and moment diagrams).  Three sides of the
        trapezoid are formed by the element (one side) and lines at nodes I and
        J of length proportional to the item magnitude and displayed normal to
        the element and the viewing direction (the two parallel sides).

        When ViewUP = 1, the trapezoid is oriented within the plane created by
        the element and the global Cartesian coordinate system reference
        orientation (/VUP or view up) vector. In this case, the program does
        not perform the calculation involving the element and view direction.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "PLLS,%s,%s,%s,%s,%s" % (str(labi), str(labj), str(fact), str(kund), str(viewup))
        return self.run(command, **kwargs)

    def lspec(self, lcolor="", linstl="", xlnwid="", **kwargs):
        """APDL Command: /LSPEC

        Specifies annotation line attributes (GUI).

        Parameters
        ----------
        lcolor
            Line color:

            0 - Black

            1 - Red-Magenta

            2 - Magenta

            3 - Blue-Magenta

            4 - Blue

            5 - Cyan-Blue

            6 - Cyan

            7 - Green-Cyan

            8 - Green

            9 - Yellow-Green

            10 - Yellow

            11 - Orange

            12 - Red

            13 - Dark Gray

            14 - Light Gray

            15 - White

        linstl
            Line style:

            0 - Solid line.

            1 - Dashed line.

        xlnwid
            Line width multiplier (1.0 to 20.0).  Defaults to 1.0.

        Notes
        -----
        Specifies annotation line attributes to control certain characteristics
        of the lines created via the /LINE, /LARC, /LSYMBOL, /POLYGON, /PMORE,
        /PCIRCLE, and /PWEDGE commands.  This is a command generated by the
        Graphical User Interface (GUI) and will appear in the log file
        (Jobname.LOG) if annotation is used.  This command is not intended to
        be typed in directly in an ANSYS session (although it can be included
        in an input file for batch input or for use with the /INPUT command).

        This command is valid in any processor.
        """
        command = "/LSPEC,%s,%s,%s" % (str(lcolor), str(linstl), str(xlnwid))
        return self.run(command, **kwargs)

    def cecmod(self, neqn="", const="", **kwargs):
        """APDL Command: CECMOD

        Modifies the constant term of a constraint equation during solution.

        Parameters
        ----------
        neqn
            Reference number of constraint equation.

        const
            New value of the constant term of equation.

        Notes
        -----
        Other terms of the constraint equation cannot be changed during the
        solution phase, but must be defined or changed within PREP7 prior to
        the solution.  See the CE command for details.

        This command is also valid in PREP7.
        """
        command = "CECMOD,%s,%s" % (str(neqn), str(const))
        return self.run(command, **kwargs)

    def mfci(self, val1="", val2="", **kwargs):
        """APDL Command: MFCI

        Sets the control parameters used by the conservative (CPP)
        interpolation scheme.

        Parameters
        ----------
        val1
            Controls the pixel resolution. The higher the resolution, the more
            accurate and more expensive the conservative (CPP) interpolation
            will be. Valid values are 10 to 256; defaults to 100.

        val2
            The separation factor to handle any gap between the two surfaces.
            It is a relative measure of the gap, normalized by the averaged
            element face sizes from both sides of the interface. Defaults to
            0.1.

        Notes
        -----
        In a conservative (CPP) interpolation scheme as specified on the
        MFLCOMM command, each element face is first divided into n number of
        faces, where n is the number of nodes on the face. The three-
        dimensional faces are then converted onto a two-dimensional polygon
        made up of rows and columns of dots called pixels. By default, these
        pixels have a resolution of 100 x 100; use VAL1 to increase the
        resolution and improve the accuracy of the algorithm. See Load
        Interpolation in the Coupled-Field Analysis Guide for more information
        on interpolation schemes and adjusting the pixel resolution for the
        conservative interpolation scheme.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFCI,%s,%s" % (str(val1), str(val2))
        return self.run(command, **kwargs)

    
    def torq2d(self, **kwargs):
        """APDL Command: TORQ2D

        Calculates torque on a body in a magnetic field.

        Notes
        -----
        TORQ2D invokes an ANSYS macro which calculates mechanical torque on a
        body in a magnetic field.  The body must be completely surrounded by
        air (symmetry permitted), and a closed path [PATH] passing through the
        air elements surrounding the body must be available.  A
        counterclockwise ordering of nodes on the PPATH command will give the
        correct sign on the torque result.  The macro is valid for 2-D planar
        analysis.

        The calculated torque is stored in the parameter TORQUE.  A node plot
        showing the path is produced in interactive mode.  The torque is
        calculated using a Maxwell stress tensor approach.  Path operations are
        used for the calculation, and all path items are cleared upon
        completion.  See the TORQC2D command for torque calculation based on a
        circular path.
        """
        command = "TORQ2D,"
        return self.run(command, **kwargs)

    def cnvtol(self, lab="", value="", toler="", norm="", minref="", **kwargs):
        """APDL Command: CNVTOL

        Sets convergence values for nonlinear analyses.

        Parameters
        ----------
        lab
            Valid convergence labels. If STAT, list the status of the currently
            specified criteria.

        value
            Typical reference value for the specified convergence label (Lab).

        toler
            Tolerance; defaults to 0.005 (0.5%) for force and moment, 1.0E-4
            (0.01%) for DVOL, 0.05 (5%) for displacement when rotational DOFs
            are not present, and 0.05 (5%) for HDSP.

        norm
            Specifies norm selection:

            2 - L2 norm (check SRSS value). Default, except for Lab = U.

            1 - L1 norm (check absolute value sum).

            0 - Infinite norm (check each DOF separately). Default for Lab = U.

        minref
            The minimum value allowed for the program calculated reference
            value. If negative, no minimum is enforced. Used only if VALUE is
            blank. Defaults to 0.01 for force, moment, and volume convergence,
            1.0E-6 for heat flow, 1.0E-12 for VLTG and CHRG, 1.0E-6 for HDSP,
            and 0.0 otherwise.

        Notes
        -----
        This command is usually not needed because the default convergence
        criteria are sufficient for most nonlinear analyses. In rare cases, you
        may need to use this command to diagnose convergence difficulties.

        Values may be set for the degrees of freedom (DOF) and/or the out-of-
        balance load for the corresponding forcing quantities.

        Issuing CNVTOL to set a convergence criterion for a specific
        convergence label (Lab) does not affect the convergence criterion for
        any other label. All other convergence criteria will remain at their
        default setting or at the value set by a previous CNVTOL command.

         When the GUI is on, if a "Delete" operation in a Nonlinear Convergence
        Criteria dialog box writes this command to a log file (Jobname.LOG or
        Jobname.LGW), you will observe that Lab is blank, VALUE = -1, and TOLER
        is an integer number.  In this case, the GUI has assigned a value of
        TOLER that corresponds to the location of a chosen convergence label in
        the dialog box's list.  It is not intended that you type in such a
        location value for TOLER in an ANSYS session.  However, a file that
        contains a GUI-generated CNVTOL command of this form can be used for
        batch input or with the /INPUT command.

        Convergence norms specified with CNVTOL may be graphically tracked
        while the solution is in process using the ANSYS program's Graphical
        Solution Tracking (GST) feature.  Use the /GST command to turn GST on
        or off.  By default, GST is ON for interactive sessions and OFF for
        batch runs.

        This command is also valid in PREP7.
        """
        command = "CNVTOL,%s,%s,%s,%s,%s" % (str(lab), str(value), str(toler), str(norm), str(minref))
        return self.run(command, **kwargs)

    
    
    def upcoord(self, factor="", key="", **kwargs):
        """APDL Command: UPCOORD

        Modifies the coordinates of the active set of nodes, based on the
        current displacements.

        Parameters
        ----------
        factor
            Scale factor for displacements being added to nodal coordinates.
            If FACTOR = 1.0, the full displacement value will be added to each
            node, 0.5, half the displacement value will be added, etc.  If
            FACTOR = -1, the full displacement value will be subtracted from
            each node, etc.

        key
            Key for zeroing displacements in the database:

            OFF - Do not zero the displacements (default).

            ON - Zero the displacements.

        Notes
        -----
        The UPCOORD command uses displacements stored in the ANSYS database,
        and not those contained within the results file, Jobname.RST.  Nodal
        coordinates are updated each time the command is issued.  After
        updating, both the nodal displacements and rotations are set to zero if
        Key = ON.

        For structural solutions with an updated mesh, unless the coefficient
        matrix is otherwise reformed (e.g., a new analysis or NLGEOM,ON) it
        should first be reformed by issuing a KUSE,-1 command.

        UPCOORD should not be issued between load steps in structural analysis.

        For a multiphysics simulation where a CFD or electromagnetic field is
        being coupled to a structure undergoing large displacements, all (or a
        portion) of the surrounding field mesh may take part in the structural
        solution to "move" with the displacing structure.  You can use the
        UPCOORD command with a suitable FACTOR to update the coordinates of the
        nodes using the newly computed displacements.  The mesh will now
        conform with the displaced structure for subsequent field solutions.
        However, the mesh should always be restored to its original location by
        using an UPCOORD,FACTOR command before performing any subsequent
        structural solutions.  This is true for both repeated linear solutions,
        and for nonlinear restarts. (All saved displacements are relative to
        the original mesh location.)

        This command is not intended to replace either the large displacement
        or birth and death logic.

        This command is also valid in PREP7.
        """
        command = "UPCOORD,%s,%s" % (str(factor), str(key))
        return self.run(command, **kwargs)

    
    def freq(self, freq1="", freq2="", freq3="", freq4="", freq5="", freq6="",
             freq7="", freq8="", freq9="", **kwargs):
        """APDL Command: FREQ

        Defines the frequency points for the SV vs. FREQ tables.

        Parameters
        ----------
        freq1, freq2, freq3, . . . , freq9
            Frequency points for SV vs. FREQ tables.  Values must be in
            ascending order. FREQ1 should be greater than zero.  Units are
            cycles/time.

        Notes
        -----
        Repeat the FREQ command for additional frequency points (100 maximum).
        Values are added after the last nonzero frequency.  If all fields
        (FREQ1 -- FREQ9) are blank, erase SV vs. FREQ tables.

        Frequencies must be in ascending order.

        Spectral values are input with the SV command and interpreted according
        to the SVTYP command.  Applies only to the SPRS (single-point) option
        of the SPOPT command.  See the SPFREQ command for frequency input in
        MPRS (multi-point) analysis.

        Use the STAT command to list current frequency points.

        This command is also valid in PREP7.
        """
        command = "FREQ,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(freq1), str(freq2), str(freq3), str(freq4), str(freq5), str(freq6), str(freq7), str(freq8), str(freq9))
        return self.run(command, **kwargs)

    def graphics(self, key="", **kwargs):
        """APDL Command: /GRAPHICS

        Defines the type of graphics display.

        Parameters
        ----------
        key
            Graphics key:

            FULL - Display all model geometry and results.

            POWER - Activate PowerGraphics (default when GUI is on).

        Notes
        -----
        The /GRAPHICS command specifies the type of graphics display. Key =
        POWER activates the PowerGraphics capability. PowerGraphics offers
        faster plotting than the Key = FULL option, and speeds up element,
        results, area, line, and volume displays. PowerGraphics mode (the
        default) is automatically invoked when the GUI is accessed. This action
        supersedes all prior macros or start up routines (start.ans,
        config.ans, etc.). Full graphics mode can be accessed only by issuing
        /GRAPHICS, FULL after the GUI is active.

        Results values (both printed and plotted) may differ between the Key =
        FULL and Key = POWER options because each option specifies a different
        set of data for averaging and display. For Key = FULL, all element and
        results values (interior and surface) are included.  For Key = POWER,
        only element and results values along the model exterior surface are
        processed.

        Caution:: : If you have specified one facet per element edge for
        PowerGraphics displays (via the /EFACET command or via choices from the
        General Postproc or Utility Menus), PowerGraphics does not plot midside
        nodes.

        The /EFACET command is only applicable to element type displays. (See
        the descriptions of these commands for more information.)

        Maximum values shown in plots can differ from printed maximum values.
        This is due to different averaging schemes used for plotted and printed
        maximum values.

        PowerGraphics displays do not average at geometric discontinuities. The
        printouts in PowerGraphics will, however, provide averaging information
        at geometric discontinuities if the models do not contain shell
        elements. Carefully inspect the data you obtain at geometric
        discontinuities.

        PowerGraphics does not support the following diffusion analysis
        results: CONC, CG, DF, EPDI.

        Note:: : In Full Graphics mode, it is possible to deselect an
        individual node, select all elements (including the element that
        contains that node), and then perform postprocessing calculations on
        those elements and have that unselected node not be considered in those
        calculations.  However, if PowerGraphics is active, postprocessing
        always displays based on selected elements.

        PowerGraphics does not support membrane shell elements such as SHELL41,
        and these elements using the membrane-stiffness-only option (KEYOPT1) =
        1): SHELL181, SHELL208, and SHELL209.

        Commands that are not supported by PowerGraphics are listed below.
        These commands are executed using the Key = FULL option, regardless of
        whether PowerGraphics is activated.  Only certain options for /CTYPE,
        /EDGE, /ESHAPE, *GET, /PNUM, /PSYMB, SHELL, and *VGET are not supported
        by PowerGraphics.  (See the descriptions of these commands for more
        information.)
        """
        command = "/GRAPHICS,%s" % (str(key))
        return self.run(command, **kwargs)

    
    def msolve(self, numslv="", nrmtol="", nrmchkinc="", **kwargs):
        """APDL Command: MSOLVE

        Starts multiple solutions for random acoustics analysis with diffuse
        sound field.

        Parameters
        ----------
        numslv
            Number of multiple solutions (load steps) corresponding to the
            number of samplings. Default = 1.

        Notes
        -----
        The MSOLVE command starts multiple solutions (load steps) for random
        acoustics analysis with multiple samplings.

        The process is controlled by the norm convergence tolerance NRMTOL or
        the number of multiple solutions NUMSLV (if the solution steps reach
        the defined number).

        The program checks the norm convergence by comparing two averaged sets
        of radiated sound powers with the interval NRMCHKINC over the frequency
        range. For example, if NRMCHKINC = 5, the averaged values from 5
        solutions are compared with the averaged values from 10 solutions, then
        the averaged values from 10 solutions are compared with the averaged
        values from 15 solutions, and so on.

        The incident diffuse sound field is defined via the DFSWAVE command.

        The average result of multiple solutions with different samplings is
        calculated via the PLST command.
        """
        command = "MSOLVE,%s,%s,%s" % (str(numslv), str(nrmtol), str(nrmchkinc))
        return self.run(command, **kwargs)

    def andata(self, delay="", ncycl="", rsltdat="", min_="", max_="", incr="",
               frclst="", autocont="", autocntr="", **kwargs):
        """APDL Command: ANDATA

        Displays animated graphics data for nonlinear problems.

        Parameters
        ----------
        delay
            Time delay during animation (defaults to 0.5 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        rsltdat
            The type of results data to be used for the animation sequence.
            This can be:

            0 - Current load step data (default).

            1 - Range of load step data.

            2 - Range of results data.

        min\_
            The range minimum value.  If left blank or 0, defaults to the first
            data point.

        max\_
            The range maximum value.  If left blank or 0, defaults to the last
            data point.

        incr
            The increment between result data (defaults to 1).

        frclst
            Key to force the last sub step in a selected load step to be
            included in the animation (defaults to 0).

        autocont
            A value of 1 enables automatic scaling of contour values based on
            the overall subset range of values. The default value is 0 (no
            automatic scaling).

        autocntr
            A value of 1 disables automatic centering of displaced plots. The
            default value is 0 (allow automatic centering).

        Notes
        -----
        Use the ANDATA command to create animations for nonlinear problems. The
        command works by displaying an individual graphical image for each
        result data set from the results file. For information about creating
        animations for linear problems, see the ANIM command.

        The command operates only on graphic display platforms supporting the
        /SEG command. It uses a macro to produce an animation based on the last
        plot action command (for example, PLDISP).

        The results file must have more than one set of results.

        The command implicitly issues /DSCALE, 1 for default displacement
        scaling. Large displacements may not give good results.

        This command functions only in the postprocessor.
        """
        command = f"ANDATA,{delay},{ncycl},{rsltdat},{min_},{max_},{incr},{frclst},{autocont},,{autocntr}"
        return self.run(command, **kwargs)

    def dmpstr(self, coeff="", **kwargs):
        """APDL Command: DMPSTR

        Sets a constant structural damping coefficient.

        Parameters
        ----------
        coeff
            Structural damping coefficient.

        Notes
        -----
        Sets a constant structural (or hysteretic) damping coefficient for use
        in harmonic (ANTYPE,HARMIC) analyses (FULL, MSUP, and VT) and modal
        analyses (ANTYPE,MODAL with MODOPT,UNSYM, DAMP or QRDAMP).

        Note that for structures with multiple materials, MP,DMPR can also be
        used to specify constant structural material damping on a per material
        basis. Note that if both DMPSTR and MP,DMPR are specified, the damping
        effects are additive.

        Caution:: : DMPSTR adds the damping contribution as gK, whereas MP,DMPR
        adds the contribution on a per-material basis as 2gK. For more
        information, see Damping Matrices in the Mechanical APDL Theory
        Reference.

        This command is also valid in PREP7.
        """
        command = "DMPSTR,%s" % (str(coeff))
        return self.run(command, **kwargs)

    def zoom(self, wn="", lab="", x1="", y1="", x2="", y2="", **kwargs):
        """APDL Command: /ZOOM

        Zooms a region of a display window.

        Parameters
        ----------
        wn
            Window number to which command applies (defaults to 1).

        lab
            Label to define the desired type of zoom:

            OFF - Turns zoom off (refits image of entire model to the window).

            BACK - Goes back to previous zoom setting (five successive back ups, maximum).

            SCRN - Interprets X1,Y1 as the screen coordinates of the center of a square zoom
                   region; X2,Y2 as the screen coordinates of a point on one
                   side of that square.

            RECT - Interprets X1,Y1 and X2,Y2 as the screen coordinates of two opposite corners of
                   a rectangular zoom region.

        Notes
        -----
        Zooms (centers and magnifies) the specified region of a display window.
        /ZOOM will operate on a display that has been formed by an explicit
        graphics action command (APLOT, EPLOT, etc.).  /ZOOM has no effect on
        an "immediate" graphics display.  When /ZOOM is executed, the display
        is automatically replotted such that the specified zoom region is
        centered and sized to fill the window.

        Auto resizing is disabled when you issue the /ZOOM command.  To restore
        auto resizing, issue the  /AUTO command, or select FIT from the Pan,
        Zoom, Rotate box.

        This command is valid in any processor.
        """
        command = "/ZOOM,%s,%s,%s,%s,%s,%s" % (str(wn), str(lab), str(x1), str(y1), str(x2), str(y2))
        return self.run(command, **kwargs)

    def djlist(self, elem="", **kwargs):
        """APDL Command: DJLIST

        Lists boundary conditions applied to joint elements.

        Parameters
        ----------
        elem
            Element number or ALL (or blank). Lists joint element boundary
            conditions on the specified element(s).

        Notes
        -----
        This command is valid for MPC184 joint elements. See DJ for information
        on specifying boundary conditions on joint elements.
        """
        command = "DJLIST,%s" % (str(elem))
        return self.run(command, **kwargs)

    
    
    def lsoper(self, **kwargs):
        """APDL Command: LSOPER

        Specifies "Load step operations" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "LSOPER,"
        return self.run(command, **kwargs)

    def number(self, nkey="", **kwargs):
        """APDL Command: /NUMBER

        Specifies whether numbers, colors, or both are used for displays.

        Parameters
        ----------
        nkey
            Numbering style:

             0  - Color (terminal dependent) the numbered items and show numbers.

             1  - Color the numbered items.  Do not show the numbers.

             2  - Show the numbers.  Do not color the items.

            -1  - Do not color the items or show the numbers. For contour plots, the resulting
                  display will vary (see below).

        Notes
        -----
        Specifies whether numbers, colors, or both are used for numbering
        displays [/PNUM] of nodes, elements, keypoints, lines, areas, and
        volumes.

          Shading is also available for terminals configured with more than 4
        color planes [/SHOW].  Color automatically appears for certain items
        and may be manually controlled (off or on) for other items.

        When you suppress color (NKEY = -1) your contour plots will produce
        different results, depending on your graphics equipment. For non-3-D
        devices (X11, Win32, etc.) your contour plot will be white (no color).
        For 3-D devices, such as OpenGL, the resulting display will be in
        color.

        The following items are automatically given discrete colors:  Boundary
        condition symbols [/PBC], curves on graph displays, and distorted
        geometry on postprocessing displays.  Contour lines in postprocessing
        displays are automatically colored based upon a continuous, rather than
        a discrete, spectrum so that red is associated with the highest contour
        value.  On terminals with raster capability [/SHOW], the area between
        contour lines is filled with the color of the higher contour.

        Explicit entity colors or the discrete color mapping may be changed
        with the /COLOR command.

        This command is valid in any processor.
        """
        command = "/NUMBER,%s" % (str(nkey))
        return self.run(command, **kwargs)

    def pmore(self, x5="", y5="", x6="", y6="", x7="", y7="", x8="", y8="",
              **kwargs):
        """APDL Command: /PMORE

        Creates an annotation polygon (GUI).

        Parameters
        ----------
        x5
            X location for vertex 5 of polygon (-1.0 < X < 2.0).

        y5
            Y location for vertex 5 of polygon (-1.0 < Y < 1.0).

        x6
            X location for vertex 6 of polygon (-1.0 < X < 2.0).

        y6
            Y location for vertex 6 of polygon (-1.0 < Y < 1.0).

        x7
            X location for vertex 7 of polygon (-1.0 < X < 2.0).

        y7
            Y location for vertex 7 of polygon (-1.0 < Y < 1.0).

        x8
            X location for vertex 8 of polygon (-1.0 < X < 2.0).

        y8
            Y location for vertex 8 of polygon (-1.0 < Y < 1.0).

        Notes
        -----
        Defines the 5th through 8th vertices of an annotation polygon
        [/POLYGON].  This is a command generated by the Graphical User
        Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        This command is valid in any processor.
        """
        command = "/PMORE,,%s,%s,%s,%s,%s,%s,%s,%s" % (str(x5), str(y5), str(x6), str(y6), str(x7), str(y7), str(x8), str(y8))
        return self.run(command, **kwargs)

    def vcone(self, wn="", phi="", **kwargs):
        """APDL Command: /VCONE

        Defines the view cone angle for perspective displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        phi
            View cone angle (0.0 to 85.°) to define perspective.  Use PHI =
            45.0° for typical perspective.   Increase angle for more
            perspective, decrease angle for less.  If the distance [/DIST] is
            not specified, it will be automatically calculated to give full
            window magnification.  If the distance is also specified, PHI
            controls both the perspective and the magnification.  The larger
            the angle, the more the perspective and the less the magnification.
            Defaults to 0.0 (no perspective).

        Notes
        -----
        Perspective shows the true depth of the object in the display.  A
        variable magnification results since the back plane of the object is
        further from the observer than the front plane.  The largest
        magnification occurs at the front plane.  With perspective, the
        magnification factor (MAGF) is not only a function of the distance from
        the object, but also the window shape and the perspective (or view
        cone) angle: Φ as follows:

        where , for square windows, is the largest in-plane vertical or
        horizontal dimension, d is the distance from the observer to the plane
        of:  (usually the front plane of the object), and: Φ is the view cone
        angle (defined with the /VCONE command).  The bigger the cone angle,
        the more the perspective.  The magnification factor proportionally
        decreases with increasing: Φ.  The distance can be defined with the
        /DIST or the /FOCUS command.  Note, the distance input on the /DIST
        command is equal to d only if the focus point is located on the plane
        of : .  It is recommended that if a general perspective is desired
        (i.e., not any specific cone angle), use Φ = 45.0 (since TAN(45.0) =
        1.0) and let the d value be automatically calculated for full window
        magnification.

        Note that any number of /DIST, /FOCUS, and /VCONE combinations can be
        used to produce the same magnification.  Distances less than the object
        depth will produce views from within the object.

        A magnification factor of 1.0 just fills the window.  If the automatic
        scaling option is used [/AUTO], the magnification factor is fixed at
        0.91 (to allow a 10% margin around the object) and d is automatically
        calculated for the given /VCONE and /FOCUS values.  Any value of Φ
        between 0.0 and 85.0 (usually 45.0) may be used to activate the
        perspective.  Views from inside the object are not possible when d is
        automatically calculated (use manual scaling [/USER] along with /DIST
        specification).

        This command is valid in any processor.
        """
        command = "/VCONE,%s,%s" % (str(wn), str(phi))
        return self.run(command, **kwargs)

    def mxpand(self, nmode="", freqb="", freqe="", elcalc="", signif="",
               msupkey="", modeselmethod="", **kwargs):
        """APDL Command: MXPAND

        Specifies the number of modes to expand and write for a modal or
        buckling analysis.

        Parameters
        ----------
        nmode
            Number of modes or array name (enclosed in percent signs) to expand
            and write. If blank or ALL, expand and write all modes within the
            frequency range specified. If -1, do not expand and do not write
            modes to the results file during the analysis. If an array name is
            input, the array must contain 1 for the expanded modes and zero
            otherwise, where the array index corresponds to the mode number. To
            specify an array containing the individual modes to expand, enclose
            the array name in percent (%) signs (for example,
            MXPAND,%arrname%). Use the *DIM command to define the array.

        freqb
            Beginning, or lower end, of frequency range of interest. If FREQB
            and FREQE are both blank, expand and write the number of modes
            specified without regard to the frequency range. Defaults to the
            entire range.

        freqe
            Ending, or upper end, of frequency range of interest.

        elcalc
            Element calculation key:

            NO - Do not calculate element results, reaction forces, and energies (default).

            YES - Calculate element results, reaction forces, energies, and the nodal degree of
                  freedom solution.

        signif
            Expand only those modes whose significance level exceeds the SIGNIF
            threshold (only applicable when ModeSelMethod is defined).

        msupkey
            Element result superposition key:

            NO - Do not write element results to the mode file Jobname.MODE.

            YES - Write element result to the mode file for use in the expansion pass of a
                  subsequent mode-superposition PSD, transient, or harmonic
                  analysis (default if Elcalc = YES and the mode shapes are
                  normalized to the mass matrix).

        modeselmethod
            Methods for mode selection (not supported for complex
            eigensolvers):

            blank - No mode selection is performed (default).

            MODM - The mode selection is based on the modal effective masses.

            MODC - The mode selection is based on the mode coefficients.

            DDAM - The mode selection is based on DDAM procedure (see Mode Selection Based on DDAM
                   Procedure in the Mechanical APDL Structural Analysis Guide
                   for more information). This option is applicable only to
                   DDAM spectrum analysis.

        Notes
        -----
        Specifies the number of modes to expand and write over a frequency
        range for a modal (ANTYPE,MODAL) or buckling (ANTYPE,BUCKLE) analysis.
        If used in SOLUTION, this command is valid only within the first load
        step.

        There is no limit on the number of expanded modes (NMODE). However,
        there is a limit on the maximum number of modes used via the *GET,,MODE
        command, mode combinations, and the MDAMP command.

        With MSUPkey = YES, the computed element results (Elcalc = YES) are
        written to Jobname.MODE for use in subsequent downstream mode-
        superposition analyses, including harmonic, transient, and PSD
        analyses. This significantly reduces computation time for the
        combination or expansion passes. For limitations, see Option: Number of
        Modes to Expand (MXPAND) in the Mechanical APDL Structural Analysis
        Guide.

        If a mode selection method (ModeSelMethod) is defined, only the
        selected modes will be expanded. See Using Mode Selection in the
        Mechanical APDL Structural Analysis Guide for more details about the
        procedure.

        For array input (NMODE), the array must be dimensioned to be the size
        of the number of modes extracted (NMODE on the MODOPT command). A value
        of 1 in the array indicates the mode is to be expanded, and a value of
        0 indicates not to expand the mode. For the DAMP modal solution, the
        modes are in pairs, so be sure to verify that both modes of a pair have
        the same value. (For example, if modes #3 and #4 are a pair, indices 3
        and 4 in the array should have the same value, 0 or 1.)

        For linear perturbation modal analyses, you must set both Elcalc and
        MSUPkey to YES so that the downstream stress expansion pass can produce
        a solution consistent with the linear or nonlinear base (static or full
        transient) analysis. The prestressed nonlinear element history (saved
        variables) is accessible only in the first and second phases of the
        linear perturbation. The downstream MSUP or PSD analysis can only reuse
        the nonlinear information contained in the Jobname.MODE file that is
        generated in the linear perturbation.

        In a Distributed ANSYS analysis, you must issue MXPAND to specify the
        number of modes to expand when computing the modes and mode shapes. In
        a Distributed ANSYS run, MXPAND cannot be issued in an expansion pass
        (EXPASS).

        This command is also valid in PREP7.
        """
        command = "MXPAND,%s,%s,%s,%s,%s,%s,%s" % (str(nmode), str(freqb), str(freqe), str(elcalc), str(signif), str(msupkey), str(modeselmethod))
        return self.run(command, **kwargs)

    def anmode(self, nfram="", delay="", ncycl="", kaccel="", **kwargs):
        """APDL Command: ANMODE

        Produces an animated sequence of a mode shape.

        Parameters
        ----------
        nfram
            Number of frames captures (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        kaccel
            Acceleration type:

            0 - Linear acceleration.

            1 - Sinusoidal acceleration.

        Notes
        -----
        ANMODE involves an ANSYS macro which produces an animation of mode
        shape of the last plot action command (for example, PLDISP).  The
        ANMODE command operates only on graphic display platforms supporting
        the /SEG command.  After executing ANMODE, you can replay the animated
        sequence by issuing the ANIM command.

        This command functions only in the postprocessor.
        """
        command = "ANMODE,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(kaccel))
        return self.run(command, **kwargs)

    
    
    def dj(self, elem="", label="", value="", **kwargs):
        """APDL Command: DJ

        Specifies boundary conditions on the components of relative motion of a
        joint element.

        Parameters
        ----------
        elem
            Element number or ALL to be specified.

        label
            Valid labels are:

            UX - Displacement in local x direction.

            UY - Displacement in local y direction.

            UZ - Displacement in local z direction.

            ROTX - Rotation about local x axis.

            ROTY - Rotation about local y axis.

            ROTZ - Rotation about local y axis.

            VELX - Linear velocity in local x direction.

            VELY - Linear velocity in local y direction.

            VELZ - Linear velocity in local z direction.

            OMGX - Angular velocity in local x direction.

            OMGY - Angular velocity in local y direction.

            OMGZ - Angular velocity in local z direction.

            ACCX - Linear acceleration in local x direction.

            ACCY - Linear acceleration in local y direction.

            ACCZ - Linear acceleration in local z direction.

            DMGX - Angular acceleration in local x direction.

            DMGY - Angular acceleration in local y direction.

            DMGZ - Angular acceleration in local z direction.

        value
            Value of the label.

        Notes
        -----
        This command is valid for MPC184 joint elements. See DJDELE for
        information on deleting boundary conditions applied with the DJ
        command.

        You can apply only one displacement, velocity, or acceleration load at
        any relative degree of freedom. If multiple loads are specified, the
        last applied load overrides the previous ones. For example, the
        following commands apply loads to element 100:

        In this case, the velocity load (VELX) applied in the last command will
        override the displacement load (UX).

        Tabular boundary conditions (VALUE = %tabname%) can be used.

        %_FIX% is an ANSYS reserved table name. When VALUE is set to %_FIX%,
        ANSYS will prescribe the degree of freedom to the "current" relative
        displacement value. This option is only valid for the following labels:
        UX, UY, UZ, ROTX, ROTY, ROTZ. In most cases, %_FIX% usage is efficient
        and recommended for all structural degrees of freedom.
        """
        command = "DJ,%s,%s,%s" % (str(elem), str(label), str(value))
        return self.run(command, **kwargs)

    def plzz(self, rotvel="", deltarotvel="", **kwargs):
        """APDL Command: PLZZ

        Plots the interference diagram from a cyclic modal analysis.

        Parameters
        ----------
        rotvel
            Rotational speed in revolutions per minute (RPM) used to define the
            speed line. If blank, use the rotational speed (from OMEGA)
            specified in the prestressing step of the linear perturbation
            analysis. If explicitly input as 0, or if the linear perturbation
            was not used, no speed lines are plotted.

        deltarotvel
            Adds speed lines about the RotVel speed line corresponding to
            RotVel ± DeltaRotVel. Only plotted if RotVel is known.

        Notes
        -----
        PLZZ plots the cyclic modal frequencies as points on a frequency vs.
        harmonic index (nodal diameter) graph. If rotational speed (RotVel) is
        provided, the speed line is also plotted, leading to the interference
        diagram (also known as the SAFE or ZZENF diagram). If DeltaRotVel is
        also provided, two additional speed lines are plotted, enveloping the
        safe speed line itself.

        For more information, see Postprocessing a Modal Cyclic Symmetry
        Analysis in the Cyclic Symmetry Analysis Guide.
        """
        command = "PLZZ,%s,%s" % (str(rotvel), str(deltarotvel))
        return self.run(command, **kwargs)

    def ftran(self, **kwargs):
        """APDL Command: FTRAN

        Transfers solid model forces to the finite element model.

        Notes
        -----
        Forces are transferred only from selected keypoints to selected nodes.
        The FTRAN operation is also done if the SBCTRAN command is issued or
        automatically done upon initiation of the solution calculations
        [SOLVE].

        This command is also valid in PREP7.
        """
        command = "FTRAN,"
        return self.run(command, **kwargs)

    def exunit(self, ldtype="", load="", untype="", name="", **kwargs):
        """APDL Command: EXUNIT

        Specifies the interface load unit labels to be written to the export
        file for ANSYS to CFX transfer.

        Parameters
        ----------
        ldtype
            Load type:

            SURF  - Surface load.

            VOLU  - Volumetric load.

        load
            Surface loads:

            DISP  -  Displacement in a static analysis. Mode shape in a modal analysis.

            TIME  - Time. The unit for frequency is the inverse of the unit for time.

            MASS  -  Mass.

            TEMP  - Temperature.

            HFLU  - Heat flux.

        untype
            Unit type:

            COMM  - Predefined unit

            USER  - User-specified unit

        name
            Commonly used predefined unit name or user-specified unit name.

            SI - International System of units (meter-kilogram-second) (default)

            FT -  English System of units (feet-pound-second)

        Notes
        -----
        This command only specifies which unit labels are to be written to the
        file when the EXPROFILE is issued. It does not perform unit
        conversions.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "EXUNIT,%s,%s,%s,%s" % (str(ldtype), str(load), str(untype), str(name))
        return self.run(command, **kwargs)

    
    def seopt(self, sename="", sematr="", sepr="", sesst="", expmth="",
              seoclvl="", **kwargs):
        """APDL Command: SEOPT

        Specifies substructure analysis options.

        Parameters
        ----------
        sename
            The name (case-sensitive, thirty-two character maximum) assigned to
            the superelement matrix file. The matrix file will be named
            Sename.SUB. This field defaults to Fname on the /FILNAME command.

        sematr
            Matrix generation key:

            1 - Generate stiffness (or conductivity) matrix (default).

            2 - Generate stiffness and mass (or conductivity and specific heat) matrices.

            3 - Generate stiffness, mass and damping matrices.

        sepr
            Print key:

            0 - Do not print superelement matrices or load vectors.

            1 - Print both load vectors and superelement matrices.

            2 - Print load vectors but not matrices.

        sesst
            Stress stiffening key:

            0 - Do not save space for stress stiffening in a later run.

            1 - Save space for the stress stiffening matrix (calculated in a subsequent
                generation run after the expansion pass).

        expmth
            Expansion method for expansion pass:

            BACKSUB - Save necessary factorized matrix files for backsubstitution during subsequent
                      expansion passes (default). This normally results in a
                      large usage of disk space

            RESOLVE - Do not save factorized matrix files. Global stiffness matrix will be reformed
                      during expansion pass. This option provides an effective
                      way to save disk space usage. This option cannot be used
                      if the use pass uses large deflections (NLGEOM,ON).

        seoclvl
            For the added-mass calculation, the ocean level to use when ocean
            waves (OCTYPE,,WAVE) are present:

            ATP - The ocean level at this point in time (default).

            MSL - The mean ocean level.

        Notes
        -----
        The SEOPT command specifies substructure analysis options
        (ANTYPE,SUBSTR).  If used during solution, the command is valid only
        within the first load step.

        When ocean waves (OCTYPE,,WAVE) are present, the SeOcLvL argument
        specifies the ocean height or level to use for the added-mass
        calculation, as the use-run analysis type is unknown during the
        generation run.

        The expansion pass method RESOLVE is not supported with component mode
        synthesis analysis (CMSOPT). ExpMth is automatically set to BACKSUB for
        CMS analysis. The RESOLVE method invalidates the use of the NUMEXP
        command. The RESOLVE method does not allow the computation of results
        based on nodal velocity and nodal acceleration (damping force, inertial
        force, kinetic energy, etc.) in the substructure expansion pass.

        This command is also valid in PREP7.
        """
        command = "SEOPT,%s,%s,%s,%s,%s,%s" % (str(sename), str(sematr), str(sepr), str(sesst), str(expmth), str(seoclvl))
        return self.run(command, **kwargs)

    def eresx(self, key="", **kwargs):
        """APDL Command: ERESX

        Specifies extrapolation of integration point results.

        Parameters
        ----------
        key
            Extrapolation key:

            DEFA - If element is fully elastic (no active plasticity, creep, or swelling
                   nonlinearities), extrapolate the integration point results
                   to the nodes.  If any portion of the element is plastic (or
                   other active material nonlinearity), copy the integration
                   point results to the nodes (default).

            YES - Extrapolate the linear portion of the integration point results to the nodes
                  and copy the nonlinear portion (for example, plastic
                  strains).

            NO - Copy the integration point results to the nodes.

        Notes
        -----
        Specifies whether the solution results at the element integration
        points are extrapolated or copied to the nodes for element and nodal
        postprocessing. The structural stresses, elastic and thermal strains,
        field gradients, and fluxes are affected.  Nonlinear data (plastic,
        creep, and swelling strains) are always copied to the nodes, never
        extrapolated. For shell elements, ERESX applies only to integration
        point results in the in-plane directions.

        This command is also valid in PREP7.
        """
        command = "ERESX,%s" % (str(key))
        return self.run(command, **kwargs)

    
    
    def outres(self, item="", freq="", cname="", nsvar="", dsubres="",
               **kwargs):
        """APDL Command: OUTRES

        Controls the solution data written to the database.

        Parameters
        ----------
        item
            Results item for database and file write control:

            ALL - All solution items except LOCI and SVAR. This behavior is the default.

            CINT - All available results generated by the CINT command

            ERASE - Resets OUTRES specifications to their default values.

            STAT - Lists the current OUTRES specifications.

            BASIC - Write only NSOL, RSOL, NLOAD, STRS, FGRAD, and FFLUX records to the results
                    file and database.

            NSOL - Nodal DOF solution.

            RSOL - Nodal reaction loads.

            V - Nodal velocity (applicable to structural full transient analysis only
                (ANTYPE,TRANS)).

            A - Nodal acceleration (applicable to structural full transient analysis only
                (ANTYPE,TRANS)).

            ESOL - Element solution (includes all items following):

            NLOAD - Element nodal, input constraint, and force loads (also used with the /POST1
                    commands PRRFOR, NFORCE, and FSUM to calculate reaction
                    loads).

            STRS - Element nodal stresses.

            EPEL - Element elastic strains.

            EPTH - Element thermal, initial, and swelling strains.

            EPPL - Element plastic strains.

            EPCR - Element creep strains.

            EPDI - Element diffusion strains.

            FGRAD - Element nodal gradients.

            FFLUX - Element nodal fluxes.

            LOCI - Integration point locations.

            SVAR - State variables (used only by UserMat).

            MISC - Element miscellaneous data (SMISC and NMISC items of the ETABLE command).

        freq
            Specifies how often (that is, at which substeps) to write the
            specified solution results item. The following values are valid:

        cname
            The name of the component, created with the CM command, defining
            the selected set of elements or nodes for which this specification
            is active.  If blank, the set is all entities.  A component name is
            not allowed with the ALL, BASIC, or RSOL items.

        --
            Reserved for future use.

        nsvar
            The number of user-defined state variables (TB,STATE) to be written
            to the results file. Valid only when Item = SVAR and user-defined
            state variables exist. The specified value cannot exceed the total
            number of state variables defined; if no value is specified, all
            user-defined state variables are written to the results file. This
            argument acts on all sets of user-defined state variables that
            exist for the model.

        dsubres
            Specifies whether to write additional results in Jobname.DSUB
            during a substructure or CMS use pass in transient or harmonic
            analysis.

            Blank - Write the nodal DOF solution in Jobname.DSUB (default).

            ALL - In addition to the nodal DOF solution, also write necessary data to compute
                  quantities using nodal velocity and nodal acceleration
                  (damping force, inertial force, kinetic energy, etc.) in the
                  subsequent expansion pass. For more information, see Step 3:
                  Expansion Pass in the Substructuring Analysis Guide.

        Notes
        -----
        The OUTRES command allows you to specify the following:

        The solution item (Item) to write to the database (and to the reduced
        displacement and results files)

        The frequency (Freq) at which the solution item is written (applicable
        to static, transient, or full harmonic analyses)

        The set of elements or nodes (Cname) to which your specification
        applies.
        """
        command = "OUTRES,%s,%s,%s,%s,%s" % (str(item), str(freq), str(cname), str(nsvar), str(dsubres))
        return self.run(command, **kwargs)

    def lnsrch(self, key="", **kwargs):
        """APDL Command: LNSRCH

        Activates a line search to be used with Newton-Raphson.

        Parameters
        ----------
        key
            Line search key:

            OFF - Do not use a line search.

            ON - Use a line search.  Note, adaptive descent is suppressed when LNSRCH is on
                 unless explicitly requested on the NROPT command.   Having
                 line search on and adaptive descent on at the same time is not
                 recommended.

            AUTO - The program automatically switches line searching ON and OFF between substeps
                   of a load step as needed.  This option is recommended.

        Notes
        -----
        Activates a line search to be used with the Newton-Raphson method
        [NROPT].  Line search is an alternative to adaptive descent (see Line
        Search in the Mechanical APDL Theory Reference).

        LNSRCH,AUTO can be very efficient for problems in which LNSRCH is
        needed at only certain substeps.

        You cannot use line search [LNSRCH], automatic time stepping [AUTOTS],
        or the DOF solution predictor [PRED] with the arc-length method
        [ARCLEN, ARCTRM]. If you activate the arc-length method after you set
        LNSRCH, AUTOTS, or PRED, a warning message appears. If you choose to
        proceed with the arc-length method, the program disables your line
        search, automatic time stepping, and DOF predictor settings, and the
        time step size is controlled by the arc-length method internally.

        This command is also valid in PREP7.
        """
        command = "LNSRCH,%s" % (str(key))
        return self.run(command, **kwargs)

    def ugin(self, name="", extension="", path="", entity="", layer="", fmt="",
             **kwargs):
        """APDL Command: ~UGIN

        Transfers an NX part into the ANSYS program.

        Parameters
        ----------
        name
            The file name of the NX part to be imported, which cannot exceed 64
            characters in length. The path name must begin with an alphanumeric
            character. Special characters such as &, -,  and * are not
            permitted in the part name.

        extension
            The NX part file extension. The default is .prt.

        path
            The full path name to the directory containing the part, enclosed
            in single quotes; for example, '/ug_parts'. The default is the
            current working directory.

        entity
            Entity to be imported.

            0 or Solid - Solids only, imported as ANSYS volumes (the default).

            1 or Surface - Surfaces only, imported as ANSYS areas.

            2 or Wireframe - Wireframe only, imported as ANSYS lines.

            3 or All - All entities. Use this option when the part contains entities that may not be
                       attached to each other, such as a solid in one location
                       and a surface in another.

        layer
            The number(s) assigned to the layer(s) to be imported. You can
            import one layer or a range of layers (designated by hyphens).
            Defaults to 1-256 (all layers).

        fmt
            The format in which ANSYS will store the model.

            0 - Neutral format (default). Defeaturing after import is restricted.

            1 - Solid format; this allows defeaturing after import.

        Notes
        -----
        More information on importing NX parts is available in UG/NX in the
        Connection User's Guide.
        """
        command = "~UGIN,%s,%s,%s,%s,%s,%s" % (str(name), str(extension), str(path), str(entity), str(layer), str(fmt))
        return self.run(command, **kwargs)

    
    def fcum(self, oper="", rfact="", ifact="", **kwargs):
        """APDL Command: FCUM

        Specifies that force loads are to be accumulated.

        Parameters
        ----------
        oper
            Accumulation key:

            REPL - Subsequent values replace the previous values (default).

            ADD - Subsequent values are added to the previous values.

            IGNO - Subsequent values are ignored.

        rfact
            Scale factor for the real component.  Zero (or blank) defaults to
            1.0.  Use a small number for a zero scale factor.

        ifact
            Scale factor for the imaginary component.  Zero (or blank) defaults
            to 1.0.  Use a small number for a zero scale factor.

        Notes
        -----
        Allows repeated force load (force, heat flow, etc.) values to be
        replaced, added, or ignored.  Operations apply to the selected nodes
        [NSEL]. and the force labels corresponding to the selected force labels
        [DOFSEL].  The operations occur when the next force specifications are
        defined.  For example, issuing the command F,1,FX,250 after a previous
        F,1,FX,200 causes the current value of the force on node 1 in the
        x-direction to be 450 with the add operation, 250 with the replace
        operation, or 200 with the ignore operation.  Scale factors are also
        available to multiply the next value before the add or replace
        operation.  A scale factor of 2.0 with the previous "add" example
        results in a force of 700.  Scale factors are applied even if no
        previous values exist.  Issue FCUM,STAT to show the current label,
        operation, and scale factors.  Solid model boundary conditions are not
        affected by this command, but boundary conditions on the FE model are
        affected.

        Note:: : FE boundary conditions may still be overwritten by existing
        solid model boundary conditions if a subsequent boundary condition
        transfer occurs.

        FCUM does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "FCUM,%s,%s,%s" % (str(oper), str(rfact), str(ifact))
        return self.run(command, **kwargs)

    
    
    def flist(self, node1="", node2="", ninc="", **kwargs):
        """APDL Command: FLIST

        Lists force loads on the nodes.

        Parameters
        ----------
        node1, node2, ninc
            List forces for nodes NODE1 to NODE2 (defaults to NODE1) in steps
            of NINC (defaults to 1).  If ALL, list for all selected nodes
            [NSEL] and NODE2 and NINC  are ignored (default).  If NODE1 = P,
            graphical picking is enabled and all remaining command fields are
            ignored (valid only in the GUI).  A component name may also be
            substituted for NODE1.

        Notes
        -----
        Listing applies to the selected nodes [NSEL] and the selected force
        labels [DOFSEL].

        Caution:: : A list containing a node number that is larger than the
        maximum defined node (NODE2), could deplete the system memory and
        produce unpredictable results.

        This command is valid in any processor.
        """
        command = "FLIST,%s,%s,%s" % (str(node1), str(node2), str(ninc))
        return self.run(command, **kwargs)

    
    def plst(self, fname="", ext="", parmplot="", mslvstep="", **kwargs):
        """APDL Command: PLST

        Plots sound power parameters vs. frequency, or postprocesses results
        for a random acoustics analysis with diffuse sound field.

        Parameters
        ----------
        fname
            File name and directory path of a sound power data file (248
            characters maximum, including the characters needed for the
            directory path). The sound power data file is created via the
            SPOWER command macro. An unspecified directory path defaults to the
            working directory; in this case, you can use all 248 characters for
            the file name. When postprocessing a random acoustics analysis, a
            file named Fname is generated if no file already exists.

        ext
            Extension of the sound power data file (.anp where n is the number
            of ports), or the random acoustics data file.  When postprocessing
            a random acoustics analysis, an extension named Ext is assigned if
            no extension already exists.

        parmplot
            Specified parameter to plot:

            LWIN  - Input sound power level (default)

            LWOUT  - Output sound power level at driven port

            RL - Return loss

            ALPHA - Absorption coefficient

            TL  - Transmission loss

            DFSTL   - Transmission loss of random acoustics analysis

            DFSPW - Radiated power in random acoustics analysis

        mslvstep
            Solution step (load step) of a random acoustics analysis (MSOLVE):

            0  - Average result of multiple samplings (default)

            > 0 - Result at the specified solution step (load step)

            ALL  - Average of all solution step (load step) results

        Notes
        -----
        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLST,%s,%s,%s,%s" % (str(fname), str(ext), str(parmplot), str(mslvstep))
        return self.run(command, **kwargs)

    
    def bfedele(self, elem="", lab="", **kwargs):
        """APDL Command: BFEDELE

        Deletes element body force loads.

        Parameters
        ----------
        elem
            Element at which body load is to be deleted.  If ALL, delete for
            all selected elements [  A component name may also be substituted
            for ELEM.

        lab
            Valid body load label. If ALL, use all appropriate labels. See BFE
            command for labels.

        Notes
        -----
        Deletes element body force loads for a specified element and label.
        Element body loads may be defined with the BFE commands.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFEDELE,%s,%s" % (str(elem), str(lab))
        return self.run(command, **kwargs)

    
    def fsdele(self, nloc="", nev="", nlod="", **kwargs):
        """APDL Command: FSDELE

        Deletes a stress condition for a fatigue location, event, and loading.

        Parameters
        ----------
        nloc
            Delete stresses associated with location NLOC.  Defaults to zero.

        nev
            Delete stresses associated with event NEV.  Defaults to zero.

        nlod
            Delete stresses associated with loading NLOD.  Defaults to zero.

        Notes
        -----
        Deletes a stress condition stored for a particular fatigue location,
        event, and loading.  Use FE command to delete all stresses for a
        particular event or FL command to delete all stresses for a particular
        location.
        """
        command = "FSDELE,%s,%s,%s" % (str(nloc), str(nev), str(nlod))
        return self.run(command, **kwargs)

    def magopt(self, value="", **kwargs):
        """APDL Command: MAGOPT

        Specifies options for a 3-D magnetostatic field analysis.

        Parameters
        ----------
        value
            Option key:

            0 - Calculate a complete H field solution in the entire domain using a single
                (reduced) potential.

            Caution:When used in problems with both current sources and iron regions, errors may result due to numerical cancellation. - 1

            Calculate and store a preliminary H field in "iron" regions (μr ≠ 1).  Requires flux-parallel boundary conditions to be specified on exterior iron boundaries.  Used in conjunction with subsequent solutions with VALUE = 2 followed by VALUE = 3.  Applicable to multiply-connected iron domain problems. - 2

            Calculate and store a preliminary H field in "air" regions (μr = 1).  The air-iron interface is appropriately treated internally by the program.  Used in conjunction with a subsequent solution with VALUE = 3.  Applicable to singly-connected iron domain problems (with subsequent solution with VALUE = 3) or to multiply-connected iron domain problems (when preceded by a solution with VALUE = 1 and followed by a solution with VALUE = 3). - 3

        Notes
        -----
        Specifies the solution sequence options for a 3-D magnetostatic field
        analysis using a scalar potential (MAG).  The solution sequence is
        determined by the nature of the problem.

        You cannot use constraint equations with Value = 1.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: The MAGOPT,3 option is not supported in
        Distributed ANSYS when the following contact elements are present in
        the model: CONTA173, CONTA174, CONTA175, CONTA176, or CONTA177.
        """
        command = "MAGOPT,%s" % (str(value))
        return self.run(command, **kwargs)

    
    
    def dtran(self, **kwargs):
        """APDL Command: DTRAN

        Transfers solid model DOF constraints to the finite element model.

        Notes
        -----
        Constraints are transferred only from selected solid model entities to
        selected nodes.  The DTRAN operation is also done if the SBCTRAN
        command is issued, and is automatically done upon initiation of the
        solution calculations [SOLVE].

        This command is also valid in PREP7.
        """
        command = "DTRAN,"
        return self.run(command, **kwargs)

    def pddoel(self, name="", method="", vtype="", lopt="", val1="", val2="",
               val3="", val4="", val5="", **kwargs):
        """APDL Command: PDDOEL

        Defines design of experiment levels for an individual random input
        variable.

        Parameters
        ----------
        name
            Parameter name. The parameter name must have been previously
            defined as a random input variable using the PDVAR command.

        method
            Specifies the response surface method for which the levels of the
            design of experiment are to be defined. This field must not be left
            blank.

            CCD - Use the Central Composite Design method. The design experiment levels of a
                  central composite design are defined in the fields VAL1 to
                  VAL5.

            BBM - Use the Box-Behnken Matrix method. The design experiment levels of a Box-
                  Behnken Matrix design are defined in the fields VAL1 to VAL3.
                  The fields VAL4 and VAL5 are ignored

        vtype
            Specifies the type of the values of the design of experiment
            levels.

            PROB - The design of experiment levels are specified in terms of probabilities. This
                   is the default.

            PHYS - The design of experiment levels are specified in terms of physical values.

        lopt
            Specifies the type of the design of experiment levels, indicating
            if they are defined by lower and upper bound only (default) or all
            specified by the user.

            BND - You specify the lower and upper bounds for the design of experiment levels. The
                  values for intermediate levels are calculated automatically
                  at run time (default). The lower and upper levels of the
                  design of experiment itself can be specified either in terms
                  of probabilities or in terms of physical values, depending on
                  the Vtype field.

            For Lopt = BND and Method = CCD only the entries VAL1 and VAL5 are processed and they represent the lower and upper bound values of a central composite design. The intermediate levels VAL2 to VAL4 are evaluated automatically. For Lopt = BND and Method = BBM only the entries VAL1 and VAL3 are processed and they represent the lower and upper bound values of a Box-Behnken Matrix design respectively. The intermediate level VAL2 is evaluated automatically. - NOTE: The intermediate levels between the lower and upper bounds are calculated
                              so they are at equal intervals along the curve
                              (interpolated linearly in the physical space
                              whether the curve is symmetrical or not)
                              regardless of whether the lower and upper bounds
                              are specified as probabilities (Vtype = PROB) or
                              as physical values (Vtype = PHYS).

            ALL - You explicitly specify all necessary design of experiment levels. The design of
                  experiment levels can be in terms of probabilities or in
                  terms of physical values, depending on the Vtype field.

        val1, val2, val3, . . . , val5
            Values for the levels of the design of experiment for the random
            input variable Name. Must be specified in ascending order. All
            probabilities must be between 0.0 and 1.0.

        Notes
        -----
        If Vtype = PHYS, you must enter values for VAL1 through VAL3 or VAL5
        (depending on the Method and Lopt option you choose). If Vtype = PROB
        and you do not enter values, they default to the values shown below.

        For Method = CCD:

        For Method = BBM:

        See Probabilistic Design in the Advanced Analysis Guide for more
        information on the PDS methods.
        """
        command = "PDDOEL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(name), str(method), str(vtype), str(lopt), str(val1), str(val2), str(val3), str(val4), str(val5))
        return self.run(command, **kwargs)

    def ftcalc(self, nloc="", node="", **kwargs):
        """APDL Command: FTCALC

        Performs fatigue calculations for a particular node location.

        Parameters
        ----------
        nloc
            Location number of stress conditions to be used for fatigue
            calculation.

        node
            Node number (used only for convenience if NLOC is not input).
        """
        command = "FTCALC,%s,%s" % (str(nloc), str(node))
        return self.run(command, **kwargs)

    def page(self, iline="", ichar="", bline="", bchar="", comma="", **kwargs):
        """APDL Command: /PAGE

        Defines the printout and screen page size.

        Parameters
        ----------
        iline
            Number of lines (11 minimum) per "page" or screen.  Defaults to 24.
            Applies to interactive non-GUI to the screen output only.

        ichar
            Number of characters (41 to 132) per line before wraparound.
            Defaults to 80.  Applies to interactive non-GUI to the screen
            output only.

        bline
            Number of lines (11 minimum) per page.  Defaults to 56.  Applies to
            batch mode [/BATCH], diverted [/OUTPUT], or interactive GUI [/MENU]
            output. If negative, no page headers are output.

        bchar
            Number of characters (41 to 240 (system dependent)) per line before
            wraparound.  Defaults to 132.  Applies to batch mode [/BATCH],
            diverted [/OUTPUT], or interactive GUI [/MENU] output.

        comma
            Input 1 to specify comma-separated output for node [NLIST] and
            element [ELIST] output.

        Notes
        -----
        Defines the printout page size for batch runs and the screen page size
        for interactive runs.  Applies to the POST1 PRNSOL, PRESOL, PRETAB,
        PRRSOL, and PRPATH commands.  See the /HEADER command for additional
        controls (page ejects, headers, etc.) that affect the amount of
        printout.  A blank (or out-of-range) value retains the previous
        setting.  Issue /PAGE,STAT to display the current settings.  Issue
        /PAGE,DEFA to reset the default specifications.

        This command is valid in any processor.
        """
        command = "/PAGE,%s,%s,%s,%s,%s" % (str(iline), str(ichar), str(bline), str(bchar), str(comma))
        return self.run(command, **kwargs)

    
    def dval(self, baseid="", lab="", value="", value2="", keycal="",
             **kwargs):
        """APDL Command: DVAL

        Defines values at enforced motion base.

        Parameters
        ----------
        baseid
            The identification number of the enforced motion base (defined
            using the D command in the modal analysis).

        lab
            U

            U - Enforced displacement.

            ACC - Enforced acceleration.

        value
            The value or table name reference for tabular boundary conditions.
            To specify a table, enclose the table name in percent (%) signs
            (DVAL,BaseID,U,%tablename%). Use the *DIM command to define a
            table.

        value2
            The value of the second degree of freedom (if present). If the
            analysis type and the degree of freedom allow a complex input,
            VALUE is the real component and VALUE2 is the imaginary component.

        keycal
            Displacement result calculation key:

            ON - Calculate absolute displacement and acceleration results (default).

            OFF - Calculate relative displacement and acceleration results.

        Notes
        -----
        In a mode-superposition harmonic or transient analysis, you can apply
        enforced displacement or acceleration loads. If multiple loads are
        specified for the same base identification number (BaseID), the last
        load applied overrides the previous ones. For example, the following
        commands apply displacement to the base with identification number 1:

        In this case, the acceleration (ACC) applied in the last command will
        override the displacement (U).

        Issue LSCLEAR,LSOPT to delete DVAL command options from the database.

        For more information, see Enforced Motion Method for Mode-Superposition
        Transient and Harmonic Analyses in the Structural Analysis Guide and
        Enforced Motion Method for Transient and Harmonic Analyses in the
        Mechanical APDL Theory Reference.
        """
        command = "DVAL,%s,%s,%s,%s,%s" % (str(baseid), str(lab), str(value), str(value2), str(keycal))
        return self.run(command, **kwargs)

    def rate(self, option="", **kwargs):
        """APDL Command: RATE

        Specifies whether the effect of creep strain rate will be used in the
        solution of a load step.

        Parameters
        ----------
        option
            Activates implicit creep analysis.

            0 or OFF  - No implicit creep analysis. This option is the default.

            1 or ON  - Perform implicit creep analysis.

        Notes
        -----
        Set Option = 1 (or ON) to perform an implicit creep analysis (TB,CREEP
        with TBOPT :  1). For viscoplasticity/creep analysis, Option specifies
        whether or not to include the creep calculation in the solution of a
        load step. If Option = 1 (or ON), ANSYS performs the creep calculation.
        Set an appropriate time for solving the load step via a TIME,TIME
        command.
        """
        command = "RATE,%s" % (str(option))
        return self.run(command, **kwargs)

    
    
    def modcont(self, mlskey="", enforcedkey="", **kwargs):
        """APDL Command: MODCONT

        Specify additional modal analysis options.

        Parameters
        ----------
        mlskey
            Multiple load step key:

            OFF - Perform the modal analysis (compute the eigenvalues and the load vector) for
                  each load step. (default)

            ON - Perform the modal analysis (compute the eigenvalues and the load vector) only
                 for the first load step; form the load vector for each
                 subsequent load step (without repeating the eigenvalue
                 calculations) and write all load vectors to the Jobname.MODE
                 file for downstream mode-superposition analyses.

        enforcedkey
            Enforced motion key:

            OFF - Do not calculate enforced static modes. (default)

            ON - Calculate enforced static modes and write them to the Jobname.MODE file.

        Notes
        -----
        Specifies additional modal analysis (ANTYPE,MODAL) options.

        Use the LVSCALE command to apply the desired load in a mode-
        superposition transient or harmonic analysis.

        The maximum number of load vectors that can be used in the downstream
        mode-superposition transient or harmonic analysis is: 240.

        Generation of multiple loads (MLSkey = ON) is supported by the Block
        Lanczos, PCG Lanczos, Supernode, Subspace, Unsymmetric, and QR damped
        modal methods.

        The enforced motion calculation (EnforcedKey = ON) is supported by the
        Block Lanczos and Supernode mode extraction methods.
        """
        command = "MODCONT,%s,%s" % (str(mlskey), str(enforcedkey))
        return self.run(command, **kwargs)

    
    def hfang(self, lab="", phi1="", phi2="", theta1="", theta2="", **kwargs):
        """APDL Command: HFANG

        Defines or displays spatial angles of a spherical radiation surface for
        sound radiation parameter calculations.

        Parameters
        ----------
        lab
            Spatial angle label.

            ANGLE - Define spatial angles (default).

            STATE - Display spatial angles. PHI1, PHI2, THETA1, and THETA2 are ignored.

        phi1, phi2
            Starting and ending ϕ angles (degrees) in the spherical coordinate
            system. Defaults to 0.

        theta1, theta2
            Starting and ending θ angles (degrees) in the spherical coordinate
            system. Defaults to 0.

        Notes
        -----
        Defines or displays spatial angles of a spherical radiation surface.

        Use this command only with PLFAR,Lab = PRES, or PRFAR,Lab = PRES.
        """
        command = "HFANG,%s,%s,%s,%s,%s" % (str(lab), str(phi1), str(phi2), str(theta1), str(theta2))
        return self.run(command, **kwargs)

    
    
    def cyccalc(self, fileprefix="", fileformat="", **kwargs):
        """APDL Command: CYCCALC

        Calculates results from a cyclic harmonic mode-superposition analysis
        using the specifications defined by CYCSPEC.

        Parameters
        ----------
        fileprefix
            Each result table (corresponding to each CYCSPEC specification) is
            written to a file beginning with FilePrefix. If blank (default),
            the result tables are written to the output file.

        fileformat
            If FilePrefix is specified, then use FileFormat to specify the
            format of the file to be written:

            FORM - Formatted file (default)

            CSV - Comma-separated value file

        Notes
        -----
        CYCCALC loops through the specification given by CYCSPEC and computes
        the requested outputs. The outputs are given in a table format, with
        the rows corresponding to each frequency solution from the harmonic
        analysis, and the columns corresponding to each sector. The table
        entries are the maximum value of the specified quantity at the
        specified location in the sector. In addition, columns containing the
        maximum value at the frequency, the sector in which it occurs, and the
        node in the sector at which it occurs are output.

        If FilePrefix is specified, a file is created for each output table
        with the name FilePrefix_node_type.ext, where node is the node number
        or component name, type is the item/component requested, and the file
        extension .ext is either .txt or .csv, depending on FileFormat.

        A SET command must precede the CYCCALC command.

        The CYCCALC results are based on the currently active RSYS, SHELL,
        LAYER, and AVPRIN settings.
        """
        command = "CYCCALC,%s,%s" % (str(fileprefix), str(fileformat))
        return self.run(command, **kwargs)

    def wmore(self, node1="", node2="", ninc="", itime="", inc="", **kwargs):
        """APDL Command: WMORE

        Adds more nodes to the starting wave list.

        Parameters
        ----------
        node1, node2, ninc
            Add another node set to the previous starting wave list.  Set is
            NODE1 to NODE2 (defaults to NODE1) in steps of NINC (defaults to
            1).  If NODE1 is negative, delete (instead of add) this node set
            from previous starting wave list.

        itime, inc
            Add other node sets to the same starting wave list by repeating the
            previous node set with NODE1 and NODE2 incremented by INC (defaults
            to 1) each time after the first.  ITIME is the total number of sets
            (defaults to 1) defined with this command.

        Notes
        -----
        Adds more nodes to (or modifies) the previous starting wave list (if
        any) [WSTART].  Repeat WMORE command to add more nodes to the previous
        starting wave list.  Up to 10,000 nodes may be defined (total, for all
        starting waves).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WMORE,%s,%s,%s,%s,%s" % (str(node1), str(node2), str(ninc), str(itime), str(inc))
        return self.run(command, **kwargs)

    def psdval(self, tblno="", sv1="", sv2="", sv3="", sv4="", sv5="", sv6="",
               sv7="", **kwargs):
        """APDL Command: PSDVAL

        Defines PSD values.

        Parameters
        ----------
        tblno
            Input table number being defined.

        sv1, sv2, sv3, . . . , sv7
            Spectral values corresponding to the frequency points [PSDFRQ].
            Values are interpreted as defined with the PSDUNIT command.

        Notes
        -----
        Defines PSD values to be associated with the previously defined
        frequency points.

        Repeat PSDVAL command for additional values, up to the number of
        frequency points [PSDFRQ].  Values are added after the last nonzero
        value.

        This command is also valid in PREP7.
        """
        command = "PSDVAL,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno), str(sv1), str(sv2), str(sv3), str(sv4), str(sv5), str(sv6), str(sv7))
        return self.run(command, **kwargs)

    def sabs(self, key="", **kwargs):
        """APDL Command: SABS

        Specifies absolute values for element table operations.

        Parameters
        ----------
        key
            Absolute value key:

            0 - Use algebraic values in operations.

            1 - Use absolute values in operations.

        Notes
        -----
        Causes absolute values to be used in the SADD, SMULT, SMAX, SMIN, and
        SSUM operations.
        """
        command = "SABS,%s" % (str(key))
        return self.run(command, **kwargs)

    def plpagm(self, item="", gscale="", nopt="", **kwargs):
        """APDL Command: PLPAGM

        Displays path items along the path geometry.

        Parameters
        ----------
        item
            The path data item to be displayed on the currently active path
            (defined by the PATH command).  Valid path items are those defined
            with the PDEF or PLNEAR commands.

        gscale
            Scale factor for the offset from the path for the path data item
            displays.  Defaults to 1.0.

        nopt
            Determines how data is displayed:

            (blank) - Do not display nodes, and scale the display based on the currently selected
                      node set (default).

            NODE - Display path item data along with the currently selected set of nodes.  The
                   display geometry is scaled to the selected node set.

        Notes
        -----
        You can use the Gscale argument to scale the contour display offset
        from the path for clarity. You need to type all six characters to issue
        this command.
        """
        command = "PLPAGM,%s,%s,%s" % (str(item), str(gscale), str(nopt))
        return self.run(command, **kwargs)

    
    def auto(self, wn="", **kwargs):
        """APDL Command: /AUTO

        Resets the focus and distance specifications to "automatically
        calculated."

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        Notes
        -----
        Focus point and distance will be automatically calculated during next
        display.  Settings may still be changed with the /FOCUS and /DIST
        commands after this command has been issued.  See also the /USER
        command.

        This command is valid in any processor.
        """
        command = "/AUTO,%s" % (str(wn))
        return self.run(command, **kwargs)

    
    def proein(self, name="", extension="", path="", proecomm="", **kwargs):
        """APDL Command: ~PROEIN

        Transfers a Creo Parametric part into the ANSYS program.

        Parameters
        ----------
        name
            The name of the Creo Parametric part to be imported, which cannot
            exceed 64 characters in length and must begin with an alphanumeric
            character. Special characters such as & - and * and spaces are not
            permitted in the part name.

        extension
            The general Creo Parametric extension format is prt for parts and
            asm for assemblies.

        path
            Full path name to the directory containing the part. The default is
            the current working directory.

        proecomm
            The start command for the version of Creo Parametric you are using.
            proe1 is the default command. Note that the full path name to the
            Creo Parametric command need not be used here if the path had been
            included in the PATH variable. The Creo Parametric command name is
            set by the PROE_START_CMD162 environment variable.

        Notes
        -----
        More information on importing Creo Parametric parts is available in
        Creo Parametric (formerly Pro/ENGINEER) in the Connection User's Guide.
        """
        command = "~PROEIN,%s,%s,%s,%s" % (str(name), str(extension), str(path), str(proecomm))
        return self.run(command, **kwargs)

    def cval(self, wn="", v1="", v2="", v3="", v4="", v5="", v6="", v7="",
             v8="", **kwargs):
        """APDL Command: /CVAL

        Specifies nonuniform contour values on stress displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        v1, v2, v3, . . . , v8
            Up to 8 contour values may be specified (in ascending order).  The
            0.0 value (if any) must not be the last value specified.  If no
            values are specified, all contour specifications are erased and
            contours are automatically calculated.

        Notes
        -----
        This command is similar to the /CONTOUR command. With /CVAL, however,
        you define the upper level of each contour band instead of having the
        contours uniformly distributed over the range. The minimum value
        (including a zero value for the first band) for a contour band cannot
        be specified. If you use both /CONTOUR and /CVAL, the last command
        issued takes precedence.

        This command is valid in any processor.
        """
        command = "/CVAL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(wn), str(v1), str(v2), str(v3), str(v4), str(v5), str(v6), str(v7), str(v8))
        return self.run(command, **kwargs)

    
    
    def image(self, label="", fname="", ext="", **kwargs):
        """APDL Command: /IMAGE

        Allows graphics data to be captured and saved.

        Parameters
        ----------
        label
            Label specifying the operation to be performed:

            CAPTURE - Capture the image from the graphics window to a new window.

            RESTORE - Restore the image from a file to a new window.

            SAVE - Save the contents of the graphic window to a file.

            DELETE - Delete the window that contains the file.

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).
        """
        command = "/IMAGE,%s,%s,%s" % (str(label), str(fname), str(ext))
        return self.run(command, **kwargs)

    
    
    def gformat(self, ftype="", nwidth="", dsignf="", **kwargs):
        """APDL Command: /GFORMAT

        Specifies the format for the graphical display of numbers.

        Parameters
        ----------
        ftype
            FORTRAN format types (G is the default if this field is left
            blank.)

            G - Gxx.yy.  xx and yy are described below.

            F - Fxx.yy

            E - Exx.yy

        nwidth
            Total width (12 maximum) of the field (the xx in Ftype).  Defaults
            to 12.

        dsignf
            Number of digits after the decimal point (yy in F or E format) or
            number of significant digits in G format.  Range is 1 to xx-6 for
            Ftype = G or E; and 0 to xx-3 for Ftype = F.  The default is a
            function of Ftype and NWIDTH.

        Notes
        -----
        Lets you control the format of the graphical display of floating point
        numbers.   Issue /GFORMAT,STAT to display the current settings; issue
        /GFORMAT,DEFA to let ANSYS choose the format for the graphical display
        of floating numbers.

        This command is valid in any processor.
        """
        command = "/GFORMAT,%s,%s,%s" % (str(ftype), str(nwidth), str(dsignf))
        return self.run(command, **kwargs)

    def prfar(self, lab="", option="", phi1="", phi2="", nph1="", theta1="",
              theta2="", ntheta="", val1="", val2="", val3="", **kwargs):
        """APDL Command: PRFAR

        Prints pressure far fields and far field parameters.

        Parameters
        ----------
        lab
            Parameters to print:

            PRES - Acoustic parameters

            PROT - Acoustic parameters with the y-axis rotated extrusion

        option
            Print option, based on the specified print parameter type:

        phi1, phi2
            Starting and ending φ angles (degrees) in the spherical coordinate
            system. Defaults to 0.

        nphi
            Number of divisions between the starting and ending φ angles for
            data computations. Defaults to 0.

        theta1, theta2
            Starting and ending θ angles (degrees) in the spherical coordinate
            system. Defaults to 0 in 3-D and 90 in 2-D.

        ntheta
            Number of divisions between the starting and ending θ angles for
            data computations. Defaults to 0.

        val1
            Radius of the sphere surface. Used only when Option = SUMC, PHSC,
            SPLC, SPAC, PSCT, or TSCT.

        val2
            When Option = SPLC or SPAC: Reference rms sound pressure. Defaults
            to 2x10-5 Pa.

        val3
            When Lab = PRES: Thickness of 2-D model extrusion in the z
            direction (no default).

        Notes
        -----
        The PRFAR command prints pressure far fields and far field parameters
        as    determined by the equivalent source principle. Use this command
        to print pressure and acoustic    parameters. See the HFSYM command for
        the model symmetry and the     HFANG command for spatial radiation
        angles.

        To retrieve saved equivalent source data, issue the
        SET,Lstep,Sbstep,,REAL command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PRFAR,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(option), str(phi1), str(phi2), str(nph1), str(theta1), str(theta2), str(ntheta), str(val1), str(val2), str(val3))
        return self.run(command, **kwargs)

    
    def satin(self, name="", extension="", path="", entity="", fmt="", nocl="",
              noan="", **kwargs):
        """APDL Command: ~SATIN

        Transfers a .SAT file into the ANSYS program.

        Parameters
        ----------
        name
            The name of a valid .SAT file, created with a supported version of
            ACIS. The first character of the file name must be an alphanumeric.
            Special characters such as & - and * and spaces are not permitted
            in the part name. See File Names in the Command Reference for more
            information about ANSYS file naming conventions.

        extension
            The extension for the file. The default extension is .sat.

        path
            The path name of the directory in which the file resides enclosed
            in single quotes. The default path name is the current working
            directory.

        entity
            Entity to be imported.

            SOLIDS - Solids only, imported as ANSYS volumes (Not implemented, imports All).

            SURFACES - Surfaces only, imported as ANSYS areas (Not implemented, imports All).

            WIREFRAME - Wireframe only, imported as ANSYS lines (Not implemented, imports All).

            ALL - All entities. Use this option when the file contains different types of
                  entities.

        fmt
            The format in which ANSYS will store the model.

            0 - Neutral format (default). Defeaturing after import is restricted.

            1 - Solid format; this allows defeaturing after import.

        nocl
            Remove tiny objects.

            0 - Remove tiny objects without checking model validity (default).

            1 - Do not remove tiny objects.

        noan
            Perform an ACIS analysis of the model.

            0 - Analyze the model (default).

            1 - Do not analyze the model.

        Notes
        -----
        More information on importing ACIS parts is available in ACIS in the
        Connection User's Guide.
        """
        command = "~SATIN,%s,%s,%s,%s,%s,%s,%s" % (str(name), str(extension), str(path), str(entity), str(fmt), str(nocl), str(noan))
        return self.run(command, **kwargs)

    def pdropt(self, rvar="", corr="", stat="", shis="", hist="", cdf="",
               sens="", cmat="", conf="", **kwargs):
        """APDL Command: PDROPT

        Specifies the options for an HTML report.

        Parameters
        ----------
        rvar
            Specifies in which form to show the definitions of random variables
            in the report.

            0 - Using tables (including name and distribution parameter) and figures (including
                a probability density function plot and a cumulative
                distribution plot) (default).

            1 - Using tables only.

            2 - Using figures only.

            3 - None.

        corr
            Specifies if a table describing the correlation between random
            variables should be included in the report.

            0 - Yes, include this table (default).

            1 - No, do not include this table.

        stat
            Specifies which statistics to include in the report. In general,
            statistics are provided in a tabular form.

            0 - Statistics of the random output parameters only (default).

            1 - Statistics of the random input variables only.

            2 - Statistics of both the random input variables and the random output parameters.

            3 - None.

        shis
            Specifies which sample history plots to include in the report. This
            option applies to the random output parameters only.

            0 - None (default).

            1 - Mean value and standard deviation as a sample plot.

            2 - Mean value, standard deviation and sample values as a sample plot.

            3 - All types of sample plots - mean value, standard deviation, minimum value,
                maximum values, and the sample values.

        hist
            Specifies which histogram plots to include in the report.

            0 - Histogram of the random output parameters only (default).

            1 - Histogram of the random input variables only.

            2 - Histogram of both the random input variables and the random output parameters.

            3 - None.

        cdf
            Specifies which cumulative distribution function (CDF) plots to
            include in the report.

            0 - CDF of the random output parameters only (default).

            1 - CDF of the random input variables only.

            2 - CDF of both the random input variables and the random output parameters.

            3 - None.

        sens
            Specifies which sensitivity plots to include in the report.

            0 - Plots the sensitivities for all random output parameters based on Spearman-
                rank-order correlation coefficient (default).

            1 - Plots the sensitivities for all random output parameters based on linear
                (Pearson) correlation coefficient.

            2 - Plots the sensitivities according to option SENS=1 and SENS=2.

            3 - None.

        cmat
            Specifies which correlation matrices to include in the report.

            0 - Correlation matrix between random output parameters and random output
                parameters only (default).

            1 - Correlation matrix between random input variables and random output parameters
                only.

            2 - Correlation matrix between random input variables and random input variables
                only.

            3 - Correlation matrices according to option CMAT=0 and CMAT=1.

            4 - Correlation matrices according to option CMAT=0 and CMAT=2.

            5 - Correlation matrices according to option CMAT=1 and CMAT=2.

            6 - Correlation matrices according to option CMAT=0, CMAT=1, and CMAT=2.

            7 - None.

        conf
            Confidence level. The confidence level is used to plot confidence
            bounds for the history value. The value for the confidence level
            must be between 0.0 and 1.0 and it defaults to 0.95 (95%).
            Confidence bound(s) plotting is suppressed for CONF  0.5. This
            option is ignored if the report does not include plots for which
            confidence bounds are applicable.

        Notes
        -----
        Specifies the options for an HTML report. An HTML report includes a
        description of the deterministic model, the probabilistic model, the
        probabilistic methods used for the analyses, and the results obtained
        from the analyses.  The deterministic model is documented in the report
        by including a link to the analysis file (see PDANL command). In
        addition, an element plot of the component is shown, if available,
        based on the current view settings. The command ALLSEL is issued
        automatically prior to the respective plot command.
        """
        command = "PDROPT,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(rvar), str(corr), str(stat), str(shis), str(hist), str(cdf), str(sens), str(cmat), str(conf))
        return self.run(command, **kwargs)

    def dadele(self, area="", lab="", **kwargs):
        """APDL Command: DADELE

        Deletes degree-of-freedom constraints on an area.

        Parameters
        ----------
        area
            Area for which constraints are to be deleted.  If ALL, delete for
            all selected areas [ASEL].  If AREA = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  You can substitute a component name  for AREA.

        lab
            Valid constraint labels are:

            ALL - All constraints.

            SYMM - Symmetry constraints.

            ASYM - Antisymmetry constraints.

            UX - Displacement in X direction.

            UY - Displacement in Y direction.

            UZ - Displacement in Z direction.

            ROTX - Rotation about X axis.

            ROTY - Rotation about Y axis.

            ROTZ - Rotation about Z axis.

            PRES - Pressure.

            TEMP, TBOT, TE2, TE3, . . ., TTOP - Temperature.

            MAG - Magnetic scalar potential.

            VOLT - Electric scalar potential.

            AX - Magnetic vector potential in X direction (see notes).

            AY - Magnetic vector potential in Y direction.

            AZ - Magnetic vector potential in Z direction (see notes).

            CONC - Concentration.

        Notes
        -----
        Deletes the degree of freedom constraints at an area (and all
        corresponding finite element constraints) previously specified with the
        DA command. See the DDELE command for delete details.

        If the multiple species labels have been changed to user-defined labels
        via the MSSPEC command, use the user-defined labels.

        See the DA or the DA commands for details on element applicability.

        Warning:: : On previously meshed areas, all constraints on affected
        nodes will be deleted, whether or not they were specified by the DA
        command.

        This command is also valid in PREP7.
        """
        command = "DADELE,%s,%s" % (str(area), str(lab))
        return self.run(command, **kwargs)

    def opncontrol(self, lab="", value="", numstep="", **kwargs):
        """APDL Command: OPNCONTROL

        Sets decision parameter for automatically increasing the time step
        interval.

        Parameters
        ----------
        lab
            DOF

            DOF  - Degree-of-freedom label used to base a decision for increasing the time step
                   (substep) interval in a nonlinear or transient analysis.
                   The only DOF label currently supported is TEMP.

            OPENUPFACTOR  - Factor for increasing the time step interval. Specify when AUTOTS,ON is issued
                            and specify a VALUE > 1.0 (up to 10.0). The default
                            VALUE = 1.5 (except for thermal analysis, where it
                            is 3.0). Generally, VALUE > 3.0 is not recommended.

        value, numstep
            Two values used in the algorithm for determining if the time step
            interval can be increased. Valid only when Lab = DOF.

        Notes
        -----
        This command is available only for nonlinear or full transient
        analysis.
        """
        command = "OPNCONTROL,%s,%s,%s" % (str(lab), str(value), str(numstep))
        return self.run(command, **kwargs)

    
    def paresu(self, lab="", fname="", ext="", **kwargs):
        """APDL Command: PARESU

        Restores previously saved paths from a file.

        Parameters
        ----------
        lab
            Read operation:

            S - Saves only selected paths.

            ALL - Read all paths from the selected file (default).

            Pname - Saves the named path (from the PSEL command).

        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

            The file name defaults to Jobname.

        ext
            Filename extension (eight-character maximum).  The
            extension defaults to PATH if Fname is blank.

        Notes
        -----
        This command removes all paths from virtual memory and then
        reads path data from a file written with the PASAVE command.
        All paths on the file will be restored.  All paths currently
        in memory will be deleted.
        """
        command = "PARESU,%s,%s,%s" % (str(lab), str(fname), str(ext))
        return self.run(command, **kwargs)

    def werase(self, **kwargs):
        """APDL Command: WERASE

        Erases all reordering wave lists.

        Notes
        -----
        The REORDER then STAT commands will display the current wave lists.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WERASE,"
        return self.run(command, **kwargs)

    
    
    def cmatrix(self, symfac="", condname="", numcond="", grndkey="",
                capname="", **kwargs):
        """APDL Command: CMATRIX

        Performs electrostatic field solutions and calculates the self and
        mutual capacitances between multiple conductors.

        Parameters
        ----------
        symfac
            Geometric symmetry factor.  Capacitance values are scaled by this
            factor which represents the fraction of the total device modeled.
            Defaults to 1.

        condname
            Alpha-numeric prefix identifier used in defining named conductor
            components.

        numcond
            Total Number of Components.  If a ground is modeled, it is to be
            included as a component.  If a ground is not modeled, but infinite
            elements are used to model the far-field ground, a named component
            for the far-field ground is not required.

        grndkey
            Ground key:

            0 - Ground is one of the components, which is not at infinity.

            1 - Ground is at infinity (modeled by infinite elements).

        capname
            Array name for computed capacitance matrix.  Defaults to CMATRIX.

        Notes
        -----
        To invoke the CMATRIX macro, the exterior nodes of each conductor must
        be grouped into individual components using the CM command.  Each set
        of  independent components is assigned a component name with a common
        prefix followed by the conductor number.  A conductor system with a
        ground must also include the ground nodes as a component.  The ground
        component is numbered last in the component name sequence.

        A ground capacitance matrix relates charge to a voltage vector.  A
        ground matrix cannot be applied to a circuit modeler. The lumped
        capacitance matrix is a combination of  lumped "arrangements" of
        voltage differences between conductors.  Use the lumped capacitance
        terms in a circuit modeler to represent capacitances between
        conductors.

        Enclose all name-strings in single quotes in the CMATRIX command line.

        See the Mechanical APDL Theory Reference and HMAGSOLV in the Low-
        Frequency Electromagnetic Analysis Guide for details.

        This command does not support multiframe restarts.
        """
        command = "CMATRIX,%s,%s,%s,%s,%s" % (str(symfac), str(condname), str(numcond), str(grndkey), str(capname))
        return self.run(command, **kwargs)

    
    def trans(self, fname="", ext="", **kwargs):
        """APDL Command: TRANS

        Reformats File.GRPH for improved performance with plotters.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Reformats current Fname.GRPH data (based on color) for improved
        performance with pen plotters.
        """
        command = "TRANS,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def clabel(self, wn="", key="", **kwargs):
        """APDL Command: /CLABEL

        Specifies contour labeling.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        key
            Labeling key:

            0 or 1 - Label contours with legend or color (default).

            -1 - No contour labeling.

            N - Same as 1 except show alphabetic legend only on every Nth element.

        Notes
        -----
        Labels contours for identification with alphabetic legend for vector
        displays and color for raster displays.  Number of contours is
        automatically reduced to 9 (or fewer) for clarity.  Use /CONTOUR
        command to increase (24 maximum for alphabetic labeling; no limit for
        color labeling).

        This command is valid in any processor.
        """
        command = "/CLABEL,%s,%s" % (str(wn), str(key))
        return self.run(command, **kwargs)

    
    
    def layer(self, num="", **kwargs):
        """APDL Command: LAYER

        Specifies the element layer for which data are to be processed.

        Parameters
        ----------
        num
            Layer-processing mode:

            N - The layer number to process. The default value is 0.

            FCMAX - Processes the layer with the largest failure criteria.

        Notes
        -----
        Specifies the element layer for which results data are to be listed,
        plotted, or otherwise processed.

        Applies to stress and strain data for layered elements SHELL163,
        SHELL181, SHELL281, ELBOW290, SOLID185, SOLID186, SOLSH190, SHELL208,
        SHELL209, REINF264, and REINF265; heat flux and heat gradient for
        SHELL131 and SHELL132.

        The SHELL command may then be used (with shell elements) to specify a
        location (TOP, MID, BOT) within the layer for output. (The SHELL
        command does not apply to thermal shell elements SHELL131 and
        SHELL132.) Transverse shear stresses for MID are linearly averaged from
        TOP and BOT, and do not reflect a parabolic distribution. Setting
        KEYOPT(8) = 2 for SHELL181, SHELL281, SHELL208, SHELL209, and ELBOW290
        writes the mid-surface values directly to the results file and yields
        more accurate values than linear averaging.

        Because energy is a per-element quantity, you cannot use this command
        for energy output.

        When using the LAYER command with SHELL181, SOLID185, SOLID186,
        SOLSH190, SHELL208, SHELL209, SHELL281, and ELBOW290, KEYOPT(8) must be
        set to 1 (or 2 for SHELL181, SHELL281, ELBOW290, SHELL208, and
        SHELL209) in order to store results for all layers.

        When NUM = FCMAX, you must provide the failure criterion input. If
        specifying input via the FC command, all structural elements are
        processed. For more information, see the documentation for the FC
        command.

        Use this command with RSYS,LSYS to display results in the layer
        coordinate system for a particular layer.

        For the ANSYS LS-DYNA product, this command works differently than
        described above.  For SHELL163, you must first use EDINT during the
        solution phase to define the integration points for which you want
        output data.  Be aware that the output location for SHELL163 data is
        always at the integration point, so "top" and "bottom" refer to the top
        or bottom integration point, not necessarily the top or bottom surface.
        For more information, see the ANSYS LS-DYNA User's Guide.
        """
        command = "LAYER,%s" % (str(num))
        return self.run(command, **kwargs)

    
    
    def acel(self, acel_x="", acel_y="", acel_z="", **kwargs):
        """APDL Command: ACEL

        Specifies the linear acceleration of the global Cartesian reference
        frame for the analysis.

        Parameters
        ----------
        acel_x, acel_y, acel_z
            Linear acceleration of the reference frame along global Cartesian
            X, Y, and Z axes, respectively.

        Notes
        -----
        In the absence of any other loads or supports, the acceleration of the
        structure in each of the global Cartesian (X, Y, and Z) axes would be
        equal in magnitude but opposite in sign to that applied in the ACEL
        command. Thus, to simulate gravity (by using inertial effects),
        accelerate the reference frame with an ACEL command in the direction
        opposite to gravity.

        You can define the acceleration for the following analyses types:

        Static (ANTYPE,STATIC)

        Harmonic (ANTYPE,HARMIC), full or mode-superposition method

        Transient (ANTYPE,TRANS)

        Substructure (ANTYPE,SUBSTR).

        For all transient dynamic (ANTYPE,TRANS) analyses, accelerations are
        combined with the element mass matrices to form a body force load
        vector term. The element mass matrix may be formed from a mass input
        constant or from a nonzero density (DENS) property, depending upon the
        element type.

        For analysis type ANTYPE,HARMIC, the acceleration is assumed to be the
        real component with a zero imaginary component.

        Units of acceleration and mass must be consistent to give a product of
        force units.

        The ACEL command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for ACEL_X, ACEL_Y, and ACEL_Z input
        values (*DIM) as a function of both time and frequency for full
        transient and harmonic analyses.

        Related commands for rotational effects are CMACEL, CGLOC, CGOMGA,
        DCGOMG, DOMEGA, OMEGA, CMOMEGA, and CMDOMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        This command is also valid in /PREP7.
        """
        command = "ACEL,%s,%s,%s" % (str(acel_x), str(acel_y), str(acel_z))
        return self.run(command, **kwargs)

    
    
    def pletab(self, itlab="", avglab="", **kwargs):
        """APDL Command: PLETAB

        Displays element table items.

        Parameters
        ----------
        itlab
            User-defined label, as specified with the ETABLE command, of item
            to be displayed.

        avglab
            Averaging operation:

            NOAV - Do not average element items at common nodes (default).

            AVG - Average the element items at common nodes.

        Notes
        -----
        Displays items stored in the table defined with the ETABLE command for
        the selected elements.  For display purposes, items are assumed to be
        constant over the element and assigned to each of its nodes.  Contour
        display lines (lines of constant value) are determined by linear
        interpolation within each element from the nodal values.  These nodal
        values have the option of being averaged (values are averaged at a node
        whenever two or more elements connect to the same node) or not averaged
        (discontinuous).  The discontinuity between contour lines of adjacent
        elements is an indication of the gradient across elements.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].
        """
        command = "PLETAB,%s,%s" % (str(itlab), str(avglab))
        return self.run(command, **kwargs)

    
    def cmacel(self, cm_name="", cmacel_x="", cmacel_y="", cmacel_z="",
               **kwargs):
        """APDL Command: CMACEL

        Specifies the translational acceleration of an element component

        Parameters
        ----------
        cm_name
            The name of the element component.

        cmacel_x, cmacel_y, cmacel_z
            Acceleration of the element component CM_NAME in the global
            Cartesian X, Y, and Z axis directions, respectively.

        Notes
        -----
        The CMACEL command specifies the translational acceleration of the
        element component in each of the global Cartesian (X, Y, and Z) axis
        directions.

        Components for which you want to specify acceleration loading must
        consist of elements only. The elements you use cannot be part of more
        than one component, and elements that share nodes cannot exist in
        different element components. You cannot apply the loading to an
        assembly of element components.

        To simulate gravity (by using inertial effects), accelerate the
        structure in the direction opposite to gravity. For example, apply a
        positive CMACELY to simulate gravity acting in the negative Y
        direction. Units are length/time2.

        You can define the acceleration for the following analyses types:

        Static (ANTYPE,STATIC)

        Harmonic (ANTYPE,HARMIC), full or mode-superposition method

        Transient (ANTYPE,TRANS), full or mode-superposition method

        Substructure (ANTYPE,SUBSTR)

        Accelerations are combined with the element mass matrices to form a
        body force load vector term. Units of acceleration and mass must be
        consistent to give a product of force units.

        In a modal harmonic or transient analysis, you must apply the load in
        the modal portion of the analysis. Mechanical APDL calculates a load
        vector and writes it to the mode shape file, which you can apply via
        the LVSCALE command.

        The CMACEL command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for CMACEL_X, CMACEL_Y, and CMACEL_Z
        input values (*DIM) as a function of both time and frequency for full
        transient and harmonic analyses.

        Related commands for inertia loads are ACEL, CGLOC, CGOMGA, DCGOMG,
        DOMEGA, OMEGA, CMOMEGA, and CMDOMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        This command is also valid in /PREP7.
        """
        command = "CMACEL,%s,%s,%s,%s" % (str(cm_name), str(cmacel_x), str(cmacel_y), str(cmacel_z))
        return self.run(command, **kwargs)

    
    def reswrite(self, fname="", cflag="", **kwargs):
        """APDL Command: RESWRITE

        Appends results data from the database to a results file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory
            path). An unspecified directory path defaults to the
            working directory; in this case, you can use all 248
            characters for the file name.  The file name extension
            varies as follows:

            - .RST for structural, fluid, or coupled-field analyses
             - .RTH for thermal or electrical analyses
             - .RMG for magnetic analyses

        cflag
            0 - The complex results flag is set to 0 in the results
            file header. This is the default option.

            1 - The complex results flag is set to 1 in the results
            file header.

        Notes
        -----
        The RESWRITE command appends a data set to the specified file
        by writing the results data currently in the database. If the
        intended results file does not exist, it will be created and
        will include the geometry records. The current load step,
        substep, and time (or frequency) value are maintained. All
        data (summable and nonsummable) are written.

        When complex results are appended, cFlag must be set to 1 so
        that the header is consistent with the results written on the
        file.

        The command is primarily intended for use in a top-down
        substructuring analysis, where the full model is resumed and
        the results data read from the use pass results file (SET),
        and subsequently from all substructure expansion pass results
        files (APPEND). The full set of data in memory can then be
        written out via the RESWRITE command to create a complete
        results file (as though you had run a nonsubstructured
        analysis).

        The RESWRITE command can also be used to write a global
        results file for a distributed parallel (Distributed ANSYS)
        solution. This should only be necessary if the RESCOMBINE
        command was used to combine results from local results files
        into the database. The RESWRITE command can then be used to
        write the combined results into a new results file.  This new
        results file will essentially contain the current set of
        results data for the entire (i.e., global) model.
        """
        
        return self.run(f"RESWRITE,{fname},,,,{cflag}", **kwargs)

    def hmagsolv(self, freq="", nramp="", cnva="", cnvv="", cnvc="", cnve="",
                 neqit="", **kwargs):
        """APDL Command: HMAGSOLV

        Specifies 2-D or axisymmetric harmonic magnetic solution options and
        initiates the solution.

        Parameters
        ----------
        freq
            Analysis frequency (Hz).

        nramp
            Number of ramped substeps for the first load step of a nonlinear
            2-D harmonic electromagnetic solution.  Defaults to 3.  If NRAMP =
            -1, ignore the ramped load step entirely.

        cnva
            Convergence tolerance on the program calculated reference value for
            the magnetic vector potential degree of freedom.  Defaults to
            0.001.

        cnvv
            Convergence tolerance on the program calculated reference value for
            the time-integrated electric potential VOLT.    Defaults to 0.001.

        cnvc
            Convergence tolerance on the program calculated reference value for
            the current degree of freedom CURR.  Defaults to 0.001.

        cnve
            Convergence tolerance on the program calculated reference value for
            the voltage drop degree of freedom EMF.  Defaults to 0.001.

        neqit
            Maximum number of equilibrium iterations per load step.  Defaults
            to 50.

        Notes
        -----
        HMAGSOLV invokes an ANSYS macro which specifies harmonic
        electromagnetic solution options and initiates the solution.  The macro
        is applicable to any ANSYS 2-D or axisymmetric linear or nonlinear
        harmonic analysis.  Results are only stored for the final converged
        solution.  (In POST1, issue *SET,LIST to identify the load step of
        solution results.)  The macro internally determines if a nonlinear
        analysis is required based on magnetic material properties defined in
        the database.

        The macro performs a two-load-step solution sequence.  The first load
        step ramps the applied loads over a prescribed number of substeps
        (NRAMP), and the second load step calculates the converged solution.
        For linear problems, only a single load step solution is performed.
        The ramped load step can be bypassed by setting NRAMP to -1.

        A 3-D harmonic electromagnetic analysis is available for linear
        solutions only and does not require this solution macro.

        The following analysis options and nonlinear options are controlled by
        this macro:  KBC, NEQIT, NSUBST, CNVTOL, OUTRES.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "HMAGSOLV,%s,%s,%s,%s,%s,%s,%s" % (str(freq), str(nramp), str(cnva), str(cnvv), str(cnvc), str(cnve), str(neqit))
        return self.run(command, **kwargs)

    def output(self, fname="", ext="", loc="", **kwargs):
        """APDL Command: /OUTPUT

        Redirects text output to a file or to the screen.

        Parameters
        ----------
        fname
            Filename and directory path (248 character maximum, including
            directory) to which text output will be redirected (defaults to
            Jobname if Ext is specified).  For interactive runs, Fname = TERM
            (or blank) redirects output to the screen.  For batch runs, Fname =
            blank (with all remaining command arguments blank) redirects output
            to the  default system output file.

        ext
            Filename extension (eight-character maximum).

        loc
            Location within a file to which output will be written:

            (blank) - Output is written starting at the top of the file (default).

            APPEND - Output is appended to the existing file.

        Notes
        -----
        Text output includes responses to every command and GUI
        function, notes, warnings, errors, and other informational
        messages.  Upon execution of /OUTPUT,Fname, Ext, ..., all
        subsequent text output is redirected to the file Fname.Ext.
        To redirect output back to the default location, issue /OUTPUT
        (no arguments).

        Note: When using the GUI, output from list operations [NLIST,
        DLIST, etc.] is always sent to a list window regardless of the
        /OUTPUT setting.  The output can then be saved on a file or
        copied to the /OUTPUT location using the File menu in the list
        window.

        This command is valid in any processor.
        """
        if loc:
            return self.run(f"/OUTPUT,{fname},{ext},,{loc}", **kwargs)
        else:
            return self.run(f"/OUTPUT,{fname},{ext}", **kwargs)

    
    def catiain(self, name="", extension="", path="", blank="", **kwargs):
        """APDL Command: ~CATIAIN

        Transfers a CATIA model into the ANSYS program.

        Parameters
        ----------
        name
            The name of a valid CATIA model, created with CATIA 4.x or
            lower.  The first character of the file name must be an
            alphanumeric.  Special characters such as & - and * and
            spaces are not permitted in the part name.

        extension
            The extension for the file. The default extension is .model.

        path
            The path name of the directory in which the file resides, enclosed
            in single quotes. The default path name is the current working
            directory.

        blank
            Sets whether to import "blanked" entities.

            0 - Does not import "blanked" (suppressed) CATIA entities (default).

            1 - Imports "blanked" entities. The portions of CATIA data
            that were suppressed will be included in the import.

        Notes
        -----
        More information on importing CATIA parts is available in CATIA V4 in
        the Connection User's Guide.
        """
        return self.run(f"~CATIAIN,{name},{extension},{path},,,{blank}", **kwargs)

    
    
    def solve(self, action="", **kwargs):
        """APDL Command: SOLVE

        Starts a solution.

        Parameters
        ----------
        action
            Action to be performed on solve (used only for linear perturbation
            analyses).

            ELFORM  - Reform all appropriate element matrices in the first phase of a linear
                      perturbation analysis.

        Notes
        -----
        Starts the solution of one load step of a solution sequence based on
        the current analysis type and option settings. Use Action = ELFORM only
        in the first phase of a linear perturbation analysis.
        """
        command = "SOLVE,%s" % (str(action))
        return self.run(command, **kwargs)

    
    def plcint(self, action="", id_="", node="", cont="", dtype="", **kwargs):
        """APDL Command: PLCINT

        Plots the fracture parameter (CINT) result data.

        Parameters
        ----------
        action
            PATH

            PATH - Plots CINT quantities according to path number (default).

            FRONT - Plots CINT quantities distribution along the crack front.

        id\_
            Crack ID number.

        node
            Crack tip node number (default = ALL).

        cont
            Contour number (Default = ALL).

        dtype
            Data type to output:

            JINT - J-integral (default)

            IIN1 - Interaction integral 1

            IIN2 - Interaction integral 2

            IIN3 - Interaction integral 3

            K1 - Mode 1 stress-intensity factor

            K2 - Mode 2 stress-intensity factor

            K3 - Mode 3 stress-intensity factor

            G1 - Mode 1 energy release rate

            G2 - Mode 2 energy release rate

            G3 - Mode 3 energy release rate

            GT - Total energy release rate

            MFTX - Total material force X

            MFTY - Total material force Y

            MFTZ - Total material force Z

            TSTRESS - T-stress

            CEXT - Crack extension

            CSTAR - C*-integral

        Notes
        -----
        The PLCINT command is not available for XFEM-based crack growth
        analyses results processing.
        """
        command = "PLCINT,%s,%s,%s,%s,%s" % (str(action), str(id_), str(node), str(cont), str(dtype))
        return self.run(command, **kwargs)

    
    def mfrstart(self, time="", **kwargs):
        """APDL Command: MFRSTART

        Specifies restart status for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        time
            Restart time

            0  -  New analysis (Default)

            -1  - Restart from the last result set from a previous run.

            n  - Specify any positive number for the actual time point from which the ANSYS
                 Multi-field solver will restart. ANSYS checks the availability
                 of the result set and database file.

        Notes
        -----
        For MFX analyses, ANSYS always passes an actual time value to CFX (zero
        for a new analysis or a positive value for a restart run) and CFX
        verifies the consistency with the initial results file. For more
        details about ANSYS restart capabilities, please see Restarting an
        Analysis in the Basic Analysis Guide.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFRSTART,%s" % (str(time))
        return self.run(command, **kwargs)

    
    def sed(self, sedx="", sedy="", sedz="", cname="", **kwargs):
        """APDL Command: SED

        Defines the excitation direction for response spectrum and PSD
        analyses.

        Parameters
        ----------
        sedx, sedy, sedz
            Global Cartesian coordinates of a point that defines a line
            (through the origin) corresponding to the excitation direction.
            For example: 0.0, 1.0, 0.0 defines global Y as the spectrum
            direction.

        cname
            The component name corresponding to the group of excited nodes.
            Only applies to base excitation multi-point response spectrum
            analysis (SPOPT, MPRS) and power spectral density analysis (SPOPT,
            PSD). Defaults to no component.

        Notes
        -----
        In single-point response spectrum analysis (SPOPT,SPRS), the excitation
        direction without rocking (ROCK) is normalized to one so that the SEDX,
        SEDY, and SEDZ values do not scale the spectrum.  The excitation
        direction with rocking is not normalized. The SEDX, SEDY, and SEDZ
        values must be consistent with the OMX, OMY, and OMZ values on the ROCK
        command. The calculated direction then scales the spectrum. For more
        information, see Participation Factors and Mode Coefficients.

        In multi-point response spectrum analysis (SPOPT,MPRS) and power
        spectral density analysis (SPOPT,PSD), the excitation direction is
        normalized to one so that the SEDX, SEDY, and SEDZ values do not scale
        the spectrum.  The component name (Cname) is required. The constraints
        corresponding to the excitation direction are applied to the component
        nodes.

        This command is also valid in PREP7.
        """
        command = "SED,%s,%s,%s,%s" % (str(sedx), str(sedy), str(sedz), str(cname))
        return self.run(command, **kwargs)

    def fssect(self, rho="", nev="", nlod="", kbr="", **kwargs):
        """APDL Command: FSSECT

        Calculates and stores total linearized stress components.

        Parameters
        ----------
        rho
            In-plane (X-Y) average radius of curvature of the inside and
            outside surfaces of an axisymmetric section.  If zero (or blank), a
            plane or 3-D structure is assumed.  If nonzero, an axisymmetric
            structure is assumed.  Use a suitably large number (see the
            Mechanical APDL Theory Reference) or use -1 for an axisymmetric
            straight section.

        nev
            Event number to be associated with these stresses (defaults to 1).

        nlod
            Loading number to be associated with these stresses (defaults to
            1).

        kbr
            For an axisymmetric analysis (RHO ≠ 0):

            0 - Include the thickness-direction bending stresses

            1 - Ignore the thickness-direction bending stresses

            2 - Include the thickness-direction bending stress using the same formula as the Y
                (axial direction ) bending stress. Also use the same formula
                for the shear stress.

        Notes
        -----
        Calculates and stores the total linearized stress components at the
        ends of a section path [PATH] (as defined by the first two nodes with
        the PPATH command). The path must be entirely within the selected
        elements (that is, there must not be any element gaps along the path).
        Stresses are stored according to the fatigue event number and loading
        number specified.  Locations (one for each node) are associated with
        those previously defined for these nodes [FL] or else they are
        automatically defined.  Stresses are separated into six total
        components (SX through SXZ) and six membrane-plus-bending (SX through
        SXZ) components.  The temperature at each end point and the current
        time are also stored along with the total stress components.
        Calculations are made from the stresses currently in the database (last
        SET or LCASE command).  Stresses are stored as section coordinate
        components if axisymmetric or as global Cartesian coordinate components
        otherwise, regardless of the active results coordinate system [RSYS].
        The FSLIST command may be used to list stresses.  The FS command can be
        used to modify stored stresses.  See also the PRSECT and PLSECT
        commands for similar calculations.
        """
        command = "FSSECT,%s,%s,%s,%s" % (str(rho), str(nev), str(nlod), str(kbr))
        return self.run(command, **kwargs)

    def hfsym(self, kcn="", xkey="", ykey="", zkey="", **kwargs):
        """APDL Command: HFSYM

        Indicates the presence of symmetry planes for the computation of
        acoustic fields in the near and far field domains (beyond the finite
        element region).

        Parameters
        ----------
        kcn
            Coordinate system reference number. KCN may be 0 (Cartesian), or
            any previously defined local Cartesian coordinate system number
            (>10). Defaults to 0.

        xkey
            Key for acoustic field boundary condition, as prescribed for the
            solution, corresponding to the x = constant plane:

            None - No sound soft or sound hard boundary conditions (default).

            SSB - Sound soft boundary (pressure = 0).

            SHB - Sound hard boundary (normal velocity = 0).

        ykey
            Key for acoustic field boundary condition, as prescribed for the
            solution, corresponding to the y = constant plane:

            None - No sound soft or sound hard boundary conditions (default).

            SSB - Sound soft boundary (pressure = 0).

            SHB - Sound hard boundary (normal velocity = 0).

        zkey
            Key for acoustic field boundary condition, as prescribed for the
            solution, corresponding to the z = constant plane:

            None - No sound soft or sound hard boundary conditions (default).

            SSB - Sound soft boundary (pressure = 0).

            SHB - Sound hard boundary (normal velocity = 0).

        Notes
        -----
        HFSYM uses the image principle to indicate symmetry planes (x, y, or z
        = constant plane) for acoustic field computations outside the modeled
        domain. A sound hard boundary condition must be indicated even though
        it occurs as a natural boundary condition.

        No menu paths are available for acoustic applications.
        """
        command = "HFSYM,%s,%s,%s,%s" % (str(kcn), str(xkey), str(ykey), str(zkey))
        return self.run(command, **kwargs)

    
    def fluxv(self, **kwargs):
        """APDL Command: FLUXV

        Calculates the flux passing through a closed contour.

        Notes
        -----
        FLUXV invokes an ANSYS macro which calculates the flux passing through
        a closed contour (path) predefined by PATH.  The calculated flux is
        stored in the parameter FLUX.  In a 2-D analysis, at least two nodes
        must be defined on the path.  In 3-D, a path of nodes describing a
        closed contour must be specified (i.e., the first and last node in the
        path specification must be the same).  A counterclockwise ordering of
        nodes on the PPATH command will give the correct sign on flux.  Path
        operations are used for the calculations, and all path items are
        cleared upon completion.  This macro is only available for vector
        potential formulations.
        """
        command = "FLUXV,"
        return self.run(command, **kwargs)

    def efacet(self, num="", **kwargs):
        """APDL Command: /EFACET

        Specifies the number of facets per element edge for PowerGraphics
        displays.

        .. warning::
           This will not change element plotting within PyMapdl with
           ``eplot(vtk=True)``

        Parameters
        ----------
        num
            Number of facets per element edge for element plots.

            1 - Use 1 facet per edge (default for h-elements).

            2 - Use 2 facets per edge.

            4 - Use 4 facets per edge.

        Notes
        -----
        /EFACET is valid only when PowerGraphics is enabled [/GRAPHICS,POWER],
        except that it can be used in FULL graphics mode for element CONTA174.
        (See the /GRAPHICS command and element CONTA174 in the Element
        Reference for more information.) The /EFACET command is only applicable
        to element type displays.

        /EFACET controls the fineness of the subgrid that is used for element
        plots. The element is subdivided into smaller portions called facets.
        Facets are piecewise linear surface approximations of the actual
        element face. In their most general form, facets are warped planes in
        3-D space.  A greater number of facets will result in a smoother
        representation of the element surface for element plots. /EFACET may
        affect results averaging. See Contour Displays in the Basic Analysis
        Guide for more information.

        For midside node elements, use NUM = 2; if NUM = 1, no midside node
        information is output. For non-midside node elements, NUM should be set
        to 1. See the PLNSOL and PRNSOL commands for more information.

        With PowerGraphics active (/GRAPHICS,POWER), the averaging scheme for
        surface data with interior element data included (AVRES,,FULL) and
        multiple facets per edge (/EFACET,2 or /EFACET,4) will yield differing
        minimum and maximum contour values depending on the  Z-Buffering
        options (/TYPE,,6 or /TYPE,,7).  When the Section data is not included
        in the averaging schemes (/TYPE,,7), the resulting absolute value for
        the midside node is significantly smaller.

        For cyclic symmetry mode-superposition harmonic solutions, only NUM = 1
        is supported in postprocessing.

        Caution:: : If you specify /EFACET,1, PowerGraphics does not plot
        midside nodes. You must use /EFACET,2 to make the nodes visible.

        This command is valid in any processor.
        """
        command = "/EFACET,%s" % (str(num))
        return self.run(command, **kwargs)

    def felist(self, nev1="", nev2="", ninc="", **kwargs):
        """APDL Command: FELIST

        Lists the fatigue event parameters.

        Parameters
        ----------
        nev1, nev2, ninc
            List event parameters from NEV1 (defaults to 1) to NEV2 (defaults
            to NEV1) in steps of NINC (defaults to 1).  If NEV1 = ALL, NEV2 and
            NINC are ignored and all events are listed.  Fatigue event
            parameters are defined with the FE command.
        """
        command = "FELIST,%s,%s,%s" % (str(nev1), str(nev2), str(ninc))
        return self.run(command, **kwargs)

    def anpres(self, nfram="", delay="", ncycl="", refframe="", **kwargs):
        """APDL Command: ANPRES

        Produces an animated sequence of the time-harmonic pressure variation
        of an engine-order excitation in a cyclic harmonic analysis.

        Parameters
        ----------
        nfram
            Number of frame captures per cycle. Defaults to 3 times the number
            of sectors.

        delay
            Time delay (seconds) during animation. Defaults to 0.1 seconds.

        ncycl
            Number of animation cycles. Defaults to 5.

        refframe
            Reference frame for the model rotation.

            0 - Rotating reference frame (default). The model remains fixed in space and the
                pressure revolve around the model.

            1 - Stationary reference frame. The model rotates and the pressure locations remain
                fixed in space.

        Notes
        -----
        ANPRES invokes a macro which produces an animated sequence of the time-
        harmonic applied pressure in the case of a mode-superposition harmonic
        analysis (ANTYPE,HARMIC with CYCOPT,MSUP,ON). The engine-order
        excitation must also have been specified (CYCFREQ,EO). While pressure
        loads are not accepted as valid loading in a mode-superposition
        analysis (they must be applied in the modal analysis and the modal load
        vector applied in the mode-superposition analysis) you can apply them
        for the purposes of this animation.

        For RefFrame = 1 (stationary reference frame), the rotational velocity
        from the Linear Perturbation step, or the current OMEGA or CGOMGA
        value, is used to determine the rotation direction about the cyclic
        cylindrical axis, otherwise a positive rotation is assumed.

        You may use /HBC,,ON to hide overlapping pressure faces, and use
        /GLINE,,-1 to suppress the element outlines if desired.
        """
        command = "ANPRES,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(refframe))
        return self.run(command, **kwargs)

    
    
    def seexp(self, sename="", usefil="", imagky="", expopt="", **kwargs):
        """APDL Command: SEEXP

        Specifies options for the substructure expansion pass.

        Parameters
        ----------
        sename
            The name (case-sensitive) of the superelement matrix file created
            by the substructure generation pass (Sename.SUB).  Defaults to the
            initial jobname File.  If a number, it is the element number of the
            superelement as used in the use pass.

        usefil
            The name of the file containing the superelement degree-of-freedom
            (DOF) solution created by the substructure use pass (Usefil.DSUB).

        imagky
            Key to specify use of the imaginary component of the DOF solution.
            Applicable only if the use pass is a harmonic (ANTYPE,HARMIC)
            analysis:

            OFF - Use real component of DOF solution (default).

            ON - Use imaginary component of DOF solution.

        expopt
            Key to specify whether the superelement (ANTYPE,SUBSTR) expansion
            pass (EXPASS,ON) should transform the geometry:

            OFF - Do not transform node or element locations (default).

            ON - Transform node or element locations in the FE geometry record of the .rst
                 results file.

        Notes
        -----
        Specifies options for the expansion pass of the substructure analysis
        (ANTYPE,SUBSTR).  If used in SOLUTION, this command is valid only
        within the first load step.

        If you specify geometry transformation (Expopt = ON), you must retrieve
        the transformation matrix (if it exists) from the specified .SUB file.
        The command updates the nodal X, Y, and Z coordinates to represent the
        transformed node locations. The Expopt option is useful when you want
        to expand superelements created from other superelements (via SETRAN or
        SESYMM commands). For more information, see Superelement Expansion in
        Transformed Locations and Plotting or Printing Mode Shapes.

        This command is also valid in /PREP7.
        """
        command = "SEEXP,%s,%s,%s,%s" % (str(sename), str(usefil), str(imagky), str(expopt))
        return self.run(command, **kwargs)

    
    def prorb(self, **kwargs):
        """APDL Command: PRORB

        Prints the orbital motion characteristics of a rotating structure

        Notes
        -----
        When a structure is rotating and the Coriolis or gyroscopic effect is
        taken into account (CORIOLIS), nodes lying on the rotation axis
        generally exhibit an elliptical orbital motion. The PRORB command
        prints out the orbit characteristics A, B, PSI, PHI, YMAX and ZMAX of
        each rotating node, where

        Angles PSI and PHI are in degrees and within the range of -180 through
        +180. For more information about orbit definition, see Orbits in the
        Advanced Analysis Guide.

        To display the characteristics of the orbital path traversed by each
        node, issue the PLORB command.

        The PRORB command is valid for line elements (such as BEAM188, BEAM189,
        PIPE288, and PIPE289).

        Your model must also involve a rotational velocity (OMEGA or CMOMEGA)
        with Coriolis enabled in a stationary reference frame
        (CORIOLIS,,,,RefFrame = ON).

        A SET command should be issued after PRORB to ensure proper output for
        subsequent postprocessing commands.

        The coordinate system for displaying nodal results must be global
        Cartesian (RSYS,KCN = 0).
        """
        command = "PRORB,"
        return self.run(command, **kwargs)

    def smfor(self, **kwargs):
        """APDL Command: SMFOR

        Specifies "Forces on the solid model" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SMFOR,"
        return self.run(command, **kwargs)

    
    
    def pds(self, **kwargs):
        """APDL Command: /PDS

        Enters the probabilistic design system.

        Notes
        -----
        Enters the Probabilistic Design System (PDS). This command is valid
        only at the Begin Level.
        """
        command = "/PDS,"
        return self.run(command, **kwargs)

    
    def rigresp(self, option="", method="", val1="", val2="", **kwargs):
        """APDL Command: RIGRESP

        Specifies the rigid response calculation.

        Parameters
        ----------
        option
            Flag to activate or deactivate the rigid response calculation:

            1 (ON or YES) - Activate.

            2 (OFF or NO) - Deactivate. This value is the default.

        method
            Method used to calculate the rigid response:

            GUPTA - Gupta method.

            LINDLEY - Lindley-Yow method.

        val1
            If Method = GUPTA, Val1 represents the frequency F1 in Hertz.

        val2
            If Method = GUPTA, Val2 represents the frequency F2 in Hertz.

        Notes
        -----
        This rigid response calculation is only valid for single point response
        spectrum analysis (SPOPT, SPRS) and multiple point response spectrum
        analysis (SPOPT, MPRS) with combination methods (SRSS), complete
        quadratic (CQC) or Rosenblueth (ROSE)

        This command is also valid in PREP7.

        Only Sptype = SPRS is allowed in ANSYS Professional.
        """
        command = "RIGRESP,%s,%s,%s,%s" % (str(option), str(method), str(val1), str(val2))
        return self.run(command, **kwargs)

    
    def stabilize(self, key="", method="", value="", substpopt="",
                  forcelimit="", **kwargs):
        """APDL Command: STABILIZE

        Activates stabilization for all elements that support nonlinear
        stabilization.

        Parameters
        ----------
        key
            Key for controlling nonlinear stabilization:

            OFF  -  Deactivate stabilization. This value is the default.

            CONSTANT  -  Activate stabilization. The energy-dissipation ratio or damping factor remains
                        constant during the load step.

            REDUCE  -  Activate stabilization. The energy-dissipation ratio or damping factor is
                      reduced linearly to zero at the end of the load step from
                      the specified or calculated value.

        method
            The stabilization-control method:

            ENERGY  -  Use the energy-dissipation ratio as the control. This value is the default
                      when Key ≠ OFF.

            DAMPING  -  Use the damping factor as the control.

        value
            The energy-dissipation ratio (Method = ENERGY) or damping factor
            (Method = DAMPING). This value must be greater than 0 when Method =
            ENERGY or Method = DAMPING. When Method = ENERGY, this value is
            usually a number between 0 and 1.

        substpopt
            Option for the first substep of the load step:

            NO  -  Stabilization is not activated for the first substep even when it does not
                  converge after the minimal allowed time increment is reached.
                  This value is the default when Key ≠ OFF.

            MINTIME  -  Stabilization is activated for the first substep if it still does not converge
                       after the minimal allowed time increment is reached.

            ANYTIME  -  Stabilization is activated for the first substep. Use this option if
                       stabilization was active for the previous load step via
                       Key = CONSTANT.

        forcelimit
            The stabilization force limit coefficient, such that 0 < FORCELIMIT
            < 1. The default value is 0.2. To omit a stabilization force check,
            set this value to 0.

        Notes
        -----
        Once issued, a STABILIZE command remains in effect until you reissue
        the command.

        For the energy dissipation ratio, specify VALUE = 1.0e-4 if you have no
        prior experience with the current model; if convergence problems are
        still an issue, increase the value gradually. The damping factor is
        mesh-, material-, and time-step-dependent; an initial reference value
        from the previous run (such as a run with the energy-dissipation ratio
        as input) should suggest itself.

        Exercise caution when specifying SubStpOpt = MINTIME or ANYTIME for the
        first load step; ANSYS, Inc. recommends this option only for
        experienced users. If stabilization was active for the previous load
        step via Key = CONSTANT and convergence is an issue for the first
        substep, specify SubStpOpt = ANYTIME.

        When the L2-norm of the stabilization force (CSRSS value) exceeds the
        L2-norm of the internal force multiplied by the stabilization force
        coefficient, ANSYS issues a message displaying both the stabilization
        force norm and the internal force norm. The FORCELIMIT argument allows
        you to change the default stabilization force coefficient (normally 20
        percent).

        This command stabilizes the degrees of freedom for current-technology
        elements only. Other elements can be included in the FE model, but
        their degrees of freedom are not stabilized.

        For more information about nonlinear stabilization, see Unstable
        Structures in the Structural Analysis Guide. For additional tips that
        can help you to achieve a stable final model, see Simplify Your Model
        in the Structural Analysis Guide.
        """
        command = "STABILIZE,%s,%s,%s,%s,%s" % (str(key), str(method), str(value), str(substpopt), str(forcelimit))
        return self.run(command, **kwargs)

    def psel(self, type_="", pname1="", pname2="", pname3="", pname4="",
             pname5="", pname6="", pname7="", pname8="", pname9="", pname10="",
             **kwargs):
        """APDL Command: PSEL

        Selects a path or paths.

        Parameters
        ----------
        type\_
            Label identifying the type of select:

            S - Select a new path.

            R - Reselect a path from the current set of paths.

            A - Additionally select a path and extend the current set of paths.

            U - Unselect a path from the current set of paths.

            ALL - Restore the full set of paths.

            NONE - Unselect the full set of paths.

            INV - Invert the current set of paths (selected becomes unselected and vice versa).

        pname1, pname2, pname3, . . . , pname10
            Name of existing path(s).

        Notes
        -----
        Selects a path or multiple paths, up to ten.  Data are flagged as
        selected and unselected; no data are actually deleted from the
        database.  There is no default for this command; you must specify a
        type and pathname.
        """
        command = "PSEL,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(type_), str(pname1), str(pname2), str(pname3), str(pname4), str(pname5), str(pname6), str(pname7), str(pname8), str(pname9), str(pname10))
        return self.run(command, **kwargs)

    def sbclist(self, **kwargs):
        """APDL Command: SBCLIST

        Lists solid model boundary conditions.

        Notes
        -----
        Lists all solid model boundary conditions for the selected solid model
        entities.  See also DKLIST, DLLIST, DALIST, FKLIST, SFLLIST, SFALIST,
        BFLLIST, BFALIST, BFVLIST, and BFKLIST to list items separately.

        This command is valid in any processor.
        """
        command = "SBCLIST,"
        return self.run(command, **kwargs)

    
    def starset(self, par="", value="", val2="", val3="", val4="", val5="",
                val6="", val7="", val8="", val9="", val10="", **kwargs):
        """APDL Command: *SET

        Assigns values to user-named parameters.

        Parameters
        ----------
        par
            An alphanumeric name used to identify this parameter.  Par may be
            up to 32 characters, beginning with a letter and containing only
            letters, numbers, and underscores.  Examples:  ABC   A3X   TOP_END.
            ANSYS command names, function names, label names, component and
            assembly names, etc., should not be used.  Parameter names
            beginning with an underscore (e.g.,  _LOOP) are reserved for use by
            ANSYS and should be avoided.  Parameter names ending in an
            underscore are not listed by the *STATUS command.  Array parameter
            names must be followed by a subscript, and the entire expression
            must be 32 characters or less.  Examples:  A(1,1)   NEW_VAL(3,2,5)
            RESULT(1000).  There is no character parameter substitution for the
            Par field. Table parameters that are used in command fields (where
            constant values are normally given) are limited to 32 characters.

        value
            Numerical value or alphanumeric character string (up to 32
            characters enclosed in single quotes) to be assigned to this
            parameter.  Examples:  A(1,3)=7.4 B='ABC3'.  May also be a
            parameter or a parametric expression.  Examples:  C=A(1,3)
            A(2,2)=(C+4)/2.  If blank, delete this parameter.  Example:  A=
            deletes parameter A.

        val2, val3, val4, val5, val6, val7, val8, val9, val10
            If Par is an array parameter, values VAL2 through VAL10 (up to the
            last nonblank value) are sequentially assigned to the succeeding
            array elements of the column.  Example:  *SET,A(1,4),10,11 assigns
            A(1,4)=10, A(2,4)=11.  *SET,B(2,3),'file10','file11' assigns
            B(2,3)='file10', B(3,3)='file11'.

        Notes
        -----
        Assigns values to user-named parameters that may be substituted later
        in the run.  The equivalent (and recommended) format is

        Par = VALUE,VAL2,VAL3, . . . , VAL10

        which may be used in place of  *SET,Par, : ... for convenience.

        This command is valid in any processor.

        Parameters (numeric or character) may be scalars (single valued) or
        arrays (multiple valued in one, two, or three dimensions). An unlimited
        number of parameter names may be defined in any ANSYS run. For very
        large numbers of parameters, it is most efficient to define them in
        alphabetical order.

        Parameter values may be redefined at any time.  Array parameters may
        also be assigned values within a do-loop [*DO] for convenience.
        Internally programmed do-loop commands are also available with the *VXX
        commands (*VFILL).  Parameter values (except for parameters ending in
        an underscore) may be listed with the  *STATUS command, displayed with
        the *VPLOT   command (numeric parameters only), and modified with the
        *VEDIT command (numeric parameters only).

        Older ANSYS-supplied macro files may use parameter names that do not
        begin with an underscore. Using these macros embedded in your own
        macros may cause conflicts if the same parameter names are used.

        Parameters can also be resolved in comments created by the /COM command
        (see /COM for complete documentation). A parameter can be deleted by
        redefining it with a blank  VALUE.  If the parameter is an array, the
        entire array is deleted.  Parameters may also be defined by a response
        to a query with the  *ASK command or from an "ANSYS-supplied" value
        with the *GET command.

        Array parameters must be dimensioned  [*DIM] before being assigned
        values unless they are the result of an array operation or defined
        using the implied loop convention. Scalar parameters that are not
        defined are initialized to a "near" zero value.  Numeric array
        parameters are initialized to zero when dimensioned, and character
        array parameters are initialized to blank.  An existing array parameter
        must be deleted before it can be redimensioned.  Array parameter names
        must be followed by a subscript list (enclosed in parentheses)
        identifying the element of the array.  The subscript list may have one,
        two, or three values (separated by commas).  Typical array parameter
        elements are  A(1,1), NEW_VAL(3,2,5), RESULT(1000).  Subscripts for
        defining an array element must be integers (or parameter expressions
        that evaluate to integers).  Non-integer values are rounded to the
        nearest integer value.  All array parameters are stored as 3-D arrays
        with the unspecified dimensions set to 1.  For example, the 4th array
        element of a 1-dimensional array, A(4), is stored as array element
        A(4,1,1).  Arrays are patterned after standard FORTRAN conventions.

        If the parameter name Par is input in a numeric argument of a command,
        the numeric value of the parameter (as assigned with *SET, *GET, =,
        etc.) is substituted into the command at that point.  Substitution
        occurs only if the parameter name is used between blanks, commas,
        parentheses, or arithmetic operators (or any combination) in a numeric
        argument.  Substitution can be prevented by enclosing the parameter
        name Par within single quotes ( ' ), if the parameter is alone in the
        argument; if the parameter is part of an arithmetic expression, the
        entire expression must be enclosed within single quotes to prevent
        substitution.  In either case the character string will be used instead
        of the numeric value (and the string will be taken as 0.0 if it is in a
        numeric argument).

        A forced substitution is available in the text fields of the /TITLE,
        /STITLE,  /TLABEL, /AN3D, /SYP (ARG1--ARG8), and *ABBR  commands by
        enclosing the parameter within percent (%) signs.  Also, parameter
        substitution may be forced within the file name or extension fields of
        commands having these fields by enclosing the parameter within percent
        (%) signs.  Array parameters  [*DIM] must include a subscript (within
        parentheses) to identify the array element whose value is to be
        substituted, such as A(1,3).  Out-of-range subscripts result in an
        error message.  Non-integer subscripts are allowed when identifying a
        TABLE array element for substitution.  A proportional linear
        interpolation of values among the nearest array elements is performed
        before substitution.  Interpolation is done in all three dimensions.

        Note:: : Interpolation is based upon the assigned index numbers which
        must be defined when the table is filled [*DIM].

        Most alphanumeric arguments permit the use of character parameter
        substitution.  When the parameter name Par input, the alphanumeric
        value of the parameter is substituted into the command at that point.
        Substitution can be suppressed by enclosing the parameter name within
        single quotes ( ' ).  Forced substitution is available in some fields
        by enclosing the parameter name within percent (%) signs.  Valid forced
        substitution fields include command name fields, Fname (filename) or
        Ext (extension) arguments, *ABBR command (Abbr arguments), /TITLE and
        /STITLE commands (Title argument) and /TLABEL command (Text argument).
        Character parameter substitution is also available in the  *ASK, /AN3D,
        *CFWRITE,  *IF,  *ELSEIF,   *MSG,  *SET,  *USE,  *VREAD, and  *VWRITE
        commands.   Character array parameters must include a subscript (within
        parentheses) to identify the array element whose value is to be
        substituted.

        If a parameter operation expression is input in a numeric argument, the
        numeric value of the expression is substituted into the command at that
        point.  Allowable operation expressions are of the form

        E1oE2oE3: ...oE10

        where E1, E2, etc. are expressions connected by operators (o).  The
        allowable operations (o) are

        + - * / ** < >

        For example, A+B**C/D*E is a valid operation expression.  The *
        represents multiplication and the ** represents exponentiation.
        """
        command = "*SET,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(par), str(value), str(val2), str(val3), str(val4), str(val5), str(val6), str(val7), str(val8), str(val9), str(val10))
        return self.run(command, **kwargs)

    def priter(self, **kwargs):
        """APDL Command: PRITER

        Prints solution summary data.

        Notes
        -----
        Prints solution summary data (such as time step size, number of
        equilibrium iterations, convergence values, etc.) from a static or full
        transient analysis. All other analyses print zeros for the data.
        """
        command = "PRITER,"
        return self.run(command, **kwargs)

    
    
    def smbody(self, **kwargs):
        """APDL Command: SMBODY

        Specifies "Body loads on the solid model" as the subsequent status
        topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SMBODY,"
        return self.run(command, **kwargs)

    def essolv(self, electit="", strutit="", dimn="", morphopt="", mcomp="",
               xcomp="", electol="", strutol="", mxloop="", ruseky="",
               restky="", eiscomp="", **kwargs):
        """APDL Command: ESSOLV

        Performs a coupled electrostatic-structural analysis.

        Parameters
        ----------
        electit
            Title of the electrostatics physics file as assigned by the PHYSICS
            command.

        strutit
            Title of the structural physics file as assigned by the PHYSICS
            command.

        dimn
            Model dimensionality (a default is not allowed):

            2 - 2-D model.

            3 - 3-D model.

        morphopt
            Morphing option:

            <0 - Do not perform any mesh morphing or remeshing.

            0 - Remesh the non-structural regions for each recursive loop only if mesh morphing
                fails (default).

            1 - Remesh the non-structural regions each recursive loop and bypass mesh morphing.

            2 - Perform mesh morphing only, do not remesh any non-structural regions.

        mcomp
            Component name of the region to be morphed.  For 2-D models, the
            component may be elements or areas.  For 3-D models, the component
            may be elements or volumes.  A component must be specified. You
            must enclose name-strings in single quotes in the ESSOLV command
            line.

        xcomp
            Component name of entities excluded from morphing.  In the 2-D
            case, it is the component name for the lines excluded from
            morphing.  In the 3-D case, it is component name for the areas
            excluded from morphing.  Defaults to exterior non-shared entities
            (see the DAMORPH, DVMORPH, and DEMORPH commands). You must enclose
            name-strings in single quotes in the ESSOLV command line.

        electol
            Electrostatic energy convergence tolerance.  Defaults to .005 (.5%)
            of the value computed from the previous iteration.  If less than
            zero, the convergence criteria based on electrostatics results is
            turned off.

        strutol
            Structural maximum displacement convergence tolerance.  Defaults to
            .005 (.5%) of the value computed from the previous iteration.  If
            less than zero, the convergence criteria base on structural results
            is turned off.

        mxloop
            Maximum number of allowable solution recursive loops.  A single
            pass through both an electrostatics and structural analysis
            constitutes one loop.  Defaults to 100.

        ruseky
            Reuse flag option:

            1 - Assumes initial run of ESSOLV using base geometry for
                the first electrostatics solution.

            >1 - Assumes ESSOLV run is a continuation of a previous
                 ESSOLV run, whereby the morphed geometry is used for
                 the initial electrostatic simulation.

        restky
            Structural restart key.

            0 - Use static solution option for structural solution.

            1 - Use static restart solution option for structural solution.

        eiscomp
            Element component name for elements containing initial stress data
            residing in file jobname.ist. The initial stress data must be
            defined prior to issuing ESSOLV (see INISTATE command).

        Notes
        -----
        ESSOLV invokes an ANSYS macro which automatically performs a coupled
        electrostatic-structural analysis.

        The macro displays periodic updates of the convergence.

        If non-structural regions are remeshed during the analysis, boundary
        conditions and loads applied to nodes and elements will be lost.
        Accordingly, it is better to assign boundary conditions and loads to
        the solid model.

        Use RUSEKY > 1 for solving multiple ESSOLV simulations for different
        excitation levels (i.e., for running a voltage sweep). Do not issue the
        SAVE command to save the database between ESSOLV calls.

        For nonlinear structural solutions, the structural restart option
        (RESTKY = 1) may improve solution time by starting from the previous
        converged structural solution.

        For solid elements, ESSOLV automatically detects the air-structure
        interface and applies a Maxwell surface flag on the electrostatic
        elements. This flag is used to initiate the transfer for forces from
        the electrostatic region to the structure. When using the ESSOLV
        command with structural shell elements (for example, SHELL181), you
        must manually apply the Maxwell surface flag on all air elements
        surrounding the shells before writing the final electrostatic physics
        file. Use the SFA command to apply the Maxwell surface flag to the
        areas representing the shell elements; doing so ensures that the air
        elements next to both sides of the shells receive the Maxwell surface
        flag.

        If lower-order structural solids or shells are used, set KEYOPT(7) = 1
        for the electrostatic element types to ensure the correct transfer of
        forces.

        Information on creating the initial stress file is documented in the
        Loading chapter in the Basic Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = f"ESSOLV,{electit},{strutit},{dimn},{morphopt},{mcomp},{xcomp},{electol},{strutol},{mxloop},,{ruseky},{restky},{eiscomp}"
        return self.run(command, **kwargs)

    def rsplit(self, option="", label="", name1="", name2="", name3="",
               name4="", name5="", name6="", name7="", name8="", name9="",
               name10="", name11="", name12="", name13="", name14="",
               name15="", name16="", **kwargs):
        """APDL Command: RSPLIT

        Creates one or more results file(s) from the current results file based
        on subsets of elements.

        Parameters
        ----------
        option
            Specify which results to include for the subset of elements.

            ALL  - Write all nodal and element results based on the subset of elements (default).

            EXT  - Write only the nodal and element results that are on the exterior surface of
                   the element subset. The results data will be averaged as in
                   PowerGraphics (see AVRES) when this results file is brought
                   into POST1. Only valid for solid elements.

        label
            Define where the element subset is coming from.

            ALL  - Use all selected element components (CMSEL) (default).

            ESEL  - Use the currently selected (ESEL) set of elements. Name1 defines the results
                    file name.

            LIST - Use Name1 to Name16 to list the element component and/or assembly names (that
                   contain element components).

        name1, name2, name3, . . . , name16
            Up to 16 element component and/or assembly names (that contain
            element components).

        Notes
        -----
        Results files will be named based on the element component or assembly
        name, e.g., Cname.rst, except for the ESEL option, for which you must
        specify the results file name (no extension) using the Name1 field.
        Note that the .rst filename will be written in all uppercase letters
        (CNAME.rst) (unless using the ESEL option); when you read the file, you
        must specify the filename using all uppercase letters (i.e.,
        file,CNAME). You may repeat the RSPLIT command as often as needed. All
        results sets on the results file are processed. Use /AUX3 to produce a
        results file with just a subset of the results sets.

        Use INRES to limit the results data written to the results files.

        The subset geometry is also written so that no database file is
        required to postprocess the subset results files. You must not resume
        any database when postprocessing one of these results files. The input
        results file must have geometry written to it (i.e., do not use
        /CONFIG,NORSTGM,1).

        Applied forces and reaction forces are not apportioned if their nodes
        are shared by multiple element subsets. Their full values are written
        to each results file.

        Each results file renumbers its nodes and elements starting with 1.

        This feature is useful when working with large models. For more
        information on the advantages and uses of the RSPLIT command, see
        Splitting Large Results Files in the Basic Analysis Guide.
        """
        command = "RSPLIT,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(option), str(label), str(name1), str(name2), str(name3), str(name4), str(name5), str(name6), str(name7), str(name8), str(name9), str(name10), str(name11), str(name12), str(name13), str(name14), str(name15), str(name16))
        return self.run(command, **kwargs)

    def spoint(self, node="", x="", y="", z="", **kwargs):
        """APDL Command: SPOINT

        Defines a point for moment summations.

        Parameters
        ----------
        node
            Node number of the desired point.  If zero, use X,Y,Z to describe
            point.

        x, y, z
            Global Cartesian coordinates of the desired summation point.  Used
            if NODE is 0.  Defaults to (0,0,0).

        Notes
        -----
        Defines a point (any point other than the origin) about which the
        tabular moment summations are computed [NFORCE, FSUM].  If force
        summations are desired in other than the global Cartesian directions, a
        node number must be specified on the NODE field, and the desired
        coordinate system must be activated with RSYS.
        """
        command = "SPOINT,%s,%s,%s,%s" % (str(node), str(x), str(y), str(z))
        return self.run(command, **kwargs)

    
    
    
    def irlist(self, **kwargs):
        """APDL Command: IRLIST

        Prints inertia relief summary table.

        Notes
        -----
        Prints the inertia relief summary data, including the mass summary
        table, the total load summary table, and the inertia relief summary
        table resulting from the inertia relief calculations. These
        calculations are performed in the solution phase [SOLVE] as specified
        by the IRLF command.

        Inertia relief output is stored in the database rather than in the
        results file (Jobname.RST). When you issue IRLIST, ANSYS pulls the
        information from the database, which contains the inertia relief output
        from the most recent solution [SOLVE].

        This command is valid in any processor.
        """
        command = "IRLIST,"
        return self.run(command, **kwargs)

    
    def padele(self, delopt="", **kwargs):
        """APDL Command: PADELE

        Deletes a defined path.

        Parameters
        ----------
        delopt
            Path delete option (one of the following):

            ALL - Delete all defined paths.

            NAME - Delete a specific path from the list of path definitions.  (Substitute the
                   actual path name for NAME.)

        Notes
        -----
        Paths are identified by individual path names.  To review the current
        list of path names, issue the command PATH,STATUS.

        This command is valid in the general postprocessor.
        """
        command = "PADELE,%s" % (str(delopt))
        return self.run(command, **kwargs)

    def parain(self, name="", extension="", path="", entity="", fmt="",
               scale="", **kwargs):
        """APDL Command: ~PARAIN

        Transfers a Parasolid file into the ANSYS program.

        Parameters
        ----------
        name
            The name of a valid Parasolid file. The first character of the file
            name must be an alphanumeric.

        extension
            The extension for the file. The default extension is .x_t on a PC
            or .xmt_txt on a Linux system. Parasolid files are compatible
            across systems, and do not need to be renamed to be used on another
            platform.

        path
            The path name of the directory in which the file resides, enclosed
            in single quotes. The default path name is the current working
            directory.

        entity
            Entity to be imported:

            SOLIDS - Solids only, imported as ANSYS volumes (default)

            SURFACES - Surfaces only, imported as ANSYS areas.

            WIREFRAME - Wireframe only, imported as ANSYS lines.

            ALL - All entities. Use this option when the file contains more than one type of
                  entity.

        fmt
            Sets the format in which ANSYS will store the model

            0 - Neutral format (default). Defeaturing after import is restricted. Use this
                option if you need to scale a model to a specific unit of
                measure (other than meters).

            1 - Solid format; this allows defeaturing after import.

        scale
            Allows scaling for the model

            0 - Do not rescale the model; retain the default Parasolid setting of meters
                (default).

            1 - Scale the model if warranted by the model size.

        Notes
        -----
        More information on importing Parasolid parts is available in Parasolid
        in the Connection User's Guide.
        """
        command = "~PARAIN,%s,%s,%s,%s,%s,%s" % (str(name), str(extension), str(path), str(entity), str(fmt), str(scale))
        return self.run(command, **kwargs)

    
    def wfront(self, kprnt="", kcalc="", **kwargs):
        """APDL Command: WFRONT

        Estimates wavefront statistics.

        Parameters
        ----------
        kprnt
            Wavefront history print key:

            0 - Print current wavefront statistics.

            1 - Print current wavefront statistics but also print wavefront history (wavefront
                at each element).  Elements are listed in the reordered
                sequence.

        kcalc
            Calculation options:

            0 - Wavefront estimate assumes maximum model DOF set at each node and does not
                include the effects of master degrees of freedom and specified
                displacement constraints.

            1 - Wavefront estimate uses the actual DOF set at each node and does not include
                the effects of master degrees of freedom and specified
                displacement constraints.  More time consuming than estimated
                wavefront.  KPRNT = 1 is not available with this option.

        Notes
        -----
        Estimates wavefront statistics of the model as currently ordered.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WFRONT,%s,%s" % (str(kprnt), str(kcalc))
        return self.run(command, **kwargs)

    
    
    def nropt(self, option1="", option2="", optval="", **kwargs):
        """APDL Command: NROPT

        Specifies the Newton-Raphson options in a static or full transient
        analysis.

        Parameters
        ----------
        option1
            Option key:

            AUTO - Let the program choose the option (default).

            FULL - Use full Newton-Raphson.

            MODI - Use modified Newton-Raphson.

            INIT - Use the previously computed matrix (initial-stiffness).

            UNSYM - Use full Newton-Raphson with unsymmetric matrices of elements where the
                    unsymmetric option exists.

        option2
            Option key:

            CRPL  - When applicable in a static creep analysis, activates modified Newton-Raphson
                    with a creep-ratio limit. Valid only when Option1 = AUTO.

        optval
            If Option2 is blank, Optval is the Adaptive Descent Key (Adptky):

            ON - Use adaptive descent (default if frictional contact exists). Explicit ON is
                 valid only if Option = FULL.

            OFF - Do not use adaptive descent (default in all other cases).

        Notes
        -----
        The NROPT command specifies the Newton-Raphson option used to solve the
        nonlinear equations in a static or full transient analysis.

        The automatic modified Newton-Raphson procedure with creep-ratio limit
        control (NROPT,AUTO,CRPL,CRLIMIT) applies to static creep analysis
        only. When the creep ratio is smaller than the value of the creep ratio
        limit specified, the modified Newton-Raphson procedure is used. If
        convergence difficulty occurs during solution, use the full Newton-
        Raphson procedure.

        The command NROPT,UNSYM is also valid in a linear non-prestressed modal
        analysis that is used to perform a brake squeal analysis. In this
        special case, the command is used only to generate the unsymmetric
        stiffness matrix; no Newton-Raphson iterations are performed.

        NROPT,MODI and NROPT,INIT are only applicable with the sparse solver
        (EQSLV,SPARSE). Thermal analyses will always use full Newton-Raphson
        irrespective of the Option1 value selected.

        See Newton-Raphson Option in the Structural Analysis Guide for more
        information.

        This command is also valid in PREP7.

        Switching Between the Symmetric and Unsymmetric Option

        Normally, switching from the symmetric Newton-Raphson option
        (NROPT,FULL) to the unsymmetric option (NROPT,UNSYM) or from the
        unsymmetric option to the symmetric option is allowed between load
        steps within the same analysis type. This is applicable to linear and
        nonlinear, static and full transient analyses.

        Under the following circumstances, the solution could be slightly
        different or inaccurate if you switch from symmetric to unsymmetric or
        vice versa:

        The underlying elements or materials are unsymmetric by their
        mathematical definition, and you switch from unsymmetric to symmetric.

        You change analysis types and also switch from symmetric to unsymmetric
        (or vise versa) at the same time. This situation could result in
        failures such as data corruption or a core dump and should therefore be
        avoided.

        In some rare cases, switching between the symmetric and unsymmetric
        options can cause a system core dump when reading/writing the .ESAV or
        .OSAV file, and the analysis terminates. Typically, this happens when
        the record length of the element nonlinear saved variables cannot be
        altered between load steps by their mathematical definition.

        If all the elements and the material are symmetric by their
        mathematical definition and you use the unsymmetric option, the
        solution accuracy is the same as the symmetric option. However, the
        analysis will run twice as slow as the symmetric case.

        If the static or full transient solution is used as the base analysis
        for a linear perturbation, be aware that switching to the unsymmetric
        Newton-Raphson option forces the program to use the UNSYM or DAMP
        eigensolver in a downstream modal analysis, which may be more expensive
        than symmetric modal analysis.
        """
        command = "NROPT,%s,%s,%s" % (str(option1), str(option2), str(optval))
        return self.run(command, **kwargs)

    def rsymm(self, option="", cs="", axis="", nsect="", condvalue="",
              **kwargs):
        """APDL Command: RSYMM

        Defines the plane of symmetry or center of rotation for the radiosity
        method.

        Parameters
        ----------
        option
            Command options:

            CLEAR  - Deletes all symmetry definitions. Other command options are ignored.

            DEFINE  - Defines the symmetry (default).

            STAT - Shows the status/listing. Other command options are ignored.

            COND - Activates or deactivates condensation in the radiosity solver for all defined
                   radiation symmetries. Condensation is the process where the
                   radiosity equation system is reduced in size. Default is
                   off. (See Figure 7: Usage Example: Option = COND .)

        cs
            Local coordinate system (11) as defined using the LOCAL or CS
            commands or a global coordinate system (0). For planar reflection,
            the coordinate system origin must be on the plane of symmetry (POS)
            and one of its axes must be normal to the POS. For cyclic
            reflection, the coordinate system origin must be coincident with
            the center of rotation (COR). Only Cartesian systems are valid.

        axis
            Axis label of the coordinate system (CS) that is normal to the POS
            for planar reflection. For 2-D model planar reflections, valid
            labels are X or Y. For 3-D model planar reflections, valid labels
            are X, Y, or Z. Must be blank for cyclic reflection. For cyclic
            reflection, it is assumed that the Z axis is aligned with the axis
            of rotation.

        nsect
            Number of cyclic reflections to be done  (1). This field must be
            blank or 0 for planar reflection. Default is blank.

        condvalue
            Condensation key. Valid only when Option = COND.

            ON - Activates condensation in the radiosity solver for all defined radiation
                 symmetries.

            OFF - Deactivates condensation in the radiosity solver for all defined radiation
                  symmetries (default).

        Notes
        -----
        This command is used to define the POS for planar reflection or the COR
        for cyclic reflection. The RSYMM command must be issued before RSURF
        and it may be issued multiple times to have more than one planar/cyclic
        reflection; however, the RSURF command processes them in the order they
        are issued.

        For planar reflection, you must define a local coordinate system  (11)
        with its origin on the POS. One of its axes must be aligned so that it
        is normal to the plane. If possible, use the existing global coordinate
        system (0).

        For cyclic reflection, you must define a local coordinate system  (11)
        with its origin coincident with the COR. Reflections occur about the
        local Z-axis in the counterclockwise direction. You must align the
        Z-axis properly. If possible, use the existing global coordinate system
        (0).

        New surface elements generated inherit the properties of the original
        elements.

        For 2-D axisymmetric models, RSYMM can be used only for symmetrization
        in the YR plane. It cannot be used for the theta direction. Use V2DOPT
        in that case.

        For 2-D axisymmetric YR models, the newly-generated nodes can have only
        positive X coordinates.

        Figure: 7:: : Usage Example: Option = COND

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "RSYMM,%s,%s,%s,%s,%s" % (str(option), str(cs), str(axis), str(nsect), str(condvalue))
        return self.run(command, **kwargs)

    
    def midtol(self, key="", tolerb="", resfq="", **kwargs):
        """APDL Command: MIDTOL

        Sets midstep residual criterion values for structural transient
        analyses.

        Parameters
        ----------
        key
            Midstep residual criterion activation key.

            ON or 1 - Activate midstep residual criterion in a structural transient analysis
                      (default).

            OFF or 0 - Deactivate midstep residual criterion in a structural transient analysis.

            STAT  - List the current midstep residual criterion setting.

        tolerb
            Midstep residual tolerance or reference value for bisection.
            Defaults to 100 times the TOLER setting of the CNVTOL command.

        resfq
            Key to use response frequency computation along with midstep
            residual criterion for automatic time stepping (AUTOTS,ON).

            OFF or 0 - Do not calculate response frequency and do not consider it in the automatic
                       time stepping (default).

            ON or 1 - Calculate response frequency and consider it in the automatic time stepping.

        Notes
        -----
        When TOLERB is input as a tolerance value (TOLERB > 0), the typical
        force and/or moment from the regular time step is used in the midstep
        residual force and/or moment comparison.

        In a structural transient analysis, the suggested tolerance range of
        TOLERB (TOLERB > 0) is as follows:

        If the structural transient analysis is elastic and linear, and the
        load is constant or changes slowly, use a smaller value of TOLERB to
        achieve an accurate solution. If the analysis involves large amounts of
        energy dissipation, such as elastic-plastic material, TOLERB can be
        larger. If the analysis includes contact or rapidly varying loads, a
        smaller value of TOLERB should be used if high frequency response is
        important; otherwise, a larger value of TOLERB may be used to enable
        faster convergence with larger time step sizes.

        For more information on how the midstep criterion is used by the
        program, see Midstep Residual for Structural Dynamic Analysis in the
        Mechanical APDL Theory Reference.

        This command is also valid in PREP7.
        """
        command = "MIDTOL,%s,%s,%s" % (str(key), str(tolerb), str(resfq))
        return self.run(command, **kwargs)

    def tunif(self, temp="", **kwargs):
        """APDL Command: TUNIF

        Assigns a uniform temperature to all nodes.

        Parameters
        ----------
        temp
            Uniform temperature assigned to the nodes. If a TEMP value is not
            specified, the uniform temperature is set to zero.

        Notes
        -----
        TUNIF is a convenient form of the more general BFUNIF command.

        In a transient or nonlinear thermal analysis, the uniform temperature
        is used during the first iteration of a solution as follows:

        as the starting nodal temperature (except where temperatures are
        explicitly specified [D, DK]),

        to evaluate temperature-dependent material properties.

        In a structural analysis or an explicit dynamic analysis, the uniform
        temperature is used as the default temperature for thermal strain
        calculations and material property evaluation (except where body load
        temperatures are specified (BF, BFE, BFK, LDREAD). In other scalar
        field analyses, the uniform temperature is used for material property
        evaluation.

        Because TUNIF (or BFUNIF,TEMP) is step-applied in the first iteration,
        issue a BF,ALL,TEMP,Value command to ramp on a uniform temperature
        load.

        When the TUNIF command is used in an explicit dynamic analysis, you
        cannot apply temperature loading via the EDLOAD,,TEMP command.
        Furthermore, temperature loading defined by TUNIF cannot be listed or
        deleted by the EDLOAD command.

        The command default sets the uniform temperature to the reference
        temperature defined via the TREF command only (and not the MP,REFT
        command).

        If using the command default to set the uniform temperature (to the
        reference temperature set via TREF), you can convert temperature-
        dependent secant coefficients of thermal expansion (SCTEs) from the
        definition temperature to the uniform temperature. To do so, issue the
        MPAMOD command.

        This command is also valid in PREP7.
        """
        command = "TUNIF,%s" % (str(temp))
        return self.run(command, **kwargs)

    
    def gplot(self, **kwargs):
        """APDL Command: GPLOT

        Controls general plotting.

        Notes
        -----
        This command displays all entity types as specified via the /GTYPE
        command.  Only selected entities (NSEL, ESEL, KSEL, LSEL, ASEL, VSEL)
        will be displayed.  See the descriptions of the /GTYPE and /GCMD
        commands for methods of setting the entity types displayed.

        This command is valid in any processor.
        """
        command = "GPLOT,"
        return self.run(command, **kwargs)

    def nldiag(self, label="", key="", maxfile="", **kwargs):
        """APDL Command: NLDIAG

        Sets nonlinear diagnostics functionality.

        Parameters
        ----------
        label
            Diagnostic function:

            NRRE - Store the Newton-Raphson residuals information.

            EFLG - Identify or display elements or nodes that violate the criteria.

            CONT - Write contact information to a single Jobname.cnd diagnostic text file during
                   solution.

        key
            Diagnostic function characteristics:

            OFF or 0 - Suppresses writing of diagnostic information (default).

            ON or 1 - Writes diagnostic information to the Jobname.ndxxx, Jobname.nrxxx, or
                      Jobname.cnd file. (If Label = CONT, this option is the
                      same as the SUBS option described below.)

            ITER  - Writes contact diagnostic information at each iteration. Valid only when Label
                    = CONT.

            SUBS  - Writes contact diagnostic information at each substep. Valid only when Label =
                    CONT.

            LSTP  - Writes contact diagnostic information at each load step. Valid only when Label
                    = CONT.

            STAT - Lists information about the diagnostic files in the current working directory.

            DEL - Deletes all diagnostic files in the current working directory.

        maxfile
            Maximum number of diagnostic files to create. Valid values are 1
            through 999. Default = 4. Valid only when Label = NRRE or EFLG.

        Notes
        -----
        The NLDIAG command is a nonlinear diagnostics tool valid for nonlinear
        structural analyses. It is a debugging tool for use when you must
        restart after an unconverged solution. The command creates
        Jobname.ndxxx, Jobname.nrxxx, or Jobname.cnd files in the working
        directory to store the information you specify.

        For more information, see Performing Nonlinear Diagnostics.

        Issue the NLDIAG,NRRE,ON command to create Jobname.nrxxx diagnostic
        files (for each equilibrium iteration after the first) in which to
        store the relevant Newton-Raphson residual information of
        forces/moments Fx, Fy, Fz, Mx, My and Mz for the last MAXFILE
        equilibrium iterations.

        Issue a NLDPOST,NRRE,STAT command to list the load step, substep, time,
        and equilibrium iteration corresponding to each of the Jobname.nrxxx
        diagnostic files in the working directory, then issue a
        PLNSOL,NRRES,,,,FileID command to point to the file from which you want
        to create a contour plot of your Newton-Raphson residuals.

        If you restart or issue a new SOLVE command, any Jobname.nrxxx
        diagnostic files in the current (working) directory are overwritten.

        Issue a NLDIAG,EFLG,ON command to create Jobname.ndxxx  diagnostic
        files which store IDs for elements violating the following criteria:

        Too large a distortion (HDST)

        Elements contain nodes that have near zero pivots (PIVT) for nonlinear
        analyses

        Too large a plastic/creep (EPPL/EPCR) strain increment (CUTCONTROL)

        Elements for which mixed u-P constraints are not satisfied (mixed U-P
        option of 18x solid elements only) (MXUP)

        Hyperelastic element (EPHY), cohesive zone material (EPCZ), or damage
        strain (EPDM) not converged

        Radial displacement (RDSP) not converged

        MPC184 multipoint constraint elements using KEYOPT(1) = 6 through 16
        with the Lagrange multiplier option fail to satisfy constraint
        conditions (184J)

        For NLDIAG,EFLG,ON, all Jobname.ndxxx diagnostic files (for each
        equilibrium iteration after the first) in the current (working)
        directory are deleted when you issue a new SOLVE command (or restart).

        In the solution processor (/SOLU), use the STAT option to list the
        active status of this command. In the postprocessor (/POST1), issue a
        NLDPOST,EFLG,STAT command to list the load step, substep, time, and
        equilibrium iteration corresponding to each of the Jobname.ndxxx
        diagnostic files in the working directory, then issue a
        NLDPOST,EFLG,CM,FileID command to create element components that
        violate the criteria.

        Issue the NLDIAG,CONT,ON command to create a Jobname.cnd diagnostic
        file which stores contact information for all defined contact pairs at
        all substeps. Alternatively, you may issue one of the following
        commands to store contact information at a specific frequency:

        NLDIAG,CONT,ITER to write at each iteration

        NLDIAG,CONT,SUBS to write at each substep (default)

        NLDIAG,CONT,LSTP to write at each load step

        Contact diagnostic information is available for elements CONTA171
        through CONTA177; it is not available for CONTA178.

        Diagnostic file Jobname.cnd is written during solution and lists, on a
        pair-base, the following contact information:

        Contact pair ID[1]

        Number of contact elements in contact[2]

        Number of contact elements in "sticking" contact status

        Maximum chattering level

        Maximum contact penetration/Minimum gap[3]

        Maximum closed gap

        Maximum normal contact stiffness

        Minimum normal contact stiffness

        Maximum resulting pinball

        Maximum elastic slip distance

        Maximum tangential contact stiffness

        Minimum tangential contact stiffness

        Maximum sliding distance

        Maximum contact pressure

        Maximum friction stress

        Average contact depth

        Maximum closed penetration

        Number of contact points having too much penetration

        Contacting area

        Maximum contact damping pressure

        Maximum tangential contact damping stress

        Maximum total sliding distance (GSLID), including near-field

        Minimum total sliding distance (GSLID), including near-field

        Maximum fluid penetration pressure on contact surface

        Maximum fluid penetration pressure on target surface

        Total volume lost due to wear for the contact pair

        Total strain energy due to contact constraint

        Total frictional dissipation energy

        Total contact stabilization energy

        ANSYS Workbench contact pair ID[4]
        """
        command = "NLDIAG,%s,%s,%s" % (str(label), str(key), str(maxfile))
        return self.run(command, **kwargs)

    
    
    def nlmesh(self, control="", val1="", val2="", val3="", val4="", **kwargs):
        """APDL Command: NLMESH

        Controls remeshing in nonlinear adaptivity.

        Parameters
        ----------
        control
            The mesh-quality control to adjust:

            NANG  - Specifies the surface facet dihedral angle threshold. Use this option to retain
                    source mesh geometry features. The dihedral angle is
                    defined by the angle between the normal vectors from two
                    neighboring surface facet sharing an edge. If the dihedral
                    angle is larger than the specified threshold, the edge is
                    treated as soft edge so that the new nodes are forced to
                    the edge.

            VAL1 is the dihedral angle threshold (in degrees) on concave surfaces. VAL2 is the dihedral angle threshold (in degrees) on convex surfaces.  - Default: VAL1 = 15 and VAL2 = 15.

            When NLMESH,EXPL is issued, the VAL1 and VAL2 become the lower bounds of dihedral angles for mesh exploration. Use VAL3 and VAL4 to define the upper bounds of dihedral angles on concave and convex surfaces (respectively) for mesh exploration. - Generally, larger VAL1 and VAL2 values lead to better quality new meshes (and
                              may even repair local tiny facets of poor
                              quality); however, larger values may also smooth
                              out some geometric features, leading to slightly
                              different results and causing possible
                              convergence difficulty in the substeps
                              immediately following remeshing.

            AEDG  - Specifies the edge angle threshold (in degrees). Use this option to split patch
                    segments. The edge angle is the angle between adjacent
                    surface segment edges sharing a node. If the edge angle is
                    larger than the specified threshold (VAL1), the segment
                    splits and the node is automatically treated as a hard node
                    to be retained.

            Default: VAL1 = 10. - Generally, larger VAL1 values improve the quality of the new mesh, but may
                              result in fewer feature nodes. The effect is
                              similar to that of dihedral angles.

            SRAT  - Specifies the global sizing ratio for remeshing.

            Generally, set the lower value (VAL1) to >= 0.7 and the upper value (VAL2) to <= 1.5. Within this range, the model can be refined (< 1.0) or coarsened (> 1.0) up to 3x depending on the number of elements (if performing a remesh of the entire model). - Default: VAL1 = 1.0. The default value results in the new mesh having a similar
                              size as that of the source mesh.

            NLAY - Specifies the number of sculpting layers beginning with detected seed elements.
                   This option helps to detect remeshing regions from whole
                   model.

            Default: VAL1 = 2. - Generally, a larger VAL1 value leads to larger remeshing regions and tends to
                              unite isolated multiple regions. A larger value
                              also tends to result in better remeshing quality
                              (and increases mapping and solution overhead
                              accordingly).

            VAL1 = 0 is not valid, as the remeshing regions would contain only detected seed elements, resulting in many small cavities within remeshing regions (especially if the specified skewness threshold (NLADAPTIVE) is relatively large). - When NLMESH,EXPL is issued, VAL1 becomes the lower bound of mesh exploration.
                              Use VAL2 to define the upper bound for mesh
                              exploration.

            LSRT  - Specifies the local sizing ratio threshold (VAL1). If the length of adjacent
                    segments over that of surface short segments exceeds the
                    specified threshold ratio, the neighboring segments are
                    candidates for local sizing to improve target mesh quality.

            Use local sizing in cases where any of the following conditions exist: - Short edges significantly smaller than average

            Poor surface mesh (triangles) on top edges - Small surface patches composed of few triangles caused by small user-specified
                              dihedral angles.

            Valid values are VAL1 >= 1.0. Default: VAL1 = 1.0. - When NLMESH, EXPL is issued, VAL1 becomes the lower bound of mesh exploration.
                              Use VAL2 to define the upper bound for mesh
                              exploration.

            For more information about this control, see "Notes". - EXPL

            Specifies the nonlinear mesh-exploration behavior. Mesh exploration consists of trying various mesh controls to obtain the best quality mesh during remeshing process. - For more information about this control, see "Notes".

            LIST  - Lists all defined advanced control parameters.

        val1, val2, val3, val4
            Numerical input values that vary according to the specified Control
            option.

        Notes
        -----
        NLMESH is a global control command enabling mesh-quality adjustments
        for remeshing in nonlinear adaptivity. The command can be used when
        components are associated with mesh-quality criteria (NLADAPTIVE with
        Criterion = MESH).

        Issue the NLMESH command only in cases where advanced mesh-quality
        control is desirable for remeshing in nonlinear adaptivity. The
        settings specified by this command apply to all components having mesh-
        quality-based criteria defined.

        Following are LSRT usage examples to help you determine a suitable
        threshold value for the local sizing ratio:

        If the value is only slightly greater than the minimum (and default)
        value of 1.0, local sizing is imposed on all segments. Recommended:
        VAL1 > 1.1.

        If the value is large enough such that no neighboring segments have
        lengths that would cause the threshold ratio to be exceeded, all
        segments are treated as though local sizing is disabled.

        For mesh exploration (NLMESH,EXPL,VAL1):

        VAL1 = 0 -- The exception to the default behavior (no mesh exploration)
        occurs when remeshing fails to create a mesh for the user-specified
        NLMESH input parameters. In this case, mesh exploration is performed as
        though VAL1 = 1, with default NANG upper bounds of 60,60 in order to
        continue the solution, and the lower bounds being user-specified.

        VAL1 = 1 -- The NANG lower and upper bounds must be input; otherwise,
        the command is ignored. The upper bound can be input for NLAY also, but
        the exploration still triggers remeshings with the whole model as seed
        elements.

        VAL1 = 2 -- The NANG lower and upper bounds must be input; otherwise,
        the command is ignored.

        VAL1 = 3 -- An optional upper bound can be specified via LSRT. By
        default, the upper bound is set to be 30 percent more than the (user-
        specified) lower bound.

        Mesh exploration is needed only when it is difficult to obtain a good
        quality mesh via standard remeshing. It is good practice to first try
        less aggressive exploration with VAL1 = 1.
        """
        command = "NLMESH,%s,%s,%s,%s,%s" % (str(control), str(val1), str(val2), str(val3), str(val4))
        return self.run(command, **kwargs)

    def ovcheck(self, method="", frequency="", set_="", **kwargs):
        """APDL Command: OVCHECK

        Checks for overconstraint among constraint equations and Lagrange
        multipliers.

        Parameters
        ----------
        method
            Method used to determine which slave DOFs will be eliminated:

            TOPO - Topological approach (default). This method only works with constraint
                   equations; it does not work with Lagrange multipliers.

            ALGE - Algebraic approach.

            NONE - Do not use overconstraint detection logic.

        frequency
            Frequency of overconstraint detection for static or full transient
            analyses:

            ITERATION - For all equilibrium iterations (default).

            SUBSTEP - At the beginning of each substep.

            LOADSTEP - At the beginning of each load step.

        set\_
            Set of equations:

            All - Check for overconstraint between all constraint equations (default).

            LAG - Check for overconstraint only on the set of equations that involves Lagrange
                  multipliers. This is faster than checking all sets,
                  especially when the model contains large MPC bonded contact
                  pairs.

        Notes
        -----
        The OVCHECK command checks for overconstraint among the constraint
        equations (CE/CP) and the Lagrange multipliers for the globally
        assembled stiffness matrix. If overconstrained constraint equations or
        Lagrange multipliers are detected, they are automatically removed from
        the system of equations.

        The constraint equations that are identified as redundant are removed
        from the system and printed to the output file. It is very important
        that you check the removed equations—they may lead to convergence
        issues, especially for nonlinear analyses.

        The Frequency  and Set arguments are active only for the topological
        method (Method = TOPO). If you do not issue the OVCHECK command,
        overconstraint detection is performed topologically, and the slave DOFs
        are also determined topologically.

        Overconstraint detection slows down the run. We recommend using it to
        validate that your model does not contain any overconstraints. Then,
        you can switch back to the default method (no OVCHECK command is
        needed).

        As an example, consider the redundant set of constraint equations
        defined below:

        Equation number 2 will be removed by the overconstraint detection
        logic. However, this is an arbitrary decision since equation number 1
        could be removed instead. This is an important choice as the constant
        term is not the same in these two constraint equations. Therefore, you
        must check the removed constraint equations carefully.

        For detailed information on the topological and algebraic methods of
        overconstraint detection, see Constraints: Automatic Selection of Slave
        DOFs  in the Mechanical APDL Theory Reference
        """
        command = "OVCHECK,%s,%s,%s" % (str(method), str(frequency), str(set_))
        return self.run(command, **kwargs)

    def slashexpand(self, nrepeat1="", type1="", method1="", dx1="", dy1="",
                    dz1="", nrepeat2="", type2="", method2="", dx2="", dy2="",
                    dz2="", nrepeat3="", type3="", method3="", dx3="", dy3="",
                    dz3="", **kwargs):
        """APDL Command: /EXPAND

        Allows the creation of a larger graphic display than represented by the
        actual finite element analysis model.

        Parameters
        ----------
        nrepeat1, nrepeat2, nrepeat3
            The number of repetitions required for the element pattern. The
            default is 0 (no expansion).

        type1, type2, type3
            The type of expansion requested.

            RECT - Causes a Cartesian transformation of DX, DY, and DZ for each pattern (default).

            POLAR - Causes a polar transformation of DR, D-Theta and DZ for each pattern.

            AXIS - Causes 2-D axisymmetric expansion (that is, rotates a 2-D model created in the
                   X-Y plane about the Y axis to create a 3-D model).

            LRECT - Causes a Cartesian transformation of DX, DY, and DZ for each pattern about the
                    current local coordinate system (specified via the CSYS
                    command).

            LPOLAR - Causes a polar transformation of DR, D-Theta, and DZ for each pattern about the
                     local coordinate system (specified via the CSYS command).

        method1, method2, method3
            The method by which the pattern is repeated.

            FULL - Causes a normal repeat of the pattern (default).

            HALF - Uses a symmetry transformation for alternate repeats (to produce an image of a
                   complete circular gear from the image of half a tooth, for
                   example).

        dx1, dy1, dz1, dx2, dy2, dz2, dx3, dy3, dz3
            The Cartesian or polar increments between the repeated patterns.
            Also determines the reflection plane. Reflection is about the plane
            defined by the normal vector (DX, DY, DZ). If you want no
            translation, specify a small nonzero value.  For a half-image
            expansion, the increment DX, DY, or DZ is doubled so that
            POLAR,HALF, ,45 produces full images on 90° centers, and RECT,HALF,
            ,1 produces full images on 2-meter centers.

        Notes
        -----
        You can use the /EXPAND command to perform up to three symmetry
        expansions at once (that is, X, Y, and Z which is equal to going from a
        1/8 model to a full model). Polar expansions allow you to expand a
        wheel section into a half wheel, then into the half section, and then
        into the whole.

        The command displays elements/results when you issue the EPLOT command
        or postprocessing commands.

        The command works on all element and result displays, except as noted
        below. As the graphic display is created, the elements (and results)
        are repeated as many times as necessary, expanding the geometry and, if
        necessary, the displacements and stresses.

        Derived results are not supported.

        The /EXPAND command has the following limitations:

        It does not support solid model entities.

        POLAR, FULL or HALF operations are meaningful only in global
        cylindrical systems and are unaffected by the RSYS or DSYS commands.
        Cartesian symmetry or unsymmetric operations also occur about the
        global Cartesian system.

        It does not average nodal results across sector boundaries, even for
        averaged plots (such as those obtained via the PLNSOL command).

        Axisymmetric harmonic element results are not supported for Type =
        AXIS.

        The /EXPAND command differs significantly from the EXPAND command in
        several respects:

        The uses of /EXPAND are of a more general nature, whereas the EXPAND
        command is intended primarily to expand modal cyclic symmetry results.

        /EXPAND does not change the database as does the EXPAND command.

        You cannot print results displayed via /EXPAND.


        """
        command = "/EXPAND,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(nrepeat1), str(type1), str(method1), str(dx1), str(dy1), str(dz1), str(nrepeat2), str(type2), str(method2), str(dx2), str(dy2), str(dz2), str(nrepeat3), str(type3), str(method3), str(dx3), str(dy3), str(dz3))
        return self.run(command, **kwargs)

    def dldele(self, line="", lab="", **kwargs):
        """APDL Command: DLDELE

        Deletes DOF constraints on a line.

        Parameters
        ----------
        line
            Line for which constraints are to be deleted.  If ALL, delete for
            all selected lines [LSEL].  If LINE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for LINE

        lab
            Constraint label:

            ALL - All constraints.

            SYMM - Symmetry constraints.

            ASYM - Antisymmetry constraints.

            UX - Displacement in X direction.

            UY - Displacement in Y direction.

            UZ - Displacement in Z direction.

            ROTX - Rotation about X axis.

            ROTY - Rotation about Y axis.

            ROTZ - Rotation about Z axis.

            WARP - Warping magnitude.

            PRES - Pressure.

            TEMP, TBOT, TE2, TE3, . . ., TTOP - Temperature.

            VOLT - Electric scalar potential.

            AX - Magnetic vector potential in X direction.

            AY - Magnetic vector potential in Y direction.

            AZ - Magnetic vector potential in Z direction.

            CONC - Concentration.

        Notes
        -----
        Deletes the degree of freedom constraints (and all corresponding finite
        element constraints) on a line previously specified with the DL
        command.  See the DDELE command for delete details.

        Warning:: : On previously meshed lines, all constraints on affected
        nodes will also be deleted, whether or not they were specified by the
        DL command.

        This command is also valid in PREP7.
        """
        command = "DLDELE,%s,%s" % (str(line), str(lab))
        return self.run(command, **kwargs)

    def pbc(self, item="", key="", min_="", max_="", abs_="", **kwargs):
        """APDL Command: /PBC

        Shows boundary condition (BC) symbols and values on displays.

        Parameters
        ----------
        item
            Label identifying the item:

            U - Applied translational constraints (UX, UY, UZ).

            ROT - Applied rotational constraints (ROTX, ROTY, ROTZ).

            TEMP - Applied temperatures (TEMP, TBOT, TE2, TE3, . . ., TTOP).

            PRES - Applied fluid pressures.

            V - Applied flow velocities (VX, VY, VZ).

            VOLT - Applied voltages.

            MAG - Applied scalar magnetic potentials.

            A - Applied vector magnetic potentials.

            CONC - Concentration.

            CHRG - Applied electric charge.

            F or FORC - Applied structural forces (FX, FY, FZ).

            M or MOME - Applied structural moments (MX, MY, MZ).

            HEAT - Applied heat flows (HEAT, HBOT, HE2, HE3, . . ., HTOP).

            FLOW - Applied fluid flow.

            AMPS - Applied current flow.

            FLUX - Applied magnetic flux.

            CSG - Applied magnetic current segments.

            RATE - Diffusion flow rate.

            MAST - Master degrees of freedom.

            CP - Coupled nodes.

            CE - Nodes in constraint equations.

            NFOR - POST1 nodal forces.

            NMOM - POST1 nodal moments

            RFOR - POST1 reaction forces.

            RMOM - POST1 reaction moments (MX, MY, MZ).

            PATH - Path geometry (undistorted) associated with the PATH command after a PDEF or
                   PVECT command has been issued.

            ACEL - Global acceleration (ACELX, ACELY, ACELZ vector).

            OMEG - Global angular velocity (OMEGX, OMEGY, OMEGZ vector) and acceleration (DOMEGX,
                   DOMEGY, DOMEGZ vector).

            WELD - Applied spotwelds (ANSYS LS-DYNA).

            ALL - Represents all appropriate labels.

        key
            Symbol key:

            0 - Do not show symbol.

            1 - Show symbol.

            2 - Plot value next to symbol.

        min\_
            Minimum value in a range of values plotted on screen.

        max\_
            Maximum value in a range of values plotted on screen.

        abs\_
            Absolute number.  If KEY = 2 and ABS = 0, a number falling between
            the MIN and MAX is displayed.  If ABS is not specified, it defaults
            to 0.  If KEY = 2 and ABS = 1, an absolute value falling between
            the MIN and MAX is displayed.   ABS = 1 lets you eliminate the
            display of numbers whose absolute values are less than a desired
            tolerance.  For example, if ABS = 1, MIN = 10 and MAX = 1e8, values
            such as .83646 and -5.59737 are not displayed.

        Notes
        -----
        The /PBC command adds degree of freedom constraint, force load, and
        other symbols to displays.

        Symbols are applied to the selected nodes only.  All arrow and
        arrowhead symbols are oriented in the nodal coordinate system and lie
        in two perpendicular planes.  Force arrows are scaled proportional to
        their magnitude. (If KEY =  1, use /VSCALE to change arrow length.)
        For scalar quantities, the specific component direction (i.e., x, y, or
        z) of the symbol has no meaning, but the positive or negative sense
        (e.g., positive or negative x) represents a positive or negative scalar
        value, respectively.

        The effects of the /PBC command are not cumulative (that is, the
        command does not modify an existing setting from a previously issued
        /PBC command).  If you issue multiple /PBC commands during an analysis,
        only the setting specified by the most recent /PBC command applies.

        Use /PSTATUS or /PBC,STAT to display settings.  Use /PBC,DEFA to reset
        all specifications back to default.  See the /PSF and /PBF commands for
        other display symbols.

        In a cyclic symmetry analysis, the /PBC command is deactivated when
        cyclic expansion is active (/CYCEXPAND,,ON). To view boundary
        conditions on the basic sector, deactivate cyclic expansion
        (/CYCEXPAND,,OFF) and issue this command:: : /PBC,ALL,,1

        Issuing the command /PBC,PATH, ,1 displays all defined paths.

        The /PBC command is valid in any processor.
        """
        command = f"/PBC,{item},,{key},{min_},{max_},{abs_}"
        return self.run(command, **kwargs)

    def lsdele(self, lsmin="", lsmax="", lsinc="", **kwargs):
        """APDL Command: LSDELE

        Deletes load step files.

        Parameters
        ----------
        lsmin, lsmax, lsinc
            Range of load step files to be deleted, from LSMIN to LSMAX in
            steps of LSINC.  LSMAX defaults to LSMIN, and LSINC defaults to 1.
            If LSMIN = ALL, all load step files are deleted (and LSMAX and
            LSINC are ignored).  The load step files are assumed to be named
            Jobname.Sn, where n is a number assigned by the LSWRITE command (01
            --09,10,11, etc.).  On systems with a 3-character limit on the
            extension, the "S" is dropped for numbers > 99.

        Notes
        -----
        Deletes load step files in the current directory (written by the
        LSWRITE command).

        This command is also valid in PREP7.
        """
        command = "LSDELE,%s,%s,%s" % (str(lsmin), str(lsmax), str(lsinc))
        return self.run(command, **kwargs)

    
    def rezone(self, option="", ldstep="", sbstep="", **kwargs):
        """APDL Command: REZONE

        Initiates the rezoning process, sets rezoning options, and rebuilds the
        database.

        Parameters
        ----------
        option
            The rezoning method to employ:

            MANUAL - Manual rezoning. You decide when to use rezoning, what region(s) to rezone, and
                     what remeshing method to use on the selected region(s).
                     This method is currently the default and only option.

        ldstep
            The load step number at which rezoning should occur. The default
            value is the highest load step number found in the Jobname.Rnnn
            files (for the current jobname and in the current directory).

        sbstep
            The substep number of the specified load step (LDSTEP) at which
            rezoning should occur. The default value is the highest substep
            number found in the specified load step in the Jobname.Rnnn files
            (for the current jobname and in the current directory).

        Notes
        -----
        The REZONE command rebuilds the database (.db file) based on the
        specified load step and substep information, and updates nodes to their
        deformed position for remeshing.

        Before issuing this command, clear the database via the /CLEAR command.

        For more information, see Rezoning in the Advanced Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "REZONE,%s,%s,%s" % (str(option), str(ldstep), str(sbstep))
        return self.run(command, **kwargs)

    def modopt(self, method="", nmode="", freqb="", freqe="", cpxmod="",
               nrmkey="", modtype="", blocksize="", freqmod="", **kwargs):
        """APDL Command: MODOPT

        Specifies modal analysis options.

        Parameters
        ----------
        method
            Mode-extraction method to be used for the modal analysis.

            LANB - Block Lanczos

            LANPCG - PCG Lanczos

            SNODE - Supernode modal solver

            SUBSP - Subspace algorithm

            UNSYM - Unsymmetric matrix

            DAMP - Damped system

            QRDAMP - Damped system using QR algorithm

            VT - Variational Technology

        nmode
            The number of modes to extract. The value can depend on the value
            supplied for Method. NMODE has no default and must be specified. If
            Method = LANB, LANPCG, or SNODE, the number of modes that can be
            extracted can equal the DOFs in the model after the application of
            all boundary conditions.

        freqb
            The beginning, or lower end, of the frequency range of interest.

        freqe
            The ending, or upper end, of the frequency range of interest (in
            Hz). The default for Method = SNODE is described below. The default
            for all other methods is to calculate all modes, regardless of
            their maximum frequency.

        cpxmod
            Complex eigenmode key. (Valid only when Method = QRDAMP or Method =
            UNSYM).

            AUTO - Determine automatically if the eigensolutions are real or complex and output
                   them accordingly. This is the default for Method = UNSYM.
                   Not supported for Method = QRDAMP.

            ON or CPLX - Calculate and output complex eigenmode shapes.

            OFF or REAL - Do not calculate complex eigenmode shapes. This is required if a mode-
                          superposition analysis is intended after the modal
                          analysis for Method = QRDAMP. This is the default for
                          this method.

        nrmkey
            Mode shape normalization key:

            OFF - Normalize the mode shapes to the mass matrix (default).

            ON - Normalize the mode shapes to unity instead of to the mass matrix.  If a
                 subsequent spectrum or mode-superposition analysis is planned,
                 the mode shapes should be normalized to the mass matrix
                 (Nrmkey = OFF).

        modtype
            Type of modes calculated by the eigensolver. Only applicable to the
            unsymmetric eigensolver.

            Blank - Right eigenmodes. This value is the default.

            BOTH - Right and left eigenmodes. The left eigenmodes are written to Jobname.LMODE.
                   This option must be activated if a mode-superposition
                   analysis is intended.

        blocksize
            The block vector size to be used with the Block Lanczos or
            Subspace eigensolver (used only when Method = LANB or
            SUBSP). BlockSize must be an integer value between 0 and
            16. When BlockSize = zero or blank, the code decides the
            block size internally (normally, a value of 8 is used for
            LANB and a value of 6 is used for SUBSP).  Typically,
            higher BlockSize values are more efficient under each of
            the following conditions:

            - When running in out-of-core mode and there is not enough
              physical memory to buffer all of the files written by
              the Block Lanczos or Subspace eigensolver (and thus, the
              time spent doing I/O is considerable).
            - Many modes are requested (>100).
            - Higher-order solid elements dominate the model.

            The memory usage only slightly increases as BlockSize is
            increased. It is recommended that you use a value
            divisible by 4 (4, 8, 12, or 16).

        freqmod
            The specified frequency when the solved eigenvalues are no
            longer frequencies (for example, the model has the Floquet
            periodic boundary condition). In a modal analysis, the
            Floquet periodic boundary condition (body load FPBC) is
            only valid for the acoustic elements FLUID30, FLUID220,
            and FLUID221.

        Notes
        -----
        Specifies modal analysis (ANTYPE,MODAL) options. Additional options
        used only for the Supernode (SNODE) eigensolver are specified by the
        SNOPTION command. Additional options used only for the Subspace (SUBSP)
        eigensolver are specified by the SUBOPT command. If Method = LANPCG,
        ANSYS automatically switches to the PCG solver internally for this
        modal analysis. You can further control the efficiency of the PCG
        solver with the PCGOPT and EQSLV commands.

        For models that involve a non-symmetric element stiffness matrix, as in
        the case of a contact element with frictional contact, the QRDAMP
        eigensolver (MODOPT, QRDAMP) extracts modes in the modal subspace
        formed by the eigenmodes from the symmetrized eigenproblem. The QRDAMP
        eigensolver symmetrizes the element stiffness matrix on the first pass
        of the eigensolution, and in the second pass, eigenmodes are extracted
        in the modal subspace of the first eigensolution pass. For such non-
        symmetric eigenproblems, you should verify the eigenvalue and eigenmode
        results using the non-symmetric matrix eigensolver  (MODOPT,UNSYM).

        The DAMP and QRDAMP options cannot be followed by a subsequent spectrum
        analysis. The UNSYM method supports spectrum analysis when
        eigensolutions are real.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: The VT extraction method is not
        supported in Distributed ANSYS. All other extraction methods are
        supported. However, PCG Lanczos, SUBSP, UNSYM, DAMP, and QRDAMP are the
        only distributed eigensolvers that will run a fully distributed
        solution. The Block Lanczos and Supernode eigensolvers are not
        distributed eigensolvers; therefore, you will not see the full
        performance improvements with these methods that you would with a fully
        distributed solution.
        """
        command = f"MODOPT,{method},{nmode},{freqb},{freqe},{cpxmod},{nrmkey},{modtype},{blocksize},,,,{freqmod}"
        return self.run(command, **kwargs)

    
    def prcint(self, id_="", node="", dtype="", **kwargs):
        """APDL Command: PRCINT

        Lists the fracture parameter (CINT) results data.

        Parameters
        ----------
        id\_
            Crack ID number.

        node
            Crack tip node number. Default = ALL. Valid only for 3-D analysis.

        dtype
            Data type to output:

            JINT - J-integral

            IIN1 - Interaction integral 1

            IIN2 - Interaction integral 2

            IIN3 - Interaction integral 3

            K1 - Mode 1 stress-intensity factor

            K2 - Mode 2 stress-intensity factor

            K3 - Mode 3 stress-intensity factor

            G1 - Mode 1 energy release rate

            G2 - Mode 2 energy release rate

            G3 - Mode 3 energy release rate

            GT - Total energy release rate

            MFTX - Total material force X

            MFTY - Total material force Y

            MFTZ - Total material force Z

            TSTRESS - T-stress

            CEXT - Crack extension

            CSTAR - C*-integral

            STTMAX - Maximum circumferential stress

            PSMAX - Maximum circumferential stress when

        Notes
        -----
        When a crack tip node is defined, the values associated with the
        specified node are listed.

        Dtype = STTMAX or PSMAX are valid for XFEM-based crack growth analyses
        only.

        In an XFEM-based analysis, issue the command using this syntax:

        PRCINT, ID, , STTMAX (or PSMAX)
        """
        command = "PRCINT,%s,%s,%s" % (str(id_), str(node), str(dtype))
        return self.run(command, **kwargs)

    
    def dmprat(self, ratio="", **kwargs):
        """APDL Command: DMPRAT

        Sets a constant modal damping ratio.

        Parameters
        ----------
        ratio
            Modal damping ratio (for example, 2% is input as 0.02).

        Notes
        -----
        Sets a constant damping ratio for use in the mode-superposition
        transient (ANTYPE,TRANS) or harmonic (ANTYPE,HARMIC) analysis and the
        spectrum (ANTYPE,SPECTR) analysis.

        This command is also valid in PREP7.
        """
        command = "DMPRAT,%s" % (str(ratio))
        return self.run(command, **kwargs)

    def fscale(self, rfact="", ifact="", **kwargs):
        """APDL Command: FSCALE

        Scales force load values in the database.

        Parameters
        ----------
        rfact
            Scale factor for the real component.  Zero (or blank) defaults to
            1.0.  Use a small number for a zero scale factor.

        ifact
            Scale factor for the imaginary component.  Zero (or blank) defaults
            to 1.0.  Use a small number for a zero scale factor.

        Notes
        -----
        Scales force load (force, heat flow, etc.) values in the database.
        Scaling applies to the previously defined values for the selected nodes
        [NSEL] and the selected force labels [DOFSEL].  Issue FLIST command to
        review results.  Solid model boundary conditions are not scaled by this
        command, but boundary conditions on the FE model are scaled.

        Note:: : Such scaled FE boundary conditions may still be overwritten by
        unscaled solid model boundary conditions if a subsequent boundary
        condition transfer occurs.

        FSCALE does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "FSCALE,%s,%s" % (str(rfact), str(ifact))
        return self.run(command, **kwargs)

    
    def repeat(self, ntot="", vinc1="", vinc2="", vinc3="", vinc4="", vinc5="",
               vinc6="", vinc7="", vinc8="", vinc9="", vinc10="", vinc11="",
               **kwargs):
        """APDL Command: *REPEAT

        Repeats the previous command.

        Parameters
        ----------
        ntot
            Number of times the preceding command is executed (including the
            initial execution).  Must be 2 or greater.  NTOT of 2 causes one
            repeat (for a total of 2 executions).

        vinc1, vinc2,  vinc3, . . . , vinc11
            Value increments applied to first through eleventh data fields of
            the preceding command.

        Notes
        -----
        *REPEAT must immediately follow the command that is to be repeated.
        The numeric arguments of the initial command may be incremented in the
        generated commands.  The numeric increment values may be integer or
        real, positive or negative, zero or blank.  Alphanumeric arguments
        cannot be incremented.  For large values of NTOT, consider printout
        suppression (/NOPR command) first.

        Most commands beginning with slash (/), star (*), as well as "unknown
        command" macros, cannot be repeated.  For these commands, or if more
        than one command is to be repeated, include them within a do-loop. File
        switching commands (those reading additional commands) cannot be
        repeated.  If a *REPEAT command  immediately follows another *REPEAT
        command, the repeat action only applies to the last non-*REPEAT
        command.  Also, *REPEAT should not  be used in interactive mode
        immediately after a) a command (or its log file equivalent) that uses
        picking, or b) a command that requires a response from the user.

        This command is valid in any processor.
        """
        command = "*REPEAT,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(ntot), str(vinc1), str(vinc2), str(vinc3), str(vinc4), str(vinc5), str(vinc6), str(vinc7), str(vinc8), str(vinc9), str(vinc10), str(vinc11))
        return self.run(command, **kwargs)

    def sflist(self, node="", lab="", **kwargs):
        """APDL Command: SFLIST

        Lists surface loads.

        Parameters
        ----------
        node
            Node at which surface load is to be listed.  If ALL (or blank),
            list for all selected nodes [NSEL].  If NODE = P, graphical picking
            is enabled and all remaining command fields are ignored (valid only
            in the GUI).  A component name may be substituted for NODE.

        lab
            Valid surface load label.  If ALL (or blank), use all appropriate
            labels.

        Notes
        -----
        Lists the surface loads as applied with the SF command.  Loads are
        listed only for the specified nodes on external faces of selected area
        and volume elements.  Use SFELIST for line elements. The surface loads
        listed correspond to the current database values. The database is not
        updated for surface loads in POST1. Surface loads specified in tabular
        form, however, do list their values corresponding to the current
        results set in POST1.

        For SURF151 or SURF152 elements with an extra node for radiation and/or
        convection calculations (KEYOPT(5) = 1), the bulk temperature listed is
        the temperature of the extra node. If the thermal solution does not
        converge, the extra node temperature is not available for listing.

        This command is valid in any processor.
        """
        command = "SFLIST,%s,%s" % (str(node), str(lab))
        return self.run(command, **kwargs)

    def accoption(self, activate="", **kwargs):
        """APDL Command: ACCOPTION

        Specifies GPU accelerator capability options.

        Parameters
        ----------
        activate
            Activates the GPU accelerator capability within the equation
            solvers.

            Do not use GPU accelerator. - Use GPU accelerator.

        Notes
        -----
        The GPU accelerator capability requires specific hardware to be
        installed on the machine. See the appropriate ANSYS, Inc. Installation
        Guide (Windows or Linux) for a list of supported GPU hardware. Use of
        this capability also requires HPC licensing. For more information, see
        GPU Accelerator Capability in the Parallel Processing Guide.

        The GPU accelerator capability is available for the sparse direct
        solver and the PCG and JCG iterative solvers. Static, buckling, modal,
        full harmonic, and full transient analyses are supported. For buckling
        analyses, the Block Lanczos and Subspace eigensolvers are supported.
        For modal analyses, only the Block Lanczos, PCG Lanczos, Subspace,
        Unsymmetric, and Damped eigensolvers are supported. Activating this
        capability when using other equation solvers or other analysis types
        has no effect.

        The GPU accelerator capability is supported only on the Windows 64-bit
        and Linux 64-bit platforms.
        """
        command = "ACCOPTION,%s" % (str(activate))
        return self.run(command, **kwargs)

    def calc(self, **kwargs):
        """APDL Command: CALC

        Specifies "Calculation settings" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "CALC,"
        return self.run(command, **kwargs)

    def sudel(self, surfname="", **kwargs):
        """APDL Command: SUDEL

        Delete geometry information as well as any mapped results for specified
        surface.

        Parameters
        ----------
        surfname
            Eight character surface name.
        """
        command = "SUDEL,%s" % (str(surfname))
        return self.run(command, **kwargs)

    def spunit(self, tblno="", type_="", gvalue="", keyinterp="", **kwargs):
        """APDL Command: SPUNIT

        Defines the type of multi-point response spectrum.

        Parameters
        ----------
        tblno
            Input table number.

        type\_
            Label identifying the type of spectrum:

            DISP   - Displacement spectrum (SPVAL values interpreted as displacements with units of
                     length).

            VELO   - Velocity spectrum (SPVAL values interpreted as velocities with units of
                     length/time).

            ACEL   - Acceleration spectrum (SPVAL values interpreted as accelerations with units of
                     length/time2).

            ACCG   - Acceleration spectrum (SPVAL values interpreted as accelerations with units of
                     g/time2).

            FORC   - Force spectrum.

            PRES   - Pressure spectrum.

        gvalue
            Value of acceleration due to gravity in any arbitrary units for
            Type=ACCG table. Default is 386.4 in/sec2.

        keyinterp
            Key to activate or deactivate the linear interpolation between
            input response spectrum points and input response spectrum curves:

            0 (OFF or NO) - Deactivate linear and use logarithmic interpolation. This value is the default.

            1 (ON or YES) - Activate linear interpolation.

        Notes
        -----
        Defines the type of multi-point response spectrum defined by the SPFREQ
        and  SPVAL commands.

        Force (FORC) and pressure (PRES) type spectra can be used only as a
        nodal excitation.

        GVALUE is valid only when type=ACCG is specified. A zero or negative
        value cannot be used. A parameter substitution can also be performed.

        This command is also valid in PREP7.
        """
        command = "SPUNIT,%s,%s,%s,%s" % (str(tblno), str(type_), str(gvalue), str(keyinterp))
        return self.run(command, **kwargs)

    def cycexpand(self, wn="", option="", value1="", value2="", **kwargs):
        """APDL Command: /CYCEXPAND

        Graphically expands displacements, stresses and strains of a cyclically
        symmetric model.

        Parameters
        ----------
        wn
            The window number to which the expansion applies. Valid values are
            1 through 5. The default value is 1. The window number applies only
            to the AMOUNT argument.

        option
            One of the following options:

            ON - Activates cyclic expansion using the previous settings (if any). If no previous
                 settings exist, this option activates the default settings.

            DEFAULT - Resets cyclic expansion to the default settings.

            OFF - Deactivates cyclic expansion. This option is the default.

            STATUS - Lists the current cyclic expansion settings.

            AMOUNT - The number of repetitions or the total angle.

            Value1 - NREPEAT

            Value2 - The number of repetitions. The default is the total number of sectors in 360
                     degrees.

            or - Value1

            ANGLE - Value2

            The total angle in degrees. The default is 360. - WHAT

            A specified portion or subset of the model to expand: - Value1

            The component name of the elements to expand. The default is all selected components. - EDGE

            Sector edge display key. - -1

            Suppresses display of edges between sectors even if the cyclic count varies between active windows. - Caution:  Plots with fewer than the maximum number of repetitions may have
                              missing element faces at the sector boundaries.

            0 or OFF - Averages stresses or strains across sector boundaries. This value is the
                       default (although the default reverts to 1 or ON if the
                       cyclic count varies between active windows).

            1 or ON - No averaging of stresses or strains occurs and sector boundaries are shown on
                      the plot.

            PHASEANG - The phase angle shift:

            Value1 - The phase angle shift in degrees. The valid range is 0 through 360. The default
                     is 0. For a full harmonic solution, this value is
                     typically the phase angle obtained via the CYCPHASE
                     command. If Value1 = AMPLITUDE (or if Value1 ≥ 360), the
                     amplitude is supplied. The amplitude solution for non-
                     component results (such as equivalent stress) are not
                     valid. For a mode-superposition harmonic solution, if
                     Value1 = SWEEP, the maximum values across a phase angle
                     sweep are supplied.

        Notes
        -----
        In preprocessing, the /CYCEXPAND command verifies a cyclically
        symmetric model by graphically expanding it partially or through the
        full 360 degrees.

        For the postprocessing plot nodal solution (PLNSOL) operation, the
        command graphically expands displacements, stresses and strains of a
        cyclically symmetric model partially or though the full 360 degrees by
        combining the real (original nodes and elements) and imaginary
        (duplicate nodes and elements) parts of the solution.

        For the print nodal solution (PRNSOL) operation, the command expands
        the printed output of displacements or stresses on a sector-by-sector
        basis.

        Use of the /CYCEXPAND command does not change the database. The command
        does not modify the geometry, nodal displacements or element stresses.

        The command affects element and result plots only. It has no effect on
        operations other than plot element solution (PLESOL), plot nodal
        solution (PLNSOL), print nodal solution (PRNSOL), and calculate
        harmonic solution (CYCCALC). Operations other than PLESOL, PLNSOL,
        PRNSOL, or CYCCALC work on the unprocessed real and imaginary parts of
        a cyclic symmetry solution

        If you issue a /CYCEXPAND,,OFF command, you cannot then expand the
        model by simply issuing another  /CYCEXPAND command  (for example, to
        specify an NREPEAT value for the number of repetitions). In such a
        case, you must specify /CYCEXPAND,,ON, which activates expansion using
        the previous settings (if any) or the default settings.

        The command requires PowerGraphics and will turn PowerGraphics on
        (/GRAPHICS,POWER) if not already active. Any setting which bypasses
        PowerGraphics (for example, /PBF) also bypasses cyclic expansion; in
        such cases, the /CYCEXPAND command displays unprocessed real and
        imaginary results.

        The CYCPHASE command uses full model graphics (/GRAPHICS,FULL) to
        compute peak values. Because of this, there may be slight differences
        between max/min values obtained with CYCPHASE, and those obtained via
        /CYCEXPAND, which uses power graphics (/GRAPHICS,POWER).

        For PHASEANG = AMPLITUDE (or 360) with a cyclic full harmonic solution,
        the only appropriate coordinate system is the solution coordinate
        system (RSYS,SOLU)

        To learn more about analyzing a cyclically symmetric structure, see the
        Cyclic Symmetry Analysis Guide.
        """
        command = "/CYCEXPAND,%s,%s,%s,%s" % (str(wn), str(option), str(value1), str(value2))
        return self.run(command, **kwargs)

    
    def udoc(self, wind="", cl_ass="", key="", **kwargs):
        """APDL Command: /UDOC

        Determines position and content for the multi-legend options.

        Parameters
        ----------
        wind
            The window number to which the command applies. (defaults to 1)

        class
            The type (and relative importance) of legend item being displayed:

            CNTR - Contour legend. This legend item is controlled separately from the other legend
                   items (see note below).

            DATE - The items in the DATE class include the date and time, or the ANSYS graphical
                   logo (/PLOPTS,LOGO,1). This item is shown by default in all
                   plots.

            GWIN - The items in the GWIN class include the entity acronyms that appear in the
                   legend of a multiplot of entities (Nodes, Elements,
                   Keypoints, Lines, Areas, Volumes). GWIN items are shown by
                   default for all GPLOT displays.

            TYPE - Items in the TYPE class include the plot type (e.g. ELEMENTS, MATERIALS, NODAL
                   SOLUTIONS, etc.). TYPE items are shown by default in all
                   plots.

            TYP2 - Items in the TYP2 class include supplementary type information, such as DMAX
                   and SMAX for nodal solutions. TYP2 items are shown by
                   default in all plots.

            INUM - Items in the INUM class include the number labels generated by the /PNUM
                   command. This class is displayed by default in all plots
                   that contain /PNUM information.

            BCDC - The items in the BCDC class include labels created by the /PBC  command. This
                   class is shown by default in all plots which contain /PBC
                   information.

            VECT - Items in the VECT class include labels created by the PLVECT command. This
                   class is shown by default for all PLVECT plots.

            SURF - The items in the SURF class include labels from the /PSF legend. This class is
                   shown by default on all plots of surface boundary
                   conditions.

            BODY - Items from the BODY class include labels from the /PBF legend. This class is
                   shown by default in all plots of body forces.

            PSTA - Items from the PSTA class include stress scaling statistics, such as the
                   /SSCALE setting. This class is not shown as the default for
                   any type of plot, and must be specifically referenced to
                   display the included data.

            VIEW - The items in the VIEW class include view statistics. This class is not shown as
                   the default for any type of plot, and must be specifically
                   referenced to display the included data.

            MISC - The items in the MISC class include supplementary labels like /EXPANDED and
                   Stress Section Cross Section. This class is not shown as the
                   default for any type of plot, and must be specifically
                   referenced to display the included data.

        key
            Switch:

        Notes
        -----
        The legend classes conform to the controls specified in the window
        options panel (PlotCtrls> Window Controls> Window Options). In many
        instances, the legend controls specified with the /PLOPTS command will
        take precedence and override /UDOC specifications. For instance:

        /PLOPTS,LEG1,OFF will disable the TYPE, TYP2, INUM, and MISC classes,
        regardless of the /UDOC settings.

        /PLOPTS,LEG2,OFF will disable the VIEW class, regardless of the /UDOC
        settings.

        /PLOPTS,LEG3,OFF will disable the PSTA class, regardless of the /UDOC
        settings.

        All items in a class are listed with the same X coordinate (except for
        contours). The contents of the text classes are dumped onto the display
        window from top to bottom, in order of class importance.

        The font specification for text items that are included in the user-
        specified legends are controlled with the /DEVICE command (PlotCtrls>
        Font Controls> Anno/Graph Font).

        The floating point values for the data presented in the legend(s) are
        controlled by the /GFORMAT command.
        """
        command = "/UDOC,%s,%s,%s" % (str(wind), str(cl_ass), str(key))
        return self.run(command, **kwargs)

    def sfelist(self, elem="", lab="", **kwargs):
        """APDL Command: SFELIST

        Lists the surface loads for elements.

        Parameters
        ----------
        elem
            Element at which surface load is to be listed.  If ALL (or blank),
            list loads for all selected elements [ESEL].  If ELEM = P,
            graphical picking is enabled and all remaining command fields are
            ignored (valid only in the GUI).  A component name may be
            substituted for ELEM.

        lab
            Valid surface load label.  If ALL (or blank), use all appropriate
            labels.

        Notes
        -----
        The surface loads listed correspond to the current database values. The
        database is not updated for surface loads in POST1. Surface loads
        specified in tabular form, however, do list their values corresponding
        to the current results set in POST1.

        For SURF151 or SURF152 elements with an extra node for radiation and/or
        convection calculations (KEYOPT(5) = 1), the bulk temperature listed is
        the temperature of the extra node. If the thermal solution does not
        converge, the extra node temperature is not available for listing.

        Film effectiveness and free stream temperatures specified by the SFE
        command (Lab = CONV) can only be listed by this command. The command
        lists film coefficients and bulk temperatures first and then film
        effectiveness and free stream temperatures below those values.

        Distributed ANSYS Restriction: In Distributed ANSYS within the SOLUTION
        processor, SFELIST support is not available for elements SURF151 and
        SURF152 when surface loading is applied via extra nodes (KEYOPT(5 > 0).
        If the command is issued under these circumstances, the resulting
        surface loads shown are not reliable.

        This command is valid in any processor.
        """
        command = "SFELIST,%s,%s" % (str(elem), str(lab))
        return self.run(command, **kwargs)

    
    def susave(self, lab="", fname="", fext="", fdir="", **kwargs):
        """APDL Command: SUSAVE

        Saves surface definitions to a file.

        Parameters
        ----------
        lab
            Eight-character surface name.

        fname
            File name and directory path (248 character maximum, including
            directory). If you do not specify a directory path, the default is
            your working directory and you can use all 248 characters for the
            file name. The file name defaults to the jobname.

        fext
            File name extension (eight-character maximum). The extension
            defaults to "surf".

        fdir
            Optional path specification.

        Notes
        -----
        The SUSAVE command saves surface definitions (geometry
        information)--and any result items mapped onto the surfaces--to a file.

        Issuing the SUSAVE command has no effect on the database. The database
        remains unchanged.

        Subsequent executions of the SUSAVE command overwrite previous data in
        the file.

        To read the contents of the file created via the SUSAVE command, issue
        the SURESU command.
        """
        command = "SUSAVE,%s,%s,%s,%s" % (str(lab), str(fname), str(fext), str(fdir))
        return self.run(command, **kwargs)

    def slashline(self, x1="", y1="", x2="", y2="", **kwargs):
        """APDL Command: /LINE

        Creates annotation lines (GUI).

        Parameters
        ----------
        x1
            Line X starting location (-1.0 < X < 2.0).

        y1
            Line Y starting location (-1.0 < Y < 1.0).

        x2
            Line X ending location (-1.0 < X < 2.0).

        y2
            Line Y ending location (-1.0 < Y < 1.0).

        Notes
        -----
        Defines annotation lines to be written directly onto the display at a
        specified location.  This is a command generated by the Graphical User
        Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All lines are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC command to set the attributes of
        the line.

        This command is valid in any processor.
        """
        command = "/LINE,%s,%s,%s,%s" % (str(x1), str(y1), str(x2), str(y2))
        return self.run(command, **kwargs)

    def normal(self, wn="", key="", **kwargs):
        """APDL Command: /NORMAL

        Allows displaying area elements by top or bottom faces.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        key
            Display key:

            0 - No face distinction.

            1 - Show only area elements having their positive normals directed toward the
                viewing point.

            -1 - Show only area elements having their positive normals directed away from the
                 viewing point.

        Notes
        -----
        /NORMAL allows you to select area elements and area plots by the top or
        bottom faces.  It is useful for checking the normal directions on shell
        elements.  The positive normal (element Z direction) is defined by the
        right-hand rule following the node I, J, K, L input direction.  This
        command is available only with raster or hidden-line displays, for
        WIN32 or X11 2-D displays only.

        This command is valid in any processor.
        """
        command = "/NORMAL,%s,%s" % (str(wn), str(key))
        return self.run(command, **kwargs)

    def gslist(self, lab="", **kwargs):
        """APDL Command: GSLIST

        When using generalized plane strain, lists the input data or solutions.

        Parameters
        ----------
        lab
            Specify the content to be listed.

            GEOMETRY - List the data input using GSGDATA

            BC - List the data input using GSBDATA.

            REACTIONS - When the command is issued in POST1, list the reaction force at the ending
                        point,

             and the moment about X and Y if the corresponding constraints were applied. - RESULTS

            When the command is issued in POST1, list the change of fiber length at the ending point during deformation and the rotation of the ending plane about X and Y during deformation. - ALL

        Notes
        -----
        This command can be used to list the initial position of the ending
        plane, the applied load or displacements in the fiber direction, the
        resulting position of the ending plane after deformation, and the
        available reaction forces and moments at the ending point.

        All inputs and outputs are in the global Cartesian coordinate system.
        For more information about the generalized plane strain feature, see
        Generalized Plane Strain Option of Current-Technology Solid Elements in
        the Element Reference.

        This command is valid in any processor.
        """
        command = "GSLIST,%s" % (str(lab))
        return self.run(command, **kwargs)

    def sfadele(self, area="", lkey="", lab="", **kwargs):
        """APDL Command: SFADELE

        Deletes surface loads from areas.

        Parameters
        ----------
        area
            Area to which surface load deletion applies.  If ALL, delete load
            from all selected areas [ASEL].  If AREA = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may be substituted for AREA.

        lkey
            Load key associated with surface load (defaults to 1).  See the SFA
            command for details.

        lab
            Valid surface load label.  If ALL, use all appropriate labels.  See
            the SFA command for labels.

        Notes
        -----
        Deletes surface loads (and all corresponding finite element loads) from
        selected areas.

        This command is also valid in PREP7.
        """
        command = "SFADELE,%s,%s,%s" % (str(area), str(lkey), str(lab))
        return self.run(command, **kwargs)

    def slashreset(self, **kwargs):
        """APDL Command: /RESET

        Resets display specifications to their initial defaults.

        Notes
        -----
        Resets slash display specifications (/WINDOW, /TYPE, /VIEW, etc.) back
        to their initial default settings (for convenience).  Also resets the
        focus location to the geometric center of the object.

        This command is valid in any processor.
        """
        command = "/RESET,"
        return self.run(command, **kwargs)

    
    def slashexit(self, slab="", fname="", ext="", **kwargs):
        """APDL Command: /EXIT

        Stops the run and returns control to the system.

        Parameters
        ----------
        slab
            Mode for saving the database:

            MODEL - Save the model data (solid model, finite element model, loadings, etc.) only
                    (default).

            SOLU - Save the model data and the solution data (nodal and element results).

            ALL - Save the model data, solution data and post data (element tables, path results,
                  etc.)

            NOSAVE - Do not save any data on File.DB (an existing DB file will not be overwritten).

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        The current database information may be written on File.DB or a named
        file. If File.DB already exists, a backup file (File.DBB) will also be
        written whenever a new File.DB is written.

        This command is valid in any processor. Issuing this command at any
        point will exit the program.
        """
        command = "/EXIT,%s,%s,%s" % (str(slab), str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def autots(self, key="", **kwargs):
        """APDL Command: AUTOTS

        Specifies whether to use automatic time stepping or load stepping.

        Parameters
        ----------
        key
            Automatic time stepping key:

            OFF - Do not use automatic time stepping.

            ON - Use automatic time stepping (default).

            AUTO - The program determines whether to use automatic time stepping (used by
                   Workbench).

        Notes
        -----
        Specifies whether to use automatic time stepping (or load stepping)
        over this load step. If Key = ON, both time step prediction and time
        step bisection will be used.

        You cannot use automatic time stepping [AUTOTS], line search [LNSRCH],
        or the DOF solution predictor [PRED] with the arc-length method
        [ARCLEN, ARCTRM]. If you activate the arc-length method after you set
        AUTOTS, LNSRCH, or PRED, a warning message appears. If you choose to
        proceed with the arc-length method, the program disables your automatic
        time stepping, line search, and DOF predictor settings, and the time
        step size is controlled by the arc-length method internally.

        This command is also valid in PREP7.
        """
        command = "AUTOTS,%s" % (str(key))
        return self.run(command, **kwargs)

    def ocdelete(self, datatype="", zonename="", **kwargs):
        """APDL Command: OCDELETE

        Deletes a previously defined ocean load.

        Parameters
        ----------
        datatype
            Ocean data type to delete. Valid values are BASIC, CURRENT, WAVE,
            ZONE, and ALL.

        zonename
            The name of the ocean zone to delete. If no name is specified, all
            defined ocean zones are deleted. Valid only when DataType = ZONE.

        Notes
        -----
        The OCDELETE command deletes previously specified ocean data from the
        database.

        This command is also valid in PREP7.
        """
        command = "OCDELETE,%s,%s" % (str(datatype), str(zonename))
        return self.run(command, **kwargs)

    def window(self, wn="", xmin="", xmax="", ymin="", ymax="", ncopy="",
               **kwargs):
        """APDL Command: /WINDOW

        Defines the window size on the screen.

        Parameters
        ----------
        wn
            Window reference number (1 to 5).  Defaults to 1.  This number, or
            ALL (for all active windows), may be used on other commands.

        xmin, xmax, ymin, ymax
            Screen coordinates defining window size.  Screen coordinates are
            measured as -1.0 to 1.67 with the origin at the screen center.  For
            example, (-1,1.67,-1,1) is full screen, (-1,0,-1,0) is the left
            bottom quadrant.  If XMIN = OFF, deactivate this previously defined
            window; if ON, reactivate this previously defined window.  If FULL,
            LEFT, RIGH, TOP, BOT, LTOP, LBOT, RTOP, RBOT, form full, half, or
            quarter window.  If SQUA, form largest square window within the
            current graphics area.  If DELE, delete this window (cannot be
            reactivated with ON).

        ncopy
            Copies the current specifications from window NCOPY (1 to 5) to
            this window.  If NCOPY = 0 (or blank), no specifications are
            copied.

        Notes
        -----
        Defines the window size on the screen.  Windows may occupy a separate
        section of the screen or they may overlap.  Requested displays are
        formed in all windows according to the selected window specifications.

        This command is valid in any processor.
        """
        command = "/WINDOW,%s,%s,%s,%s,%s,%s" % (str(wn), str(xmin), str(xmax), str(ymin), str(ymax), str(ncopy))
        return self.run(command, **kwargs)

    
    def wrfull(self, ldstep="", **kwargs):
        """APDL Command: WRFULL

        Stops solution after assembling global matrices.

        Parameters
        ----------
        ldstep
            Specify action to take:

            OFF or 0 - Turn off feature (default)

            N - Turn on feature and set it to stop after assembling the global matrices and
                writing the .FULL file for load step N.

        Notes
        -----
        This command is used in conjunction with the SOLVE command to generate
        the assembled matrix file (.FULL file) only.  The element matrices are
        assembled into the relevant global matrices for the particular analysis
        being performed and the .FULL file is written.  Equation solution and
        the output of data to the results file are skipped.  To dump the
        matrices written on the .FULL file into Harwell-Boeing format, use the
        HBMAT command in /AUX2. To copy the matrices to a postscript format
        that can be viewed graphically, use the PSMAT command.

        To use the LSSOLVE macro with this command, you may need to modify the
        LSSOLVE macro to properly stop at the load step of interest.

        This command only valid for linear static, full harmonic, and full
        transient analyses when the sparse direct solver is selected.  This
        command is also valid for buckling or modal analyses with any mode
        extraction method.  This command is not valid for nonlinear analyses.
        It is not supported in a linear perturbation analysis.

        In general, the assembled matrix file .FULL contains stiffness, mass,
        and damping matrices. However, the availability of the matrices depends
        on the analysis type chosen when the file is written.
        """
        command = "WRFULL,%s" % (str(ldstep))
        return self.run(command, **kwargs)

    
    def immed(self, key="", **kwargs):
        """APDL Command: IMMED

        Allows immediate display of a model as it is generated.

        Parameters
        ----------
        key
            Immediate mode key:

            0 - Display only upon request, i.e., no immediate display (default with the GUI
                off).

            1 - Display immediately as model is generated (default with the GUI on).

        Notes
        -----
        Allows immediate display of a model (as it is generated) without a
        screen erase or a display request.  Available only during an
        interactive session at a graphics display terminal.  A valid graphics
        device name must first be specified on the /SHOW command.

        The IMMED command allows you to control whether or not the model is
        displayed immediately as it is generated in an interactive session.  By
        default in the GUI, your model will immediately be displayed in the
        Graphics Window as you create new entities (such as areas, keypoints,
        nodes, elements, local coordinate systems, boundary conditions, etc.).
        This is called immediate mode graphics.  Also note that symbols (such
        as boundary conditions, local coordinate system triads, etc.) are shown
        immediately and will be present on subsequent displays unless you "turn
        off" the appropriate symbol using the GUI plot controls function or the
        appropriate graphics specification command.

        An immediate image will also be automatically scaled to fit nicely
        within the Graphics Window -- a feature called automatic scaling.  The
        new scaling is usually apparent on the automatic replot associated with
        immediate mode.  To suppress automatic replot, issue /UIS,REPLOT,0.
        (With automatic replot suppressed, the immediate image may not always
        be automatically scaled correctly.)

        Note:: : An immediate display in progress should not be aborted with
        the usual system "break" feature (or else the ANSYS session itself will
        be aborted).  When you run the ANSYS program interactively without
        using the GUI, immediate mode is off by default.

        This command is valid only in PREP7.
        """
        command = "IMMED,%s" % (str(key))
        return self.run(command, **kwargs)

    
    def lcfact(self, lcno="", fact="", **kwargs):
        """APDL Command: LCFACT

        Defines scale factors for load case operations.

        Parameters
        ----------
        lcno
            Load case pointer number.  If ALL, apply to all selected load cases
            [LCSEL].

        fact
            Scale factor applied to load case LCNO.  Blank defaults to 1.0.

        Notes
        -----
        Defines scale factors to be used in the load case operations [LCASE or
        LCOPER].  Scale factors are applied after an absolute value operation
        [LCABS] and are applied only to defined load cases [LCDEF].
        """
        command = "LCFACT,%s,%s" % (str(lcno), str(fact))
        return self.run(command, **kwargs)

    def lsdump(self, enginename="", filename="", **kwargs):
        """APDL Command: *LSDUMP

        Dumps a linear solver engine to a binary File.

        Parameters
        ----------
        enginename
            Name used to identify this engine. Must have been previously
            created using *LSENGINE and factorized using *LSFACTOR.

        filename
            Name of the file to create.

        Notes
        -----
        Dumps a previously factorized linear solver system to a binary file.
        Only LAPACK and BCS linear solvers can be used with this feature. The
        Linear Solver can later be restored with the *LSRESTORE command.

        A BCS Sparse Solver can be dumped only if uses the INCORE memory option
        (see BCSOPTION).
        """
        command = "*LSDUMP,%s,%s" % (str(enginename), str(filename))
        return self.run(command, **kwargs)

    def snoption(self, rangefact="", blocksize="", robustlev="", compute="",
                 solve_info="", **kwargs):
        """APDL Command: SNOPTION

         Specifies Supernode (SNODE) eigensolver options.

        Parameters
        ----------
        rangefact
            Factor used to control the range of eigenvalues computed for each
            supernode. The value of RangeFact must be a number between 1.0 and
            5.0. By default the RangeFact value is set to 2.0, which means that
            all eigenvalues between 0 and 2*FREQE are computed for each
            supernode (where FREQE is the upper end of the frequency range of
            interest as specified on the MODOPT command). As the RangeFact
            value increases, the eigensolution for the SNODE solver becomes
            more accurate and the computational time increases.

        blocksize
            BlockSize to be used when computing the final eigenvectors. The
            value of Blocksize must be either MAX or a number between 1 and
            NMODE, where NMODE is the number of modes to be computed as set on
            the MODOPT command. Input a value of MAX to force the algorithm to
            allocate enough memory to hold all of the final eigenvectors in
            memory and, therefore, only read through the file containing the
            supernode eigenvectors once. Note that this setting is ONLY
            recommended when there is sufficient physical memory on the machine
            to safely hold all of the final eigenvectors in memory.

        robustlev
            Parameter used to control the robustness of the SNODE eigensolver.
            The value of RobustLev must be a number between 0 and 10.  Lower
            values of RobustLev allow the eigensolver to run in the most
            efficient manner for optimal performance.  Higher values of
            RobustLev often slow down the performance of the eigensolver, but
            can increase the robustness; this may be desirable if a problem is
            detected with the eigensolver or its eigensolution.

        compute
            Key to control which computations are performed by the Supernode
            eigensolver:

            EVALUE - The eigensolver computes only the eigenvalues.

            EVECTOR - The eigensolver computes only the eigenvectors
                      (must be preceded by a modal analysis where the
                      eigenvalues were computed using the Supernode
                      eigensolver).

            BOTH - The eigensolver computes both the eigenvalues and
                   eigenvectors in the same pass (default).

        solve_info
            Solver output option:

            OFF - Turns off additional output printing from the
            Supernode eigensolver (default).

            PERFORMANCE - Turns on additional output printing from the
                          Supernode eigensolver, including a
                          performance summary and a summary of file
                          I/O for the Supernode
                          eigensolver. Information on memory usage
                          during assembly of the global matrices (that
                          is, creation of the Jobname.FULL file) is
                          also printed with this option.

        Notes
        -----
        This command specifies options for the Supernode (SNODE)
        eigensolver.

        Setting RangeFact to a value greater than 2.0 will improve the
        accuracy of the computed eigenvalues and eigenvectors, but
        will often increase the computing time of the SNODE
        eigensolver. Conversely, setting RangeFact to a value less
        than 2.0 will deteriorate the accuracy of the computed
        eigenvalues and eigenvectors, but will often speedup the
        computing time of the SNODE eigensolver.  The default value of
        2.0 has been set as a good blend of accuracy and performance.

        The SNODE eigensolver reads the eigenvectors and related
        information for each supernode from a file and uses that
        information to compute the final eigenvectors.  For each
        eigenvalue/eigenvector requested by the user, the program must
        do one pass through the entire file that contains the
        supernode eigenvectors.  By choosing a BlockSize value greater
        than 1, the program can compute BlockSize number of final
        eigenvectors for each pass through the file.  Therefore,
        smaller values of BlockSize result in more I/O, and larger
        values of BlockSize result in less I/O.  Larger values of
        BlockSize also result in significant additional memory usage,
        as BlockSize number of final eigenvectors must be stored in
        memory. The default Blocksize of min(NMODE,40) is normally a
        good choice to balance memory and I/O usage.

        The RobustLev field should only be used when a problem is
        detected with the accuracy of the final solution or if the
        Supernode eigensolver fails while computing the
        eigenvalues/eigenvectors. Setting RobustLev to a value greater
        than 0 will cause the performance of the eigensolver to
        deteriorate. If the performance deteriorates too much or if
        the eigensolver continues to fail when setting the RobustLev
        field to higher values, then switching to another eigensolver
        such as Block Lanczos or PCG Lanczos is recommended.

        Setting Compute = EVALUE causes the Supernode eigensolver to
        compute only the requested eigenvalues.  During this process a
        Jobname.SNODE file is written; however, a Jobname.MODE file is
        not written. Thus, errors will likely occur in any downstream
        computations that require the Jobname.MODE file (for example,
        participation factor computations, mode superpostion
        transient/harmonic analysis, PSD analysis). Setting Compute =
        EVECTOR causes the Supernode eigensolver to compute only the
        corresponding eigenvectors. The Jobname.SNODE file and the
        associated Jobname.FULL file are required when requesting
        these eigenvectors. In other words, the eigenvalues must have
        already been computed for this model before computing the
        eigenvectors. This field can be useful in order to separate
        the two steps (computing eigenvalues and computing
        eigenvectors).
        """
        command = f"SNOPTION,{rangefact},{blocksize},{robustlev},{compute},,{solve_info}"
        return self.run(command, **kwargs)

    
    def cplane(self, key="", **kwargs):
        """APDL Command: /CPLANE

        Specifies the cutting plane for section and capped displays.

        Parameters
        ----------
        key
            Specifies the cutting plane:

            0 - Cutting plane is normal to the viewing vector [/VIEW] and passes through the
                focus point [/FOCUS] (default).

            1 - The working plane [WPLANE] is the cutting plane.

        Notes
        -----
        Defines the cutting plane to be used for section and capped displays
        [/TYPE,,(1, 5, or 7)].

        This command is valid in any processor.
        """
        command = "/CPLANE,%s" % (str(key))
        return self.run(command, **kwargs)

    def bfl(self, line="", lab="", val1="", val2="", val3="", val4="",
            **kwargs):
        """APDL Command: BFL

        Defines a body force load on a line.

        Parameters
        ----------
        line
            Line to which body load applies.  If ALL, apply to all selected
            lines [LSEL]. A component name may also be substituted for Line.

        lab
            Valid body load label. Load labels are listed under "Body loads" in
            the input table for each element type in the Element Reference.

        val1, val2, val3
            Value associated with the Lab item or a table name for specifying
            tabular boundary conditions.  Use only VAL1 for TEMP, FLUE, HGEN,
            and CHRGD. For acoustics, if Lab = JS,  use VAL1 for mass source in
            a harmonic analysis or mass source rate in a transient analysis,
            and ignoreVAL2 and VAL3. When specifying a table name, you must
            enclose the table name in percent signs (%), e.g.,
            BFL,Line,Lab,%tabname%.  Use the *DIM command to define a table.

        val4
            If Lab = JS, VAL4 is the phase angle in degrees.

        Notes
        -----
        Defines a body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.) on a line.
        Body loads may be transferred from lines to line elements (or to nodes
        if line elements do not exist) with the BFTRAN or SBCTRAN commands.

        You can specify a table name only when using temperature (TEMP) and
        heat generation rate (HGEN) body load labels.

        Body loads specified by the BFL command can conflict with other
        specified body loads.  See Resolution of Conflicting Body Load
        Specifications in the Basic Analysis Guide for details.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFL,%s,%s,%s,%s,%s,%s" % (str(line), str(lab), str(val1), str(val2), str(val3), str(val4))
        return self.run(command, **kwargs)

    def bfe(self, elem="", lab="", stloc="", val1="", val2="", val3="",
            val4="", **kwargs):
        """APDL Command: BFE

        Defines an element body force load.

        Parameters
        ----------
        elem
            The element to which body load applies.  If ALL, apply to all
            selected elements (ESEL). A component name may also be substituted
            for Elem.

        lab
            Valid body load label. Valid labels are also listed for each
            element type in the Element Reference under "Body Loads" in the
            input table.

        stloc
            Starting location for entering VAL data, below.  For example, if
            STLOC = 1, data input in the VAL1 field applies to the first
            element body load item available for the element type, VAL2 applies
            to the second element item, etc. If STLOC = 5, data input in the
            VAL1 field applies to the fifth element item, etc.  Defaults to 1.

        val1, val2, val3, val4
            For Lab = TEMP, FLUE, DGEN, HGEN, and CHRGD, VAL1--VAL4 represent
            body load values at the starting location and subsequent locations
            (usually nodes) in the element.  VAL1 can also represent a table
            name for use with tabular boundary conditions. Enter only VAL1 for
            a uniform body load across the element.  For nonuniform loads, the
            values must be input in the same order as shown in the input table
            for the element type.  Values initially default to the BFUNIF value
            (except for CHRGD which defaults to zero).  For subsequent
            specifications, a blank leaves a previously specified value
            unchanged; if the value was not previously specified, the default
            value as described in the Element Reference is used.

        Notes
        -----
        Defines an element body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.). Body loads
        and element specific defaults are described for each element type in
        the Element Reference. If both the BF and BFE commands are used to
        apply a body load to an element, the BFE command takes precedence.

        For heat-generation (HGEN) loading on layered thermal solid elements
        SOLID278 / SOLID279 (KEYOPT(3) = 1 or 2), or layered thermal shell
        elements SHELL131 / SHELL132 (KEYOPT(3) = 1), STLOC refers to the layer
        number (not the node). In such cases, use VAL1 through VAL4 to specify
        the heat-generation values for the appropriate layers. Heat generation
        is constant over the layer.

        Specifying a Table

        You can specify a table name (VAL1) when using temperature (TEMP),
        diffusing substance generation rate (DGEN), heat generation rate
        (HGEN), and current density (JS) body load labels.

        Enclose the table name (tabname) in percent signs (%), as shown:

        BFE,Elem, Lab,STLOC,%tabname%

        Use the *DIM command to define a table.

        For Lab = TEMP, each table defines NTEMP temperatures, as follows:

        For layered elements, NTEMP is the number of layer interface corners
        that allow temperature input.

        For non-layered elements, NTEMP is the number of corner nodes.

        The temperatures apply to element items with a starting location of
        STLOC + n, where n is the value field location (VALn) of the table name
        input.

        For layered elements, a single BFE command returns temperatures for one
        layer interface. Multiple BFE commands are necessary for defining all
        layered temperatures.

        For beam, pipe and elbow elements that allow multiple temperature
        inputs per node, define the tabular load for the first node only (Node
        I), as loads on the remaining nodes are applied automatically. For
        example, to specify a tabular temperature load on a PIPE288 element
        with the through-wall-gradient option (KEYOPT(1) = 0), the BFE command
        looks like this:

        BFE,Elem,TEMP,1,%tabOut%, %tabIn%

        When a tabular function load is applied to an element, the load does
        not vary according to the positioning of the element in space.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFE,%s,%s,%s,%s,%s,%s,%s" % (str(elem), str(lab), str(stloc), str(val1), str(val2), str(val3), str(val4))
        return self.run(command, **kwargs)

    
    def vscale(self, wn="", vratio="", key="", **kwargs):
        """APDL Command: /VSCALE

        Scales the length of displayed vectors.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        vratio
            Ratio value applied to the automatically calculated scale factor
            (defaults to 1.0, i.e., use scale factor as automatically
            calculated).

        key
            Relative scaling key:

            0 - Use relative length scaling among vectors based on magnitudes.

            1 - Use uniform length scaling for all vector lengths.

        Notes
        -----
        Allows scaling of the vector length displayed with the PLVECT command
        of POST1 and the /PBC and /PSF commands.  Also allows the scaling of
        the  element (i.e., /PSYMB,ESYS) and the nodal (i.e., /PSYMB,NDIR)
        coordinate system symbols.

        This command is valid in any processor.
        """
        command = "/VSCALE,%s,%s,%s" % (str(wn), str(vratio), str(key))
        return self.run(command, **kwargs)

    def ddaspec(self, keyref="", shptyp="", mountloc="", deftyp="", amin="",
                **kwargs):
        """APDL Command: DDASPEC

        Specifies the shock spectrum computation constants for DDAM analysis.

        Parameters
        ----------
        keyref
            Key for reference catalog:

            1 - The spectrum computation constants are based on NRL-1396 (default). For more
                information, see Dynamic Design Analysis Method in the
                Mechanical APDL Theory Reference

        shptyp
            Select the ship type:

            SUBM - Submarine

            SURF - Surface ship

        mountloc
            Select the mounting location:

            HULL - Hull mounting location. These structures are mounted directly to basic hull
                   structures like frames, structural bulkheads below the water
                   line, and shell plating above the water line.

            DECK - Deck mounting location. These structures are mounted directly to decks, non-
                   structural bulkheads, or to structural bulkheads above the
                   water line.

            SHEL - Shell plating mounting location. These structures are mounted directly to shell
                   plating below the water line without intervening
                   foundations.

        deftyp
            Select the deformation type:

            ELAS - Elastic deformation (default)

            PLAS - Elastic-plastic deformation

        amin
            Minimum acceleration value in inch/sec2. It defaults to 2316
            inch/sec2 which equals 6g, where g is the acceleration due to
            gravity (g = 386 in/sec2).

        Notes
        -----
        The excitation direction is required to calculate the spectrum
        coefficients. Issue the SED command before issuing DDASPEC.

        ADDAM and VDDAM may alternatively be used to calculate spectrum
        coefficients.

        This command is also valid in PREP7.
        """
        command = "DDASPEC,%s,%s,%s,%s,%s" % (str(keyref), str(shptyp), str(mountloc), str(deftyp), str(amin))
        return self.run(command, **kwargs)

    
    def pbf(self, item="", key="", **kwargs):
        """APDL Command: /PBF

        Shows magnitude of body force loads on displays.

        Parameters
        ----------
        item
            Label identifying the item:

            TEMP - Applied temperatures.

            FLUE - Applied fluences.

            HGEN - Applied heat generation rates.

            JS - Applied current density magnitude.

            JSX - X-component of current density.

            JSY - Y-component of current density.

            JSZ - Z-component of current density.

            PHASE - Phase angle of applied load.

            MVDI - Applied magnetic virtual displacements flag.

            CHRGD - Applied electric charge density.

            VLTG - Applied voltage drop.

        key
            Symbol key:

            0 - Do not show body force load contours.

            1 - Show body force load contours.

            2 - Show current density as a vector (not a contour).

        Notes
        -----
        Shows body force loads as contours on displays for the selected
        elements.

        The effects of the /PBF command are not cumulative (that is, the
        command does not modify an existing setting from a previously issued
        /PBF command).  If you issue multiple /PBF commands during an analysis,
        only the setting specified by the most recent /PBF command applies.

        Use /PSTATUS or /PBF,STAT to display settings.  Use /PBF,DEFA to reset
        all specifications back to default.  See also the /PSF and /PBC command
        for other display contours.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].

        This command is valid in any processor.
        """
        return self.run(f"/PBF,{item},,{key}", **kwargs)

    def fssparm(self, port1="", port2="", **kwargs):
        """APDL Command: FSSPARM

        Calculates reflection and transmission properties of a frequency
        selective surface.

        Parameters
        ----------
        port1
            Port number of input port. Defaults to 1.

        port2
            Port number of output port. Defaults to 1.

        Notes
        -----
        FSSPARM calculates reflection and transmission coefficients, power
        reflection and transmission coefficients, and return and insertion
        losses of a frequency selective surface.
        """
        command = "FSSPARM,%s,%s" % (str(port1), str(port2))
        return self.run(command, **kwargs)

    def rstoff(self, lab="", offset="", **kwargs):
        """APDL Command: RSTOFF

        Offsets node or element IDs in the FE geometry record.

        Parameters
        ----------
        lab
            The offset type:

            NODE  - Offset the node IDs.

            ELEM  - Offset the element IDs.

        offset
            A positive integer value specifying the offset value to apply. The
            value must be greater than the number of nodes or elements in the
            existing superelement results file.

        Notes
        -----
        The RSTOFF command offsets node or element IDs in the FE geometry
        record saved in the .rst results file. Use the command when expanding
        superelements in a bottom-up substructuring analysis (where each
        superelement is generated individually in a generation pass, and all
        superelements are assembled together in the use pass).

        With appropriate offsets, you can write results files with unique node
        or element IDs and thus display the entire model even if the original
        superelements have overlapping element or node ID sets. (Such results
        files are incompatible with the .db database file saved at the
        generation pass.)

        The offset that you specify is based on the original superelement node
        or element numbering, rather than on any offset specified via a SESYMM
        or SETRAN command. When issuing an RSTOFF command, avoid specifying an
        offset that creates conflicting node or element numbers for a
        superelement generated via a SESYMM or SETRAN command.

        If you issue the command to set non-zero offsets for node or element
        IDs, you must bring the geometry into the database via the SET command
        so that ANSYS can display the results. You must specify appropriate
        offsets to avoid overlapping node or element IDs with other
        superelement results files.

        The command is valid only in the first load step of a superelement
        expansion pass.
        """
        command = "RSTOFF,%s,%s" % (str(lab), str(offset))
        return self.run(command, **kwargs)

    def octable(self, val1="", val2="", val3="", val4="", val5="", val6="",
                val7="", **kwargs):
        """APDL Command: OCTABLE

        Defines an ocean load using table data.

        Parameters
        ----------
        val1, val2, val3, . . . , val6
            Values describing the basic ocean load, a current condition, or a
            wave condition.

        Notes
        -----
        The OCTABLE specifies table data that defines the ocean load. The terms
        VAL1, VAL2, etc. are specialized according to the input set required
        for the given ocean load.

        The program interprets the data input via the OCTABLE command within
        the context of the most recently issued OCTYPE command.

        There is no limit to the number of data input.

        Input values in the order indicated.

        This command is also valid in PREP7.

        You can define the following ocean data types:

        If the current is constant, only one OCTABLE command is necessary and
        Dep  is not required.

        For waves, the current profile is stretched or compressed linearly up
        to 10 percent.

        The first Dep value (representing the mean sea level) must be zero. The
        last Dep value (representing the mud line) must be equal to the DEPTH
        value input on the OCDATA command.

        The Cartesian Z values used to locate nodes, etc. decrease as one moves
        from the ocean surface to the sea floor, but the Dep values increase.
        See Figure: 5:: Basic Ocean Data Type Components .

        Dep is not affected by changes to Zmsl on the OCDATA command, as that
        value simply relocates the origin.

        When specifying an ocean wave type, issue the OCTABLE command to input
        either wave location data or wave spectrum data.

        Hints for Wave Location Input:

        The TIME command is not used, except perhaps to identify the load case.

                The phase shift (Ps) determines the wave position (that is, the
        point at which the load is to be applied).

        When using the Stokes fifth-order (KWAVE = 2) or stream function (KWAVE
        = 3) wave type, issue only one OCTABLE command.

        The valid range of the order of the stream function (NORDER) is 3
        through 50. If no value is specified, the program determines a value
        automatically.

        When using the diffracted wave type (KWAVE = 8), an OCREAD command is
        also required to read in the hydrodynamic data from the hydrodynamic
        analysis.
        """
        command = "OCTABLE,%s,%s,%s,%s,%s,%s,%s" % (str(val1), str(val2), str(val3), str(val4), str(val5), str(val6), str(val7))
        return self.run(command, **kwargs)

    def gthk(self, label="", thick="", **kwargs):
        """APDL Command: /GTHK

        Sets line thicknesses for graph lines.

        Parameters
        ----------
        label
            Apply thicknesses as selected from the following labels:

            AXIS - Modify thickness of ordinate and abscissa axes on graph displays.

            GRID - Modify thickness of grid lines on graph displays.

            CURVE - Modify thickness of curve lines (when no area fill [/GROPT]).

        thick
            Thickness ratio (whole numbers only, from -1 to 10):

            -1 - Do not draw the curve, but show only the markers specified by /GMARKER.

            0 or 1 - Thin lines.

            2 - The default thickness.

            3 - 1.5 times the default thickness.

            etc. - (up to 10)

        Notes
        -----
        Sets line thicknesses for graph lines (in raster mode only).  Use
        /GTHK,STAT to show settings.

        This command is valid in any processor.
        """
        command = "/GTHK,%s,%s" % (str(label), str(thick))
        return self.run(command, **kwargs)

    def an3d(self, kywrd="", key="", **kwargs):
        """APDL Command: /AN3D

        Specifies 3-D annotation functions

        Parameters
        ----------
        num
            Unique number assigned as each annotation is applied to a model.
            These numbers are applied sequentially, although when an annotation
            entity is deleted, its number is reassigned.

        type
            Annotation internal type number (101 = text, 102 = line, 103 =
            point, 104 = area, 105 = arrow, 106 = symbol, 108 = bitmap).

        xhot, yhot, zhot
            X, Y, Z coordinates for hot spot location.

        Notes
        -----
        Because 3-D annotation is applied in relation to the XYZ coordinates of
        the anchor, you can transform your model, and the annotation will
        maintain the spatial relationship with the model. This works within
        reason, and there are instances where changing the perspective or the
        size of the model will change the apparent relationship between the
        annotation and the model.

         The overall 3-D dimensions of your model are defined by a bounding
        box.  If portions of your model's bounding box lie outside of the
        visible area of your graphics window (if you are zoomed in on a
        specific area of your model), it can affect the placement of your 3-D
        annotations.  Zooming out will usually overcome this problem.

        3-D annotation is valid for the Cartesian (CSYS,0) coordinate system
        only. If you want to annotate a model you created in another coordinate
        system, use 2-D annotation (note that 2-D annotations do not remain
        anchored for dynamic rotations or transformations).

        When you apply user defined bitmaps, the size of the annotation can
        vary. Use the options menu of the 3-D annotation widget to adjust the
        size and placement of your bitmaps.

        You cannot use the "!" and "$" characters in ANSYS text annotation.

        The GUI generates this command during 3-D annotation operations and
        inserts the command into the log file (Jobname.LOG). You should NOT
        type this command directly during an ANSYS session (although the
        command can be included in an input file for batch input or for use
        with the /INPUT command).
        """
        command = "/AN3D,%s,%s" % (str(kywrd), str(key))
        return self.run(command, **kwargs)

    def sftran(self, **kwargs):
        """APDL Command: SFTRAN

        Transfer the solid model surface loads to the finite element model.

        Notes
        -----
        Surface loads are transferred only from selected lines and areas to all
        selected elements.  The SFTRAN operation is also done if the SBCTRAN
        command is issued or automatically done upon initiation of the solution
        calculations [SOLVE].

        This command is also valid in PREP7.
        """
        command = "SFTRAN,"
        return self.run(command, **kwargs)

    def fkdele(self, kpoi="", lab="", **kwargs):
        """APDL Command: FKDELE

        Deletes force loads at a keypoint.

        Parameters
        ----------
        kpoi
            Keypoint at which force is to be deleted.  If ALL, delete forces at
            all selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        lab
            Valid force label.  If ALL, use all appropriate labels.  See the
            FDELE command for labels.

        Notes
        -----
        Deletes force loads (and all corresponding finite element loads) at a
        keypoint.  See the FDELE command for details.

        This command is also valid in PREP7.
        """
        command = "FKDELE,%s,%s" % (str(kpoi), str(lab))
        return self.run(command, **kwargs)

    
    def antype(self, antype="", status="", ldstep="", substep="", action="",
               **kwargs):
        """APDL Command: ANTYPE

        Specifies the analysis type and restart status.

        Parameters
        ----------
        antype
            Analysis type (defaults to the previously specified analysis type,
            or to STATIC if none specified):

            STATIC or 0 - Perform a static analysis.  Valid for all degrees of freedom.

            BUCKLE or 1 - Perform a buckling analysis.  Implies that a previous static solution was
                          performed with prestress effects calculated
                          (PSTRES,ON).  Valid for structural degrees of freedom
                          only.

            MODAL or 2 - Perform a modal analysis.  Valid for structural and fluid degrees of freedom.

            HARMIC or 3 - Perform a harmonic analysis.  Valid for structural, fluid, magnetic, and
                          electrical degrees of freedom.

            TRANS or 4 - Perform a transient analysis.  Valid for all degrees of freedom.

            SUBSTR or 7 - Perform a substructure analysis.  Valid for all degrees of freedom.

            SPECTR or 8 - Perform a spectrum analysis.  Implies that a previous modal analysis was
                          performed.  Valid for structural degrees of freedom
                          only.

        status
            Specifies the status of the analysis (new or restart):

            NEW - Specifies a new analysis (default). If NEW, the remaining fields on this
                  command are ignored.

            RESTART - Specifies a restart of a previous analysis. Valid for static, modal, and
                      transient (full or mode-superposition method) analyses.
                      For more information about restarting static and
                      transient analyses, see Multiframe Restart in the Basic
                      Analysis Guide. For more information on restarting a
                      modal analysis, see Modal Analysis Restart in the Basic
                      Analysis Guide.

            Multiframe restart is also valid for harmonic analysis, but is limited to 2-D magnetic analysis only. - A substructure analysis (backsubstitution method only) can be restarted for the
                              purpose of generating additional load vectors.
                              For more information, see the SEOPT command and
                              Applying Loads and Creating the Superelement
                              Matrices in the Substructuring Analysis Guide.

            VTREST - Specifies the restart of a previous VT Accelerator analysis. Valid only with
                     Antype = STATIC, HARMIC, or TRANS. For more information,
                     see VT Accelerator Re-run in the Basic Analysis Guide.

        ldstep
            Specifies the load step at which a multiframe restart begins.

        substep
            Specifies the substep at which a multiframe restart begins.

        action
            Specifies the manner of a multiframe restart.

            CONTINUE - The program continues the analysis based on the specified LDSTEP and SUBSTEP
                       (default). The current load step is continued. If the
                       end of the load step is encountered in the .Rnnn file, a
                       new load step is started. The program deletes all .Rnnn
                       files, or .Mnnn files for mode-superposition transient
                       analyses, beyond the point of restart and updates the
                       .LDHI file if a new load step is encountered.

            ENDSTEP - At restart, force the specified load step (LDSTEP) to end at the specified
                      substep (SUBSTEP), even though the end of the current
                      load step has not been reached. At the end of the
                      specified substep, all loadings are scaled to the level
                      of the current ending and stored in the .LDHI file. A run
                      following this ENDSTEP starts a new load step. This
                      capability allows you to change the load level in the
                      middle of a load step. The program updates the .LDHI file
                      and deletes all .Rnnn files, or .Mnnn files for mode-
                      superposition transient analyses, beyond the point of
                      ENDSTEP. The .Rnnn or .Mnnn file at the point of ENDSTEP
                      are rewritten to record the rescaled load level.

            RSTCREATE - At restart, retrieve information to be written to the results file for the
                        specified load step (LDSTEP) and substep (SUBSTEP). Be
                        sure to use   OUTRES to write the results to the
                        results file. This action does not affect the .LDHI or
                        .Rnnn files. Previous items stored in the results file
                        at and beyond the point of RSTCREATE are deleted. This
                        option cannot be used to restart a mode-superposition
                        transient analysis.

            PERTURB - At restart, a linear perturbation analysis (static, modal, buckling, or full
                      harmonic) is performed for the specified load step
                      (LDSTEP) and substep (SUBSTEP). This action does not
                      affect the .LDHI, .Rnnn, or .RST files.

        Notes
        -----
        If using the ANTYPE command to change the analysis type in the same
        SOLVE session, the program issues the following message: "Some analysis
        options have been reset to their defaults. Please verify current
        settings or respecify as required." Typically, the program resets
        commands such as NLGEOM and EQSLV to their default values.

        The analysis type (Antype) cannot be changed if a restart is specified.
        Always save parameters before doing a restart. For more information on
        the different types of restart, see Restarting an Analysis in the Basic
        Analysis Guide.

        This command is also valid in PREP7.

        The ANSYS Professional - Nonlinear Structural (PRN) product supports
        the Antype = TRANS option for mode-superposition (TRNOPT,MSUP) analyses
        only.
        """
        command = "ANTYPE,%s,%s,%s,%s,%s" % (str(antype), str(status), str(ldstep), str(substep), str(action))
        return self.run(command, **kwargs)

    
    def rescontrol(self, action="", ldstep="", frequency="", maxfiles="",
                   **kwargs):
        """APDL Command: RESCONTROL

        Controls file writing for multiframe restarts.

        Parameters
        ----------
        action
             Command action. Valid options are:

            DEFINE - Issuing the command specifies how frequently the .Xnnn restart files are
                     written for a load step (default).

            FILE_SUMMARY - Issuing the command prints the substep and load step information for all .Xnnn
                           files for the current jobname in the current
                           directory. If this option is specified, all other
                           arguments are ignored.

            STATUS - Issuing the command lists the current status in the tables of restart controls
                     specified previously by RESCONTROL. If this option is
                     specified, all other arguments are ignored.

            NORESTART - Issuing the command cleans up some of the restart files after a Distributed
                        ANSYS solution. The host process will not have the
                        following files in the working directory at the end of
                        the run: .ESAV, .OSAV, .Xnnn, .RDB,  .LDHI. The slave
                        processes will not have the following files in the
                        working directory at the end of the run: .ESAV, .OSAV,
                        .Xnnn, .RST (or .RTH, etc.). Some of the restart files
                        are never written, some are removed upon leaving /SOLU
                        (for example, upon FINISH), and some are removed upon
                        exiting the program.

            This option is useful for cleaning up files written by all of the Distributed ANSYS processes, particularly when you know that these restart files will not be needed later on. If this option is specified, all other arguments are ignored. - If this option is used in shared-memory parallel ANSYS, most of the restart
                              files in the working directory are removed. It
                              has the same effect as issuing RESCONTROL,,NONE.

            LINEAR - Issuing the command specifies the same actions as Action = DEFINE. However,
                     this option is intended for linear static applications.
                     For a linear static analysis, the restart capability is
                     normally not needed. However, it is typically needed when
                     a subsequent linear perturbation analysis is desired. By
                     default, none of the restart files are written for a
                     linear static analysis.

            DELETE - Delete the restart control specification corresponding to the Ldstep label on a
                     previous RESCONTROL,DEFINE command.

        ldstep
            Specifies how the .Xnnn files are written for the specified load
            steps. This option also affects how often the load history
            information is written to the .LDHI file.

            ALL - Write the .Xnnn files at the same substep Frequency for all load steps; write
                  the load history information to the .LDHI file for all load
                  steps.

            LAST - Write the .Xnnn files for the last load step only; write load history
                   information to the .LDHI file for the last load step only.
                   This option is the default for nonlinear static and full
                   transient analyses. The remaining arguments are ignored.

            N - Number that indicates how often the .Xnnn file is written.

             Input a positive number to write the .Xnnn files at the substep Frequency indicated only for load step N. Other load steps will be written at the default substep frequency or at a frequency defined by a previous RESCONTROL specification. Load history information is written to the .LDHI file only for load steps N. - Input a negative number (-N) to write the .Xnnn files for every Nth load step
                              at the specified substep Frequency. The load
                              history information is written to the .LDHI file
                              every Nth load step. This option is suitable for
                              restart applications in which more than a few
                              hundred load steps are required. Compared to the
                              ALL and positive N options, it can save disk
                              space since the .LDHI file is smaller and fewer
                              .Xnnn files are written.

            If Ldstep = -N, all other Ldstep options specified by RESCONTROL are ignored and the program follows the -N option (write load history information every Nth load step). If you want to change this pattern, issue RESCONTROL,DELETE, -N and then issue another RESCONTROL command with the desired Ldstep option. - NONE

            No multiframe restart files (.RDB [restart database file], .LDHI [load history file], .Xnnn) are created. This option is the default for mode-superposition analyses. The remaining arguments are ignored.  - For nonlinear static, linear static, and full transient analyses, this option
                              allows a restart to be done at the last or abort
                              point using the same procedure as in ANSYS 5.5 or
                              earlier (using the .EMAT, .ESAV or .OSAV, and .DB
                              files).

        frequency
            Frequency at which the .Xnnn files are written at the substep
            level.

            NONE - Do not write any .Xnnn files for this load step.

            LAST - Write the .Xnnn files for the last substep of the load step only (default for
                   nonlinear static and full transient analyses).

            N - If N is positive, write the .Xnnn file every Nth substep of a load step. If N
                is negative, write N equally spaced .Xnnn files within a load
                step.

            In nonlinear static and full transient analyses, negative N is valid only when AUTOTS,ON. - In mode-superposition analyses, negative N is always valid.

        maxfiles
            Maximum number of .Xnnn files to save for Ldstep.

            -1 - Overwrite existing .Xnnn files (default). The total maximum number of .Xnnn
                 files for one run is 999. If this number is reached before the
                 analysis is complete, the program will reset the .Xnnn file
                 numbering back to 1 and continue to write .Xnnn files; the
                 program keeps the newest 999 restart files and overwrites the
                 oldest restart files.

            0 - Do not overwrite any existing .Xnnn files. The total maximum number of .Xnnn
                files for one run is 999. If this number is reached before the
                analysis is complete, the analysis continues but no longer
                writes any .Xnnn files.
        """
        command = "RESCONTROL,%s,%s,%s,%s" % (str(action), str(ldstep), str(frequency), str(maxfiles))
        return self.run(command, **kwargs)

    
    def hrout(self, reimky="", clust="", mcont="", **kwargs):
        """APDL Command: HROUT

        Specifies the harmonic analysis output options.

        Parameters
        ----------
        reimky
            Real/Imaginary print key:

            ON - Print complex displacements as real and imaginary components (default).

            OFF - Print complex displacements as amplitude and phase angle (degrees).

        clust
            Cluster option (for HROPT,MSUP):

            OFF - Uniform spacing of frequency solutions (default).

            ON - Cluster frequency solutions about natural frequencies.

        mcont
            Mode contributions key (for HROPT,MSUP):

            OFF - No print of mode contributions at each frequency (default).

            ON - Print mode contributions at each frequency.

        Notes
        -----
        Specifies the harmonic analysis (ANTYPE,HARMIC) output options.  If
        used in SOLUTION, this command is valid only within the first load
        step. OUTPR,NSOL must be specified to print mode contributions at each
        frequency.

        This command is ignored if the HROPT command has been issued with
        Method = VT, VTPA, or VTRU. Displacements are not available at expanded
        frequencies with these solution methods.

        For cyclic symmetry mode-superposition harmonic solutions, the cluster
        option is not available.

        This command is also valid in PREP7.
        """
        command = "HROUT,%s,%s,%s" % (str(reimky), str(clust), str(mcont))
        return self.run(command, **kwargs)

    def show(self, fname="", option="", vect="", ncpl="", **kwargs):
        """APDL Command: /SHOW

        Specifies the device and other parameters for graphics displays.

        Parameters
        ----------
        fname
            Device name, file name, or keyword, as listed below:

            <device name> - Any valid graphics display device name (e.g., X11, 3-D etc.).  Defaults to X11
                            for most systems.  See Getting Started with
                            Graphics in the Basic Analysis Guide for details.
                            A device name must be defined before activating the
                            Graphical User Interface (GUI).  Once the GUI is
                            activated, the device name cannot be changed for
                            that session, except for switching between X11 and
                            X11C.

            <filename> - Name of graphics file to which graphics displays are to be diverted (248
                         characters maximum).  Should not be the same as a
                         valid device name or any other Fname option. Plots are
                         written to the file Filename.Ext (or just Filename.Ext
                         if Ext is left blank) in the working directory. This
                         file can be appended only during the same session;
                         reissuing the same file name in a new session will
                         overwrite existing file names from previous sessions.
                         Although multiple file names can be used within one
                         session, only the last file created or accessed will
                         be appended.  Issuing /SHOW, CLOSE, or starting a new
                         session will prevent access to any previously created
                         files.

            TERM - Graphics displays are switched back to the last-specified device name.

            CLOSE - This option purges the graphics file buffer. The CLOSE option should be issued
                    any time you are changing graphics devices or file output
                    types during a session. Graphics displays are switched back
                    to the last-specified device name, and any open graphics
                    files are closed. The CLOSE option is similar to the TERM
                    option, however, with the CLOSE option, another process,
                    such as the DISPLAY program, can access the data in the
                    graphics file. The CLOSE option causes graphics file
                    buffers to be flushed to the graphics file.

            FILE - Graphics displays are switched back to the last-specified file name.

            OFF - Graphics display requests are ignored.

            (blank) - If blank in interactive mode, graphics will be displayed on screen as requested
                      by display commands (no file written);  If blank in batch
                      mode, graphics data will be written to Jobname.GRPH.

            PSCR - Creates PostScript graphic files that are named Jobnamennn.eps, where nnn is a
                   numeric value that is incremented by one as each additional
                   file is created; that is, Jobname000.eps, Jobname001.eps,
                   Jobname002.eps, and so on .  (See the PSCR command for
                   options.)  Ignores the Ext and NCPL fields.

            HPGL - Creates Hewlett-Packard Graphics Language files that are named Jobnamennn.hpgl,
                   where nnn is a numeric value that is incremented by one as
                   each additional file is created; that is, Jobname000.hpgl,
                   Jobname001.hpgl, Jobname002.hpgl, and so on.  (See the HPGL
                   command for options.)  Ignores the Ext and NCPL fields.

            HPGL2 - Creates Hewlett-Packard Graphics Language files that are named Jobnamennn.hpgl,
                    where nn is a numeric value that is incremented by one as
                    each additional file is created; that is, Jobname000.hpgl,
                    Jobname001.hpgl, Jobname02.hpgl, and so on.  The HPGL2
                    files have enhanced color.  (See the HPGL command for
                    options.)  Ignores the Ext field.

            JPEG - Creates JPEG files that are named Jobnamennn.jpg, where nnn is a numeric value
                   that is incremented by one as each additional file is
                   created; that is, Jobname000.jpg, Jobname001.jpg,
                   Jobname002.jpg, and so on. Ignores the Ext field.

            TIFF - Creates tagged image format files that are named Jobnamennn.tif, where nnn is a
                   numeric value that is incremented by one as each additional
                   file is created; that is, Jobname000.tif, Jobname001.tif,
                   Jobname002.tif, and so on. This value for the Fname argument
                   ignores the Ext field. (See the TIFF command for options.)

            PNG - Creates PNG (Portable Network Graphics) files that are named Jobnamennn.png,
                  where nnn is a numeric value that is incremented by one as
                  each additional file is created; that is, Jobname000.png,
                  Jobname001.png, Jobname002.png, and so on. This value for the
                  Fname argument ignores the Ext field. (See the PNGR command
                  for options.)

            VRML - Creates Virtual Reality Meta Language files named Jobname000.wrl that can be
                   displayed on 3-D Internet web browsers.  Ignores the Ext and
                   NCPL fields.

        option
            Assign a file name extension or specify reverse video output:

            Ext -  File name extension (eight-character maximum).

            REV - Reverse background/image (black/white) colors. Valid with Fname = PNG
                  (recommended), JPEG, PSCR, TIFF, and HPGL. This option is
                  ignored if a previously specified color map table  (/CMAP or
                  /RGB) is in effect.

        vect
            Specifies raster or vector display mode.  This affects area,
            volume, and element displays, as well as geometric results displays
            such as contour plots.  See the /DEVICE command for an alternate
            way to toggle between raster and vector mode.  Changing VECT also
            resets the /TYPE command to its default.

            0 - Raster display (color filled entities; default)

            1 - Vector display (outlined entities; i.e., "wireframe")

        ncpl
            Sets the number of color planes (4 to 8).  Default is device-
            dependent.  NCPL is not supported by all graphics devices.

        Notes
        -----
        Specifies the device to be used for graphics displays, and specifies
        other graphics display parameters.  Display may be shown at the time of
        generation (for interactive runs at a graphics display terminal) or
        diverted to a file for later processing with the DISPLAY program.
        Issue /PSTATUS for display status.

        Batch runs do not have access to the fonts available on your system.
        The Courier and Helvetica font files used for JPEG, PNG and TIFF batch
        output are copyrighted by Adobe Systems Inc. and Digital Equipment
        Corp. Permission to use these trademarks is hereby granted only in
        association with the images described above. Batch run JPEG output is
        produced at the default  quality index value of 75, unless specified
        otherwise.

        Interactive displays default to eight color planes (NCPL = 8) for most
        monitors, while graph file output defaults to eight color planes for
        VRML output, and four color planes for PSCR, HPGL, HPGL2, JPEG, PNG,
        TIFF and FILE33.

        This command is valid in any processor.
        """
        command = "/SHOW,%s,%s,%s,%s" % (str(fname), str(option), str(vect), str(ncpl))
        return self.run(command, **kwargs)

    def bfldele(self, line="", lab="", **kwargs):
        """APDL Command: BFLDELE

        Deletes body force loads on a line.

        Parameters
        ----------
        line
            Line at which body load is to be deleted.  If ALL, delete for all
            selected lines [LSEL].  A component name may also be substituted
            for LINE.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFL command for
            labels.

        Notes
        -----
        Deletes body force loads (and all corresponding finite element loads)
        for a specified line and label.  Body loads may be defined on a line
        with the BFL command.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFLDELE,%s,%s" % (str(line), str(lab))
        return self.run(command, **kwargs)

    
    def view(self, wn="", xv="", yv="", zv="", **kwargs):
        """APDL Command: /VIEW

        Defines the viewing direction for the display.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        xv, yv, zv
            The object is viewed along the line from point XV,YV,ZV (in the
            global coordinate system) to the global coordinate system origin.
            For section displays, the cutting plane is assumed to be
            perpendicular to this line.  If XV = WP, modify view to be normal
            to the currently defined working plane.  Defaults to (0,0,1).

        Notes
        -----
        The view line is always normal to the screen.  The view is selected by
        defining a point (in the global Cartesian coordinate system)
        representing a point along the viewing line.  This point, and the
        global Cartesian coordinate system origin, define the line along which
        the object is viewed while looking toward the origin.  Any point along
        the view line may be used, i.e., (1,1,1) and (2,2,2) give the same
        view.  The display orientation may be changed as desired [/ANGLE].  The
        display coordinate system type may be changed (from Cartesian to
        cylindrical, spherical, toroidal, etc.) with the DSYS command.

        This command is valid in any processor.
        """
        command = "/VIEW,%s,%s,%s,%s" % (str(wn), str(xv), str(yv), str(zv))
        return self.run(command, **kwargs)

    def map2dto3d(self, action="", ldstep="", sbstep="", option="", **kwargs):
        """APDL Command: MAP2DTO3D

        Initiates a 2-D to 3-D analysis and maps variables.

        Parameters
        ----------
        action
            The 2-D to 3-D action to perform:

            START - Start the analysis process by rebuilding the 2-D analysis database (.db) based
                    on the specified load step and substep information, and
                    update nodes to their deformed positions in the 2-D mesh.

            FINISH - Maps solution variables from the 2-D mesh to the extruded 3-D mesh.

        ldstep
            The load step number at which 2-D to 3-D analysis should occur. The
            default value is the highest load step number found in the
            Jobname.Rnnn files (for the current jobname and in the current
            directory).

        sbstep
            The substep number of the specified load step (LDSTEP) at which the
            2-D to 3-D analysis should occur. The default value is the highest
            substep number found in the specified load step in the Jobname.Rnnn
            files (for the current jobname and in the current directory).

        option
            Mapping option:

            (Blank) - Transfer and map all applied boundary conditions, nodal temperatures, loads,
                      and surface pressures from the 2-D mesh to the extruded
                      3-D mesh. This behavior is the default.

            NOBC - No applied boundary conditions or loads are transferred from the 2-D mesh to
                   the extruded 3-D mesh. Nodal temperatures (defined via the
                   BF,TEMP command) are transferred.

        Notes
        -----
        The MAP2DTO3D command initiates the 2-D to 3-D analysis process, sets
        analysis options, rebuilds the database, and maps the solution
        variables from the 2-D mesh to the 3-D mesh.

        Before issuing this command, clear the database (/CLEAR).

        The LDSTEP and SBSTEP values apply only when Action = START.

        For more information, see 2-D to 3-D Analysis in the Advanced Analysis
        Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MAP2DTO3D,%s,%s,%s,%s" % (str(action), str(ldstep), str(sbstep), str(option))
        return self.run(command, **kwargs)

    
    def ldread(self, lab="", lstep="", sbstep="", time="", kimg="", fname="",
               ext="", **kwargs):
        """APDL Command: LDREAD

        Reads results from the results file and applies them as loads.

        Parameters
        ----------
        lab
            Valid load label:

            TEMP - Temperatures from a thermal analysis are applied as body force nodal loads (BF)
                   in a structural analysis, an explicit dynamic analysis, or
                   other type of analysis.

            If the thermal analysis uses SHELL131 or SHELL132, temperatures are applied as body force element loads (BFE). In most cases, only the top and bottom temperatures from SHELL131 and SHELL132 are used by the structural shell elements; any interior temperatures are ignored.  - All temperatures are used for SHELL181 using section input, and SHELL281 using
                              section input; for these elements, therefore, the
                              number of temperature points at a node generated
                              in the thermal model must match the number of
                              temperature points at a node needed by the
                              structural model.

            When using SHELL131 or SHELL132 information for the LDREAD operation, all element types should specify the same set of thermal degrees of freedom. - When used in conjunction with KIMG=1 and KIMG=2, temperatures can be applied to
                              a subsequent thermal analysis as nodal loads (D)
                              or initial conditions (IC), respectively.

            FORC - Forces from an electromagnetic analysis are applied as force loads (F) in a
                   structural analysis. LDREAD,FORC reads coupling forces. See
                   the discussion on force computation in the Low-Frequency
                   Electromagnetic Analysis Guide.

              For a full harmonic magnetic analysis, FORC represents the time-averaged force (use in conjunction with KIMG = 2).  Values are in the nodal coordinate system for the force loads (F). - HGEN

            Heat generations from an electromagnetic analysis are applied as body force loads (BFE) in a thermal analysis.  For a full harmonic analysis, HGEN represents the time-averaged heat generation load (use in conjunction with KIMG = 2). - JS

            Source current density from a current-conduction analysis are applied as body force loads (BFE).  Values are in the global Cartesian coordinate system. - EF

            Electric field element centroid values from an electrostatic analysis are applied as body force loads (BFE) in a magnetic analysis. Values are in the global Cartesian coordinate system. - REAC

            Reaction loads from any analysis are applied as force loads (F) in any analysis.  Values are in the nodal coordinate system. - CONC

        lstep
            Load step number of the data set to be read.  Defaults to 1.  If
            LAST, ignore SBSTEP and TIME and read the last data set.

        sbstep
            Substep number (within LSTEP).  If zero (or blank), LSTEP
            represents the last substep of the load step.

        time
            Time-point identifying the data set to be read.  Used only if both
            LSTEP and SBSTEP are zero (or blank).  If TIME is between two
            solution time points on the results file, a linear interpolation is
            done between the two data sets.  If TIME is beyond the last time
            point on the file, use the last time point.

        kimg
            When used with results from harmonic analyses (ANTYPE,HARMIC) KIMG
            establishes which set of data to read:

            0 - Read the real part of the solution.  Valid also for Lab = EHFLU to read in
                time-average heat flux.

            1 - Read the imaginary part of the solution.

            2 - Calculate and read the time-average part. Meaningful for Lab = HGEN or FORC.

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        The LDREAD command reads results data from the results file and applies
        them as loads.

        The command can also apply results from an analysis defined with one
        physics environment as loads on a second analysis using a different
        physics environment. Results values are applied as loads for field-
        coupling effects (for example, output temperatures from a thermal
        analysis as input to a structural analysis).

        The command works based on the assumption that the meshes have not
        changed.

        Nodal loads are applied only to selected nodes. Element loads are
        applied only to selected elements. Element surface loads are applied
        only to selected elements where all face nodes for that surface are
        selected.

        To assure proper distribution of the surface loads, select only the
        nodes on the element face where the surface load is to be applied.

        Scaling and accumulation specifications are applied as the loads are
        read via the following commands:

        BFCUM for body force loads. (Heat-generation loads are not
        accumulated.)
        """
        command = "LDREAD,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(lstep), str(sbstep), str(time), str(kimg), str(fname), str(ext))
        return self.run(command, **kwargs)

    def timint(self, key="", lab="", **kwargs):
        """APDL Command: TIMINT

        Turns on transient effects.

        Parameters
        ----------
        key
            Transient effects key:

            OFF - No transient effects (static or steady-state).

            ON - Include transient (mass or inertia) effects.

        lab
            Degree of freedom label:

            ALL - Apply this key to all appropriate labels (default).

            STRUC - Apply this key to structural DOFs.

            THERM - Apply this key to thermal DOFs.

            ELECT - Apply this key to electric DOFs.

            MAG - Apply this key to magnetic DOFs.

            FLUID - Apply this key to fluid DOFs.

            DIFFU - Apply this key to concentration of DOFs.

        Notes
        -----
        Indicates whether this load step in a full transient analysis should
        use time integration, that is, whether it includes transient effects
        (e.g. structural inertia, thermal capacitance) or whether it is a
        static (steady-state) load step for the indicated DOFs.  Transient
        initial conditions are introduced at the load step having Key = ON.
        Initial conditions are then determined from the previous two substeps.
        Zero initial velocity and acceleration are assumed if no previous
        substeps exist.  See the Structural Analysis Guide, the Thermal
        Analysis Guide, and the Low-Frequency Electromagnetic Analysis Guide
        for details.

        This command is also valid in PREP7.
        """
        command = "TIMINT,%s,%s" % (str(key), str(lab))
        return self.run(command, **kwargs)

    
    def vddam(self, vf="", va="", vb="", vc="", **kwargs):
        """APDL Command: VDDAM

        Specifies the velocity spectrum computation constants for the analysis
        of shock resistance of shipboard structures.

        Parameters
        ----------
        vf
            Direction-dependent velocity coefficient for elastic or elastic-
            plastic analysis option (Default = 0).

        va, vb, vc
            Coefficients for the DDAM velocity spectrum equations.  See Dynamic
            Design Analysis Method in the Mechanical APDL Theory Reference.
            Default for these coefficients is zero.

        Notes
        -----
        This command specifies velocity coefficients to analyze shock
        resistance of shipboard equipment.  These coefficients are used to
        compute mode coefficients according to the equations given in Dynamic
        Design Analysis Method in the Mechanical APDL Theory Reference.  The
        form of these equations is based on the Naval NRL Dynamic Design
        Analysis Method.  This command, along with the ADDAM and SED commands,
        is used with the spectrum (ANTYPE,SPECTR) analysis as a special purpose
        alternative to the SV, FREQ, and SVTYP commands.  The mass and length
        units of the model must be in pounds and inches, respectively.

        DDASPEC may alternatively be used to calculate spectrum coefficients.

        This command is also valid in PREP7.
        """
        command = "VDDAM,%s,%s,%s,%s" % (str(vf), str(va), str(vb), str(vc))
        return self.run(command, **kwargs)

    def plorb(self, **kwargs):
        """APDL Command: PLORB

        Displays the orbital motion of a rotating structure

        Notes
        -----
        When a structure is rotating and the Coriolis or gyroscopic effect is
        taken into account (CORIOLIS), nodes lying on the rotation axis
        generally exhibit an elliptical orbital motion. The PLORB command
        displays the orbit of each rotating node as well as the deformed shape
        at time t = 0 (the real part of the solution).

        To print the characteristics of the orbital path traversed by each
        node, issue the PRORB command.

        The PLORB command is valid for line elements (such as BEAM188, BEAM189,
        PIPE288, and PIPE289).

        Your model must also involve a rotational velocity (OMEGA or CMOMEGA)
        with Coriolis enabled in a stationary reference frame
        (CORIOLIS,,,,RefFrame = ON).

        A SET command should be issued after PLORB to ensure proper output for
        subsequent postprocessing commands.

        The coordinate system for displaying nodal results must be global
        Cartesian (RSYS,KCN = 0).
        """
        command = "PLORB,"
        return self.run(command, **kwargs)

    
    
    
    def pfact(self, tblno="", excit="", parcor="", **kwargs):
        """APDL Command: PFACT

        Calculates participation factors for the PSD or multi-point response
        spectrum table.

        Parameters
        ----------
        tblno
            Input PSD (Power Spectral Density) table number for which
            participation factors are to be calculated.

        excit
            Label defining the location of excitation:

            BASE - Base excitation (default).

            NODE - Nodal excitation.

        parcor
            Label defining excitation type (applies only to SPOPT,PSD
            analysis).  Used only when partially correlated excitation is due
            to wave propagation or spatial correlation.  Defaults to partially
            correlated excitation as defined by COVAL and QDVAL commands.

            WAVE - Excitation defined by PSDWAV command.

            SPAT - Excitation defined by PSDSPL command.

        Notes
        -----
        Calculates the participation factors for a particular PSD or multi-
        point response spectrum table defined with the PSDVAL or SPVAL command.
        The Jobname.DB file must contain modal solution data in order for this
        command to calculate the participation factor.  There must be a PFACT
        command for each excitation spectrum. You are limited to 300
        excitations.

        This command is also valid in PREP7.
        """
        command = "PFACT,%s,%s,%s" % (str(tblno), str(excit), str(parcor))
        return self.run(command, **kwargs)

    def lcsel(self, type_="", lcmin="", lcmax="", lcinc="", **kwargs):
        """APDL Command: LCSEL

        Selects a subset of load cases.

        Parameters
        ----------
        type\_
            Label identifying the type of select:

            S - Select a new set.

            R - Reselect a set from the current set.

            A - Additionally select a set and extend the current set.

            U - Unselect a set from the current set.

            ALL - Restore the full set.

            NONE - Unselect the full set.

            INVE - Invert the current set (selected becomes unselected and vice versa).

            STAT - Display the current select status.

        lcmin
            Minimum value of load case pointer range.

        lcmax
            Maximum value of load case pointer range.  LCMAX defaults to LCMIN.

        lcinc
            Value increment within range.  Defaults to 1.  LCINC cannot be
            negative.

        Notes
        -----
        Selects a subset of load cases for other operations.  For example, to
        select a new set of load cases based on load cases 1 through 7, use
        LCSEL,S,1,7.  The subset is used when the ALL label is entered (or
        implied) on other commands, such as LCFACT, LCABS, LCOPER, etc.  Load
        cases are flagged as selected and unselected; no load case pointers
        [LCDEF, LCWRITE, LCFILE] are actually deleted from the database.
        """
        command = "LCSEL,%s,%s,%s,%s" % (str(type_), str(lcmin), str(lcmax), str(lcinc))
        return self.run(command, **kwargs)

    
    def slashstatus(self, lab="", **kwargs):
        """APDL Command: /STATUS

        Lists the status of items for the run.

        Parameters
        ----------
        lab
            Items to list status for:

            ALL - List all below (default).

            TITLE - List only titles, Jobname, and revision number.

            UNITS - List only units.

            MEM - List only memory data statistics.

            DB - List only database statistics

            CONFIG - List only configuration parameters.

            GLOBAL - Provides a global status summary.

            SOLU - Provides a solution status summary.

            PROD - Provides a product summary.

        Notes
        -----
        Displays various items active for the run (such as the ANSYS revision
        number, Jobname, titles, units, configuration parameters, database
        statistics, etc.).

        This command is valid in any processor.
        """
        command = "/STATUS,%s" % (str(lab))
        return self.run(command, **kwargs)

    def nlopt(self, **kwargs):
        """APDL Command: NLOPT

        Specifies "Nonlinear analysis options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "NLOPT,"
        return self.run(command, **kwargs)

    
    
    
    def subset(self, lstep="", sbstep="", fact="", kimg="", time="", angle="",
               nset="", **kwargs):
        """APDL Command: SUBSET

        Reads results for the selected portions of the model.

        Parameters
        ----------
        lstep
            Load step number of the data set to be read (defaults to 1):

            N - Read load step N.

            FIRST - Read the first data set (SBSTEP and TIME are ignored).

            LAST - Read the last data set (SBSTEP and TIME are ignored).

            NEXT - Read the next data set (SBSTEP and TIME are ignored).  If at the last data set,
                   the first data set will be read as the next.

            NEAR - Read the data set nearest to TIME (SBSTEP is ignored).  If TIME is blank, read
                   the first data set.

            LIST - Scan the results file and list a summary of each load step.  (FACT, KIMG, TIME
                   and ANGLE are ignored.)

        sbstep
            Substep number (within Lstep).   For the buckling (ANTYPE,BUCKLE)
            analysis or the modal (ANTYPE,MODAL) analysis, the substep
            corresponds to the mode number.  Defaults to last substep of load
            step (except for ANTYPE,BUCKLE or MODAL).  If Lstep = LIST, SBSTEP
            = 0 or 1 lists the basic step information, whereas SBSTEP = 2 also
            lists the load step title, and labels imaginary data sets if they
            exist.

        fact
            Scale factor applied to data read from the file.  If zero (or
            blank), a value of 1.0 is used.  Harmonic velocities or
            accelerations may be calculated from the displacement results from
            a modal (ANTYPE,MODAL) or harmonic (ANTYPE,HARMIC) analyses.  If
            FACT = VELO, the harmonic velocities (v) are calculated from the
            displacements (d) at a particular frequency (f) according to the
            relationship v = 2 πfd.  Similarly, if FACT = ACEL, the harmonic
            accelerations (a) are calculated as a = (2 πf)2d.

        kimg
            Used only with results from complex analyses:

            0 - Store real part of complex solution

            1 - Store imaginary part.

        time
            Time-point identifying the data set to be read.  For harmonic
            analyses, time corresponds to the frequency.  For the buckling
            analysis, time corresponds to the load factor.  Used only in the
            following cases:  If Lstep is NEAR, read the data set nearest to
            TIME.   If both Lstep and SBSTEP are zero (or blank), read data set
            at time = TIME.  If TIME is between two solution time points on the
            results file, a linear interpolation is done between the two data
            sets.  Solution items not written to the results file [OUTRES] for
            either data set will result in a null item after data set
            interpolation.  If TIME is beyond the last time point on the file,
            use the last time point.

        angle
            Circumferential location (0.0 to 360°).  Defines the
            circumferential location for the harmonic calculations used when
            reading from the results file.  The harmonic factor (based on the
            circumferential angle) is applied to the harmonic elements
            (PLANE25, PLANE75, PLANE78, PLANE83, and SHELL61) of the load case.
            See the Mechanical APDL Theory Reference for details.  Note that
            factored values of applied constraints and loads will overwrite any
            values existing in the database.

        nset
            Data set number of the data set to be read.  If a positive value
            for NSET is entered, Lstep, SBSTEP, KIMG, and TIME are ignored.
            Available set numbers can be determined by *SET,LIST.

        Notes
        -----
        Reads a data set from the results file into the database for the
        selected portions of the model only.  Data that has not been specified
        for retrieval from the results file by the INRES command will be listed
        as having a zero value.  Each time that the SUBSET command is issued,
        the data currently in the database will be overwritten with a new set
        of data.  Various operations may also be performed during the read
        operation.  The database must have the model geometry available (or
        used the RESUME command before the SUBSET command to restore the
        geometry from File.DB).
        """
        command = "SUBSET,%s,%s,%s,%s,%s,%s,%s" % (str(lstep), str(sbstep), str(fact), str(kimg), str(time), str(angle), str(nset))
        return self.run(command, **kwargs)

    def starvput(self, parr="", entity="", entnum="", item1="", it1num="",
                 item2="", it2num="", kloop="", **kwargs):
        """APDL Command: *VPUT

         Restores array parameter values into the ANSYS database.

        Parameters
        ----------
        parr
            The name of the input vector array parameter.  See *SET for name
            restrictions.  The parameter must exist as a dimensioned array
            [*DIM] with data input.

        entity
            Entity keyword.  Valid keywords are shown for Entity = in the table
            below.

        entnum
            The number of the entity (as shown for ENTNUM= in the table below).

        item1
            The name of a particular item for the given entity.  Valid items
            are as shown in the Item1 columns of the table below.

        it1num
            The number (or label) for the specified Item1 (if any).  Valid
            IT1NUM values are as shown in the IT1NUM columns of the table
            below.  Some Item1 labels do not require an IT1NUM value.

        item2, it2num
            A second set of item labels and numbers to further qualify the item
            for which data is to be stored.  Most items do not require this
            level of information.

        kloop
            Field to be looped on:

            Loop on the ENTNUM field (default). - Loop on the Item1 field.

            Loop on the IT1NUM field.  Successive items are as shown with IT1NUM. - Loop on the Item2 field.

        Notes
        -----
        The *VPUT command is not supported for PowerGraphics displays.
        Inconsistent results may be obtained if this command is not used in
        /GRAPHICS, FULL.

        Plot and print operations entered via the GUI (Utility Menu> Pltcrtls,
        Utility Menu> Plot) incorporate the AVPRIN command. This means that the
        principal and equivalent values are recalculated. If you use *VPUT to
        put data back into the database, issue the plot commands from the
        command line to preserve your data.

        This operation is basically the inverse of the *VGET operation.  Vector
        items are put directly (without any coordinate system transformation)
        into the ANSYS database.  Items can only replace existing items of the
        database and not create new items.  Degree of freedom results that are
        replaced in the database are available for all subsequent
        postprocessing operations.  Other results are changed temporarily and
        are available mainly for the immediately following print and display
        operations.  The vector specification *VCUM does not apply to this
        command.  The valid labels for the location fields (Entity, ENTNUM,
        Item1, and IT1NUM) are listed below.  Item2 and IT2NUM are not
        currently used.  Not all items from the *VGET list are allowed on *VPUT
        since putting values into some locations could cause the database to be
        inconsistent.

        This command is valid in any processor.

        Table: 250:: : *VPUT - POST1 Items

        X, Y, or Z fluid velocity. X, Y, or Z nodal velocity in a transient
        structural analysis (LS-DYNA analysis or analysis with ANTYPE,TRANS).

        X, Y, or Z magnetic vector potential. X, Y, or Z nodal acceleration in
        a transient structural analysis (LS-DYNA analysis or analysis with
        ANTYPE,TRANS).
        """
        command = "*VPUT,%s,%s,%s,%s,%s,%s,%s,%s" % (str(parr), str(entity), str(entnum), str(item1), str(it1num), str(item2), str(it2num), str(kloop))
        return self.run(command, **kwargs)

    def tlabel(self, xloc="", yloc="", text="", **kwargs):
        """APDL Command: /TLABEL

        Creates annotation text (GUI).

        Parameters
        ----------
        xloc
            Text X starting location (-1.0 < X < 1.6).

        yloc
            Text Y starting location (-1.0 < Y < 1.0).

        text
            Text string (60 characters maximum).  Parameter substitution may be
            forced within the text by enclosing the parameter name or
            parametric expression within percent (%) signs.

        Notes
        -----
        Defines annotation text to be written directly onto the display at a
        specified location.  This is a command generated by the Graphical User
        Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All text is shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /TSPEC command to set the attributes of
        the text.

        This command is valid in any processor.
        """
        command = "/TLABEL,%s,%s,%s" % (str(xloc), str(yloc), str(text))
        return self.run(command, **kwargs)

    
    def dspoption(self, reord_option="", memory_option="", memory_size="",
                  solve_info="", **kwargs):
        """APDL Command: DSPOPTION

         Sets memory option for the distributed sparse solver.

        Parameters
        ----------
        reord_option
            Reordering option:

            DEFAULT - Use the default reordering scheme.

            SEQORDER - Use a sequential equation reordering scheme
                       within the distributed sparse solver. Relative
                       to PARORDER, this option typically results in
                       longer equation ordering times and therefore
                       longer overall solver times. Occasionally,
                       however, this option will produce better
                       quality orderings which decrease the matrix
                       factorization times and improve overall solver
                       performance.

            PARORDER - Use a parallel equation reordering scheme
                       within the distributed sparse solver.  Relative
                       to SEQORDER, this option typically results in
                       shorter equation ordering times and therefore
                       shorter overall solver times. Occasionally,
                       however, this option will produce lower quality
                       orderings which increase the matrix
                       factorization times and degrade overall solver
                       performance.

        memory_option
            Memory allocation option:

            DEFAULT - Use the default memory allocation strategy for
                      the distributed sparse solver.  The default
                      strategy attempts to run in the INCORE memory
                      mode. If there is not enough physical memory
                      available when the solver starts to run in the
                      INCORE memory mode, the solver will then attempt
                      to run in the OUTOFCORE memory mode.

            INCORE - Use a memory allocation strategy in the
                     distributed sparse solver that will attempt to
                     obtain enough memory to run with the entire
                     factorized matrix in memory. This option uses the
                     most amount of memory and should avoid doing any
                     I/O. By avoiding I/O, this option achieves
                     optimal solver performance. However, a
                     significant amount of memory is required to run
                     in this mode, and it is only recommended on
                     machines with a large amount of memory. If the
                     allocation for in-core memory fails, the solver
                     will automatically revert to out-of-core memory
                     mode.

            OUTOFCORE - Use a memory allocation strategy in the
                        distributed sparse solver that will attempt to
                        allocate only enough work space to factor each
                        individual frontal matrix in memory, but will
                        share the entire factorized matrix on
                        disk. Typically, this memory mode results in
                        poor performance due to the potential
                        bottleneck caused by the I/O to the various
                        files written by the solver.

            FORCE - This option, when used in conjunction with the
                    Memory_Size option, allows you to force the
                    distributed sparse solver to run with a specific
                    amount of memory. This option is only recommended
                    for the advanced user who understands distributed
                    sparse solver memory requirements for the problem
                    being solved, understands the physical memory on
                    the system, and wants to control the distributed
                    sparse solver memory usage.

        memory_size
            Initial memory size allocation for the sparse solver in
            MB. The Memory_Size setting should always be well within
            the physical memory available, but not so small as to
            cause the distributed sparse solver to run out of
            memory. Warnings and/or errors from the distributed sparse
            solver will appear if this value is set too low.  If the
            FORCE memory option is used, this value is the amount of
            memory allocated for the entire duration of the
            distributed sparse solver solution.

        solve_info
            Solver output option:

            OFF - Turns off additional output printing from the
                  distributed sparse solver (default).

            PERFORMANCE - Turns on additional output printing from the
                          distributed sparse solver, including a
                          performance summary and a summary of file
                          I/O for the distributed sparse
                          solver. Information on memory usage during
                          assembly of the global matrix (that is,
                          creation of the Jobname.FULL file) is also
                          printed with this option.

        Notes
        -----
        This command controls options related to the distributed sparse solver
        in all analysis types where the distributed sparse solver can be used.

        The amount of memory required for the distributed sparse solver is
        unknown until the matrix structure is preprocessed, including equation
        reordering. The amount of memory allocated for the distributed sparse
        solver is then dynamically adjusted to supply the solver what it needs
        to compute the solution.

        If you have a large memory system, you may want to try selecting the
        INCORE memory mode for larger jobs to improve performance. Also, when
        running the distributed sparse solver with many processors on the same
        machine or on a machine with very slow I/O performance (e.g., slow hard
        drive speed), you may want to try using the INCORE memory mode to
        achieve better performance. However, doing so may require much more
        memory compared to running in the OUTOFCORE memory mode.

        Running with the INCORE memory mode is best for jobs which comfortably
        fit within the limits of the physical memory on a given system. If the
        distributed sparse solver workspace exceeds physical memory size, the
        system will be forced to use virtual memory (or the system page/swap
        file). In this case, it is typically more efficient to run with the
        OUTOFCORE memory mode.
        """
        command = f"DSPOPTION,{reord_option},{memory_option},{memory_size},,,{solve_info}"
        return self.run(command, **kwargs)

    
    def fmagbc(self, cnam1="", cnam2="", cnam3="", cnam4="", cnam5="",
               cnam6="", cnam7="", cnam8="", cnam9="", **kwargs):
        """APDL Command: FMAGBC

        Applies force and torque boundary conditions to an element component.

        Parameters
        ----------
        cnam1, cnam2, cnam3, . . . , cnam9
            Names of existing element components (CM command).  Must be
            enclosed in single quotes (e.g., `Cnam1') when the command is
            manually typed in.

        Notes
        -----
        FMAGBC invokes a predefined ANSYS macro to apply Maxwell and virtual
        work force and torque boundary conditions to an element component.
        These boundary conditions are used for subsequent force and torque
        calculations during solution.  Magnetic virtual displacements (MVDI =
        1) are applied to nodes of elements in the components, and  Maxwell
        surface flags (MXWF) are applied to air elements adjoining the element
        components.  Incorrect force and torque calculations will occur for
        components sharing adjacent air elements.   Companion macros FMAGSUM
        and TORQSUM can be used in POST1 to summarize the force and torque
        calculations, respectively.  Torque calculations are valid for 2-D
        planar analysis only.  For 2-D harmonic analysis, force and torque
        represent time-average values.

         If using elements PLANE121, SOLID122, SOLID123, PLANE233, SOLID236 and
        SOLID237 (static analyses only), use EMFT to summarize electromagnetic
        force and torque. If you do use FMAGSUM, you do not need to first set
        either the Maxwell or the virtual work force flags via FMAGBC.
        """
        command = "FMAGBC,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cnam1), str(cnam2), str(cnam3), str(cnam4), str(cnam5), str(cnam6), str(cnam7), str(cnam8), str(cnam9))
        return self.run(command, **kwargs)

    
    def torqc2d(self, rad="", numn="", lcsys="", **kwargs):
        """APDL Command: TORQC2D

        Calculates torque on a body in a magnetic field based on a circular
        path.

        Parameters
        ----------
        rad
            Radius of the circular path.  The nodes for the path are created at
            this radius.

        numn
            Number of nodes to be created for the circular path.  The greater
            the number of nodes, the higher the accuracy of the torque
            evaluation.  Defaults to 18.

        lcsys
            (Optional) Local coordinate system number to be used for defining
            the circular arc of nodes and the path.  Defaults to 99.  (If a
            local system numbered 99 already exists, it will be overwritten by
            this default.)

        Notes
        -----
        TORQC2D invokes an ANSYS macro which calculates the mechanical torque
        on a body using a circular path.  It is used for a circular or
        cylindrical body such as a rotor in an electric machine.  The body must
        be centered about the global origin and must be surrounded by air
        elements.  The air elements surrounding the path at radius RAD must be
        selected, and elements with a high-permeability material should be
        unselected prior to using the macro.  The macro is valid for 2-D planar
        analyses only.  For a harmonic analysis, the macro calculates the time-
        average torque.  Radial symmetry models are allowed, i.e., the model
        need not be a full 360° model.

        The calculated torque is stored in the parameter TORQUE.  If the model
        is not a full 360° model, TORQUE should be multiplied by the
        appropriate factor (such as 4.0 for a 90° sector) to obtain the total
        torque.  A node plot showing the path is produced in interactive mode.

        The torque is calculated via a circular path integral of the Maxwell
        stress tensor.  The circular path and the nodes for the path are
        created by the macro at the specified radius RAD.  Path operations are
        used for the calculation, and all path items are cleared upon
        completion.  See the TORQ2D command for torque calculation based on an
        arbitrary, non-circular path.
        """
        command = "TORQC2D,%s,%s,%s" % (str(rad), str(numn), str(lcsys))
        return self.run(command, **kwargs)

    def ancut(self, nfram="", delay="", ncycl="", qoff="", ktop="", topoff="",
              node1="", node2="", node3="", **kwargs):
        """APDL Command: ANCUT

        Produces an animated sequence of Q-slices.

        Parameters
        ----------
        nfram
            Number of frames captures (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        qoff
            Q-slice working plane increment (defaults to .1 half screens).

        ktop
            Topological effect on or off (YES or NO; default is NO).

        topoff
            Topological offset (default is .1 half screens).

        node1
            Node 1 for start of the Q-slice.

        node2
            Node 2 for direction of the Q-slice.

        node3
            Node 3 for plane of the Q-slice.

        Notes
        -----
        ANCUT involves an ANSYS macro which produces an animation of Q-slices
        of the last plot action command.  This command operates only on graphic
        display platforms supporting the /SEG command.  After executing ANCUT,
        you can replay the animated sequence by issuing the ANIM command.

        The command functions only in the postprocessor.
        """
        command = "ANCUT,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(qoff), str(ktop), str(topoff), str(node1), str(node2), str(node3))
        return self.run(command, **kwargs)

    
    def mfwrite(self, fname="", ext="", **kwargs):
        """APDL Command: MFWRITE

        Writes an ANSYS master input file for MFX multiple code coupling.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        When working interactively, you need to issue this command as the last
        step in your setup process. This command will write out the input file
        that you will then use to submit the MFX analysis. This file will
        include the /SOLU, SOLVE, and FINISH commands.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.
        """
        command = "MFWRITE,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def mgen(self, itime="", inc="", node1="", node2="", ninc="", **kwargs):
        """APDL Command: MGEN

        Generates additional MDOF from a previously defined set.

        Parameters
        ----------
        itime, inc
            Do this generation operation a total of ITIMEs, incrementing all
            nodes in the set by INC each time after the first.  ITIME must be >
            1 for generation to occur.  All previously defined master degree of
            freedom directions are included in the set.  A component name may
            also be substituted for ITIME.

        node1, node2, ninc
            Generate master degrees of freedom from set beginning with NODE1 to
            NODE2 (defaults to NODE1) in steps of NINC (defaults to 1).  If
            NODE1 = ALL, NODE2 and NINC are ignored and set is all selected
            nodes [NSEL].  If NODE1 = P, graphical picking is enabled and all
            remaining command fields are ignored (valid only in the GUI).

        Notes
        -----
        Generates additional master degrees of freedom from a previously
        defined set.  If used in SOLUTION, this command is valid only within
        the first load step.

        This command is also valid in PREP7.
        """
        command = "MGEN,%s,%s,%s,%s,%s" % (str(itime), str(inc), str(node1), str(node2), str(ninc))
        return self.run(command, **kwargs)

    
    def rsprnt(self, rslab="", yname="", xout="", **kwargs):
        """APDL Command: RSPRNT

        Print a response surface.

        Parameters
        ----------
        rslab
            Response Surface set label. Identifies the response surfaces
            generated by the RSFIT command.

        yname
            Parameter name. The parameter must have been previously defined as
            a random output parameter with the PDVAR command. Identifies the
            parameter for which a response surface has been generated by the
            RSFIT command.

        xout
            An option if an extended print-out of more feedback about goodness-
            of-fit and the details of the regression analysis of the response
            surface is requested.

            No - Use the standard print-out (default).

            Yes - Use the extended print-out.

        Notes
        -----
        Prints the results and details of a response surface analysis generated
        by the RSFIT command. For the specified output parameter Yname, the
        fitting details such as the individual terms of the response surface
        model and their corresponding coefficients are listed. The command also
        produces a comparison of the original values of Yname used for the
        fitting process and the approximate values derived from the fitting,
        and some goodness of fit measures.

        If Xout = Yes, then more information about the regression analysis of
        the response surface will be printed. For example, the confidence
        intervals on the regression coefficients and the correlation between
        the regression coefficients among others.
        """
        command = "RSPRNT,%s,%s,%s" % (str(rslab), str(yname), str(xout))
        return self.run(command, **kwargs)

    
    def bfelist(self, elem="", lab="", **kwargs):
        """APDL Command: BFELIST

        Lists the element body force loads.

        Parameters
        ----------
        elem
            Element at which body load is to be listed.  If ALL (or blank),
            list for all selected elements [ESEL].  If ELEM = P, graphical
            picking is enabled and all remaining command fields are ignored
            (valid only in the GUI).  A component name may also be substituted
            for ELEM.

        lab
            Valid body load label. If ALL (or blank), use all appropriate
            labels. See BFE command for labels.

        Notes
        -----
        Lists the element body force loads for the specified element and label.
        Element body loads may be defined with the BFE command.

        This command is valid in any processor.
        """
        command = "BFELIST,%s,%s" % (str(elem), str(lab))
        return self.run(command, **kwargs)

    def format(self, ndigit="", ftype="", nwidth="", dsignf="", line="",
               char="", **kwargs):
        """APDL Command: /FORMAT

        Specifies format controls for tables.

        Parameters
        ----------
        ndigit
            Number of digits (3 to 32) in first table column (usually the node
            or element number).  Initially defaults to 7.

        ftype
            FORTRAN format types (initially defaults to G):

            G - Gxx.yy.  xx and yy are described below.

            F - Fxx.yy

            E - Exx.yy

        nwidth
            Total width (9 to 32) of the field (the xx in Ftype).  Initially
            defaults to 12.

        dsignf
            Number of digits after the decimal point (yy in F or E format) or
            number of significant digits in G format.  Range is 2 to xx-7 for
            Ftype = G or E; and 0 to xx-4 for Ftype = F.  Initially defaults to
            5.

        line
            Number of lines (11 minimum) per page.  Defaults to ILINE or BLINE
            from the /PAGE command.

        char
            Number of characters (41 to 240, system-dependent) per line before
            wraparound.  Defaults to ICHAR or BCHAR from the /PAGE command.

        Notes
        -----
        Specifies various format controls for tables printed with the POST1
        PRNSOL, PRESOL, PRETAB, PRRSOL, PRPATH, and CYCCALC commands.  A blank
        (or out-of-range) field on the command retains the current setting.
        Issue /FORMAT,STAT to display the current settings.  Issue /FORMAT,DEFA
        to reestablish the initial default specifications.

        For the POST26 PRVAR command, the Ftype, NWIDTH, and DSIGNF fields
        control the time output format.

        This command is valid in any processor.
        """
        command = "/FORMAT,%s,%s,%s,%s,%s,%s" % (str(ndigit), str(ftype), str(nwidth), str(dsignf), str(line), str(char))
        return self.run(command, **kwargs)

    def bfscale(self, lab="", fact="", tbase="", **kwargs):
        """APDL Command: BFSCALE

        Scales body force loads at nodes.

        Parameters
        ----------
        lab
            Valid body load label.  If ALL, use all appropriate labels.

        fact
            Scale factor for the nodal body load values.  Zero (or blank)
            defaults  to 1.0.  Use a small number for a zero scale factor.  The
            scale factor is not applied to body load phase angles.

        tbase
            Base temperature for temperature difference.  Used only with Lab =
            TEMP.  Scale factor is applied to the temperature difference (T -
            TBASE)  and then added to TBASE.  T is the current temperature.

        Notes
        -----
        Scales body force loads in the database on the selected nodes.  Issue
        the BFLIST command to list the nodal body loads.  Solid model boundary
        conditions are not scaled by this command, but boundary conditions on
        the FE model are scaled.

        Note:: : Such scaled FE boundary conditions may still be overwritten by
        unscaled solid model boundary conditions if a subsequent boundary
        condition transfer occurs.

        BFSCALE does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "BFSCALE,%s,%s,%s" % (str(lab), str(fact), str(tbase))
        return self.run(command, **kwargs)

    def reorder(self, **kwargs):
        """APDL Command: REORDER

        Specifies "Model reordering" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "REORDER,"
        return self.run(command, **kwargs)

    
    def cmrotate(self, cm_name="", rotatx="", rotaty="", rotatz="", x1="",
                 y1="", z1="", x2="", y2="", z2="", **kwargs):
        """APDL Command: CMROTATE

        Specifies the rotational velocity of an element component in a brake
        squeal analysis.

        Parameters
        ----------
        cm_name
            The name of the element component.

        rotatx, rotaty, rotatz
            If the X2, Y2, Z2 fields are not defined, ROTATX, ROTATY, and
            ROTATZ specify the components of the rotational angle vector in the
            global Cartesian X, Y, Z directions.

        x1, y1, z1
            If the X2, Y2, Z2 fields are defined, X1, Y1, and Z1 define the
            coordinates of the beginning point of the rotational axis vector.
            Otherwise, X1, Y1, and Z1 are the coordinates of a point through
            which the rotational axis passes.

        x2, y2, z2
            The coordinates of the end point of the rotational axis vector.

        Notes
        -----
        The CMROTATE command specifies the rotational motion velocity
        components ROTATX, ROTATY, and ROTATZ of an element component CM_Name
        about a user-defined rotational axis. The rotational axis can be
        defined either as a vector passing through a single point or a vector
        connecting two points. CMROTATE can be used in static analyses
        (ANTYPE,STATIC) and modal analyses (ANTYPE,MODAL).

        This command sets the constant rotational velocity on the nodes of the
        specified element component, despite any deformation at the nodes. This
        feature is primarily used for generating sliding contact at frictional
        contact interfaces in a brake squeal analysis. This type of analysis
        typically involves surface-to-surface contact between the brake pad and
        the rotating disk. The applicable contact elements, therefore, are
        CONTA173, CONTA174, and CONTA175.

        A brake squeal analysis generally involves a linear perturbation modal
        analysis subsequent to a large-deformation static analysis with the
        Newton-Raphson option set as NROPT,UNSYM. Therefore, CMROTATE is not
        applicable for multiple load step solves using the LSSOLVE command.

        This command is also valid in PREP7.
        """
        command = "CMROTATE,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cm_name), str(rotatx), str(rotaty), str(rotatz), str(x1), str(y1), str(z1), str(x2), str(y2), str(z2))
        return self.run(command, **kwargs)

    
    def mfelem(self, fnumb="", itype1="", itype2="", itype3="", itype4="",
               itype5="", itype6="", itype7="", itype8="", itype9="",
               itype10="", **kwargs):
        """APDL Command: MFELEM

        Defines a field by grouping element types.

        Parameters
        ----------
        fnumb
            Field number for a group of element types.

        itype1, itype2, itype3, . . . , itype10
            Element types defined by the ET command.

        Notes
        -----
        You can define up to ten element types per field.

        Define only element types that contain elements in the field. Do not
        include MESH200 because it is a "mesh-only" element that does not
        contribute to the solution.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFELEM,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(fnumb), str(itype1), str(itype2), str(itype3), str(itype4), str(itype5), str(itype6), str(itype7), str(itype8), str(itype9), str(itype10))
        return self.run(command, **kwargs)

    
    
    def sfedele(self, elem="", lkey="", lab="", **kwargs):
        """APDL Command: SFEDELE

        Deletes surface loads from elements.

        Parameters
        ----------
        elem
            Element to which surface load deletion applies.  If ALL, delete
            load from all selected elements [ESEL].  If ELEM = P, graphical
            picking is enabled and all remaining command fields are ignored
            (valid only in the GUI).  A component name may be substituted for
            ELEM.

        lkey
            Load key associated with surface load (defaults to 1).  If ALL,
            delete surface loads for all load keys.

        lab
            Valid surface load label.  If ALL, use all appropriate labels.  See
            the SFE command for labels.

        Notes
        -----
        Deletes surface loads from selected elements.  See the SFDELE command
        for an alternate surface load deletion capability based upon selected
        nodes.

        This command is also valid in PREP7.
        """
        command = "SFEDELE,%s,%s,%s" % (str(elem), str(lkey), str(lab))
        return self.run(command, **kwargs)

    def senergy(self, opt="", antype="", **kwargs):
        """APDL Command: SENERGY

        Determines the stored magnetic energy or co-energy.

        Parameters
        ----------
        opt
            Item to be calculated:

            0 - Stored magnetic energy.

            1 - Stored magnetic co-energy.

        antype
            Analysis type:

            0 - Static or transient.

            1 - Harmonic.

        Notes
        -----
        SENERGY invokes an ANSYS macro which calculates the stored magnetic
        energy or co-energy for all selected elements.  (For a harmonic
        analysis, the macro calculates a time-averaged (rms) stored energy.)  A
        summary table listing the energy by material number is produced.  The
        energy density is also calculated and stored on a per-element basis in
        the element table [ETABLE] with the label MG_ENG (energy density) or
        MG_COENG (co-energy density).  The macro erases all other items in the
        element table [ETABLE] and only retains the energy density or co-energy
        density.  Use the PLETAB and PRETAB commands to plot and list the
        energy density.  The macro is valid for static and low-frequency
        magnetic field formulations.  The macro will not calculate stored
        energy and co-energy for the following cases:

        Orthotropic nonlinear permanent magnets.

        Orthotropic nonlinear permeable materials.

        Temperature dependent materials.

        SENERGY is restricted to MKSA units.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "SENERGY,%s,%s" % (str(opt), str(antype))
        return self.run(command, **kwargs)

    def sucalc(self, rsetname="", lab1="", oper="", lab2="", fact1="",
               fact2="", const="", **kwargs):
        """APDL Command: SUCALC

        Create new result data by operating on two existing result data sets on
        a given surface.

        Parameters
        ----------
        rsetname
            Eight character name for new result data.

        lab1
            First  result data upon which to operate.

        oper
            Mathematical operation to perform.

            ADD - (lab1 + lab2 + const)

            SUB - (lab1 - lab2 + const)

            MULT - (lab1 * lab2 + const)

            DIV - (lab1 / lab2 + const)

            EXP - (lab1 ^ fact1 + lab2 ^ fact2 + const)

            COS - (cos (lab1) + const)

            SIN - (sin (lab1) + const)

            ACOS - (acos (lab1) + const)

            ASIN - (asin (lab1) + const)

            ATAN - (atan (lab1) + const)

            ATA2 - (atan2 (lab1 / lab2) + const)

            LOG - (log (lab1) + const)

            ABS - (abs (lab1) + const)

            ZERO - (0 + const)

        lab2
            Second result data upon which to operate.

        fact1
            First scaling factor (for EXP option only).

        fact2
            Second scaling factor (for EXP option only).

        const
            Constant added to the values in the resulting data.
        """
        command = "SUCALC,%s,%s,%s,%s,%s,%s,%s" % (str(rsetname), str(lab1), str(oper), str(lab2), str(fact1), str(fact2), str(const))
        return self.run(command, **kwargs)

    
    def noorder(self, lab="", **kwargs):
        """APDL Command: NOORDER

        Re-establishes the original element ordering.

        Parameters
        ----------
        lab
            Turns element reordering on or off.

            ON (or blank) - Re-establishes original element ordering (default).

            OFF - Original ordering is not used and program establishes its own ordering at the
                  beginning of the solution phase.

        Notes
        -----
        If Lab = ON, the original element ordering is re-established and no
        automatic reordering occurs at the beginning of the solution phase.
        Use Lab = OFF only to remove the effect of a previous NOORDER command.
        This command affects only those elements that were defined up to the
        point that this command is issued. See the WSORT and WAVES commands for
        reordering.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "NOORDER,%s" % (str(lab))
        return self.run(command, **kwargs)

    def anisos(self, nfram="", delay="", ncycl="", **kwargs):
        """APDL Command: ANISOS

        Produces an animated sequence of an isosurface.

        Parameters
        ----------
        nfram
            Number of frames captures (defaults to 9).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        Notes
        -----
        ANISOS involves an ANSYS macro which produces an animation of an
        isosurface  of the last plot action command (for example,
        PLNSOL,S,EQV).  The ANISOS command operates only on graphic display
        platforms supporting the /SEG command.  After executing ANISOS, you can
        replay the animated sequence by issuing the ANIM command.

        This command functions only in the postprocessor.
        """
        command = "ANISOS,%s,%s,%s" % (str(nfram), str(delay), str(ncycl))
        return self.run(command, **kwargs)

    def rsurf(self, options="", delopts="", etnum="", **kwargs):
        """APDL Command: RSURF

        Generates the radiosity surface elements (SURF251/SURF252) and stores
        them in the database.

        Parameters
        ----------
        options
            Command options:

            CLEAR  - Deletes radiosity surface elements and nodes. The set of elements and nodes to
                     be deleted is defined by Delopts. ETNUM is ignored.

            DEFINE  - Creates the radiosity surface elements and nodes (default).

            STAT - Shows the status/listing. Other command options are ignored.

        delopts
            Deletion options

            ALL  - Deletes all radiosity surface elements and nodes.

            LAST  - Deletes radiosity surface elements and nodes created by the last RSURF command.

        etnum
            Element type number. Leave blank to indicate the next available
            number.

        Notes
        -----
        This command generates the radiosity surface elements based on the
        RSYMM and RDEC parameters and stores them in the database. It works
        only on the faces of selected underlying elements that have RDSF flags
        on them and all corner nodes selected. You can issue multiple RSURF
        commands to build the radiosity model. However, all RSURF commands must
        be issued after issuing the RSYMM, and after the model is complete
        (i.e., after all meshing operations are complete).

        If you do issue multiple RSURF commands for different regions, you must
        first mesh the different regions, and then generate the radiosity
        surface elements on each meshed region individually. Use RSURF,,,ETNUM
        to assign a separate element type number to each region. This procedure
        allow you to identify the individual regions later in the multi-field
        analysis.

        If the underlying solid elements are higher order, the radiosity
        surface elements are always lower order (4- or 3-node in 3-D or 2-node
        in 2-D). Decimation will always occur before any symmetry operations.

        For 2-D axisymmetric YR models, the newly-generated nodes can have only
        positive Y coordinates.

        If you have already issued RSURF for a surface and you issue RSURF
        again, the program creates a new set of radiosity surface elements and
        nodes over the existing set, resulting in an erroneous solution.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.

        This is an action command (that creates or deletes surface meshes) and
        is serial in nature. Even if Distributed ANSYS is running, the RSURF
        command runs serially
        """
        command = "RSURF,%s,%s,%s" % (str(options), str(delopts), str(etnum))
        return self.run(command, **kwargs)

    def cmsfile(self, option="", fname="", ext="", cmskey="", **kwargs):
        """APDL Command: CMSFILE

        Specifies a list of component mode synthesis (CMS) results files for
        plotting results on the assembly.

        Parameters
        ----------
        option
            Specifies the command operation:

            ADD - Add the specified component results file (Fname) to the list of files to plot.
                  This option is the default.

            DELETE - Remove the specified component results file (Fname) from the list of files to
                     plot.

            LIST - List all specified component results files.

            CLEAR - Clear all previous files added.

            ALL - Add all component results (.rst) files from the working directory to the list
                  of files to plot.

        fname
            The file name (with full directory path) of the component results
            file. The default file name is the Jobname (specified via the
            /FILNAME command).

        ext
            The file name (Fname) extension. The default extension is .rst.

        cmskey
            Valid only when adding a results file (Option = ADD or ALL), this
            key specifies whether or not to check the specified .rst file to
            determine if it was created via a CMS expansion pass:

            ON - Check (default).

            OFF - Do not check.

        Notes
        -----
        The CMSFILE command specifies the list of component mode synthesis
        (CMS) results files to include when plotting the mode shape of an
        assembly.

        During postprocessing (/POST1) of a CMS analysis, issue the CMSFILE
        command to point to component results files of interest. (You can issue
        the command as often as needed to include all or some of the component
        results files.) Issue the SET command to acquire the frequencies and
        mode shapes from substeps for all specified results files. Execute a
        plot (PLNSOL) or print (PRNSOL) operation to display the mode shape of
        the entire assembly.

        When you specify a results file to add to the plot list, the default
        behavior of the command (CmsKey = ON) is to first verify that the file
        is from a CMS analysis and that the frequencies of the result sets on
        the file match the frequencies on the first file in the list. If CmsKey
        = OFF, you can add any .rst file to the list of files to plot, even if
        the file was not expanded via a CMS expansion pass.

        If CmsKey = ON (default), output from the command appears as: ADD CMS
        FILE = filename.rst. : If CmsKey = OFF, output from the command appears
        as: ADD FILE = filename.rst.

        If Option = DELETE or CLEAR, you must clear the database (/CLEAR), then
        re-enter the postprocessor (/POST1) and issue a SET command for the
        change to take effect on subsequent plots.

        Clearing the database does not clear the list of files specified via
        the CMSFILE command. Specify Option = CLEAR to clear the list of files.
        """
        command = "CMSFILE,%s,%s,%s,%s" % (str(option), str(fname), str(ext), str(cmskey))
        return self.run(command, **kwargs)

    def pdprob(self, rlab="", name="", relation="", limit="", conf="",
               **kwargs):
        """APDL Command: PDPROB

        Prints a probability result.

        This command was removed prior to V18.2

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses).

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable or a random output parameter using the
            PDVAR command.

        relation
            Relation label for the relation between probabilistic design
            parameter Name and the limit value LIMIT:

            LT - Less than (default).

            GT - Greater than.

        limit
            Limit value.

        conf
            Confidence level. The confidence level is used to print the
            confidence bounds on the probability. The value for the confidence
            level must be between 0.0 and 1.0 and it defaults to 0.95 (95%).
            Printing of confidence bound is suppressed for CONF  0.5. This
            parameter is ignored for response surface methods results
            postprocessing.

        Notes
        -----
        Prints the probability that the probabilistic design input or output
        variable denoted with Name is smaller or larger than a certain limit
        value.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        Use the relation label Relation to specify if you want to print a
        traditional probability value (LT) or the exceedence probability (GT).
        The LIMIT directly specifies at which value of Name (the design
        parameter) the probability should be evaluated. If LIMIT is between two
        sample values of Name the resulting probability is linearly
        interpolated between the sample values. If LIMIT is smaller than all
        sample values of Name the probability is 0.0 for Relation = LT and 1.0
        for Relation = GT. If LIMIT is greater than all sample values for Name
        the probability is 1.0 for Relation = LT and 0.0 for Relation = GT.

        The confidence level is a probability expressing the confidence that
        the value for the requested probability is in fact between the
        confidence bounds. The larger the confidence level, the wider the
        confidence bounds. Printing the confidence bounds only makes sense for
        postprocessing Monte Carlo simulation results, where the confidence
        bounds represent the accuracy of the results. With increasing sample
        sizes, the width of the confidence bounds gets smaller for the same
        confidence level. For response surface analysis methods, the number of
        simulations done on the response surface is usually very large;
        therefore, the accuracy of the results is determined by the response
        surface fit and not by the confidence level.

        The PDPROB command cannot be used to postprocess the results in a
        solution set that is based on Response Surface Methods, only Monte
        Carlo Simulations.
        """
        return self.run(f"PDPROB,{rlab},{name},{relation},{limit},,{conf}", **kwargs)

    
    def pdsens(self, rlab="", name="", chart="", type_="", slevel="", **kwargs):
        """APDL Command: PDSENS

        Plots the probabilistic sensitivities.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses). The
            PDSENS command cannot be used to postprocess the results in a
            solution set that is based on Response Surface Methods, only Monte
            Carlo Simulations.

        name
            Parameter name. The parameter must have been previously defined as
            a random output parameter using the PDVAR command.

        chart
            Keyword for the type of chart to be plotted.

            BAR - Bar chart of the absolute sensitivities.

            PIE - Pie chart of relative and normalized sensitivities.

            BOTH - Both pie and bar charts plotted side by side (default).

        type\_
            Keyword for the type of correlation coefficients used to evaluate
            the sensitivities.

            RANK - Spearman rank-order correlation coefficient (default).

            LIN - Pearson linear correlation coefficient.

        slevel
            Significance level. The value for the significance level must be
            between 0.0 and 1.0 and it defaults to 0.025 (2.5%).

        Notes
        -----
        Plots the probabilistic sensitivities.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        Evaluation of the probabilistic sensitivities is based on the
        correlation coefficients between all random input variables and the
        random output parameter specified by Name. You can chose which
        correlation coefficient should be used for that evaluation using the
        Corr option. For all sensitivity values, the probabilistic design tool
        evaluates the probability that the sensitivity can be neglected, based
        on statistical test theory. If this probability exceeds the
        significance level as specified by the SLEVEL parameter, the
        sensitivity value should be regarded as negligible or insignificant.
        The higher the significance level (SLEVEL) the more sensitivities are
        considered as significant. The sensitivity plot includes the
        significant sensitivities only and lists the insignificant ones
        separately.
        """
        command = "PDSENS,%s,%s,%s,%s,%s" % (str(rlab), str(name), str(chart), str(type_), str(slevel))
        return self.run(command, **kwargs)

    
    def gfile(self, size="", **kwargs):
        """APDL Command: /GFILE

        Specifies the pixel resolution on Z-buffered graphics files.

        Parameters
        ----------
        size
            Pixel resolution.  Defaults to a pixel resolution of 800.  Valid
            values are from 256 to 2400.

        Notes
        -----
        Defines the pixel resolution on subsequently written graphics files
        (Jobname.GRPH) for software Z-buffered displays [/TYPE].  Lowering the
        pixel resolution produces a "fuzzier" image; increasing the resolution
        produces a "sharper" image but takes a little longer.

        This command is valid in any processor.
        """
        command = "/GFILE,%s" % (str(size))
        return self.run(command, **kwargs)

    def hrocean(self, type_="", nphase="", **kwargs):
        """APDL Command: HROCEAN

        Perform the harmonic ocean wave procedure (HOWP).

        Parameters
        ----------
        type\_
            Specifies how to include ocean wave information in a harmonic
            analysis:

            HARMONIC - Performs a harmonic analysis using both real and imaginary load vectors
                       calculated via the harmonic ocean wave procedure (HOWP).
                       This behavior is the default. This option performs a
                       harmonic analysis running at a frequency determined by
                       the wave period (specified via OCTABLE command input).

            STATIC - Performs a static analysis using both real and imaginary load vectors
                     (calculated via HOWP). This option works by performing a
                     harmonic analysis running at a frequency of 0.0.

            OFF - Deactivates a previously activated HOWP and performs a standard harmonic
                  analysis.

        nphase
            Positive number specifying the number of phases to calculate
            forces. This value must be at least 8. The default value is 20.

        Notes
        -----
        The HROCEAN command applies ocean wave information (obtained via the
        OCDATA and OCTABLE commands) in a harmonic analysis (ANTYPE,HARMIC) as
        real and imaginary forces.

        You can apply only one ocean load at a time.

        The applied frequency in the harmonic (Type = HARMONIC) analysis is
        based on the wave period input on the OCTABLE command (and not on
        HARFRQ command input, which cannot be used). Phase-shift input on the
        OCTABLE command is ignored.

        HOWP does not generate a damping matrix. If you require a damping
        matrix, you must add it separately.

        The command applies to regular wave types only (Airy with one wave
        component, Wheeler with one wave component, Stokes, and stream
        function). Irregular wave types are not supported. For information
        about wave types, see Hydrodynamic Loads in the Mechanical APDL Theory
        Reference.

        The program calculates the forces on each load component of each
        element at NPHASE solutions, spread evenly over one wave cycle. Then,
        the minimum and maximum, and the phase between them, are calculated.
        The command uses the resulting information to generate the real and
        imaginary loads.

        HOWP cannot be used with stress stiffening.

        HOWP works with the full harmonic analysis method (HROPT,FULL) only.

        For more information, see Harmonic Ocean Wave Procedure (HOWP) in the
        Mechanical APDL Theory Reference.

        This command is also valid in PREP7.
        """
        command = "HROCEAN,%s,%s" % (str(type_), str(nphase))
        return self.run(command, **kwargs)

    def pcgopt(self, lev_diff ="", reduceio="", strmck="", wrtfull="",
               memory="", lm_key="", **kwargs):
        """APDL Command: PCGOPT

        Controls PCG solver options.

        Parameters
        ----------
        lev_diff
            Indicates the level of difficulty of the analysis. Valid
            settings are AUTO or 0 (default), 1, 2, 3, 4, or 5. This
            option applies to both the PCG solver when used in static
            and full transient analyses and to the PCG Lanczos method
            in modal analyses. Use AUTO to let ANSYS automatically
            choose the proper level of difficulty for the model. Lower
            values (1 or 2) generally provide the best performance for
            well-conditioned problems. Values of 3 or 4 generally
            provide the best performance for ill-conditioned problems;
            however, higher values may increase the solution time for
            well-conditioned problems. Higher level-of-difficulty
            values typically require more memory. Using the highest
            value of 5 essentially performs a factorization of the
            global matrix (similar to the sparse solver) and may
            require a very large amount of memory. If necessary, use
            Memory to reduce the memory usage when using Lev_Diff = 5.
            Lev_Diff = 5 is generally recommended for small- to
            medium-sized problems when using the PCG Lanczos mode
            extraction method.

        reduceio
            Controls whether the PCG solver will attempt to reduce I/O
            performed during equation solution:

            AUTO - Automatically chooses whether to reduce I/O or not
            (default).

            YES - Reduces I/O performed during equation solution in
            order to reduce total solver time.

            NO  - Does NOT reduce I/O performed during equation solution.

        strmck
            Controls whether or not a Sturm sequence check is performed:

            OFF - Does NOT perform Sturm sequence check (default).

            ON - Performs Sturm sequence check

        wrtfull
            Controls whether or not the .FULL file is written.

            ON - Write .FULL file (default)

            OFF - Do not write .FULL file.

        memory
            Controls whether to run using in-core or out-of-core mode
            when using Lev_Diff = 5.

            AUTO - Automatically chooses which mode to use (default).

            INCORE - Run using in-core mode.

            OOC - Run using out-of-core mode.

        lm_key
            Controls use of the PCG solver for MPC184 Lagrange
            multiplier method elements. This option applies only to
            the PCG solver when used in static and full transient
            analyses.

            OFF - Do not use the PCG solver for the MPC184 Lagrange
            multiplier method (default).

            ON - Allow use of the PCG solver for the MPC184 Lagrange
            multiplier method.

        Notes
        -----
        ReduceIO works independently of the MSAVE command in the PCG
        solver.  Setting ReduceIO to YES can significantly increase
        the memory usage in the PCG solver.

        To minimize the memory used by the PCG solver with respect to
        the Lev_Diff option only, set Lev_Diff = 1 if you do not have
        sufficient memory to run the PCG solver with Lev_Diff = AUTO.

        The MSAVE,ON command is not valid when using Lev_Diff = 5. In
        this case, the Lev_Diff value will automatically be reset to
        2. The MSAVE,ON command is also not valid with the StrmCk
        option. In this case, StrmCk will be set to OFF.

        Distributed ANSYS Restriction: The Memory option and the
        LM_Key option are not supported in Distributed ANSYS.
        """
        command = f"PCGOPT,{lev_diff},,{reduceio},{strmck},{wrtfull},{memory},{lm_key}"
        return self.run(command, **kwargs)

    
    def rdec(self, option ="", reduc ="", nplace ="", **kwargs):
        """APDL Command: RDEC

        Defines the decimation parameters.

        Parameters
        ----------
        option
            Command options:

            DEFINE  - Defines the decimation parameters (default).

            STAT - Shows the status/listing. Other command options are ignored.

        reduc
            Approximate reduction in the number of surface
            elements. Valid range is from 0.0 (no decimation, the
            default) to 1.0. This number is a factor applied to the
            initial number of element radiosity surfaces.

        nplace
            Node placement algorithm

            OPTI - Optimal placement. An edge is collapsed by moving
                    both nodes (I and J in the figure below) to a new
                    location.

            SUBS - Subset placement. An edge is collapsed by moving
                    one node to another one. In the figure below, node
                    I is moved to node J.

        Notes
        -----
        Decimation is the process of simplifying a fine surface mesh into a
        coarse one. This process is accomplished by a sequence of edge
        collapses.

        The maximum degree of decimation (1.0) is unreachable. The real degree
        of decimation is always less than 1.0 because the decimated mesh must
        always consist of at least one element.
        """
        return self.run(f"RDEC,{option},{reduc},,{nplace}", **kwargs)

    def ernorm(self, key="", **kwargs):
        """APDL Command: ERNORM

        Controls error estimation calculations.

        Parameters
        ----------
        key
            Control key:

            ON - Perform error estimation (default). This option is
            not valid for PowerGraphics.

            OFF - Do not perform error estimation.

        Notes
        -----
        Especially for thermal analyses, program speed increases if
        error estimation is suppressed.  Therefore, it might be
        desirable to use error estimation only when needed.  The value
        of the ERNORM key is not saved on file.db. Consequently, you
        need to reissue the ERNORM key after a RESUME if you wish to
        deactivate error estimation again.
        """
        return self.run("ERNORM,%s" % (str(key)), **kwargs)

    
    def ratio(self, wn="", ratox="", ratoy="", **kwargs):
        """APDL Command: /RATIO

        Distorts the object geometry.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        ratox
            Distort object in the window X direction by this factor (defaults
            to 1.0).

        ratoy
            Distort object in the window Y direction by this factor (defaults
            to 1.0).

        Notes
        -----
        Distorts the object geometry in a particular direction.  An example of
        this command's use would be to allow long narrow sections to be
        distorted to a more square area for better display visualization.

        This command is valid in any processor.
        """
        command = "/RATIO,%s,%s,%s" % (str(wn), str(ratox), str(ratoy))
        return self.run(command, **kwargs)

    def thopt(self, refopt="", reformtol="", ntabpoints="", tempmin="",
              tempmax="", algo="", **kwargs):
        """APDL Command: THOPT

        Specifies nonlinear transient thermal solution options.

        Parameters
        ----------
        refopt
            Matrix reform option.

            FULL - Use the full Newton-Raphson solution option (default). All subsequent input
                   values are ignored.

            QUASI - Use a selective reform solution option based on REFORMTOL.

        reformtol
            Property change tolerance for Matrix Reformation (.05 default). The
            thermal matrices are reformed if the maximum material property
            change in an element (from the previous reform time) is greater
            than the reform tolerance. Valid only when Refopt = QUASI.

        ntabpoints
            Number of points in Fast Material Table (64 default). Valid only
            when Refopt = QUASI.

        tempmin
            Minimum temperature for Fast Material Table. Defaults to the
            minimum temperature defined by the MPTEMP command for any material
            property defined. Valid only when Refopt = QUASI.

        tempmax
            Maximum temperature for Fast Material Table. Defaults to the
            maximum temperature defined by the MPTEMP command for any material
            property defined. Valid only when Refopt = QUASI.

        --
            Reserved field.

        algo
            Specifies which solution algorithm to apply:

            0 - Multipass (default).

            1 - Iterative.

        Notes
        -----
        The QUASI matrix reform option is supported by the ICCG, JCG, and
        sparse solvers only (EQSLV).

        For Refopt = QUASI:

        Results from a restart may be different than results from a single run
        because the stiffness matrices are always recreated in a restart run,
        but may or may not be in a single run (depending on the behavior
        resulting from the REFORMTOL setting). Additionally, results may differ
        between two single runs as well, if the matrices are reformed as a
        result of the REFORMTOL setting.

        Midside node temperatures are not calculated if 20-node thermal solid
        elements (SOLID90 or SOLID279) are used.

        For more information, see Solution Algorithms Used in Transient Thermal
        Analysis in the Thermal Analysis Guide.
        """
        command = "THOPT,%s,%s,%s,%s,%s,%s" % (str(refopt), str(reformtol), str(ntabpoints), str(tempmin), str(tempmax), str(algo))
        return self.run(command, **kwargs)

    def cmdomega(self, cm_name="", domegax="", domegay="", domegaz="", x1="",
                 y1="", z1="", x2="", y2="", z2="", **kwargs):
        """APDL Command: CMDOMEGA

        Specifies the rotational acceleration of an element component about a
        user-defined rotational axis.

        Parameters
        ----------
        cm_name,
            The name of the element component.

        domegax, domegay, domegaz
            If the X2, Y2, Z2 fields are not defined, DOMEGAX, DOMEGAY, and
            DOMEGAZ specify the components of the rotational acceleration
            vector in the global Cartesian X, Y, Z directions.

        x1, y1, z1
            If the X2, Y2, Z2 fields are defined, X1, Y1, and Z1 define the
            coordinates of the beginning point of the rotational axis vector.
            Otherwise, X1, Y1, and Z1 are the coordinates of a point through
            which the rotational axis passes.

        x2, y2, z2
            The coordinates of the end point of the rotational axis vector.

        Notes
        -----
        Specifies the rotational acceleration components DOMEGAX, DOMEGAY, and
        DOMEGAZ of an element component CM_NAME about a user-defined rotational
        axis. The rotational axis can be defined either as a vector passing
        through a single point, or a vector connecting two points.

        You can define the rotational acceleration and rotational axis with the
        CMDOMEGA command for STATIC, HARMIC, TRANS, and SUBSTR analyses.
        Rotational velocities are combined with the element mass matrices to
        form a body force load vector term. Units are radians/time2.

        The CMDOMEGA command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for CMDOMEGA_X, CMDOMEGA_Y, and
        CMDOMEGA_Z input values (*DIM) for full transient and harmonic
        analyses.

        Related commands are ACEL, CGLOC, CGLOC, OMEGA, CMOMEGA, DCGOMG,
        DOMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        You can use the CMDOMEGA command in conjunction with any one of the
        following two groups of commands, but not with both groups
        simultaneously:

        Components for which you want to specify rotational loading must
        consist of elements only. The elements you use cannot be part of more
        than one component, and elements that share nodes cannot exist in
        different element components. You cannot apply the loading to an
        assembly of element components.

        In a modal harmonic or transient analysis, you must apply the load in
        the modal portion of the analysis. Mechanical APDL calculates a load
        vector and writes it to the mode shape file, which you can apply via
        the LVSCALE command.

        See Acceleration Effect in the Mechanical APDL Theory Reference for
        more information.

        This command is also valid in PREP7.
        """
        command = "CMDOMEGA,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(cm_name), str(domegax), str(domegay), str(domegaz), str(x1), str(y1), str(z1), str(x2), str(y2), str(z2))
        return self.run(command, **kwargs)

    
    def gmarker(self, curve="", key="", incr="", **kwargs):
        """APDL Command: /GMARKER

        Specifies the curve marking style.

        Parameters
        ----------
        curve
            Curve number markers will be applied on (integer value between 1
            and 10).

        key
            Marker key:

            0 - No markers will be applied (default).

            1 - TRIANGLES will be applied.

            2 - SQUARES will be applied.

            3 - DIAMONDS  will be applied.

            4 - CROSSES will be applied.

        incr
            Determines the curve marking frequency. (a whole number value
            between 1 and 255). If INCR = 1, markers are displayed at every
            data point on the curve. If INCR = 2 then markers are displayed at
            every second data point. If INCR = 3 then they are displayed at
            every third data point.

        Notes
        -----
        The user-specified markers will not be drawn when the area under the
        curve is color-filled (/GROPT, FILL).
        """
        command = "/GMARKER,%s,%s,%s" % (str(curve), str(key), str(incr))
        return self.run(command, **kwargs)

    
    def fctyp(self, oper="", lab="", **kwargs):
        """APDL Command: FCTYP

        Activates or removes failure-criteria types for postprocessing.

        Parameters
        ----------
        oper
            Operation key:

            ADD - Activate failure-criteria types. This option is the default behavior.

            DELE - Remove failure-criteria types.

        lab
            Valid failure-criteria labels. If ALL, select all available
            (including user-defined) failure criteria.

            EMAX - Maximum strain criterion (default)

            SMAX - Maximum stress criterion (default)

            TWSI  - Tsai-Wu strength index (default)

            TWSR  - Inverse of Tsai-Wu strength ratio index (default)

            HFIB  - Hashin fiber failure criterion

            HMAT  - Hashin matrix failure criterion

            PFIB  - Puck fiber failure criterion

            PMAT  - Puck inter-fiber (matrix) failure criterion

            L3FB - LaRc03 fiber failure criterion

            L3MT - LaRc03 matrix failure criterion

            L4FB - LaRc04 fiber failure criterion

            L4MT - LaRc04 matrix failure criterion

            USR1 through USR9  - User-defined failure criteria

        Notes
        -----
        The FCTYP command modifies the list of active failure criteria.

        By default, active failure criteria include EMAX, SMAX, TWSI, and TWSR.

        The command affects any subsequent postprocessing listing and plotting
        commands (such as PRESOL, PRNSOL, PLESOL, PLNSOL, and ETABLE).

        A single FCTYP command allows up to six failure-criteria labels. If
        needed, reissue the command to activate or remove additional failure-
        criteria types.
        """
        command = "FCTYP,%s,%s" % (str(oper), str(lab))
        return self.run(command, **kwargs)

    
    def expass(self, key="", **kwargs):
        """APDL Command: EXPASS

        Specifies an expansion pass of an analysis.

        Parameters
        ----------
        key
            Expansion pass key:

            OFF - No expansion pass will be performed (default).

            ON - An expansion pass will be performed.

        Notes
        -----
        Specifies that an expansion pass of a modal, substructure, buckling,
        transient, or harmonic analysis is to be performed.

        Note:: : This separate solution pass requires an explicit FINISH to
        preceding analysis and reentry into SOLUTION.

        This command is also valid in PREP7.
        """
        command = "EXPASS,%s" % (str(key))
        return self.run(command, **kwargs)

    
    
    def djdele(self, elem="", lab="", **kwargs):
        """APDL Command: DJDELE

        Deletes boundary conditions on the components of relative motion of a
        joint element.

        Parameters
        ----------
        elem
            Element number or ALL. ALL (or leaving this field blank) will
            delete all joint element boundary conditions specified by LAB.

        lab
            Valid labels are:

            UX - Displacement in local x direction.

            UY - Displacement in local y direction.

            UZ - Displacement in local z direction.

            ROTX - Rotation about local x axis.

            ROTY - Rotation about local y axis.

            ROTZ - Rotation about local z axis.

            VELX - Linear velocity in local x direction.

            VELY - Linear velocity in local y direction.

            VELZ - Linear velocity in local z direction.

            OMGX - Angular velocity in local x direction.

            OMGY - Angular velocity in local y direction.

            OMGZ - Angular velocity in local z direction.

            ACCX - Linear acceleration in local x direction.

            ACCY - Linear acceleration in local y direction.

            ACCZ - Linear acceleration in local z direction.

            DMGX - Angular acceleration in local x direction.

            DMGY - Angular acceleration in local y direction.

            DMGZ - Angular acceleration in local z direction.

            ALL, or (blank) - Delete all applied boundary conditions.

        Notes
        -----
        This command is valid for MPC184 joint elements. See DJ for information
        on specifying boundary conditions on the components of relative motion
        of a joint element.
        """
        command = "DJDELE,%s,%s" % (str(elem), str(lab))
        return self.run(command, **kwargs)

    def hrcplx(self, loadstep="", substep="", omegat="", firstlc_ase="",
               secondlc_ase="", **kwargs):
        """APDL Command: HRCPLX

        Computes and stores in the database the time-harmonic solution at a
        prescribed phase angle.

        Parameters
        ----------
        loadstep
            Load step number of the data set to be read (defaults to 1).

        substep
            Substep number within LOADSTEP.

        omegat
            Angle in degrees (Ω (angle) times T (time)).

        1stlcase
            First load case number (defaults to 1).

        2ndlcase
            Second load case number (defaults to 2).

        Notes
        -----
        HRCPLX invokes a macro that combines the real and imaginary parts of
        the solution. If the angle is specified, it produces the following:

        Where:

        RR and RI are, respectively, the real and imaginary parts of the
        results quantity (e.g. the nodal displacements, the reaction forces,
        ...).

        α is the angle (OMEGAT).

        1STLCASE and 2NDLCASE are internally generated load cases. You may want
        to specify these to avoid overwriting an existing load case number 1 or
        2.

        Not all results computed by this command are valid. See Summable, Non-
        Summable and Constant Data in the Basic Analysis Guide for more
        information. When the amplitude of the solution is requested (OMEGAT >=
        360°), averaged values (such as the nodal component stresses, which are
        an average of element nodal component stresses) are calculated by
        averaging the amplitudes. Because the degrees of freedom results have
        different phases, derived results (such as the equivalent stress SEQV)
        are not valid. See POST1 and POST26 – Complex Results Postprocessing
        for more details about post-processing complex results.

        For postprocessing amplitudes, the only appropriate coordinate system
        is the solution coordinate system (RSYS ,SOLU).  When displaying the
        displacement amplitudes, use a contour display (PLNSOL command).
        Because a deformed shape display (PLDISP command) could lead to a non-
        physical shape, the displacement scaling is off by default
        (/DSCALE,,OFF).

        For postprocessing cylindrical geometry, it is suggested that you
        rotate the element coordinate systems into the appropriate cylindrical
        system (EMODIF,,ESYS) before running the solution and then view the
        results in this system (RSYS,SOLU) in POST1.

        Since HRCPLX performs load case combinations, it alters most of the
        data in the database. In particular, it alters applied loads such as
        forces and imposed displacements. To restore the original loads in the
        database for a subsequent analysis, reissue the SET command in POST1 to
        retrieve the real and imaginary set data.

        To animate the solution over one period, use the ANHARM command.

        OMEGAT is not equal to the phase shift.

        This command is not supported after a cyclic symmetry analysis; use
        /CYCEXPAND,,PHASEANG instead.
        """
        command = "HRCPLX,%s,%s,%s,%s,%s" % (str(loadstep), str(substep), str(omegat), str(firstlc_ase), str(secondlc_ase))
        return self.run(command, **kwargs)

    
    def asifile(self, opt="", fname="", ext="", oper="", kdim="", kout="",
                limit="", **kwargs):
        """APDL Command: ASIFILE

        Writes or reads one-way acoustic-structural coupling data.

        Parameters
        ----------
        opt
            Command behavior option:

            WRITE  - Write the structural results to the specified file.

            READ  - Read the structural results from the specified file.

        fname
            File name and directory path of a one-way acoustic-structural
            coupling data file (248 characters maximum, including the
            characters needed for the directory path). An unspecified directory
            path defaults to the working directory; in this case, you can use
            all 248 characters for the file name (defaults to jobname).

        ext
            File name extension of the one-way acoustic-structural coupling
            data file (defaults to .asi).

        oper
            Command operation:

            NOMAP  - No mapping occurs between the structural and acoustic models when reading the
                     structural results from the specified file (default).

            MAP  - Maps the results from the structural to the acoustic model. (See "Notes".)

        kdim
            Interpolation criteria. Valid only when Oper = MAP.

        kout
            Outside region results. Valid only when Oper = MAP.

        limit
            Number of nearby nodes considered for interpolation. Valid only
            when Oper = MAP.

        Notes
        -----
        The ASIFILE command writes to, or reads from, a file containing one-way
        acoustic-structural coupling data.

        Results data on the one-way coupling interface (defined by the
        SF,,FSIN) in the structural model are written to the one-way coupling
        result data file during the structural solution.

        One-way coupling results data are read into the acoustic model as the
        velocity (harmonic) or acceleration (transient) excitation during the
        sequential acoustic solution.

        If Oper = NOMAP, both structural and acoustic models must share the
        same node number on the one-way coupling interface.

        If Oper = MAP:

        The one-way coupling interface must be defined in the acoustic model
        (SF,,FSIN) such that it corresponds to the field-surface interface
        number (FSIN) in the structural model.

        The output points are correct only if they are within the boundaries
        set via the specified input points.

        Calculations for out-of-bound points require much more processing time
        than do points that are within bounds.

        For each point in the acoustic destination mesh, the command searches
        all possible triangles in the structural source mesh to find the best
        triangle containing each point, then performs a linear interpolation
        inside this triangle. For faster and more accurate results, consider
        your interpolation method and search criteria carefully (see LIMIT).

        One-way coupling excitation can be applied to multiple frequencies or
        time steps.
        """
        command = "ASIFILE,%s,%s,%s,%s,%s,%s,%s" % (str(opt), str(fname), str(ext), str(oper), str(kdim), str(kout), str(limit))
        return self.run(command, **kwargs)

    
    def gropt(self, lab="", key="", **kwargs):
        """APDL Command: /GROPT

        Sets various line graph display options.

        Parameters
        ----------
        lab
            Apply display style as selected from the following labels:

            AXDV - Axis division (tick) marks (defaults to KEY = ON).

            AXNM - Axis scale numbers (defaults to KEY = ON, which puts numbers at the back plane
                   of the graph).  If KEY = FRONT, numbers are on the front
                   plane of the graph.

            AXNSC - Axis number size scale factor.  Input the scale value for KEY (defaults to
                    1.0).

            ASCAL - Automatic scaling of additional Y-axes for multi-curve [/GRTYP, 2 or 3] graphs
                    (defaults to KEY = ON).  If KEY = OFF, use base Y-axis
                    scaling (see the /YRANGE command).

            LOGX - Log X scale (defaults to KEY = OFF (linear)).

            LOGY - Log Y scale (applies only to the base Y axis) (defaults to KEY = OFF (linear)).

            FILL - Color fill areas under curves (defaults to KEY = OFF).

            CGRID - Superimpose background grid [/GRID] over areas under filled curves (defaults to
                    KEY = OFF).

            DIG1 - Number of significant digits before decimal point for axis values.  Input the
                   value for KEY (defaults to 4).

            DIG2 - Number of significant digits after decimal point for axis values.  Input the
                   value for KEY (defaults to 3).

            VIEW - View key for graph displays (defaults to KEY = OFF, in which case the view is
                   (0,0,1) for 2-D graph displays or (1,2,3) for 3-D graph
                   displays).  If KEY = ON, the view settings for graph
                   displays are the same as the view settings for the model.

            REVX - Plots the values on the X-axis in reverse order.

            REVY - Plots the values on the Y-axis in reverse order.

            DIVX - Determines the number of divisions (grid markers) that will be plotted on the X
                   axis.

            DIVY - Determines the number of divisions (grid markers) that will be plotted on the Y
                   axis.

            LTYP - Determines whether ANSYS generated (KEY = 1) or system derived (KEY = 0) fonts
                   will be used for the axis labels.

            CURL - Determines the position of the curve labels. If (KEY = 1), the curve label will
                   be plotted in the legend column, and the label will be
                   displayed in the same color as the curve. If (KEY = 0) the
                   curve labels will be plotted near the curve. (default).

            XAXO - When you use this label, the subsequent KEY value will determine an offset
                   amount from the default (along the bottom) location for the
                   X axis. If KEY = 1.0, a full offset occurs (the X axis is
                   moved to the top of the graph). If KEY = 0.5, the axis is
                   offset to the midpoint of the graph, and if KEY = 0 the axis
                   remains in the original position, along the bottom of the
                   graph. For any offset, a grey copy of the original axis
                   (containing the axis numbering) remains at the original
                   location.

            YAXO - When you use this label, the subsequent KEY value will determine an offset
                   amount from the default (along the left side of the graph)
                   location for the Y axis. If KEY = 1.0, a full offset occurs
                   (the Y axis is moved to the right side of the graph). If KEY
                   = 0.5, the axis is offset to the midpoint of the graph, and
                   if KEY = 0 the axis remains in the original position, along
                   the left side of the graph. For any offset, a gray copy of
                   the original axis (containing the axis numbering) remains at
                   the original location.

        key
            Option values:

            OFF (0) - Do not apply selected style.

            ON (1) - Apply selected style.

            nnnn - If Lab is DIG1 or DIG2, input the number of digits.

            nn - If Lab is AXNSC, input the scale factor.

            FRONT - If Lab is AXNM, FRONT may also be input.

            Ndiv - If Lab is DIVX or DIVY, determines the number of divisions (1-99) that will be
                   applied to the axis.

            Kfont - If Lab is LTYP, Kfont is ON (1) or OFF(0).  ON will use ANSYS generated fonts
                    for the axis labels, while OFF will use SYSTEM (Windows,
                    X-system, etc.) fonts. The default value is ON (ANSYS
                    fonts).

        Notes
        -----
        Sets various line graph display options.  Issue /GROPT,STAT to display
        the current settings.  Issue /GROPT,DEFA to reset the default
        specifications.  ANSYS informs you that graph view manipulation is
        inactive unless you have issued the /GROPT,VIEW,ON command.  See the
        /AXLAB, /GRTYP, /GRID, and /GTHK commands for other graph control
        options.

        Automatic scaling using the /XRANGE and /YRANGE commands will often
        yield inappropriate range values for logarithmic scales (/GROPT, LOGX
        or /GROPT, LOGY).

        This command is valid in any processor.
        """
        command = "/GROPT,%s,%s" % (str(lab), str(key))
        return self.run(command, **kwargs)

    
    def sfdele(self, nlist="", lab="", **kwargs):
        """APDL Command: SFDELE

        Deletes surface loads.

        Parameters
        ----------
        nlist
            Label defining where to find the list of nodes:

            ALL - Use all selected nodes [NSEL].  If P, use graphical picking in GUI.  A
                  component label may be substituted for Nlist.

        lab
            Valid surface load label.  If ALL, use all appropriate labels.  See
            the SF command for labels.

        Notes
        -----
        Deletes surface loads as applied with the SF command.  Loads are
        deleted only for the specified nodes on external faces of selected area
        and volume elements.  For shell elements, if the specified nodes
        include face one (which is usually the bottom face) along with other
        faces (such as edges), only the loads on face one will be deleted.  The
        element faces are determined from the list of selected nodes as
        described for the SF command.  See the SFEDELE command for deleting
        loads explicitly by element faces.

        This command is also valid in PREP7.
        """
        command = "SFDELE,%s,%s" % (str(nlist), str(lab))
        return self.run(command, **kwargs)

    def pdscat(self, rlab="", name1="", name2="", type_="", order="", nmax="",
               **kwargs):
        """APDL Command: PDSCAT

        Plots a scatter graph.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command, or the response surface set label
            defined in an RSFIT command.

        name1, name2
            Parameter names. The parameters must have been previously defined
            as a random input variable or a random output parameter using the
            PDVAR command. The parameter data for Name1 is shown on the X-axis
            and the parameter data for Name2 is shown on the Y-axis in the
            plot.

        type\_
            Keyword for the type of trendline curve.

            POLY - Polynomial trendline (default).

            NONE - A trendline is not plotted.

        order
            Order of the polynomial trendline. This parameter is used only for
            Type = POLY. ORDER must be a positive number. There is no maximum
            for ORDER provided there are enough data points to evaluate a
            polynomial of the requested order. Default is 1.

        nmax
            Maximum number of points plotted in the scatter plot.  If there are
            more sample data, then only the first NMAX points are plotted. The
            default value is 10,000.

        Notes
        -----
        Plots a scatter graph with or without a trendline. The scatter plot
        shows the simulated points for two random parameters. Random input
        variables and random output parameters are valid for both X- and
        Y-axis. The mean value of both parameters are marked with separate
        green lines. The point where the green lines cross marks the
        statistical center of gravity of the cloud of all simulated data points
        of the two parameters.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        If the parameter data for Name1 includes negative values, fitting a
        logarithmic trendline is not possible and the logarithmic trendline
        plot is suppressed if requested. The same applies for an exponential
        trendline if the data for the Name2 includes negative values.

        Because of the amount of data involved, the scatter plot is limited to
        NMAX points. If shown, the trendline is evaluated only on the NMAX
        points shown. However, the statistical information shown in the plot,
        such as the mean value lines for both parameters and the correlation
        coefficients listed in the legend are based on the full set of samples.
        If required, you can increase NMAX to plot more points, but this will
        affect the time needed to process the PDSCAT command. If NMAX is less
        than the total amount of simulated points, which is typically possible
        for Response Surface Methods, you will see an appropriate warning in
        the plot legend.
        """
        command = "PDSCAT,%s,%s,%s,%s,%s,%s" % (str(rlab), str(name1), str(name2), str(type_), str(order), str(nmax))
        return self.run(command, **kwargs)

    def filedisp(self, fname="", ext="", **kwargs):
        """APDL Command: FILEDISP

        Specifies the file containing the graphics data.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Specifies the input file containing the graphics data (defaults to
        File.GRPH).
        """
        command = "FILEDISP,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def dklist(self, kpoi="", **kwargs):
        """APDL Command: DKLIST

        Lists the DOF constraints at keypoints.

        Parameters
        ----------
        kpoi
            List constraints for this keypoint.  If ALL (default), list for all
            selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        Notes
        -----
        Listing applies to the selected keypoints [KSEL] and the selected
        degree of freedom labels [DOFSEL].

        This command is valid in any processor.
        """
        command = "DKLIST,%s" % (str(kpoi))
        return self.run(command, **kwargs)

    def lcdef(self, lcno="", lstep="", sbstep="", kimg="", **kwargs):
        """APDL Command: LCDEF

        Creates a load case from a set of results on a results file.

        Parameters
        ----------
        lcno
            Arbitrary pointer number (1-99) to be assigned to the load case
            specified by LSTEP, SBSTEP and by the FILE command.  Defaults to 1
            + previous value.

        lstep
            Load step number to be defined as the load case.  Defaults to one.

        sbstep
            Substep number.  Defaults to the last substep of the load step.

        kimg
            Used only with results from complex analyses:

            0 - Use real part of complex solution

            1 - Use imaginary part.

        Notes
        -----
        Creates a load case by establishing a pointer to a set of results on a
        results file (written during the ANSYS solution phase).  This pointer
        (LCNO) can then be used on the LCASE or LCOPER commands to read the
        load case data into the database.

        Issue LCDEF,ERASE to delete all load case pointers (and all load case
        files, if any).  Issue LCDEF,LCNO,ERASE to delete only the specific
        load case pointer LCNO (and its file, if any).  With the ERASE options,
        all pointers are deleted; however only files with the default extension
        [LCWRITE] are deleted.  Issue LCDEF,STAT for status of all selected
        load cases [LCSEL], or LCDEF,STAT,ALL for status of all load cases.
        The STAT command may be used to list all load cases.  See also LCFILE
        to establish a pointer to a set of results on a load case file (written
        by LCWRITE). Harmonic element data read from a result file load case is
        stored at the zero-degree position.
        """
        command = "LCDEF,%s,%s,%s,%s" % (str(lcno), str(lstep), str(sbstep), str(kimg))
        return self.run(command, **kwargs)

    def crplim(self, crcr="", option="", **kwargs):
        """APDL Command: CRPLIM

        Specifies the creep criterion for automatic time stepping.

        Parameters
        ----------
        crcr
            Value of creep criteria for the creep limit ratio control.

        option
            Type of creep analysis for which the creep limit ratio is
            specified:

            1 (or ON) - Implicit creep analysis.

            0 (or OFF) - Explicit creep analysis.

        Notes
        -----
        The CUTCONTROL command can also be used to set the creep criterion and
        is preferred over this command for setting automatic time step
        controls.

        The creep ratio control can be used at the same time for implicit creep
        and explicit creep analyses. For implicit creep (Option = 1), the
        default value of CRCR is zero (i.e., no creep limit control), and you
        can specify any value. For explicit creep (Option = 0), the default
        value of CRCR is 0.1, and the maximum value allowed is 0.25.

        This command is also valid in PREP7.
        """
        command = "CRPLIM,%s,%s" % (str(crcr), str(option))
        return self.run(command, **kwargs)

    def pdef(self, lab="", item="", comp="", avglab="", **kwargs):
        """APDL Command: PDEF

        Interpolates an item onto a path.

        Parameters
        ----------
        lab
            Label assigned to the resulting path item (8 characters maximum).
            This item may be used as input for other path operations.

        item
            Label identifying the item for interpolation.  Valid item labels
            are shown in Table 216: PDEF - valid Item and Component Labels
            below.  Some items also require a component label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in Table 216: PDEF - valid Item and Component Labels below.

        avglab
            Option to average across element boundaries:

            AVG - Average element results across elements (default).

            NOAV - Do not average element results across elements.  If the parameter DISCON = MAT
                   on the PMAP command, this option is automatically invoked.

        Notes
        -----
        Defines and interpolates a labeled path item along a predefined path
        (PATH).  Path item results are in the global Cartesian coordinate
        directions unless transformed (RSYS).  A path item must be defined
        before it can be used with other path operations.  Additional path
        items may be defined from the PVECT, PCALC, PDOT, and PCROSS commands.
        Path items may be listed (PRPATH) or displayed (PLPATH, PLPAGM).  A
        maximum number of path items permitted is established by the nSets
        argument specified with the PATH command.

        When you create the first path item (PDEF or PVECT), the program
        automatically interpolates four path items which are used to describe
        the geometry of the path.  These predefined items are the position of
        the interpolated path points (labels XG, YG, and ZG) in global
        Cartesian coordinates, and the path length (label S).  For alternate
        methods of mapping the path geometry (to include, for example, material
        discontinuity) see the PMAP command.  These items may also be listed or
        displayed with the PRPATH, PLPATH, and PLPAGM commands.

        If specifying that load case operations act on principal/equivalent
        stresses (SUMTYPE,PRIN), derived quantities (principal and equivalent
        stresses/strains) will be zero for path plots. A typical use for such a
        case involves mode combinations in a response spectrum analysis.

        The number of interpolation points on the path is defined by the nDiv
        argument on the PATH command.  See Mapping Nodal and Element Data onto
        the Path in the Mechanical APDL Theory Reference for details.  Use
        PDEF,STAT to list the path item labels.  Use PDEF,CLEAR to erase all
        labeled path items, except the path geometry items (XG, YG, ZG, S).

        Table: 216:: : PDEF - valid Item and Component Labels

         For SHELL131 and SHELL132 elements with KEYOPT(3) = 0 or 1, use the
        labels TBOT, TE2, TE3, ..., TTOP instead of TEMP.

        For more information on the meaning of contact status and its possible
        values, see Reviewing Results in POST1 in the Contact Technology Guide.
        """
        command = "PDEF,%s,%s,%s,%s" % (str(lab), str(item), str(comp), str(avglab))
        return self.run(command, **kwargs)

    
    def xfrm(self, lab="", x1="", y1="", z1="", x2="", y2="", z2="", **kwargs):
        """APDL Command: /XFRM

        Controls the centroid or the axis of dynamic rotation.

        Parameters
        ----------
        lab
            The location or entity (centroid) used to define the center or axis
            of rotation.

            NODE - If NODE is chosen for the center of rotation, the node number will be X1. If
                   the rotation is to be about an axis, then X1 and Y1 define
                   the two nodes between which a line is drawn to determine the
                   axis. The remaining arguments are ignored.

            ELEMENT - If ELEMENT is chosen for the center of rotation, the element number will be X1.
                      If the rotation is to be about an axis, then X1 and Y1
                      define the two elements between which a line is drawn to
                      determine the axis. The remaining arguments are ignored.

            KP - If KP is chosen for the center of rotation, the keypoint number will be X1. If
                 the rotation is to be about an axis, then X1 and Y1 define the
                 two keypoints between which a line is drawn to determine the
                 axis.  The remaining arguments are ignored.

            LINE - If LINE is chosen for the center of rotation, the line number will be X1. If
                   the rotation is to be about an axis, then X1 and Y1 define
                   the two lines between which a line is drawn to determine the
                   axis. The remaining arguments are ignored.

            AREA - If AREA is chosen for the center of rotation, the area number will be X1. If
                   the rotation is to be about an axis, then X1 and Y1 define
                   the two areas between which a line is drawn to determine the
                   axis. The remaining arguments are ignored.

            VOLUME - If VOLUME is chosen for the center of rotation, the volume number will be X1.
                     If the rotation is to be about an axis, then X1 and Y1
                     define the two volumes between which a line is drawn to
                     determine the axis. The remaining arguments are ignored.

            XYZ - If XYZ is chosen for the center of rotation, the location of that center is
                  determined by the coordinates X1, Y1, Z1. If values are
                  specified for X2, Y2, Z2, then the axis of rotation will be
                  about the line between those two points.

            OFF - If LAB = OFF, DEFAULT, FOCUS or if no value is specified, then the center of
                  rotation is set at the FOCUS point, as defined by the /FOCUS
                  command.

        x1
            The entity number or X coordinate for the center of rotation.

        y1
            The entity number or Y coordinate for the center of rotation.

        z1
            The Z coordinate for the center of rotation.

        x2
            The X coordinate for the axis of rotation.

        y2
            The Y coordinate for the axis of rotation.

        z2
            The Z coordinate for the axis of rotation.

        Notes
        -----
        The /XFRM command is active only when the cumulative rotation key is
        specified ON for the /ANGLE command (KINCR = 1). This command affects
        dynamic manipulations only.

        For center rotation, the middle mouse button will rotate the model
        about the screen Z axis and the right mouse button will rotate the
        model about the screen X and Y axis.

        For rotation about an axis, the middle mouse button will rotate the
        model about the defined axis of rotation and the right mouse button
        will be deactivated.

        This command is valid in any processor.
        """
        command = "/XFRM,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(x1), str(y1), str(z1), str(x2), str(y2), str(z2))
        return self.run(command, **kwargs)

    def dllist(self, line="", **kwargs):
        """APDL Command: DLLIST

        Lists DOF constraints on a line.

        Parameters
        ----------
        line
            List constraints for this line.  If ALL (default), list for all
            selected lines [LSEL].  If LINE = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component name may also be substituted for LINE.

        Notes
        -----
        Lists the degree of freedom constraints on a line previously specified
        with the DL command.

        This command is valid in any processor.
        """
        command = "DLLIST,%s" % (str(line))
        return self.run(command, **kwargs)

    
    
    def c(self, comment="", **kwargs):
        """APDL Command: C***

        Places a comment in the output.

        Parameters
        ----------
        comment
            Comment string, up to 75 characters.

        Notes
        -----
        The output from this command consists of two lines -- a blank line
        followed by a line containing C*** and the comment.  This command is
        similar to /COM except that the comment produced by C*** is more easily
        identified in the output.

        Another way to include a comment is to precede it with a ! character
        (on the same line).  The ! may be placed anywhere on the line, and any
        input following it is ignored as a comment.  No output is produced by
        such a comment, but the comment line is included on the log file.  This
        is a convenient way to annotate the log file.

        This command is valid anywhere.
        """
        command = "C***,%s" % (str(comment))
        return self.run(command, **kwargs)

    def fe(self, nev="", cycle="", fact="", title="", **kwargs):
        """APDL Command: FE

        Defines a set of fatigue event parameters.

        Parameters
        ----------
        nev
            Reference number for this event (within MXEV).

        cycle
            Number of required cycles (defaults to 1).  If -1, erase all
            parameters and fatigue stresses for this event.

        fact
            Scale factor to be applied to all loadings in this event (defaults
            to 1.0).

        title
            User defined identification title for this event (up to 20
            characters).

        Notes
        -----
        Repeat FE command to define additional sets of event parameters (MXEV
        limit), to redefine event parameters, or to delete event stress
        conditions.

        The set of fatigue event parameters is associated with all loadings and
        all locations.  See the FTSIZE command for the maximum set of events
        (MXEV) allowed.
        """
        command = "FE,%s,%s,%s,%s" % (str(nev), str(cycle), str(fact), str(title))
        return self.run(command, **kwargs)

    def monitor(self, var="", node="", lab="", **kwargs):
        """APDL Command: MONITOR

        Controls contents of three variable fields in nonlinear solution
        monitor file.

        Parameters
        ----------
        var
            One of three variable field numbers in the monitor file whose
            contents can be specified by the Lab field.  Valid arguments are
            integers 1, 2, or 3. See Notes section for default values.

        node
            The node number for which information is monitored in the specified
            VAR field.  In the GUI, if Node = P, graphical picking is enabled.
            If blank, the monitor file lists the maximum value of the specified
            quantity (Lab field) for the entire structure.

        lab
            The solution quantity to be monitored in the specified VAR field.
            Valid labels for solution quantities are UX, UY, and UZ
            (displacements); ROTX, ROTY, and ROTZ (rotations); and TEMP
            (temperature).  Valid labels for reaction force are FX, FY, and FZ
            (structural force) and MX, MY, and MZ (structural moment).  Valid
            label for heat flow rate is HEAT. For defaults see the Notes
            section.

        Notes
        -----
        The monitor file always has an extension of .mntr, and takes its file
        name from the specified Jobname.  If no Jobname is specified, the file
        name defaults to file.

        You must issue this command once for each solution quantity you want to
        monitor at a specified node at each load step. You cannot monitor a
        reaction force during a linear analysis. The variable field contents
        can be redefined at each load step by reissuing the command. The
        monitored quantities are appended to the file for each load step.

        Reaction forces reported in the monitor file may be incorrect if the
        degree of freedom of the specified node is involved in externally
        defined coupling (CP command) or constraint equations (CE command), or
        if the program has applied constraint equations internally to the node.

        The following example shows the format of a monitor file.  Note that
        the file only records the solution substep history when a substep is
        convergent.

        The following details the contents of the various fields in the monitor
        file:

        The current load step number.

        The current substep (time step) number.

        The number of attempts made in solving the current substep.  This
        number is equal to the number of failed attempts (bisections) plus one
        (the successful attempt).

        The number of iterations used by the last successful attempt.

        Total cumulative number of iterations (including each iteration used by
        a bisection).

        :

        Time or load factor increments for the current substep.

        Total time (or load factor) for the last successful attempt in the
        current substep.

        Variable field 1.  In this example, the field is reporting the UZ
        value.  By default, this field lists the CPU time used up to (but not
        including) the current substep.

        Variable field 2.  In this example, the field is reporting the MZ
        value.  By default, this field lists the maximum displacement in the
        entire structure.

        Variable field 3.  By default (and in the example), this field reports
        the maximum equivalent plastic strain increment in the entire
        structure.
        """
        command = "MONITOR,%s,%s,%s" % (str(var), str(node), str(lab))
        return self.run(command, **kwargs)

    def contour(self, wn="", ncont="", vmin="", vinc="", vmax="", **kwargs):
        """APDL Command: /CONTOUR

        Specifies the uniform contour values on stress displays.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        ncont
            Number of contour values. NCONT defaults to 9 for X11 or WIN32 and
            to 128 for X11c or WIN32C.  The default graphics window display for
            3-D devices is a smooth continuous shading effect that spans the
            maximum of 128 contours available. Use the /DV3D command to create
            defined banding for your contour values (values of 9 and 128 are
            displayed in smooth shading only). The legend, however, will
            display only nine color boxes, which span the full range of colors
            displayed in the graphics window.

        vmin
            Minimum contour value.  If VMIN = AUTO, automatically calculate
            contour values based upon NCONT uniformly spaced values over the
            min-max extreme range.  Or, if VMIN = USER, set contour values to
            those of the last display (useful when last display automatically
            calculated contours).

        vinc
            Value increment (positive) between contour values.  Defaults to
            (VMAX-VMIN)/NCONT.

        vmax
            Maximum contour value.  Ignored if both VMIN and VINC are
            specified.

        Notes
        -----
        See the /CVAL command for alternate specifications.  Values represent
        contour lines in vector mode, and the algebraic maximum of contour
        bands in raster mode.

        Note:: : No matter how many contours (NCONT) are specified by /CONTOUR,
        the actual number of contours that appear on your display depends also
        on the device name, whether the display is directed to the screen or to
        a file, the display mode (vector or raster), and the number of color
        planes.  (All these items are controlled by /SHOW settings.) In any
        case, regardless of whether they are smoothed or banded, only 128
        contours can be displayed. See Creating Geometric Results Displays in
        the Basic Analysis Guide for more information on changing the number of
        contours.

        If the current ANSYS graphics are not displayed as Multi-Plots, then
        the following is true:  If the current device is a 3-D device
        [/SHOW,3D], the model contours in all active windows will be the same,
        even if separate /CONTOUR commands are issued for each active window.
        For efficiency, ANSYS 3-D graphics logic maintains a single data
        structure (segment), which contains precisely one set of contours.  The
        program displays the same segment in all windows.  The view settings of
        each window constitute the only differences in the contour plots in the
        active windows.

        This command is valid in any processor.
        """
        command = "/CONTOUR,%s,%s,%s,%s,%s" % (str(wn), str(ncont), str(vmin), str(vinc), str(vmax))
        return self.run(command, **kwargs)

    def gsave(self, fname="", ext="", **kwargs):
        """APDL Command: /GSAVE

        Saves graphics settings to a file for later use.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        This command does not save all graphics settings, but only those that
        may be reset by the /RESET command.  The database remains untouched.
        Use the /GRESUME command to read the file.  Repeated use of the /GSAVE
        command overwrites the previous data on the file.  The following
        commands are saved by /GSAVE:

        This command is valid in any processor.
        """
        command = "/GSAVE,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def rssims(self, rslab="", nsim="", seed="", **kwargs):
        """APDL Command: RSSIMS

        Performs Monte Carlo simulations on response surface(s).

        Parameters
        ----------
        rslab
            Response Surface set label. Identifies the response surfaces
            generated by the RSFIT command.

        nsim
            Number of simulation loops on the response surfaces that will be
            generated for all random output parameters. If the RSSIMS command
            is issued multiple times using the same response surface set label
            the NSIM Monte Carlo simulations is appended to previous ones. The
            default value for NSIM is 10,000.

        seed
            Seed value label. Random number generators require a seed value
            that is used to calculate the next random number. After each random
            number generation finishes, the seed value is updated and is used
            again to calculate the next random number. By default ANSYS
            initializes the seed value with the system time (one time only)
            when the ANSYS session started.

            CONT - Continues updating using the derived seed value (default).

            TIME - Initializes the seed value with the system time. You can use this if you want
                   the seed value set to a specific value for one analysis and
                   then you want to continue with a "random" seed in the next
                   analysis. It is not recommended to "randomize" the seed
                   value with the Seed = TIME option for multiple analyses. If
                   the Monte Carlo simulations requested with this command will
                   be appended to previously existing simulations, then the
                   Seed option is ignored and Seed = CONT is used.

            INIT - Initializes the seed value using 123457. This value is a typical recommendation
                   used very often in literature. This option leads to
                   identical random numbers for all random input variables when
                   the exact analysis will be repeated, making it useful for
                   benchmarking and validation purposes (where identical random
                   numbers are desired). If the Monte Carlo simulations
                   requested with this command will be appended to previously
                   existing simulations, then the Seed option is ignored and
                   Seed = CONT is used.

            Value - Uses the specified (positive) value for the initialization of the seed value.
                    This option has the same effect as Seed = INIT, except you
                    can chose an arbitrary (positive) number for the
                    initialization. If the Monte Carlo simulations requested
                    with this command will be appended to previously existing
                    simulations, then the Seed option is ignored and Seed =
                    CONT is used.

        Notes
        -----
        Generate the Monte Carlo simulations on the response surfaces that are
        included in a response surface set. Simulations are evaluated only for
        the output parameters that have been fitted in a response surface set
        using the RSFIT command.

        If the RSSIMS command is issued multiple times using the same response
        surface label the probabilistic design system appends the samples
        generated here to the previous ones. This way you can start with a
        moderate NSIM number and add more samples if the probabilistic results
        are not accurate enough.
        """
        command = "RSSIMS,%s,%s,%s" % (str(rslab), str(nsim), str(seed))
        return self.run(command, **kwargs)

    
    def irlf(self, key="", **kwargs):
        """APDL Command: IRLF

        Specifies that inertia relief calculations are to be performed.

        Parameters
        ----------
        key
            Calculation key:

             0  - No inertia relief calculations.

             1  - Counterbalance loads with inertia relief forces.

            -1  - Precalculate masses for summary printout only (no inertia relief).

        Notes
        -----
        The IRLF command specifies that the program is to calculate
        accelerations to counterbalance the applied loads (inertia relief).
        Displacement constraints on the structure should be only those
        necessary to prevent rigid-body motions (3 are needed for a 2-D
        structure and 6 for a 3-D structure).  The sum of the reaction forces
        at the constraint points will be zero.  Accelerations are calculated
        from the element mass matrices and the applied forces.  Data needed to
        calculate the mass (such as density) must be input.  Both translational
        and rotational accelerations may be calculated.

        This option applies only to the static (ANTYPE,STATIC) analysis.
        Nonlinearities, elements that operate in the nodal coordinate system,
        and axisymmetric or generalized plane strain elements are not allowed.
        Symmetry models are not valid for inertia relief analysis. Models with
        both 2-D and 3-D element types are not recommended.

        Loads may be input as usual.  Displacements and stresses are calculated
        as usual.

        Use IRLIST to print inertia relief calculation results.  The mass and
        moment of inertia summary printed before the solution is accurate
        (because of the additional pre-calculations required for inertia
        relief).  See Inertia Relief in the Mechanical APDL Theory Reference
        for calculation details.  See also the Structural Analysis Guide for
        procedural details.

        If the inertia relief calculation is to be performed in the second or
        later load step, you must specify EMATWRITE,YES in the initial load
        step for the element matrices needed to perform the calculations to be
        available.

        When a superelement (MATRIX50) is present in the model, any DOF
        constraints that you need to apply (D) on a degree of freedom (DOF)
        belonging to the superelement must be applied in the use pass of the
        MATRIX50 element (not in the generation pass). The command has no
        effect in the generation pass of a substructure. In the expansion pass,
        precalculation of masses for summary printout (IRLF,-1) occurs only on
        elements that are part of the substructure.

        This command is also valid in PREP7.
        """
        command = "IRLF,%s" % (str(key))
        return self.run(command, **kwargs)

    
    def pdhist(self, rlab="", name="", ncl="", type_="", **kwargs):
        """APDL Command: PDHIST

        Plots the frequency histogram.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses).

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable or a random output parameter with the PDVAR
            command.

        ncl
            Number of classes for the histogram plot. This is the number of
            bars shown in the histogram. NCL must be a positive number. If this
            field is left blank, Mechanical APDL calculates an appropriate
            number of classes based on the sample size. ANSYS divides the range
            between the smallest and largest sample value into NCL classes of
            equal width and determines the histogram frequencies by counting
            the number of hits that fall in the classes.

        type\_
            Type of histogram.

            ABS - Absolute frequency histogram. This is the actual number of hits in each class.

            REL - Relative frequency histogram (default). This is the number of hits in the
                  individual classes divided by the total number of samples.

            NORM - Normalized frequency histogram. This is the number of hits in the individual
                   classes divided by the total number of samples and divided
                   by the width of the class. This normalization makes the
                   histogram comparable to the probability density function.

        Notes
        -----
        Plots the frequency histogram.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        The PDHIST command cannot be used to postprocess the results in a
        solution set that is based on Response Surface Methods, only Monte
        Carlo Simulations.
        """
        command = "PDHIST,%s,%s,%s,%s" % (str(rlab), str(name), str(ncl), str(type_))
        return self.run(command, **kwargs)

    def mffname(self, fnumb="", fname="", **kwargs):
        """APDL Command: MFFNAME

        Specifies a file name for a field in an ANSYS Multi-field solver
        analysis.

        Parameters
        ----------
        fnumb
            Field number specified by the MFELEM command.

        fname
            File name. Defaults to field "FNUMB".

        Notes
        -----
        All files created for the field will have this file name with the
        appropriate extensions.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFFNAME,%s,%s" % (str(fnumb), str(fname))
        return self.run(command, **kwargs)

    
    def subopt(self, option="", value1="", **kwargs):
        """APDL Command: SUBOPT

        Specifies Subspace (SUBSP) eigensolver options.

        Parameters
        ----------
        option
            One of the following options:

            STRMCK - Controls whether a Sturm sequence check is performed.

            Value1: - OFF

            Do not perform Sturm sequence check (default). - ON

            Perform Sturm sequence check. - MEMORY

            Controls the memory allocation strategy for the Subspace eigensolver. - Value1:

            AUTO - Use the default memory allocation strategy (default).

            INCORE - Force the Subspace eigensolver to allocate in-core memory.

            OUTOFCORE - Force the Subspace eigensolver to use scratch files.

        Notes
        -----
        SUBOPT specifies options to be used with the Subspace eigensolver
        (MODOPT,SUBSP) during a modal analysis.
        """
        command = "SUBOPT,%s,%s" % (str(option), str(value1))
        return self.run(command, **kwargs)

    def bfunif(self, lab="", value="", **kwargs):
        """APDL Command: BFUNIF

        Assigns a uniform body force load to all nodes.

        Parameters
        ----------
        lab
            Valid body load label.  If ALL, use all appropriate labels.

        value
            Uniform value associated with Lab item, or table name when
            specifying tabular boundary conditions.  To specify a table,
            enclose the table name in percent signs (%), e.g.,
            BFUNIF,Lab,%tabname%.

        Notes
        -----
        In a transient or nonlinear thermal analysis, the uniform temperature
        is used during the first iteration of a solution as follows:  (a) as
        the starting nodal temperature (except where temperatures are
        explicitly specified [D, DK]), and (b) to evaluate temperature-
        dependent material properties.  In a structural analysis or explicit
        dynamic analysis, the uniform temperature is used as the default
        temperature for thermal strain calculations and material property
        evaluation (except where body load temperatures are specified [BF, BFE,
        BFK, LDREAD]).  In other scalar field analyses, the uniform temperature
        is used for material property evaluation.

        When the command BFUNIF,TEMP is used in an explicit dynamic analysis,
        you cannot use the EDLOAD,TEMP command to apply temperature loading.
        Furthermore, any temperature loading defined by BFUNIF cannot be listed
        or deleted by the EDLOAD command.

        An alternate command, TUNIF, may be used to set the uniform temperature
        instead of BFUNIF,TEMP. Since TUNIF (or BFUNIF,TEMP) is step-applied in
        the first iteration, you should use BF, ALL, TEMP, Value to ramp on a
        uniform temperature load.

        You can specify a table name only when using temperature (TEMP), heat
        generation rate (HGEN), and diffusing substance generation rate (DGEN)
        body load labels. When using TEMP, you can define a one-dimensional
        table that varies with respect to time (TIME) only. When defining this
        table, enter TIME as the primary variable. No other primary variables
        are valid. Tabular boundary conditions cannot be used in an explicit
        dynamic analysis.

        This command is also valid in PREP7.
        """
        command = "BFUNIF,%s,%s" % (str(lab), str(value))
        return self.run(command, **kwargs)

    
    
    def bfkdele(self, kpoi="", lab="", **kwargs):
        """APDL Command: BFKDELE

        Deletes body force loads at a keypoint.

        Parameters
        ----------
        kpoi
            Keypoint at which body load is to be deleted.  If ALL, delete for
            all selected keypoints [KSEL]. A component name may also be
            substituted for KPOI.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFK command for
            labels.

        Notes
        -----
        Deletes body force loads (and all corresponding finite element loads)
        for a specified keypoint and label.  Body loads may be defined at a
        keypoint with the BFK command.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFKDELE,%s,%s" % (str(kpoi), str(lab))
        return self.run(command, **kwargs)

    def lsread(self, lsnum="", **kwargs):
        """APDL Command: LSREAD

        Reads load and load step option data into the database.

        Parameters
        ----------
        lsnum
            Identification number of the load step file to be read.  Defaults
            to 1 + highest number read in the current session.  Issue
            LSREAD,STAT to list the current value of LSNUM.  Issue LSREAD,INIT
            to reset LSNUM to 1.  The load step files are assumed to be named
            Jobname.Sn, where n is a number assigned by the LSWRITE command (01
            --09,10,11, etc.).  On systems with a 3-character limit on the
            extension, the "S" is dropped for LSNUM > 99.

        Notes
        -----
        Reads load and load step option data from the load step file into the
        database.  LSREAD will not clear the database of all current loads.
        However, if a load is respecified with LSREAD, then it will overwrite
        the existing load. See the LSWRITE command to write load step files,
        and the LSDELE command to delete load step files.  LSREAD removes any
        existing SFGRAD specification.

        This command is also valid in PREP7.
        """
        command = "LSREAD,%s" % (str(lsnum))
        return self.run(command, **kwargs)

    
    def gplist(self, gap1="", gap2="", ginc="", **kwargs):
        """APDL Command: GPLIST

        Lists the gap conditions.

        Parameters
        ----------
        gap1, gap2, ginc
            List gap conditions from GAP1 to GAP2 (GAP2 defaults to GAP1) in
            steps of GINC  (defaults to 1).  If GAP1 = ALL (default), GAP2 and
            GINC  are ignored and all gap conditions are listed.

        Notes
        -----
        This command is valid in any processor.
        """
        command = "GPLIST,%s,%s,%s" % (str(gap1), str(gap2), str(ginc))
        return self.run(command, **kwargs)

    
    def domega(self, domgx="", domgy="", domgz="", **kwargs):
        """APDL Command: DOMEGA

        Specifies the rotational acceleration of the structure.

        Parameters
        ----------
        domgx, domgy, domgz
            Rotational acceleration of the structure about the global Cartesian
            X , Y, and Z axes.

        Notes
        -----
        Specifies the rotational acceleration of the structure about each of
        the global Cartesian axes.  Rotational accelerations may be defined in
        analysis types ANTYPE,STATIC, HARMIC (full or mode-superposition),
        TRANS (full or mode-superposition), and SUBSTR.  See Acceleration
        Effect in the Mechanical APDL Theory Reference for details.  Units are
        radians/time2.

        The DOMEGA command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for DOMEGA_X, DOMEGA_Y, and DOMEGA_Z
        input values (*DIM) for full transient and harmonic analyses.

        Related commands are ACEL, CGLOC, CGOMGA, DCGOMG, and OMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        In a modal harmonic or transient analysis, you must apply the load in
        the modal portion of the analysis. Mechanical APDL calculates a load
        vector and writes it to the mode shape file, which you can apply via
        the LVSCALE command.

        This command is also valid in PREP7.
        """
        command = "DOMEGA,%s,%s,%s" % (str(domgx), str(domgy), str(domgz))
        return self.run(command, **kwargs)

    def ddoption(self, decomp="", **kwargs):
        """APDL Command: DDOPTION

         Sets domain decomposer option for Distributed ANSYS.

        Parameters
        ----------
        decomp
            Controls which domain decomposition algorithm to use.

            AUTO - Use the default domain decomposition algorithm when splitting the model into
                   domains for Distributed ANSYS (default).

            GREEDY - Use the "greedy" domain decomposition algorithm.

            METIS - Use the METIS graph partitioning domain decomposition algorithm.

        Notes
        -----
        This command controls options relating to the domain decomposition
        algorithm used by Distributed ANSYS to split the model into pieces (or
        domains), with each piece being solved on a different processor.

        The greedy domain decomposition algorithm starts from a single element
        at a corner of the model. The domain grows by taking the properly
        connected neighboring elements and stops after reaching the optimal
        size.

        The METIS domain decomposition algorithm starts by creating a graph
        from the finite element mesh. It then uses a multilevel graph
        partitioning scheme which reduces the size of the original graph,
        creates domains using the reduced graph, and then creates the final CPU
        domains by expanding the smaller domains from the reduced graph back to
        the original mesh.
        """
        command = "DDOPTION,%s" % (str(decomp))
        return self.run(command, **kwargs)

    def header(self, header="", stitle="", idstmp="", notes="", colhed="",
               minmax="", **kwargs):
        """APDL Command: /HEADER

        Sets page and table heading print controls.

        Parameters
        ----------
        header
            ANSYS page header (system, date, time, version, copyright, title,
            etc.):

            ON - Turns this item on (default for batch mode; not available for interactive
                 mode).

            OFF - Turns this item off.

            (blank) - Retains the previous setting.

        stitle
            Subtitles (see /STITLE command):   ON, OFF, or (blank) (see above).

        idstmp
            Load step information (step number, substep number, time value):
            ON, OFF, or (blank) (see above).

        notes
            Information relative to particular table listings:   ON, OFF, or
            (blank) (see above).

        colhed
            Column header labels of table listings (currently only for single
            column tables):   ON, OFF, or (blank) (see above).

        minmax
            Minimum/maximum information or totals after table listings:   ON,
            OFF, or (blank) (see above).

        Notes
        -----
        Sets specifications on or off for page and table heading print controls
        associated with the POST1 PRNSOL, PRESOL, PRETAB, PRRSOL, and PRPATH
        commands.

        Note:: : If the printout caused a  top-of-form (page eject to top of
        next page), the top-of-form is also suppressed with the printout.
        Issue /HEADER,STAT to display the current settings.  Issue /HEADER,DEFA
        to reset the default specifications.

        This command is valid in any processor.
        """
        command = "/HEADER,%s,%s,%s,%s,%s,%s" % (str(header), str(stitle), str(idstmp), str(notes), str(colhed), str(minmax))
        return self.run(command, **kwargs)

    
    def nsubst(self, nsbstp="", nsbmx="", nsbmn="", carry="", **kwargs):
        """APDL Command: NSUBST

        Specifies the number of substeps to be taken this load step.

        Parameters
        ----------
        nsbstp
            Number of substeps to be used for this load step (i.e., the time
            step size or frequency increment). If automatic time stepping is
            used (AUTOTS), NSBSTP defines the size of the first substep.

        nsbmx
            Maximum number of substeps to be taken (i.e., the minimum time step
            size) if automatic time stepping is used. The program automatically
            determines the default based on the physics of the model.

        nsbmn
            Minimum number of substeps to be taken (i.e., the maximum time step
            size) if automatic time stepping is used. The program automatically
            determines the default based on the physics of the model.

        carry
            Time step carryover key (program-determined default depending on
            the problem physics):

            OFF - Use NSBSTP to define time step at start of each load step.

            ON - Use final time step from previous load step as the starting time step (if
                 automatic time stepping is used).

        Notes
        -----
        See DELTIM for an alternative input.  It is recommended that all fields
        of this command be specified for solution efficiency and robustness.

        When the arc-length method is active (ARCLEN command), the NSBMX and
        NSBMN arguments are ignored.

        This command is also valid in PREP7.
        """
        command = "NSUBST,%s,%s,%s,%s" % (str(nsbstp), str(nsbmx), str(nsbmn), str(carry))
        return self.run(command, **kwargs)

    def txtre(self, lab="", num="", n1="", n2="", ninc="", **kwargs):
        """APDL Command: /TXTRE

        Controls application of texture to selected items.

        Parameters
        ----------
        lab
            You can apply texture according to the following labels:

            ELEM - Apply texture to elements N1 through N2 in steps of NINC.

            AREA - Apply texture to areas N1 through N2 in steps of NINC.

            VOLU - Apply texture to volumes N1 through N2 in steps of NINC.

            CM - Apply texture to the component named in N1. N2 and
            NINC are ignored.

            ON, OFF - Sets the specified texture display on or
            off. All other fields are ignored.

            File - If Lab = File, the command format is /TXTRE, File,
                   Key_Index, Fname, Fext, --, Format (This variant of
                   the command is applicable to 2-D drivers).

            Key_Index - The texture index associated with the file. If
                        the number fifty-one (51) is used, the
                        imported bitmap will be used as the window's
                        logo.

            Fname - File name and directory path (248 characters
                    maximum, including the characters needed for the
                    directory path).  An unspecified directory path
                    defaults to the working directory; in this case,
                    you can use all 248 characters for the file name.

            Fext - Filename extension (eight-character maximum).

            Format - The file format. If Format = 0, the file is a
                     pixmap (Linux) or Bitmap (PC).  The file cannot
                     contain a compressed image, and the PC file must
                     be 8 or 24 bit BI_RGB format. If Format = 1 or
                     JPEG, then the file is in JPEG (Joint
                     Photographic Experts Group) format. If Format = 2
                     or PNG, then the file is in PNG (Portable Network
                     Graphics) format.

        num
            Select the texture index number from the following list:

            0 - No Texturing

            1 - Aluminum

            2 -  Aluminum, Brushed

            3 - Steel With Bumps

            4 - Steel, Embossed

            5 - Iron

            6 - Steel, Pattern

            7 - Steel, Riveted

            8 - Steel, Scratched

            9 - Tin

            10 - Metal

            11 - Steel, Etched

            12 - Metal, Hot

            13 - Iron, Grainy

            14 - Metal, Rusty

            15 - Brick

            16 - Block

            17 - Wood

            18 - Wood, Light

            19 - Wood, Walnut

            20 - Plastic, Hard Blue

            21 - Plastic, Light Blue

            22 - Plastic, Hard Red

            31 - Gold

            32 - Brass

            33 - Silver

            34 -  Plastic, Black

            35 - Plastic, Ivory

            36 - Plastic, Blue

            37 - Plastic, Red

            38 - Plastic, Yellow

            39 - Plastic, Green

            40 - Plastic, Brown

        n1, n2, ninc
            Apply texture to Lab items numbered N1 through N2 in steps of NINC
            (defaults to 1). If Lab = CM, then N1 is used to for the component
            name and N2 and NINC are ignored. If Lab = ELEM, AREA, or VOLU and
            N1 = blank or ALL, then the specified texture will be applied to
            all entities of type Lab. If N1 = P, then graphical picking is
            enabled.

        Notes
        -----
         This command is available for 3-D Open GL devices. 2-D devices are
        supported only for the Lab = File variation of the command, allowing
        imported bitmaps to be used for texturing and annotation. Textures can
        affect the speed of many of your display operations. You can increase
        the speed by temporarily turning the textures off (Utility Menu>
        PlotCtrls> Style> Texturing(3D)> Display Texturing). This menu
        selection toggles your textures on and off. When textures are toggled
        off, all of the texture information is retained and reapplied when
        texturing is toggled back on.

        For some displays, the texture will appear distorted because of a
        technique used to enhance 3-D displays (/DV3D,TRIS,1). Disabling this
        function (/DV3D,TRIS,0) will improve the quality of some texture
        displays. Disabling the TRIS option of the /DV3D command will slow down
        3-D displays significantly. Be sure to reapply the TRIS option after
        you obtain a satisfactory output.

        Specifying /TXTRE,DEFA removes all texturing.
        """
        command = "/TXTRE,%s,%s,%s,%s,%s" % (str(lab), str(num), str(n1), str(n2), str(ninc))
        return self.run(command, **kwargs)

    
    def paget(self, parray="", popt="", **kwargs):
        """APDL Command: PAGET

        Writes current path information into an array variable.

        Parameters
        ----------
        parray
            The name of the array parameter that the ANSYS program creates to
            store the path information.  If the array parameter already exists,
            it will be replaced with the current path information.

        popt
            Determines how data will be stored in the parameter specified with
            PARRAY:

            POINTS - Store the path points, the nodes (if any), and coordinate system.  (For
                     information on defining paths and path points, see the
                     descriptions of the PATH and PPATH commands.)

            TABLE - Store the path data items.  (See the PDEF command description for path data
                    items.)

            LABEL - Stores path data labels.

        Notes
        -----
        Use the PAGET command together with the PAPUT command to store and
        retrieve path data in array variables for archiving purposes.  When
        retrieving path information, restore the path points (POINTS option)
        first, then the path data (TABLE option), and then the path labels
        (LABEL option).
        """
        command = "PAGET,%s,%s" % (str(parray), str(popt))
        return self.run(command, **kwargs)

    def mfclear(self, option="", value="", **kwargs):
        """APDL Command: MFCLEAR

        Deletes ANSYS Multi-field solver analysis settings.

        Parameters
        ----------
        option
            SOLU

            SOLU - Resets all ANSYS solution commands except KBC to their default states. This
                   option clears analysis options when setting up different
                   fields for an ANSYS Multi-field solver analysis.

            FIELD - Deletes all ANSYS Multi-field solver specifications for the specified field
                    number.

            SINT - Deletes all ANSYS Multi-field solver specifications for the specified surface
                   interface number.

            VINT - Deletes all ANSYS Multi-field solver specifications for the volumetric
                   interface number.

            ORD - Deletes the analysis order specified by the MFORDER command.

            EXT - Deletes external fields specified by the MFEXTER command

            MFLC - Deletes load transfers specified by the MFLCOMM command

        value
            Use only for Option = FIELD, SINT, or VINT.

        Notes
        -----
        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFCLEAR,%s,%s" % (str(option), str(value))
        return self.run(command, **kwargs)

    
    def suresu(self, fname="", fext="", fdir="", **kwargs):
        """APDL Command: SURESU

        Read a set of surface definitions and result items from a file
        and make them the current set.

        Parameters
        ----------
        fname
            Eight character name.

        fext
            Extension name.

        fdir
            Optional path specification.

        Notes
        -----
        Reading (and therefore resuming) surface and result
        definitions from a file overwritea any existing surface
        definitions.

        Reading surfaces back into the postprocessor (/POST1) does not
        insure that the surfaces (and their results) are appropriate
        for the model currently residing in /POST1.
        """
        return self.run(f"SURESU,,{fname},{fext},{fdir}", **kwargs)

    def grid(self, key="", **kwargs):
        """APDL Command: /GRID

        Selects the type of grid on graph displays.

        Parameters
        ----------
        key
            Grid key:

            0 (OFF) - No grid.

            1 (ON) - Full grid (X and Y grid lines).

            2 (X) - Partial grid (X grid lines only).

            3 (Y) - Partial grid (Y grid lines only)

        Notes
        -----
        Selects the type of grid on graph displays.  Graphs with multiple
        Y-axes can have multiple grids [/GRTYP].  The grid of the first curve
        is also used as the background grid (above and behind the curve).
        Grids for other curves are limited to be under the curves.  See also
        /GTHK and /GROPT for other grid options.

        This command is valid in any processor.
        """
        command = "/GRID,%s" % (str(key))
        return self.run(command, **kwargs)

    
    def seltol(self, toler="", **kwargs):
        """APDL Command: SELTOL

        Sets the tolerance for subsequent select operations.

        Parameters
        ----------
        toler
            Tolerance value. If blank, restores the default tolerance logic.

        Notes
        -----
        For selects based on non-integer numbers (e.g. coordinates, results,
        etc.), items within the range VMIN - Toler and VMAX + Toler are
        selected, where VMIN and VMAX are the range values input on the xSEL
        commands (ASEL, ESEL, KSEL, LSEL, NSEL, and VSEL).

        The default tolerance logic is based on the relative values of VMIN and
        VMAX as follows:

        If VMIN = VMAX, Toler = 0.005 x VMIN.

        If VMIN = VMAX = 0.0, Toler = 1.0E-6.

        If VMAX ≠ VMIN, Toler = 1.0E-8 x (VMAX-VMIN).

        This command is typically used when VMAX-VMIN is very large so that the
        computed default tolerance is therefore large and the xSEL commands
        selects more than what is desired.

        Toler remains active until respecified by a subsequent SELTOL command.
        A SELTOL < blank > resets back to the default Toler logic.
        """
        command = "SELTOL,%s" % (str(toler))
        return self.run(command, **kwargs)

    def shade(self, wn="", type_="", **kwargs):
        """APDL Command: /SHADE

        Defines the type of surface shading used with Z-buffering.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        type\_
            Shading type:

            FACET or 0 - Facet shading (one color per area face) (default).

            GOURAUD or 1 - Gouraud smooth shading (smooth variation of color based on interpolated vertex
                           colors).

            PHONG or 2 - Phong smooth shading (smooth variation of color based on interpolated vertex
                         normals).

        Notes
        -----
        Defines the type of surface shading used on area, volume, and
        PowerGraphics [/GRAPHICS,POWER] displays when software Z-buffering is
        enabled [/TYPE].  This command is only functional for 2-D display
        devices.

        This command is valid in any processor.
        """
        command = "/SHADE,%s,%s" % (str(wn), str(type_))
        return self.run(command, **kwargs)

    def anum(self, num="", type_="", xhot="", yhot="", **kwargs):
        """APDL Command: /ANUM

        Specifies the annotation number, type, and hot spot (GUI).

        Parameters
        ----------
        num
            Annotation number.  ANSYS automatically assigns the lowest
            available number.  You cannot assign a higher number if a lower
            number is available; ANSYS will substitute the lowest available
            number in place of any user-specified higher number.

        type\_
            Annotation internal type number.  If TYPE = DELE, delete annotation
            NUM.

            1 - Text

            2 - Block text (not available in GUI)

            3 - Dimensions

            4 - Lines

            5 - Rectangles

            6 - Circles

            7 - Polygons

            8 - Arcs

            9 - Wedges, pies

            11 - Symbols

            12 - Arrows

            13 - Bitmap

        xhot
            X hot spot (-1.0 < X < 2.0).  Used for menu button item delete.

        yhot
            Y hot spot (-1.0 < Y < 1.0).  Used for menu button item delete.

        Notes
        -----
        This is a command generated by the GUI and will appear in the log file
        (Jobname.LOG) if annotation is used.  This command is not intended to
        be typed in directly in an ANSYS session (although it can be included
        in an input file for batch input or for use with the /INPUT command).

        Type 13 (bitmap) annotation applies user defined bitmaps defined using
        the FILE option of the /TXTRE command.

        This command is valid in any processor.
        """
        command = "/ANUM,%s,%s,%s,%s" % (str(num), str(type_), str(xhot), str(yhot))
        return self.run(command, **kwargs)

    def starlist(self, fname="", ext="", **kwargs):
        """APDL Command: *LIST

        Displays the contents of an external, coded file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Displays the contents of an external, coded file.  The file to be
        listed cannot be in use (open) at the time (except for the error file,
        File.ERR, which may be displayed with *LIST,ERR).

        Use caution when you are listing active ANSYS files via the List>
        Files> Other and File> List> Other menu paths.  File I/O buffer and
        system configurations can result in incomplete listings unless the
        files are closed.

        This command is valid in any processor.
        """
        command = "*LIST,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def hropt(self, method="", maxmode="", minmode="", mcout="", damp="",
              **kwargs):
        """APDL Command: HROPT

        Specifies harmonic analysis options.

        Parameters
        ----------
        method
            Solution method for the harmonic analysis:

            AUTO - Automatically select the most efficient method. Either the FULL method or the
                   Variational Technology method is selected depending on the
                   model. (default method).

            FULL - Full method.

            MSUP - Mode-superposition method.

            VT - Variational Technology method (based on FULL harmonic algorithm).

            VTPA - Variational Technology perfect absorber method (based on FULL harmonic
                   algorithm).

            VTRU - Variational Technology reuse method (based on FULL harmonic algorithm).

        maxmode
            Largest mode number to be used to calculate the response (for
            Method = MSUP only).  Defaults to the highest mode calculated in
            the preceding modal analysis.

        minmode
            Smallest mode number to be used (for Method = MSUP only).  Defaults
            to 1.

        mcout
            Modal coordinates output key (valid only for the mode superposition
            method MSUP):

            NO - No output of modal coordinates (default).

            YES - Output modal coordinates to the text file jobname.MCF.

        damp
            Damping mode for frequency-dependent material properties (valid
            only for the Variational Technology Method VT).

            Hysteretic - Not proportional to the frequency.

            Viscous - Proportional to the frequency (default).

        Notes
        -----
        Specifies the method of solution for a harmonic analysis
        (ANTYPE,HARMIC).  If used in SOLUTION, this command is valid only
        within the first load step. See the product restrictions indicated
        below.

        For cyclic symmetry mode-superposition harmonic solutions, MAXMODE and
        MINMODE are ignored.

        To include residual vectors in your mode-superposition harmonic
        analysis, specify RESVEC,ON.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: The VTRU method is not supported.
        """
        command = "HROPT,%s,%s,%s,%s,%s" % (str(method), str(maxmode), str(minmode), str(mcout), str(damp))
        return self.run(command, **kwargs)

    def mfvolume(self, inumb="", fnumb1="", label="", fnumb2="", **kwargs):
        """APDL Command: MFVOLUME

        Defines a volume load transfer for an ANSYS Multi-field solver
        analysis.

        Parameters
        ----------
        inumb
            Interface number for load transfer. The interface number
            corresponds to the interface number specified by the volume flag
            FVIN (BFE command).

        fnumb1
            Field number of sending field.

        label
            Valid volume load labels:

        fnumb2
            Field number for receiving field.

        Notes
        -----
        This command is also valid in PREP7.

        The ANSYS Multi-field solver solver does not allow you to switch the
        load transfer direction for the same load quantity across the same
        interfaces for a restart run. For example, if Field1 sends temperature
        to and receives heat flow from Field2 across Interface 1 in a previous
        solution, then you cannot make Field1 send heat flow to and receive
        temperatures from Field2 across the same interface in a restart run,
        even if you cleared the corresponding load transfer command.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFVOLUME,%s,%s,%s,%s" % (str(inumb), str(fnumb1), str(label), str(fnumb2))
        return self.run(command, **kwargs)

    def bfvdele(self, volu="", lab="", **kwargs):
        """APDL Command: BFVDELE

        Deletes body force loads on a volume.

        Parameters
        ----------
        volu
            Volume at which body load is to be deleted.  If ALL, delete for all
            selected volumes [VSEL]. A component name may also be substituted
            for VOLU.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFV command for
            labels.

        Notes
        -----
        Deletes body force loads (and all corresponding finite element loads)
        for a specified volume and label.  Body loads may be defined on a
        volume with the BFV command.

        Graphical picking is available only via the listed menu paths.

        This command is also valid in PREP7.
        """
        command = "BFVDELE,%s,%s" % (str(volu), str(lab))
        return self.run(command, **kwargs)

    
    def coval(self, tblno1="", tblno2="", sv1="", sv2="", sv3="", sv4="",
              sv5="", sv6="", sv7="", **kwargs):
        """APDL Command: COVAL

        Defines PSD cospectral values.

        Parameters
        ----------
        tblno1
            First input PSD table number associated with this spectrum.

        tblno2
            Second input PSD table number associated with this spectrum.

        sv1, sv2, sv3, . . . , sv7
            PSD cospectral values corresponding to the frequency points
            [PSDFRQ].

        Notes
        -----
        Defines PSD cospectral values to be associated with the previously
        defined frequency points.  Two table references are required since
        values are off-diagonal terms.  Unlike autospectra [PSDVAL], the
        cospectra can be positive or negative.  The cospectral curve segment
        where there is a sign change is interpolated linearly (the rest of the
        curve segments use log-log interpolation).  For better accuracy, choose
        as small a curve segment as possible wherever a sign change occurs.

        Repeat COVAL command using the same table numbers for additional
        points.  This command is valid for SPOPT,PSD only.

        This command is also valid in PREP7.
        """
        command = "COVAL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno1), str(tblno2), str(sv1), str(sv2), str(sv3), str(sv4), str(sv5), str(sv6), str(sv7))
        return self.run(command, **kwargs)

    
    def lmatrix(self, symfac="", coilname="", curname="", indname="",
                **kwargs):
        """APDL Command: LMATRIX

        Calculates an inductance matrix and the total flux linkage for an
        N-winding coil system.

        Parameters
        ----------
        symfac
            Geometric symmetry factor.  Inductance terms are scaled by this
            factor which represents the fraction of the total device modeled.
            Default is 1.

        coilname
            Alphanumeric prefix identifier for coil label used in defining
            named element coil components. Default is 'coil.'

        curname
            Name of a predefined parameter array containing the nominal coil
            currents of the system.  The array must be defined (see *DIM
            command) prior to calling the LMATRIX macro. Default is 'cur.'

        indname
            Name of the array parameter to be created by LMATRIX containing the
            calculated inductance matrix and the flux linkage in each coil.  A
            text file of the same name with an extension .TXT is created
            containing the matrix data. Default is 'lmatrix.'

        Notes
        -----
        LMATRIX calculates the differential inductance matrix for an N-winding
        system where N is the number of coils in the system, and calculates the
        total flux linkage in each coil. LMATRIX may only be executed after the
        solution of a problem with nominal currents applied to the coils at a
        desired "operating point." The array Indname has N rows and N+1
        columns. The N x N block is the differential inductance matrix; the
        N+1th column contains the total flux linkage, with the ith row
        corresponding to the ith coil. See the Mechanical APDL Theory Reference
        for more details.

        To invoke the LMATRIX macro, for the classical formulations, the
        elements for each coil must be grouped into a component using the CM
        command.  Each set of independent coil elements is assigned a component
        name with the prefix Coilname followed by the coil number. For the
        solenoidal formulations, you must make the exciting node with a F,AMPS
        load a node component using the CM command.  The classical and
        solenoidal formulations cannot be mixed.

        To invoke the LMATRIX macro, the vector array parameter Curname with
        dimension N must be defined and named using the *DIM command.  You must
        set each vector array entry equal to the nominal current per turn in
        the corresponding coil at the operating point.  Zero current values
        must be approximated by a negligibly small applied current.

        Do not apply (or remove) inhomogeneous loads before using the LMATRIX
        command. Inhomogeneous loads are those created by:

        Degree of freedom commands (D, DA, etc.) specifying nonzero degrees of
        freedom values on nodes or solid model entities

        Any CE command with a nonzero constant term

        Do not put any loads (for example, current) on elements not contained
        in the element component.

        Operating solutions must be obtained through static analysis before
        calling LMATRIX. All name-strings must be enclosed in single quotes in
        the LMATRIX command line. The geometric symmetry factor, Symfac,
        represents the fraction of the device modeled, disregarding any current
        source primitives.

        LMATRIX works only with magnetic field elements: PLANE53, SOLID96, and
        SOLID97, and with SOURC36 solenoidal formulations. For electromagnetic
        elements PLANE233, SOLID236 and SOLID237, static linear perturbation
        analysis can be used to calculate the differential inductance using the
        element incremental energy record (IENE).

        For more information, see LMATRIX in the Low-Frequency Electromagnetic
        Analysis Guide.

        See the Mechanical APDL Theory Reference and Electric and Magnetic
        Macros in the Low-Frequency Electromagnetic Analysis Guide for details.

        This command does not support multiframe restarts.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "LMATRIX,%s,%s,%s,%s" % (str(symfac), str(coilname), str(curname), str(indname))
        return self.run(command, **kwargs)

    def tspec(self, tcolor="", tsize="", txthic="", pangle="", iangle="",
              **kwargs):
        """APDL Command: /TSPEC

        Creates annotation text attributes (GUI).

        Parameters
        ----------
        tcolor
            Text color (0  TCOLOR   15):

            0 - Black.

            1 - Red-Magenta.

            2 - Magenta.

            3 - Blue-Magenta.

            4 - Blue.

            5 - Cyan-Blue.

            6 - Cyan.

            7 - Green-Cyan.

            8 - Green.

            9 - Yellow-Green.

            10 - Yellow.

            11 - Orange.

            12 - Red.

            13 - Dark Gray.

            14 - Light Gray.

            15 - White.

        tsize
            Text size factor.

        txthic
            Text thickness key:

            1 - normal.

            2 - twice as thick.

            3 - three times as thick.

            4 - four times as thick.

        pangle
            Text path angle (0.0 < angle < 360.0).

        iangle
            Text italic angle (0.0 < angle < 45.0).

        Notes
        -----
        Defines annotation text attributes to control certain characteristics
        of the text created via the /TLABEL command.  This is a command
        generated by the Graphical User Interface (GUI) and will appear in the
        log file (Jobname.LOG) if annotation is used.  This command is not
        intended to be typed in directly in an ANSYS session (although it can
        be included in an input file for batch input or for use with the /INPUT
        command).

        This command is valid in any processor.
        """
        command = "/TSPEC,%s,%s,%s,%s,%s" % (str(tcolor), str(tsize), str(txthic), str(pangle), str(iangle))
        return self.run(command, **kwargs)

    def for2d(self, **kwargs):
        """APDL Command: FOR2D

        Calculates magnetic forces on a body.

        Notes
        -----
        FOR2D invokes an ANSYS macro which calculates magnetic forces on a body
        that is completely surrounded by air (symmetry permitted).  The
        calculated forces are stored in the parameters FX and FY.  In
        interactive mode, a node plot is produced with the integration path
        highlighted.  A predefined closed path [PATH], passing through the air
        elements surrounding the body, must be available for this calculation.
        A counterclockwise ordering of nodes on the PPATH command will give the
        correct sign on the forces.  Forces are calculated using a Maxwell
        stress tensor approach.  The macro is valid for 2-D planar or
        axisymmetric analysis.  Path operations are used for the calculations,
        and all path items are cleared upon completion.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "FOR2D,"
        return self.run(command, **kwargs)

    def rsplot(self, rslab="", yname="", x1name="", x2name="", type_="",
               npts="", plow="", pup="", **kwargs):
        """APDL Command: RSPLOT

        Plot a response surface.

        Parameters
        ----------
        rslab
            Response Surface set label. Identifies the response surfaces
            generated by the RSFIT command.

        yname
            Parameter name. The parameter must have been previously defined as
            a random output parameter with the PDVAR command.

        x1name
            Parameter name. The parameter must have been previously defined as
            a random input variable with the PDVAR command.

        x2name
            Parameter name. The parameter must have been previously defined as
            a random input variable with the PDVAR command. X2Name must be
            different than X1Name.

        type\_
            Type of the response surface visualization.

            2D - 2-D contour plot.

            3D - 3-D surface plot.

        npts
            Number of grid points for both the X1-axis and the X2-axis. The
            grid points are used for the evaluation of the response surface.
            The number must be between 1 and 500. Defaults to 20. If NPTS = 0
            or greater than 500, then a value of 20 is used.

        plow
            Lower probability level used to determine the lower boundary
            (plotting range) of the curve in case the random input variable
            does not have a minimum value (such as Gauss). This probability
            must be between 0.0 and 1.0. Defaults to 0.0025.

        pup
            Upper probability level used to determine the upper boundary of the
            curve. This probability must be between 0.0 and 1.0. Defaults to
            0.9975.

        Notes
        -----
         Plots the response surface of an output parameter YName as a function
        of two input parameters X1Name and X2Name.

        If PLOW is left blank, then a minimum value of the distribution is used
        for plotting, provided it exists (for example, uniform distribution).
        If the distribution type has no minimum value (for example, Gaussian
        distribution), then the default value is used to determine the lower
        plotting range value. The same is true for the maximum value if PUP is
        left blank.

        In addition to the response surface, the sampling points that are
        fitted by the response surface are also plotted by this command.
        However, sampling points falling outside of the plotting range defined
        by the PLOW and PUP fields will not be shown in the plot.
        """
        command = "RSPLOT,%s,%s,%s,%s,%s,%s,%s,%s" % (str(rslab), str(yname), str(x1name), str(x2name), str(type_), str(npts), str(plow), str(pup))
        return self.run(command, **kwargs)

    
    
    def tintp(self, gamma="", alpha="", delta="", theta="", oslm="", tol="",
              avsmooth="", alphaf="", alpham="", **kwargs):
        """APDL Command: TINTP

        Defines transient integration parameters.

        Parameters
        ----------
        gamma
            Amplitude decay factor for 2nd order transient integration, e.g.,
            structural dynamics (used only if ALPHA, DELTA, ALPHAF, and ALPHAM
            are blank).  Defaults to 0.005.

        alpha
            2nd order transient integration parameter (used only if GAMMA is
            blank).  Defaults to 0.2525.

        delta
            2nd order transient integration parameter (used only if GAMMA is
            blank).  Defaults to 0.5050.

        theta
            1st order transient (e.g., thermal transient) integration
            parameter.  Defaults to 1.0.

        oslm
            Specifies the oscillation limit criterion for automatic time
            stepping of 1st order transients (e.g., thermal transients).
            Defaults to 0.5 with a tolerance of TOL.

        tol
            Tolerance applied to OSLM.  Defaults to 0.0.

        avsmooth
            Smoothing flag option:

            0 - Include smoothing of the velocity (1st order system)
                or the acceleration (2nd order system) (default).

            1 - Do not include smoothing.

        alphaf
            Interpolation factor in HHT algorithm for force and damping terms
            (used only if GAMMA is blank). Defaults to 0.005.

        alpham
            Interpolation factor in HHT algorithm for inertial term (used only
            if GAMMA is blank). Defaults to 0.0.

        Notes
        -----
        Used to define the transient integration parameters.  For more
        information on transient integration parameters, refer to the
        Mechanical APDL Theory Reference.

        For structural transient analyses, you may choose between the
        Newmark and HHT time integration methods (see the TRNOPT
        command). In this case, if GAMMA is input and the integration
        parameters ALPHA, DELTA, ALPHAF, and ALPHAM are left blank,
        the program will calculate the integration
        parameters. Alternatively, you can input these integration
        parameters directly on this command. However, for the
        unconditional stability and second order accuracy of the time
        integration, these parameters should satisfy a specific
        relationship, as described in Description of Structural and
        Other Second Order Systems of the Mechanical APDL Theory
        Reference.

        In a transient piezoelectric analysis, required input for this
        command is ALPHA = 0.25, DELTA = 0.5, and THETA = 0.5.  For a
        coupled electromagnetic-circuit transient analysis, use THETA
        = 1.0, the default value, to specify the backward Euler
        method.

        This command is also valid in PREP7.
        """
        command = f"TINTP,{gamma},{alpha},{delta},{theta},{oslm},{tol},,,{avsmooth},{alphaf},{alpham}"
        return self.run(command, **kwargs)

    
    def prrsol(self, lab="", **kwargs):
        """APDL Command: PRRSOL

        Prints the constrained node reaction solution.

        Parameters
        ----------
        lab
            Nodal reaction load type.  If blank, use the first ten of all
            available labels. Valid labels are:

        Notes
        -----
        Prints the constrained node reaction solution for the selected nodes in
        the sorted sequence.  For coupled nodes and nodes in constraint
        equations, the sum of all reactions in the coupled or constraint
        equation set  appears at the primary node of the set.  Results are in
        the global Cartesian coordinate directions unless transformed (RSYS).

        PRRSOL is not valid if any load is applied to a constrained node in the
        direction of the constraint and any of the following is true:

        LCOPER has been used.

        LCASE has been used to read from a load case file.

        The applied loads and constraints in the database are not the ones used
        to create the results data being processed.

        PRRSOL provides the total reaction solution (static, plus damping, plus
        inertial, as appropriate based on the analysis type); however, modal
        reactions include only the static contribution.

        Use PRRFOR instead of PRRSOL with the FORCE command to obtain only the
        static, damping, or inertial components.
        """
        command = "PRRSOL,%s" % (str(lab))
        return self.run(command, **kwargs)

    
    
    def wsort(self, lab="", kord="", wopt="", oldmax="", oldrms="", **kwargs):
        """APDL Command: WSORT

        Initiates element reordering based upon a geometric sort.

        This command was removed by V18.2

        Parameters
        ----------
        lab
            Coordinate (in the active system) along which element
            centroid locations are sorted.  Valid labels are: X, Y, Z,
            ALL.  If ALL (default), all three directions will be used,
            and the order corresponding to the lowest MAX or RMS
            wavefront value will be retained.

        kord
            Sort order:

            0 - Sort according to ascending coordinate values.

            1 - Sort according to descending coordinate values.

        wopt
            Option for comparison:

            MAX - Use maximum wavefront value for comparison (default).

            RMS - Use RMS wavefront value.

        oldmax, oldrms
            MAX and RMS wavefront values of model to be used in place of the
            old values.  OLDRMS defaults to OLDMAX (and vice versa).  If
            neither is  specified, each defaults to its calculated old value.

        Notes
        -----
        Initiates element reordering based upon a geometric sort of the element
        centroid locations.  Wave lists, if any [WSTART], are ignored.
        Reordering affects only the element order for the solution phase and
        not the element numbers (input referring to element numbers, such as
        element pressures, is unaffected by reordering).

        Note: The new order is retained only if new the new maximum or RMS
        wavefront values are lower than the old values, as described below.
        See the WAVES command for another reordering procedure and for more
        details on reordering.  The resulting element ordering can be shown by
        listing the wavefront history [WFRONT,1] or by displaying elements with
        their element location numbers [/PNUM].

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        return self.run(f"WSORT,{lab},{kord},,{wopt},{oldmax},{oldrms}", **kwargs)

    def pdcfld(self, parr="", entity="", ctype="", clength="", **kwargs):
        """APDL Command: PDCFLD

        Calculates a correlation field and stores it into an ANSYS array.

        Parameters
        ----------
        parr
            Parameter name. ParR is a one-dimensional array with the
            dimension N * (N - 1)/2, where N is either the number of
            the selected nodes or the number of the selected elements
            (depending on the Entity field). The PDCFLD command
            automatically sets ParR as a one- dimensional array, (so
            you do not have to use the *DIM command). If you use the
            PDCFLD command twice with the ANSYS parameter ParR, then
            the values stored in the array are automatically
            overwritten.  If the number of selected FE entities is
            different from the previous PDCFLD command, then the array
            ParR is re-dimensioned automatically.

        entity
            Specifies which FE entity the calculation of the correlation field
            is based on. This field must not be blank.

            NODE - Calculate the correlation coefficients based on the
                   distance between the selected nodes.

            ELEM - Calculate the correlation coefficients based on the
                   distance between the centroids of the selected
                   elements.

        ctype
            Specifies the equation used to calculate the correlation
            coefficients as a function of the nodal or element centroid
            distances. This field must not be blank.

            NONE - The random field is not correlated. This means the
                   correlation coefficients are determined according
                   to

            ρij = 1 for i = j - ρij = 0 for i ≠ j

            Here, ρij is the correlation coefficient between the i-th
            and j-th selected FE entity (node or element centroid). -
            LEXP.

            Calculate the correlation coefficient according to a
            linear-exponential decay function. - Here, D({xi} , {xj})
            is the "domain distance" between {xi}, {xj}, and {xi} and
            {xj} are the coordinate vectors of the i-th and j-th
            selected FE entity (node or element centroid), and CL is
            the correlation length of the random field as specified in
            the CLENGTH field.

        clength
            Correlation length of the correlation field. The correlation length
            is a characteristic length that influences how strongly two
            elements of a random field are correlated with each other. The
            larger the value of CLENGTH, the stronger the correlation between
            the random field elements. CLENGTH is required for Ctype = LEXP and
            Ctype = QEXP; it must be a nonzero, positive number.

        Notes
        -----
        Calculates a correlation field for a probabilistic analysis involving a
        random field. Random fields are random effects with a spatial
        distribution; the value of a random field not only varies from
        simulation to simulation at any given location, but also from location
        to location. The correlation field describes the correlation
        coefficient between two different spatial locations. Random fields can
        be either based on element properties (typically material) or nodal
        properties (typically surface shape defined by nodal coordinates).
        Hence, random fields are either associated with the selected nodes or
        the selected elements. If a random field is associated with elements,
        then the correlation coefficients of the random field are calculated
        based on the distance of the element centroids.

        For more information, see Probabilistic Design in the Advanced Analysis
        Guide.

        Note that for correlation fields, the "domain distance" D({xi} , {xj})
        is not the spatial distance |{xi} - {xj}|, but the length of a path
        between {xi} and {xj} that always remains inside the finite element
        domain. However, exceptions are possible in extreme meshing cases. For
        elements that share at least one node, the PDCFLD evaluates the
        distance by directly connecting the element centroids with a straight
        line. If these neighboring elements form a sharp inward corner then it
        is possible that the "domain distance" path lies partly outside the
        finite element domain, as illustrated below.

        After the correlation coefficients have been calculated and stored in
        the ANSYS parameter ParR, then use the PDCORR command to define the
        correlations between the elements of the random field.
        """
        command = "PDCFLD,%s,%s,%s,%s" % (str(parr), str(entity), str(ctype), str(clength))
        return self.run(command, **kwargs)

    def prscontrol(self, key="", **kwargs):
        """APDL Command: PRSCONTROL

        Specifies whether to include pressure load stiffness in the element
        stiffness formation.

        Parameters
        ----------
        key
            Pressure load stiffness key. In general, use the default setting.
            Use a non-default setting only if you encounter convergence
            difficulties. Pressure load stiffness is automatically included
            when using eigenvalue buckling analyses (ANTYPE,BUCKLE), equivalent
            to Key = INCP. For all other types of analyses, valid arguments for
            Key are:

            NOPL - Pressure load stiffness not included for any elements.

            (blank) (default) - Include pressure load stiffness for elements SURF153, SURF154, SURF156,
                              SURF159, SHELL181, PLANE182, PLANE183, SOLID185,
                              SOLID186, SOLID187, SOLSH190, BEAM188, BEAM189,
                              FOLLW201, SHELL208, SHELL209, SOLID272, SOLID273,
                              SHELL281, SOLID285, PIPE288, PIPE289, and
                              ELBOW290. Do not include pressure load stiffness
                              for elements SOLID65.

            INCP - Pressure load stiffness included for all of the default elements listed above
                   and SOLID65.

        Notes
        -----
        This command is rarely needed. The default settings are recommended for
        most analyses.
        """
        command = "PRSCONTROL,%s" % (str(key))
        return self.run(command, **kwargs)

    def spgraph(self, tblno="", curvno="", curvnobeg ="", **kwargs):
        """APDL Command: SPGRAPH

        Displays input spectrum curves for MPRS analysis.

        Parameters
        ----------
        tblno
            Table number to display.  Defaults to 1.

        curvno
            Curve number to display. Defaults to none.

        curvnobeg
            Beginning of the curve number range to display. Defaults to 1.

        Notes
        -----
        You can display up to 10 input spectrum curves (SPVAL and SPFREQ
        commands) with log X scale.

        If the input spectrum curves are not associated with a damping value
        (SPDAMP command), CURVNO and CURVNOBeg are not applicable and table
        TBLNO is displayed. Otherwise, specify CURVNO or CURVNOBeg:

        if CURVNO is used, one curve is displayed.

        if CURVNOBeg is used, up to 10 curves are displayed. CURVNOBeg is the
        beginning of the curve number range of interest.
        """
        command = "SPGRAPH,%s,%s,%s" % (str(tblno), str(curvno), str(curvnobeg))
        return self.run(command, **kwargs)

    
    
    def ncnv(self, kstop="", dlim="", itlim="", etlim="", cplim="", **kwargs):
        """APDL Command: NCNV

        Sets the key to terminate an analysis.

        Parameters
        ----------
        kstop
            Program behavior upon nonconvergence:

            0 - Do not terminate the analysis if the solution fails to converge.

            1 - Terminate the analysis and the program execution if the solution fails to
                converge (default).

            2 - Terminate the analysis, but not the program execution, if the solution fails to
                converge.

        dlim
            Terminates program execution if the largest nodal DOF solution
            value (displacement, temperature, etc.) exceeds this limit.
            Defaults to 1.0E6 for all DOF except MAG and A. Defaults to 1.0E10
            for MAG and A.

        itlim
            Terminates program execution if the cumulative iteration number
            exceeds this limit (defaults to infinity).

        etlim
            Terminates program execution if the elapsed time (seconds) exceeds
            this limit (defaults to infinity).

        cplim
            Terminates program execution if the CPU time (seconds) exceeds this
            limit (defaults to infinity).

        Notes
        -----
        Sets the key to terminate an analysis if not converged, or if any of
        the following limits are exceeded for nonlinear and full transient
        analyses: DOF (displacement), cumulative iteration, elapsed time, or
        CPU time limit.  Applies only to static and transient analyses
        (ANTYPE,STATIC and ANTYPE,TRANS). Time limit checks are made at the end
        of each equilibrium iteration.

        This command is also valid in PREP7.
        """
        command = "NCNV,%s,%s,%s,%s,%s" % (str(kstop), str(dlim), str(itlim), str(etlim), str(cplim))
        return self.run(command, **kwargs)

    def mdamp(self, stloc="", v1="", v2="", v3="", v4="", v5="", v6="",
              **kwargs):
        """APDL Command: MDAMP

        Defines the damping ratios as a function of mode.

        Parameters
        ----------
        stloc
            Starting location in table for entering data.  For example, if
            STLOC = 1, data input in the V1 field applies to the first constant
            in the table.  If STLOC = 7, data input in the V1 field applies to
            the seventh constant in the table, etc.  Defaults to the last
            location filled + 1.

        v1, v2, v3, . . . , v6
            Data assigned to six locations starting with STLOC.  If a value is
            already in this location, it will be redefined.  Blank values for
            V2 to V6 leave the corresponding previous value unchanged.

        Notes
        -----
        Defines the damping ratios as a function of mode.  Table position
        corresponds to mode number.  These ratios are added to the DMPRAT
        value, if defined.  Use STAT command to list current values.  Applies
        to the mode-superposition harmonic (ANTYPE,HARMIC), the mode-
        superposition linear transient dynamic (ANTYPE,TRANS), and the spectrum
        (ANTYPE,SPECTR) analyses.  Repeat MDAMP command for additional
        constants (10000 maximum).

        MDAMP can also be defined in a substructure analysis using component
        mode synthesis with fixed-interface method (ANTYPE,SUBSTR with
        CMSOPT,FIX and SEOPT,,,3). The damping ratios are added to the diagonal
        of the reduced damping matrix as explained in Component Mode Synthesis
        (CMS).

        This command is also valid in PREP7.
        """
        command = "MDAMP,%s,%s,%s,%s,%s,%s,%s" % (str(stloc), str(v1), str(v2), str(v3), str(v4), str(v5), str(v6))
        return self.run(command, **kwargs)

    def qdval(self, tblno1="", tblno2="", sv1="", sv2="", sv3="", sv4="",
              sv5="", sv6="", sv7="", **kwargs):
        """APDL Command: QDVAL

        Defines PSD quadspectral values.

        Parameters
        ----------
        tblno1
            First input PSD table number associated with this spectrum.

        tblno2
            Second input PSD table number associated with this spectrum.

        sv1, sv2, sv3, . . . , sv7
            PSD quadspectral values corresponding to the frequency points
            [PSDFRQ].

        Notes
        -----
        Defines PSD quadspectral values to be associated with the previously
        defined frequency points.  Repeat QDVAL command with the same table
        number for additional points.  Unlike autospectra [PSDVAL], the
        quadspectra can be positive or negative.  The quadspectral curve
        segment where there is a sign change is interpolated linearly (the rest
        of the curve segments use log-log interpolation).  For better accuracy,
        choose as small a curve segment as possible wherever a sign change
        occurs.

        Two table numbers are required since values are off-diagonal terms.
        This command is valid for SPOPT,PSD only.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "QDVAL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno1), str(tblno2), str(sv1), str(sv2), str(sv3), str(sv4), str(sv5), str(sv6), str(sv7))
        return self.run(command, **kwargs)

    def append(self, lstep="", sbstep="", fact="", kimg="", time="", angle="",
               nset="", **kwargs):
        """APDL Command: APPEND

        Reads data from the results file and appends it to the database.

        Parameters
        ----------
        lstep
            Load step number of the data set to be read.  Defaults to 1.  If
            FIRST, ignore SBSTEP and TIME and read the first data set.  If
            LAST, ignore SBSTEP and TIME and read the last data set.  If NEXT,
            ignore SBSTEP and TIME and read the next data set.  If already at
            the last data set, the next set is the first data set.  If NEAR,
            ignore SBSTEP and read the data set nearest to TIME.  If TIME is
            blank, read the first data set.  If LIST, scan the results file to
            produce a summary of each load step (FACT, KIMG, TIME  and ANGLE
            are ignored).

        sbstep
            Substep number (within LSTEP) (defaults to last substep of load
            step).   For the Buckling (ANTYPE,BUCKLE) or Modal (ANTYPE,MODAL)
            analysis, the substep corresponds to the mode number (defaults to
            first mode).  If LSTEP = LIST, SBSTEP = 0 or 1 will list the basic
            load step information;  SBSTEP = 2 will also list the load step
            title, and label the imaginary data sets if they exist.

        fact
            Scale factor applied to data read from the file.  If zero (or
            blank), a value of 1.0 is used.  Harmonic velocities or
            accelerations may be calculated from the displacement results from
            a modal or harmonic (ANTYPE,HARMIC) analyses.  If FACT = VELO, the
            harmonic velocities (v) are calculated from the displacements (d)
            at a particular frequency (f) according to the relationship v =
            2 πfd.  Similarly, if FACT = ACEL, the harmonic accelerations (a)
            are calculated as a = (2 πf)2d.

        kimg
            Used only with results from complex analyses:

            0 - Store real part of complex solution.

            1 - Store imaginary part.

        time
            Time-point identifying the data set to be read.  For harmonic
            analyses, time corresponds to the frequency.  For the buckling
            analysis, time corresponds to the load factor.  Used only in the
            following cases:  If LSTEP is NEAR, read the data set nearest to
            TIME.   If both LSTEP and SBSTEP are zero (or blank), read data set
            at time = TIME.  If TIME is between two solution time points on the
            results file, a linear interpolation is done between the two data
            sets.  Solution items not written to the results file [OUTRES] for
            either data set will result in a null item after data set
            interpolation.  If TIME is beyond the last time point on the file,
            the last time point is used.

        angle
            Circumferential location (0° to 360°).  Defines the circumferential
            location for the harmonic calculations used when reading from the
            results file.  The harmonic factor (based on the circumferential
            angle) is applied to the harmonic elements (PLANE25, PLANE75,
            PLANE78, PLANE83, and SHELL61) of the load case.  See the
            Mechanical APDL Theory Reference for details.  Note that factored
            values of applied constraints and loads will overwrite any values
            existing in the database.

        nset
            Data set number of the data set to be read.  If a positive value
            for NSET is entered, LSTEP, SBSTEP, KIMG, and TIME are ignored.
            Available set numbers can be determined by APPEND,LIST.  To
            determine if data sets are real or imaginary, issue APPEND,LIST,2
            which labels imaginary data sets.

        Notes
        -----
        Reads a data set from the results file and appends it to the existing
        data in the database for the selected model only.  The existing
        database is not cleared (or overwritten in total), allowing the
        requested results data to be merged into the database.  Various
        operations may also be performed during the read operation.  The
        database must have the model geometry available (or used the RESUME
        command before the APPEND command to restore the geometry from
        File.DB).
        """
        command = "APPEND,%s,%s,%s,%s,%s,%s,%s" % (str(lstep), str(sbstep), str(fact), str(kimg), str(time), str(angle), str(nset))
        return self.run(command, **kwargs)

    def anflow(self, nfram="", delay="", ncycl="", time="", spacing="",
               size="", length="", **kwargs):
        """APDL Command: ANFLOW

        Produces an animated sequence of particle flow in a flowing fluid or a
        charged particle traveling in an electric or magnetic field.

        Parameters
        ----------
        nfram
            Number of frames captured (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Non-UI mode only.

        time
            Total Trace Time (seconds) (defaults to 0, which is the full flow
            trace).

        spacing
            Particle spacing in seconds (defaults to 0).

        size
            Particle size (defaults to 0, which is a line).

        length
            Particle length fraction (defaults to .1).

        Notes
        -----
        ANFLOW invokes an ANSYS macro which produces an animation of particle
        flow in a flowing fluid or charged particle motion in an electric or
        magnetic field by the last plot action command (i.e., PLTRAC).  This
        command is only operational on graphic display platforms supporting the
        /SEG command.  After executing ANFLOW, you can replay the animated
        sequence by issuing the ANIM command.  This command is functional only
        in the Postprocessor.

        The TIME option lets you set the time interval of forward travel for
        the trace.  The SPACING option is used to define the particle spacing
        in seconds from adjacent particles in the stream line.  The SIZE
        variable sets the radius of the particle.  The LENGTH variable is used
        to define the particle length fraction.  By default, the LENGTH is set
        to .1, which means the particle occupies 10% of the flow region and the
        other 90% is a color-code line.  The SPACING and LENGTH variables only
        make sense when the SIZE variable is nonzero (i.e., the particle is
        bigger than the line).
        """
        command = "ANFLOW,%s,%s,%s,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(time), str(spacing), str(size), str(length))
        return self.run(command, **kwargs)

    def psdres(self, lab="", relkey="", **kwargs):
        """APDL Command: PSDRES

        Controls solution output written to the results file from a PSD
        analysis.

        Parameters
        ----------
        lab
            Label identifying the solution output:

            DISP - Displacement solution (default).  One-sigma displacements, stresses, forces,
                   etc.  Written as load step 3 on File.RST.

            VELO - Velocity solution.  One-sigma velocities, "stress velocities," "force
                   velocities," etc.  Written as load step 4 of File.RST.

            ACEL - Acceleration solution.  One-sigma accelerations, "stress accelerations," "force
                   accelerations," etc.  Written as load step 5 on File.RST.

        relkey
            Key defining relative or absolute calculations:

            REL - Calculations are relative to the base excitation (default).

            ABS - Calculations are absolute.

            OFF - No calculation of solution output identified by Lab.

        Notes
        -----
        Controls the amount and form of solution output written to the results
        file from a PSD analysis.  One-sigma values of the relative or absolute
        displacement solution, relative or absolute velocity solution, relative
        or absolute acceleration solution, or any combination may be included
        on the results file.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PSDRES,%s,%s" % (str(lab), str(relkey))
        return self.run(command, **kwargs)

    
    def vcross(self, labxr="", labyr="", labzr="", labx1="", laby1="",
               labz1="", labx2="", laby2="", labz2="", **kwargs):
        """APDL Command: VCROSS

        Forms element table items from the cross product of two vectors.

        Parameters
        ----------
        labxr, labyr, labzr
            Label assigned to X, Y, and Z-component of resultant vector.

        labx1, laby1, labz1
            X, Y, and Z-component of first vector label.

        labx2, laby2, labz2
            X, Y, and Z-component of second vector label.

        Notes
        -----
        Forms labeled result items for the selected element from the cross
        product of two vectors:

        {LabXR, LabYR, LabZR} = {LabX1, LabY1, LabZ1} X {LabX2, LabY2, LabZ2}

        Data must be in a consistent coordinate system.  Labels are those
        associated with the ETABLE command.
        """
        command = "VCROSS,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(labxr), str(labyr), str(labzr), str(labx1), str(laby1), str(labz1), str(labx2), str(laby2), str(labz2))
        return self.run(command, **kwargs)

    def pngr(self, kywrd="", opt="", val="", **kwargs):
        """APDL Command: PNGR

        Provides PNG file export for ANSYS displays.

        Parameters
        ----------
        kywrd
            Specifies various PNG file export options.

            COMP - If Kywrd = COMP, then OPT is either ON or OFF (blank is interpreted as OFF).
                   This option allows you to turn PNG file compression ON or
                   OFF. If OPT = ON, then The VAL field is read to determine
                   the degree of compression. See the VALUE argument for
                   acceptable compression values.

            ORIENT - If Kywrd = ORIENT, then OPT will determine the orientation of the entire plot.
                     OPT can be either Horizontal (default) or Vertical.

            COLOR - If Kywrd = COLOR, then OPT will determine the color depth of the saved file.
                    OPT can be 0, 1, or 2, corresponding to Black and White,
                    Grayscale, and Color (default), respectively.

            TMOD - If Kywrd = TMOD, then OPT will determine the text method. OPT can be either 1
                   or 0, corresponding to bitmap text (default) or line stroke
                   text, respectively.

            DEFAULT - If Kywrd = DEFAULT, then all of the default values, for all of the Kywrd
                      parameters listed above, are active.

            STAT - Shows the current status of PNG file export.

        opt
            OPT can have the following names or values, depending on the value
            for Kywrd (see above).

            ON, OFF - If Kywrd = COMP, the values On and Off control the use of compression. The
                      degree of compression is determined by VAL

            Horizontal, Vertical - If Kywrd = ORIENT, the terms Horizontal or Vertical determine the orientation
                              of the plot.

            0, 1, 2 - If Kywrd = COLOR, the numbers 0, 1, and 2 correspond to Black and White,
                      Grayscale and Color, respectively.

            1, 0 - If Kywrd = TMOD, the values 1 and 0 determine whether bitmap (1) or stroke text
                   (0) fonts will be used

        val
            VAL is active only when Kywrd = COMP, and determines the degree of
            compression applied to the exported file (see above).

            1  - Apply the default, optimum value for compression. This value represents the
                 best combination of speed and compression. It varies according
                 to the release level of the ZLIB compression package.

            1-9  - Use this value to specify a specific compression level. 1 is the lowest
                   compression level (fastest) and 9 is the highest compression
                   level (slowest).
        """
        command = "PNGR,%s,%s,%s" % (str(kywrd), str(opt), str(val))
        return self.run(command, **kwargs)

    def lcwrite(self, lcno="", fname="", ext="", **kwargs):
        """APDL Command: LCWRITE

        Creates a load case by writing results to a load case file.

        Parameters
        ----------
        lcno
            Arbitrary pointer number (1-99) to be assigned to this load case.

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Creates a load case by writing the results data in the database to a
        load case file.  The database remains unchanged by this operation.  A
        pointer is also established to the written set of results on the load
        case file.  This pointer (LCNO) can then be used on the LCASE or LCOPER
        commands to read the load case data into the database.  By default,
        only summable results data (such as displacements, stresses, elastic
        strains) and constant results data (such as volume) are written to the
        load case file unless requested (LCSUM command).  Non-summable results
        data (such as plastic strains, strain energy), boundary conditions, and
        nodal loads are not written to the load case file.  The load case file
        may be named by default or by a user name.  Rewriting to the same file
        overwrites the previous data.  See the LCDEF command for status and
        erase operations.
        """
        command = "LCWRITE,%s,%s,%s" % (str(lcno), str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def pdcdf(self, rlab="", name="", type_="", conf="", nmax="", **kwargs):
        """APDL Command: PDCDF

        Plots the cumulative distribution function.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses).

        name
            Parameter name. The parameter must have been previously defined as
            a random input variable or a random output parameter with the PDVAR
            command.

        type\_
            Type of cumulative distribution curve to be displayed.

            EMP - Show an empirical cumulative distribution curve.

            GAUS - Show a cumulative distribution curve in a normal distribution plot. A random
                   variable based on a normal or Gaussian distribution appears
                   as a straight line in this type of plot.

            LOGN - Show a cumulative distribution curve in a log-normal plot. A random variable
                   based on a log-normal distribution appears as a straight
                   line in this type of plot.

            WEIB - Show a cumulative distribution curve in a Weibull distribution plot. A random
                   variable based on a Weibull distribution appears as a
                   straight line in this type of plot.

        conf
            Confidence level. The confidence level is used to plot confidence
            bounds around the cumulative distribution function. The value for
            the confidence level must be between 0.0 and 1.0 and it defaults to
            0.95 (95%). Plotting of the confidence bound is suppressed for CONF
            0.5. This parameter is ignored for the postprocessing of response
            surface methods results.

        nmax
            Maximum number of points to be plotted for the distribution curve.
            This must be a positive number and it defaults to 100. If the
            sample size is less than NMAX, all sample data is represented in
            the plot. If the sample size is larger than NMAX, the probabilistic
            design system classifies the sample into NMAX classes of
            appropriate size.

        Notes
        -----
        Plots the cumulative distribution function.

        The PDCDF command cannot be used to postprocess the results in a
        solution set that is based on Response Surface Methods, only Monte
        Carlo Simulations.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.
        """
        command = "PDCDF,%s,%s,%s,%s,%s" % (str(rlab), str(name), str(type_), str(conf), str(nmax))
        return self.run(command, **kwargs)

    def slashlarc(self, xcentr="", ycentr="", xlrad="", angle1="", angle2="",
                  **kwargs):
        """APDL Command: /LARC

        Creates annotation arcs (GUI).

        Parameters
        ----------
        xcentr
            Arc X center location (-1.0 < X < 1.0).

        ycentr
            Arc Y center location (-1.0 < Y < 1.0).

        xlrad
            Arc radius length.

        angle1
            Starting angle of arc.

        angle2
            Ending angle of arc.  The arc is drawn counterclockwise from the
            starting angle, ANGLE1, to the ending angle, ANGLE2.

        Notes
        -----
        Defines annotation arcs to be written directly onto the display at a
        specified location.  This is a command generated by the Graphical User
        Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All arcs are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC command to set the attributes of
        the arc.

        This command is valid in any processor.
        """
        command = "/LARC,%s,%s,%s,%s,%s" % (str(xcentr), str(ycentr), str(xlrad), str(angle1), str(angle2))
        return self.run(command, **kwargs)

    
    def frqscl(self, scaling ="", **kwargs):
        """APDL Command: FRQSCL

        Turns on automatic scaling of the entire mass matrix and frequency
        range for modal analyses using the Block Lanczos, PCG Lanczos, or
        Supernode mode extraction method.

        Parameters
        ----------
        scaling


            Off  - Do not use automatic scaling of the mass matrix and frequency range.

            On  - Use automatic scaling of the mass matrix and frequency range.

        Notes
        -----
        Use this command to deactivate or force activation of automatic scaling
        of the entire mass matrix and frequency range for modal analyses where
        the entire mass matrix is significantly different (i.e., orders of
        magnitude difference) than the entire stiffness matrix (for example,
        due to the particular unit system being used).  Where the mass matrix
        is significantly smaller compared to the stiffness matrix, the
        eigenvalues will tend to approach very large numbers (>10e12), making
        the Block Lanczos, PCG Lanczos, or Supernode mode extraction method
        less efficient and more likely to miss modes.

        ANSYS uses scaling (if appropriate) by default. However, you can issue
        FRQSCL,ON to force the entire mass matrix and frequency range to be
        scaled to bring the stiffness and mass matrices closer together in
        terms of orders of magnitude, improving efficiency and reducing the
        likelihood of missed modes.  The resulting eigenvalues are then
        automatically scaled back to the original system. If you are using
        micro MKS units, where the density is typically very small compared to
        the stiffness, you may want to issue FRQSCL,ON to force scaling on.

        If the stiffness and mass are on the same scale, FRQSCL,ON has no
        effect.

        This command is available only for modal analyses using the Block
        Lanczos, PCG Lanczos, or Supernode mode extraction method (MODOPT,LANB,
        LANPCG, or SNODE).

        This command is not valid and has no effect when used in conjunction
        with the MSAVE,ON command in a modal analysis with the PCG Lanczos mode
        extraction method.
        """
        command = "FRQSCL,%s" % (str(scaling))
        return self.run(command, **kwargs)

    def fj(self, elem="", label="", value="", **kwargs):
        """APDL Command: FJ

        Specify forces or moments on the components of the relative motion of a
        joint element.

        Parameters
        ----------
        elem
            Element number or ALL to specify all joint elements.

        label
            Valid labels:

            FX - Force in local x direction.

            FY - Force in local y direction.

            FZ - Force in local z direction.

            MX - Moment about local x axis.

            MY - Moment about local y axis.

            MZ - Moment about local z axis.

        value
            Value of the label.

        Notes
        -----
        Valid for MPC184 (joint options in KEYOPT(1)).

        See FJDELE for information on deleting forces and moments.
        """
        command = "FJ,%s,%s,%s" % (str(elem), str(label), str(value))
        return self.run(command, **kwargs)

    def suvect(self, rsetname="", lab1="", oper="", lab2="", offset="",
               **kwargs):
        """APDL Command: SUVECT

        Create new result data by operating on two existing result vectors on a
        given surface.

        Parameters
        ----------
        rsetname
            Eight character name of the result data output. There will be one
            or three RSetName values depending on the operation specified in
            Oper.

        lab1
            Eight character name of the mapped data that forms vector 1.
            Specified sets must exist on all selected surfaces for this
            operation to take place. The names NORM and GC will be reserved for
            normals and for global (x, y, z).

        oper
            DOT

            DOT - Computes dot product between lab1 and lab2 vectors. The result is a scalar
                  parameter (RSetName) and each value within the set can be
                  modified (incremented) via Offset.

            CROSS - Computes cross product between lab1 and lab2 vectors. Each X, Y, Z value in the
                    result can be modified (incremented) via Offset.

            SMULT - Scales (lab1x, lab1y, lab1z) vector by scalar lab2. Each X,Y,Z value in the
                    result can be modified (incremented) via Offset.

        lab2
            Eight character name of the mapped data that forms vector 2. Sets
            with names Lab2X, Lab2Y, and Lab2Z must exist on all selected
            surfaces for operation to take place.  For Oper = SMULT a scalar
            value or another predefined scalar item (e.g., DA) can be supplied.

        offset
            An offset value to be applied to the resultant RSetName. One value
            is specified for Oper = DOT, and three values are specified for
            Oper = SMULT.
        """
        command = "SUVECT,%s,%s,%s,%s,%s" % (str(rsetname), str(lab1), str(oper), str(lab2), str(offset))
        return self.run(command, **kwargs)

    
    def lsrestore(self, enginename="", filename="", **kwargs):
        """APDL Command: *LSRESTORE

        Restores a linear solver engine from a binary file.

        Parameters
        ----------
        enginename
            Name used to identify this engine.

        filename
            Name of the file to read from.

        Notes
        -----
        Restores a previously dumped Linear Solver (see the *LSDUMP command).
        This Linear Solver can be used to solve a linear system using the
        *LSBAC command.
        """
        command = "*LSRESTORE,%s,%s" % (str(enginename), str(filename))
        return self.run(command, **kwargs)

    
    
    def wstart(self, node1="", node2="", ninc="", itime="", inc="", **kwargs):
        """APDL Command: WSTART

        Defines a starting wave list.

        Parameters
        ----------
        node1, node2, ninc
            Define a set of nodes in the starting wave list from NODE1 to NODE2
            (defaults to NODE1) in steps of NINC (defaults to 1).  If NODE1 =
            ALL, ignore remaining fields and use all selected nodes [NSEL].

        itime, inc
            Add more node sets to the same starting wave list by repeating the
            previous node set with NODE1 and NODE2 incremented by INC (defaults
            to 1) each time after the first.  ITIME is the total number of sets
            (defaults to 1) defined with this command.

        Notes
        -----
        Defines a starting wave list (optional) for reordering with the WAVES
        command.  Repeat WSTART command to define other starting wave lists (20
        maximum).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WSTART,%s,%s,%s,%s,%s" % (str(node1), str(node2), str(ninc), str(itime), str(inc))
        return self.run(command, **kwargs)

    def bfdele(self, node="", lab="", **kwargs):
        """APDL Command: BFDELE

        Deletes nodal body force loads.

        Parameters
        ----------
        node
            Node at which body load is to be deleted.  If ALL, delete for all
            selected nodes [NSEL].  If NODE = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component name may also be substituted for NODE.

        lab
            Valid body load label. If ALL, use all appropriate labels. See the
            BF command for labels. In an explicit dynamic analysis, the only
            valid body load label is TEMP.

        Notes
        -----
        Deletes nodal body force loads for a specified node and label.  Nodal
        body loads may be defined with the BF command (except in an explicit
        dynamic analysis).

        The command BFDELE,TEMP can be used in an explicit dynamic analysis to
        delete temperature loads that are read in by the LDREAD command. BFDELE
        cannot be used to delete temperature loads defined by the EDLOAD
        command (use EDLOAD,DELE to delete this type of load).

        This command is also valid in PREP7.
        """
        command = "BFDELE,%s,%s" % (str(node), str(lab))
        return self.run(command, **kwargs)

    def edge(self, wn="", key="", angle="", **kwargs):
        """APDL Command: /EDGE

        Displays only the common lines ("edges") of an object.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies. The default window
            is 1.

        key
            Edge key:

            0 - Display common lines between all adjacent element faces.

            1 - Display only the common lines between non-coplanar faces (that is, show only
                the edges).

        angle
            Largest angle between two faces for which the faces are considered
            to be coplanar (0° to 180°). Defaults to 45°. A smaller angle
            produces more edges, a larger angle produces fewer edges.

        Notes
        -----
        The ANGLE field is used in PowerGraphics to determine geometric
        discontinuities. It is a tolerance measure for the differences between
        the normals of the surfaces being considered. Values within the
        tolerance are accepted as coplanar (geometrically continuous). In
        postprocessing displays, results are not averaged across discontinuous
        surfaces.

        A surface can be displayed as an edge outline without interior detail.
        This is useful for both geometry and postprocessing displays. Element
        outlines are normally shown as solid lines for geometry and
        displacement displays. Lines common to adjacent "coplanar" element
        faces are removed from the display.  Midside nodes of elements are
        ignored.

        The /SHRINK option is ignored with the edge option.

        /EDGE is not supported for PLESOL and /ESHAPE displays when in
        PowerGraphics mode (/GRAPHICS,POWER).

        The /EDGE command is valid in any processor.
        """
        command = "/EDGE,%s,%s,%s" % (str(wn), str(key), str(angle))
        return self.run(command, **kwargs)

    def spec(self, **kwargs):
        """APDL Command: SPEC

        Specifies "Miscellaneous specifications" as the subsequent status
        topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SPEC,"
        return self.run(command, **kwargs)

    def mfexter(self, fnumb1="", fnumb2="", fnumb3="", fnumb4="", fnumb5="",
                fnumb6="", fnumb7="", fnumb8="", fnumb9="", fnumb10="",
                fnumb11="", fnumb12="", fnumb13="", fnumb14="", fnumb15="",
                fnumb16="", fnumb17="", fnumb18="", fnumb19="", fnumb20="",
                **kwargs):
        """APDL Command: MFEXTER

        Defines external fields for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        fnumb1, fnumb2, fnumb3, . . . , fnumb20
            External field numbers defined by the MFELEM command.

        Notes
        -----
        This command specifies external field numbers to be used for load
        transfer in an ANSYS Multi-field solver analysis. Use the MFIMPORT
        command to import the external fields.

        Use the MFELEM command to specify external field numbers. Use the
        MFORDER command to specify the solution order for the external fields.

        You can define a maximum of 20 fields.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFEXTER,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(fnumb1), str(fnumb2), str(fnumb3), str(fnumb4), str(fnumb5), str(fnumb6), str(fnumb7), str(fnumb8), str(fnumb9), str(fnumb10), str(fnumb11), str(fnumb12), str(fnumb13), str(fnumb14), str(fnumb15), str(fnumb16), str(fnumb17), str(fnumb18), str(fnumb19), str(fnumb20))
        return self.run(command, **kwargs)

    
    
    def da(self, area="", lab="", value1="", value2="", **kwargs):
        """APDL Command: DA

        Defines degree-of-freedom constraints on areas.

        Parameters
        ----------
        area
            Area on which constraints are to be specified.  If ALL, apply to
            all selected areas [ASEL].  If AREA = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for AREA.

        lab
            Symmetry label (see 2 below):

            SYMM - Generate symmetry constraints. Requires no Value1 or Value2.

            ASYM - Generate antisymmetry constraints. Requires no Value1 or Value2.

        value1
            Value of DOF or table name reference on the area.  Valid for all
            DOF labels.  To specify a table, enclose the table name in % signs
            (e.g., DA,AREA,TEMP,%tabname%).  Use the *DIM command to define a
            table.

        value2
            For MAG and VOLT DOFs:

        Notes
        -----
        For elements SOLID236 and SOLID237, if Lab = AZ and Value1 = 0, this
        sets the flux-parallel condition for the edge formulation.  (A flux-
        normal condition is the natural boundary condition.)  Do not use the DA
        command to set the edge-flux DOF, AZ to a nonzero value.

        If Lab = MAG and Value1 = 0, this sets the flux-normal condition for
        the magnetic scalar potential formulations (MSP) (A flux-parallel
        condition is the natural boundary condition for MSP.)

        If Lab = VOLT and Value1 = 0, the J-normal condition is set (current
        density (J) flow normal to the area). (A J-parallel condition is the
        natural boundary condition.)

        You can transfer constraints from areas to nodes with the DTRAN or
        SBCTRAN commands.  See the DK command for information about generating
        other constraints on areas.

        Symmetry and antisymmetry constraints are generated as described for
        the DSYM command.

        Tabular boundary conditions (VALUE = %tabname%) are available only for
        the following degree of freedom labels: Electric (VOLT), Structural
        (UX, UY, UZ, ROTX, ROTY, ROTZ), Acoustic (PRES, UX, UY, UZ), and
        temperature (TEMP, TBOT, TE2, TE3, . . ., TTOP).

        Constraints specified by the DA command can conflict with other
        specified constraints.  See Resolution of Conflicting Constraint
        Specifications in the Basic Analysis Guide for details.

        The DA command is also valid in PREP7.
        """
        command = "DA,%s,%s,%s,%s" % (str(area), str(lab), str(value1), str(value2))
        return self.run(command, **kwargs)

    
    def starvplot(self, parx="", pary="", y2="", y3="", y4="", y5="", y6="",
                  y7="", y8="", **kwargs):
        """APDL Command: *VPLOT

        Graphs columns (vectors) of array parameters.

        Parameters
        ----------
        parx
            Name of the array parameter whose column vector values will be the
            abscissa of the graph.  If blank, row subscript numbers are used
            instead.  ParX is not sorted by the program.

        pary
            Name of the array parameter whose column vector values will be
            graphed against the ParX values.

        y2, y3, y4, . . . , y8
            Additional column subscript of the ParY array parameter whose
            values are to be graphed against the ParX values.

        Notes
        -----
        The column to be graphed and the starting row for each array parameter
        must be specified as subscripts.  Additional columns of the ParY array
        parameter may be graphed by specifying column numbers for Y2,  Y3,
        ...,Y8.  For example, *VPLOT,TIME (4,6), DISP (8,1),2,3 specifies that
        the 1st, 2nd, and 3rd columns of array parameter DISP (all starting at
        row 8) are to be graphed against the 6th column of array parameter TIME
        (starting at row 4).  The columns are graphed from the starting row to
        their maximum extent.  See the *VLEN and  *VMASK commands to limit or
        skip data to be graphed.  The array parameters specified on the *VPLOT
        command must be of the same type (type ARRAY or TABLE; [*DIM].   Arrays
        of type TABLE are graphed as continuous curves.  Arrays of type ARRAY
        is displayed in bar chart fashion.

        The normal curve labeling scheme for *VPLOT is to label curve 1 "COL
        1", curve 2 "COL 2" and so on. You can use the /GCOLUMN command to
        apply user-specified labels (8 characters maximum) to your curves. See
        Modifying Curve Labels in the ANSYS Parametric Design Language Guide
        for more information on using /GCOLUMN.

        When a graph plot reaches minimum or maximum y-axis limits, the program
        indicates the condition by clipping the graph. The clip appears as a
        horizontal magenta line. Mechanical APDL calculates y-axis limits
        automatically; however, you can modify the (YMIN and YMAX) limits via
        the /YRANGE command.

        This command is valid in any processor.
        """
        command = "*VPLOT,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(parx), str(pary), str(y2), str(y3), str(y4), str(y5), str(y6), str(y7), str(y8))
        return self.run(command, **kwargs)

    
    
    def expsol(self, lstep="", sbstep="", timfrq="", elcalc="", **kwargs):
        """APDL Command: EXPSOL

        Specifies the solution to be expanded for mode-superposition analyses
        or substructure analyses.

        Parameters
        ----------
        lstep, sbstep
            Expand the solution identified as load step LSTEP and substep
            SBSTEP.

        timfrq
            As an alternative to LSTEP and SBSTEP, expand the solution at, or
            nearest to, the time value TIMFRQ (for ANTYPE,TRANS or
            ANTYPE,SUBSTR) or frequency value TIMFRQ (for ANTYPE,HARMIC).
            LSTEP and SBSTEP should be blank.

        elcalc
            Element calculation key:

            YES - Calculate element results, nodal loads, and reaction loads.

            NO - Do not calculate these items.

        Notes
        -----
        Specifies the solution to be expanded from analyses that use the mode-
        superposition method (ANTYPE,HARMIC or TRANS) or substructuring
        (ANTYPE,SUBSTR). Use the NUMEXP command to expand a group of solutions.

        The resulting results file will maintain the same load step, substep,
        and time (or frequency) values as the requested solution to be
        expanded.

        This command is also valid in PREP7.
        """
        command = "EXPSOL,%s,%s,%s,%s" % (str(lstep), str(sbstep), str(timfrq), str(elcalc))
        return self.run(command, **kwargs)

    
    def campbell(self, action="", **kwargs):
        """APDL Command: CAMPBELL

        Prepares the result file for a subsequent Campbell diagram of a
        prestressed structure.

        Parameters
        ----------
        action
            Campbell action:

            NONE - Do not prepare the result file. This option is the default behavior.

            RSTP - Prepare the result file (Jobname.RSTP) for a subsequent Campbell diagram of a
                   prestressed structure.

        Notes
        -----
        For an analysis involving a prestressed structure, the CAMPBELL command
        specifies whether or not to prepare the result file to support  a
        Campbell diagram analysis (PRCAMP or PLCAMP).

        To prestress a structure, the program performs a static solution before
        the linear perturbation modal solution.

        The CAMPBELL command requires that modal and static analyses be
        performed alternately. It works only when the number of static analyses
        is the same as the number of modal analyses. Any number of analyses can
        be performed, but the same number of each (static and modal) is
        expected. The modal solutions are appended in the results file
        (Jobname.RSTP).

        For an example of PLCAMP command usage, see Example Campbell Diagram
        Analysis in the Advanced Analysis Guide.
        """
        command = "CAMPBELL,%s" % (str(action))
        return self.run(command, **kwargs)

    def pdplot(self, name="", plow="", pup="", **kwargs):
        """APDL Command: PDPLOT

        Plots the distribution curves of a defined random input variable.

        Parameters
        ----------
        name
            Parameter name. The parameter name must have been previously
            defined as a random input variable using the PDVAR command.

        plow
            Lower probability level used to determine the lower boundary of the
            curve. This probability must be between 0.0 and 1.0 and it defaults
            to 0.0025. This parameter is used to determine the lower plotting
            range (boundary) in case the random input variable does not have a
            minimum value (such as Gauss).

        pup
            Upper probability level used to determine the upper boundary of the
            curve. This probability must be between 0.0 and 1.0 and it defaults
            to 0.9975.

        Notes
        -----
        Plots the distribution of a defined random input variable. The PDPLOT
        command generates a probability density function plot as well as a
        cumulative distribution function plot of the random variable. The
        probabilities PLOW and PUP are used to determine the plot range of the
        random input variable values. To do this, the probabilities are
        converted into random input variable values using the inverse
        cumulative distribution function of the random input variable as shown
        in the following illustration.

        Using the probabilities ensures that the boundaries are always feasible
        and meaningful for the random input variable regardless of its
        distribution type.

         If PLOW is left blank, then a minimum value of the distribution is
        used for plotting, provided it exists (for example, uniform
        distribution). If the distribution type has no minimum value (for
        example, a Gaussian distribution) then the default value is used to
        determine the lower plotting range value. The same applies for the
        maximum value, if  PUP is left blank.
        """
        command = "PDPLOT,%s,%s,%s" % (str(name), str(plow), str(pup))
        return self.run(command, **kwargs)

    
    def showdisp(self, dname="", ncpl="", **kwargs):
        """APDL Command: /SHOWDISP

        Defines the display driver name.

        Parameters
        ----------
        dname
            Valid driver name (see Getting Started with Graphics in the Basic
            Analysis Guide for details):

            <device name> - Any linked terminal driver (such as X11, TEKTRONIX, etc.)

            HPGL - Hewlett-Packard Graphics Language

            HPGL2 - Hewlett-Packard Graphics Language with enhanced
                    color.  (See the HPGL command for options.)
                    Ignores the NCPL field.

            INTERLEAF - Interleaf ASCII Format, OPS Version 5.0

            POSTSCRIPT - PostScript, Version 1.0 Minimally Conforming

            DUMP - ASCII Text Dump

        ncpl
            Number of color planes (4 to 8).  Default is device-dependent.
        """
        return self.run(f"/SHOWDISP,{dname},,,{ncpl}", **kwargs)

    def pstres(self, key="", **kwargs):
        """APDL Command: PSTRES

        Specifies whether prestress effects are calculated or included.

        Parameters
        ----------
        key
            Prestress key:

            OFF - Do not calculate (or include) prestress effects (default).

            ON - Calculate (or include) prestress effects.

        Notes
        -----
        The PSTRES command specifies whether or not prestress effects are to be
        calculated or included. The command should be issued after the ANTYPE
        command.

        Prestress effects are calculated in a static or transient analysis for
        inclusion in a buckling, modal, harmonic (Method = FULL), or
        substructure generation analysis. If used in the solution processor
        (/SOLU), this command is valid only within the first load step.

        If you apply thermal body forces during a static analysis to calculate
        prestress effects, do not delete the forces during any subsequent full
        harmonic analyses. If you delete the thermal body forces, the thermal
        prestress effects will not be included in the harmonic analysis.
        Temperature loads used to define the thermal prestress will also be
        used in the full harmonic analysis as sinusoidally time-varying
        temperature loads.

        A prestress effect applied with non-follower loads resists rigid body
        rotation of the model. For example, an unsupported beam with axial
        tensile forces applied to both ends will have two nonzero rotational
        rigid body modes.

        If tabular loading (*DIM,,TABLE) was used in the prestress static
        analysis step, the corresponding value of TIME will be used for tabular
        evaluations in the modal analysis.

        This command is also valid in PREP7.
        """
        command = "PSTRES,%s" % (str(key))
        return self.run(command, **kwargs)

    def abextract(self, mode1="", mode2="", **kwargs):
        """APDL Command: ABEXTRACT

        Extracts the alpha-beta damping multipliers for Rayleigh damping.

        Parameters
        ----------
        mode1
            First mode number.

        mode2
            Second mode number.

        Notes
        -----
        ABEXTRACT calls the command macro DMPEXT to extract the damping ratio
        of MODE1 and MODE2 and then computes the Alpha and Beta damping
        multipliers for use in a subsequent structural harmonic or transient
        analysis. See Damping in the Structural Analysis Guide for more
        information on the alpha and beta damping multipliers. The damping
        multipliers are stored in parameters ALPHADMP and BETADMP and can be
        applied using the ALPHAD and BETAD commands. Before calling ABEXTRACT,
        you must issue RMFLVEC to extract the modal displacements. In addition,
        a node component FLUN must exist from all FLUID136 nodes. See
        Introduction for more information on thin film analyses.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "ABEXTRACT,%s,%s" % (str(mode1), str(mode2))
        return self.run(command, **kwargs)

    
    
    def cutcontrol(self, lab="", value="", option="", **kwargs):
        """APDL Command: CUTCONTROL

        Controls time-step cutback during a nonlinear solution.

        Parameters
        ----------
        lab
            Specifies the criteria for causing a cutback.  Valid labels are:

            PLSLIMIT  - Maximum equivalent plastic strain allowed within a time-step (substep).  If the
                        calculated value exceeds the VALUE, the program
                        performs a cutback (bisection).  VALUE defaults to 0.15
                        (15%).

            CRPLIMIT  - Set values for calculating the maximum equivalent creep ratio allowed within a
                        time step. If the calculated maximum creep ratio
                        exceeds the defined creep ratio limit, the program
                        performs a cutback.

            DSPLIMIT  - Maximum incremental displacement within the solution field in a time step
                        (substep).  If the maximum calculated value exceeds
                        VALUE, the program performs a cutback (bisection).
                        VALUE defaults to 1.0 x 107.

            NPOINT  - Number of points in a cycle for a second order dynamic equation, used to
                      control automatic time stepping.  If the number of
                      solution points per cycle is less than VALUE, the program
                      performs a cutback in time step size. VALUE defaults to
                      13 for linear analysis, 5 for nonlinear analysis. A
                      larger number of points yields a more accurate solution
                      but also increases the solution run time.

            This option works well for linear problems. For nonlinear analyses, other factors such as contact status changes and solution convergence rate can overwrite NPOINT. See Automatic Time Stepping in the Mechanical APDL Theory Reference for more information on automatic time stepping. - NOITERPREDICT 

            If VALUE is 0 (default), an internal auto time step scheme will predict the number of iterations for nonlinear convergence and perform a cutback earlier than the number of iterations specified by the NEQIT command. This is the recommended option. If VALUE is 1, the solution will iterate (if nonconvergent) to NEQIT number of iterations before a cutback is invoked. It is sometimes useful for poorly-convergent problems, but rarely needed in general. - Bisection is also controlled by contact status change, plasticity or creep
                              strain limit, and other factors. If any of these
                              factors occur, bisection will still take place,
                              regardless of the NOITERPREDICT setting.

            CUTBACKFACTOR  - Changes the cutback value for bisection. Default is 0.5. VALUE must be greater
                             than 0.0 and less than 1.0. This option is active
                             only if AUTOTS,ON is set.

        value
            Numeric value for the specified cutback criterion. For Lab =
            CRPLIMIT, VALUE is the creep criteria for the creep ratio limit.

        option
            Type of creep analysis. Valid for Lab = CRPLIMIT only.

            IMPRATIO  - Set the maximum creep ratio value for implicit creep. The default is 0.0 (i.e.,
                        no creep limit control) and any positive value is
                        valid. (See Implicit Creep Procedure in the Structural
                        Analysis Guide for information on how to define
                        implicit creep.)

            EXPRATIO   - Set the maximum creep ratio value for explicit creep. The default value is 0.1
                         and any positive value up to 0.25 is allowed. (See
                         Explicit Creep Procedure in the Structural Analysis
                         Guide for information on how to define explicit
                         creep.)

            STSLIMIT   - Stress threshold for calculating the creep ratio. For integration points with
                         effective stress below this threshold, the creep ratio
                         does not cause cutback. The default value is 0.0 and
                         any positive value is valid.

            STNLIMIT   - Elastic strain threshold for calculating the creep ratio. For integration
                         points with effective elastic strain below this
                         threshold, the creep ratio does not cause cutback. The
                         default value is 0.0 and any positive value is valid.

        Notes
        -----
        A cutback is a method for automatically reducing the step size when
        either the solution error is too large or the solution encounters
        convergence difficulties during a nonlinear analysis.

        Should a convergence failure occur, the program reduces the time step
        interval to a fraction of its previous size and automatically continues
        the solution from the last successfully converged time step. If the
        reduced time step again fails to converge, the program again reduces
        the time step size and proceeds with the solution. This process
        continues until convergence is achieved or the minimum specified time
        step value is reached.

        For creep analysis, the cutback procedure is similar; the process
        continues until the minimum specified time step size is reached.
        However, if the creep ratio limit is exceeded, the program issues a
        warning but continues the substep until the analysis is complete. In
        this case, convergence is achieved but the creep ratio criteria is not
        satisfied.

        The CRPLIM command is functionally equivalent to Lab = CRPLIMIT with
        options IMPRATIO and EXPRATIO
        """
        command = "CUTCONTROL,%s,%s,%s" % (str(lab), str(value), str(option))
        return self.run(command, **kwargs)

    def gmface(self, lab="", n="", **kwargs):
        """APDL Command: GMFACE

        Specifies the facet representation used to form solid models.

        Parameters
        ----------
        lab
            Valid Labels:

            FINE - Value that determines how coarse the facets will be.

        n
            An integer value between one (small) and ten (large) that
            determines the tolerances that will be applied to the creation of
            arcs and surfaces. Ten will create many facets, which may in turn
            cause ANSYS to run very slowly. One will create fewer facets, which
            may in turn cause larger tolerance errors.
        """
        command = "GMFACE,%s,%s" % (str(lab), str(n))
        return self.run(command, **kwargs)

    
    def polygon(self, nvert="", x1="", y1="", x2="", y2="", x3="", y3="",
                x4="", y4="", **kwargs):
        """APDL Command: /POLYGON

        Creates annotation polygons (GUI).

        Parameters
        ----------
        nvert
            Number of vertices of polygon (3  NVERT   8).  Use /PMORE for
            polygons with more than 4 vertices.

        x1
            X location for vertex 1 of polygon (-1.0 < X < 2.0).

        y1
            Y location for vertex 1 of polygon (-1.0 < Y < 1.0).

        x2
            X location for vertex 2 of polygon (-1.0 < X < 2.0).

        y2
            Y location for vertex 2 of polygon (-1.0 < Y < 1.0).

        x3
            X location for vertex 3 of polygon (-1.0 < X < 2.0).

        y3
            Y location for vertex 3 of polygon (-1.0 < Y < 1.0).

        x4
            X location for vertex 4 of polygon (-1.0 < X < 2.0).

        y4
            Y location for vertex 4 of polygon (-1.0 < Y < 1.0).

        Notes
        -----
        Creates annotation polygons to be written directly onto the display at
        a specified location.  This is a command generated by the Graphical
        User Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All polygons are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC and the /PSPEC command to set
        the attributes of the polygon.  Use the /PMORE command to define the
        5th through 8th vertices of the polygon.

        This command is valid in any processor.
        """
        command = "/POLYGON,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(nvert), str(x1), str(y1), str(x2), str(y2), str(x3), str(y3), str(x4), str(y4))
        return self.run(command, **kwargs)

    
    def remesh(self, action="", filename="", ext="", opt1="", opt2="",
               **kwargs):
        """APDL Command: REMESH

        Specifies the starting and ending remeshing points, and other options,
        for rezoning.

        Parameters
        ----------
        action
            START

            START - Starts the remeshing operation.

            FINISH - Ends the remeshing operation.

            READ - Reads in a generic (.cdb format) new mesh file generated by a third-party
                   application. This remeshing option applies to both 2-D and
                   3-D rezoning.

            SPLIT - Splits selected elements of an existing 2-D or 3-D mesh such that a
                    quadrilateral element is split into four quadrilaterals, a
                    degenerate quadrilateral is split into three
                    quadrilaterals, and a quadratic triangular element is split
                    into four quadratic triangles.  A tetrahedral element is
                    split into eight tetrahedra.

        filename
            Name of a .cdb generic mesh file. The default value is jobname.
            Valid only when Action = READ.

        ext
            File name extension. The only valid (and the default) extension is
            CDB. Valid only when Action = READ.

        opt1
            Specifies options for the new mesh when using a generic imported
            mesh file or the mesh-splitting remeshing method. Valid only when
            Action = READ or Action = SPLIT.

            REGE - Regenerates all node and element numbers on the new
                    mesh using an offset of the highest existing node
                    and element numbers. This is the default behavior
                    when Action = READ; otherwise, this value is
                    ignored.

            KEEP - Keeps the similarly numbered nodes and elements in
                    the new and the old meshes unchanged. Valid only
                    when Action = READ.

            TRAN - Generates transition elements to ensure nodal
                    compatibility between split and unsplit parts of
                    the mesh. Valid only when Action = SPLIT for 2-D
                    analyses.

        opt2
            Specifies transition options for the mesh when elements are split.
            These options are valid only when Action = SPLIT for 2-D analyses.

            QUAD  - Minimizes the number of degenerate elements in the transition mesh and tries to
                    maximize the number of quadrilateral transition elements
                    across several layers of elements from the split regions.
                    This is the default behavior.

            DEGE  - Creates transition zones between the split and unsplit parts of the mesh using
                    mostly degenerate elements with a single element layer.

        Notes
        -----
        The REMESH command is valid only during the rezoning (REZONE) process.

        In rezoning, a REMESH,START command temporarily exits the /SOLU
        solution processor and enters a special mode of the /PREP7
        preprocessor, after which a limited number of preprocessing commands
        are available for mesh control, but no solution commands are valid.

        A REMESH,FINISH command exits the remeshing process and reenters the
        solution processor, at which point no preprocessing commands are
        available. If the new mesh exists, the command creates contact elements
        if needed, and transfers all boundary conditions (BCs) and loads from
        the original mesh to the new mesh. You can issue any list or plot
        command to verify the created contact elements, transferred BCs, and
        loads. A REMESH,FINISH command is valid only after a previously issued
        REMESH,START command, and is the only way to safely end the remeshing
        operation (and exit the special mode of the /PREP7 preprocessor).

        A REMESH,READ command is valid only when you want to perform a rezoning
        operation using a generic new mesh generated by a third-party
        application (rather than a new mesh generated internally by the ANSYS
        program). The command is valid between REMESH,START and REMESH,FINISH
        commands. In this case, the only valid file extension is .cdb (Ext =
        CDB). When Option = KEEP, ANSYS assumes that the common node and
        element numbers between the old and the new mesh are topologically
        similar (that is, these commonly numbered areas have the same element
        connectivity and nodal coordinates).

        A REMESH,SPLIT command is valid only when you wish to perform a
        rezoning operation by splitting the existing mesh. The command is valid
        between REMESH,START and REMESH,FINISH commands.

        You can use REMESH,READ and REMESH,SPLIT commands for horizontal
        multiple rezoning provided that the meshes used in REMESH,READ do not
        intersect. (ANSYS recommends against issuing an AREMESH command after
        issuing either of these commands.)

        For more detailed about the remeshing options available to you during a
        rezoning operation, see Rezoning in the Advanced Analysis Guide.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        return self.run(f"REMESH,{action},{filename},{ext},,{opt1},{opt2}", **kwargs)

    def gcmd(self, wn="", lab1="", lab2="", lab3="", lab4="", lab5="", lab6="",
             lab7="", lab8="", lab9="", lab10="", lab11="", lab12="",
             **kwargs):
        """APDL Command: /GCMD

        Controls the type of element or graph display used for the GPLOT
        command.

        Parameters
        ----------
        wn
            Window number (or ALL) to which this command applies (defaults to
            1)

        lab1, lab2, lab3, . . . , lab12
            Command labels (for example, PLNSOL,S,X)

        Notes
        -----
        This command controls the type of element or graph display that appears
        when you issue the GPLOT command when the /GTYPE,,(ELEM or GRPH) entity
        type is active.  If you have multiple plotting windows enabled, you can
        also use /GCMD to select one window when you wish to edit its contents.

        For related information, see the descriptions of the GPLOT and /GTYPE
        commands in this manual.

        This command is valid in any processor.
        """
        command = "/GCMD,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(wn), str(lab1), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6), str(lab7), str(lab8), str(lab9), str(lab10), str(lab11), str(lab12))
        return self.run(command, **kwargs)

    def psdfrq(self, tblno1="", tblno2="", freq1="", freq2="", freq3="",
               freq4="", freq5="", freq6="", freq7="", **kwargs):
        """APDL Command: PSDFRQ

        Defines the frequency points for the input spectrum tables PSDVAL vs.
        PSDFRQ for PSD analysis.

        Parameters
        ----------
        tblno1
            Input table number.  When used with the COVAL or the QDVAL command,
            TBLNO1 represents the row number of this table. Up to 200 tables
            may be defined.

        tblno2
            Input table number.  TBLNO2 is used only for the COVAL or the QDVAL
            commands and represents the column number of this table.

        freq1, freq2, freq3, . . . , freq7
            Frequency points (cycles/time) for spectrum vs. frequency tables.
            FREQ1 should be greater than zero, and values must be in ascending
            order.  Log-log interpolation will be used between frequency
            points.

        Notes
        -----
        The spectrum values may be input with the PSDVAL, COVAL , or QDVAL
        commands.  A separate PSDFRQ command must be used for each table and
        cross table defined.  Frequencies must be in ascending order.

        Repeat PSDFRQ command for additional frequency points.  Values are
        added after the last nonzero frequency.  If all fields after PSDFRQ are
        blank, all input vs. frequency tables are erased.  If TBLNO1 is
        nonblank, all corresponding PSDVAL tables are erased.  If both TBLNO1
        and TBLNO2 are nonblank,  all corresponding COVAL and QDVAL tables are
        erased.

        This command is also valid in PREP7.
        """
        command = "PSDFRQ,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno1), str(tblno2), str(freq1), str(freq2), str(freq3), str(freq4), str(freq5), str(freq6), str(freq7))
        return self.run(command, **kwargs)

    def gauge(self, opt="", freq="", **kwargs):
        """APDL Command: GAUGE

        Gauges the problem domain for a magnetic edge-element formulation.

        Parameters
        ----------
        opt
            Type of gauging to be performed:

            ON - Perform tree gauging of the edge values (default).

            OFF - Gauging is off. (You must specify custom gauging via APDL specifications.)

            STAT - Gauging status (returns the current Opt and FREQ values)

        freq
            The following options are valid when Opt = ON:

            0 - Generate tree-gauging information once, at the first load step. Gauging data is
                retained for subsequent load steps. (This behavior is the
                default.)

            1 - Repeat gauging for each load step. Rewrites the gauging information at each
                load step to accommodate changing boundary conditions on the AZ
                degree of freedom (for example, adding or deleting AZ
                constraints via the D or CE commands).

        Notes
        -----
        The GAUGE command controls the tree-gauging procedure required for
        electromagnetic analyses using an edge-based magnetic formulation
        (elements SOLID236 and SOLID237).

        Gauging occurs at the solver level for each solution (SOLVE). It sets
        additional zero constraints on the edge-flux degrees of freedom AZ to
        produce a unique solution; the additional constraints are removed after
        solution.

        Use the FREQ option to specify how the command generates gauging
        information for multiple load steps.

        Access the gauging information via the _TGAUGE component of gauged
        nodes. The program creates and uses this component internally to remove
        and reapply the AZ constraints required by gauging. If FREQ = 0, the
        _TGAUGE component is created at the first load step and is used to
        reapply the tree gauge constraints at subsequent load steps. If FREQ =
        1, the tree-gauging information and the _TGAUGE component are generated
        at every load step

        If gauging is turned off (GAUGE,OFF), you must specify your own gauging
        at the APDL level.

        This command is also valid in PREP7.
        """
        command = "GAUGE,%s,%s" % (str(opt), str(freq))
        return self.run(command, **kwargs)

    
    def mfbucket(self, key="", value="", **kwargs):
        """APDL Command: MFBUCKET

        Turns a bucket search on or off.

        Parameters
        ----------
        key
            Bucket search key:

            ON - Activates a bucket search (default).

            OFF - Deactivates a bucket search. A global search is then activated.

        value
            Scaling factor (%) used to determine the number of buckets for a
            bucket search. Defaults to 50%.

        Notes
        -----
        A bucket search will more efficiently compute the mapping of surface
        and volumetric interpolation data across field interfaces (flagged by
        the FSIN label using SF, SFA, SFE, or SFL or the FVIN label using BFE).

        The number of buckets used to partition a flagged interface is equal to
        the scaling factor (%) times the total number of interface elements.
        For example, for the default scaling factor of 50% and a 10,000 element
        interface, 5,000 buckets are used.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFBUCKET,%s,%s" % (str(key), str(value))
        return self.run(command, **kwargs)

    def sucr(self, surfname="", surftype="", nrefine="", radius="", tolout="",
             **kwargs):
        """APDL Command: SUCR

        Create a surface.

        Parameters
        ----------
        surfname
            Eight character surface name.

        surftype
            Surface type.

            CPLANE - Surface is defined by the cutting plane in window one (controlled by the
                     working plane (/CPLANE,1), NOT the view settings
                     (/CPLANE,0)).

            SPHERE - Surface is defined by a spherical surface centered about the working plane
                     origin.

            INFC - Surface is defined by a cylindrical surface centered about the working plane
                   origin and extending indefinitely in the positive and
                   negative Z directions.

        nrefine
            Refinement level.

            For SurfType = CPLANE -  The refinement level of the surface "mesh". This will be an integer between 0
                              and 3 (default = 0). See Notes below.

            For SurfType = SPHERE - The number of divisions along a 90° arc (minimum = 9). The default is 9.

            For SurfType = INFC - The number of divisions along a 90° arc (minimum = 9). The default is 9.

        radius
            Appropriate radius value (for INFC or SPHERE).

        tolout
            Tolerance value for inclusion of element facets within a prescribed
            volume. (for INFC)

        Notes
        -----
        This command creates a new surface and stores the following data for
        that surface:

        For SurfType = CPLANE, nRefine refers to the number of points that
        define the surface. An nRefine value of zero is used for points where
        the element face intersects the cutting plane.

        If SurfType = CPLANE and nRefine = 0, the points reside at the section
        cuts where the element intersects the cutting plane. Increasing nRefine
        from 0 to 1 will subdivide each surface facet into 4 subfacets, and
        increase the number of points at which results can be interpolated.

        For SurfType = CPLANE , the setting from the /EFACET command will
        affect the creation of surface facets and the quality of the fit of the
        surface in the model.  SUCR employs geometry data from PowerGraphics to
        aid in determining where the surface intersects the model.  If
        /EFACET,1 is in effect when the SUCR command is issued, then the
        curvature of high order elements (that is, elements with midside nodes)
        will be ignored.  If your model contains high order elements, you can
        see a better fit for your surface if /EFACET,2 is in effect when the
        SUCR command is issued.  Currently, the SUCR command interprets
        /EFACET,4 to mean /EFACET,2.

        For SurfType = INFC, a default tolerance of 0.01 will be applied to
        include the vertices of any facets that fall out of the cylinder
        definition. This tolerance increases the facet size by one percent to
        check for inclusion. Excluding facets under such a small tolerance may
        yield unacceptable (aesthetically) results. Increasing the tolerance by
        a larger amount (0.1 or 10%) will sometimes yield smother edges along
        the surface you create.
        """
        command = "SUCR,%s,%s,%s,%s,%s" % (str(surfname), str(surftype), str(nrefine), str(radius), str(tolout))
        return self.run(command, **kwargs)

    
    def desol(self, elem="", node="", item="", comp="", v1="", v2="", v3="",
              v4="", v5="", v6="", **kwargs):
        """APDL Command: DESOL

        Defines or modifies solution results at a node of an element.

        Parameters
        ----------
        elem
            Element number for which results are defined or modified.  If ALL,
            apply to all selected elements [ESEL].

        node
            Node of element (actual node number, not the position) to which
            results are specified.  If ALL, specify results for all selected
            nodes [NSEL] of element.  If NODE = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component name may also be substituted for NODE.

        item
            Label identifying results.  Valid item labels are shown in
            Table 129: DESOL - Valid Item and Component Labels below.  Some
            items also require a component label (Comp).

        comp
            Component of the item (if required); see Table 129: DESOL - Valid
            Item and Component Labels.

        v1
            Value (in the element coordinate system) assigned to the database
            item (and component, if any).  If zero, a zero value will be
            assigned.  If blank, value remains unchanged.

        v2, v3, v4, . . . , v6
            Additional values (if any) assigned to the remaining components (in
            the order corresponding to the Comp list shown below) for the
            specified Item (starting from the specified Comp label and
            proceeding to the right).

        Notes
        -----
        The DESOL command defines or modifies solution results in the database
        at a node of an area or volume element.  For example,
        DESOL,35,50,S,X,1000,2000,1000 assigns values 1000, 2000, and 1000 to
        SX, SY, and SZ (respectively) of node 50 of element 35.

        The settings of the POST1 FORCE, SHELL, and LAYER commands, if
        applicable, further specify which database items are affected.

        For layered composite shells, specify the current element layer (LAYER)
        before issuing the DESOL command.

        All data is stored in the solution coordinate system but is displayed
        in the results coordinate system (RSYS). To list the current results,
        use the PRESOL command.

        Modified solution results are not saved automatically. To save separate
        records of modified results, use either the RAPPND or LCWRITE command.

        Result items are available depending on element type; check the
        individual element for availability. Valid item and component labels
        for element results are:

        Table: 129:: : DESOL - Valid Item and Component Labels
        """
        command = "DESOL,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(elem), str(node), str(item), str(comp), str(v1), str(v2), str(v3), str(v4), str(v5), str(v6))
        return self.run(command, **kwargs)

    
    def presol(self, item="", comp="", **kwargs):
        """APDL Command: PRESOL

        Prints the solution results for elements.

        Parameters
        ----------
        item
            Label identifying the item.  Valid item labels are shown in
            Table 224: PRESOL - Valid Item and Component Labels for Element
            Results below.  Some items also require a component label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in Table 224: PRESOL - Valid Item and Component Labels for
            Element Results below.

        Notes
        -----
        Prints the solution results for the selected elements in the sorted
        sequence.  For example, PRESOL,S prints the stress items SX, SY, SZ,
        SXY, SYZ, and SXZ for the node locations of the element.  Component
        results are in the global Cartesian coordinate directions unless
        transformed (RSYS).

        Shell elements print values at the top, then bottom of the element (or
        layer). If KEYOPT(8) = 2 (for SHELL181, SHELL208, SHELL209, SHELL281,
        or ELBOW290), the results are printed in the order TOP, BOT and then
        MID of each element, (or layer). The MID value will be the actual value
        as written to the results file.

        Items are listed as columns of a table versus element number.  An
        exception occurs for item ELEM which uses an element format (all
        applicable line element results are listed per element) instead of a
        tabular format.

        The FORCE command can be used to define which component of the nodal
        load is to be used (static, damping, inertia, or total).  See the
        ETABLE and PRETAB commands for printing items not available through
        this command (such as line element results).

        For PowerGraphics [/GRAPHICS,POWER], results are listed only for the
        element surface.  The items marked with [1] are not supported  by
        PowerGraphics.

        Table: 224:: : PRESOL - Valid Item and Component Labels for Element
        Results

        Failure criteria for virgin material [1][2].

        Default components: Maximum of all failure criteria defined at current
        location (MAX), maximum strain (EMAX), maximum stress (SMAX), Tsai-Wu
        Strength Index (TWSI), inverse of Tsai-Wu Strength Ratio Index (TWSR).

        Other available components: Hashin Fiber Failure (HFIB), Hashin Matrix
        Failure (HMAT), Puck Fiber Failure (PFIB), Puck Matrix Failure (PMAT),
        LaRc03 Fiber Failure (L3FB),  LaRc03 Matrix Failure (L3MT), LaRc04
        Fiber Failure (L4FB), LaRc04 Matrix Failure (L4MT), and any user-
        defined failure criteria (USR1 through USR9) [4].

        Issue the FCTYP command to activate or remove failure criteria.

        Failure criteria based on the effective stresses in the damaged
        material.

        Components: Maximum of all failure criteria defined at current location
        (MAX), fiber tensile failure (FT), fiber compressive failure (FC),
        matrix tensile failure (MT), and matrix compressive (MC).

        Progressive damage parameters.

        Components: Damage status (STAT, 0 - undamaged, 1 - damaged, 2 -
        complete damage), fiber tensile damage variable (FT), fiber compressive
        damage variable (FC), matrix tensile damage variable (MT), matrix
        compressive damage variable (MC), shear damage variable (S),  energy
        dissipated per unit volume (SED), energy per unit volume due to viscous
        damping (SEDV).
        """
        command = "PRESOL,%s,%s" % (str(item), str(comp))
        return self.run(command, **kwargs)

    def dl(self, line="", area="", lab="", value1="", value2="", **kwargs):
        """APDL Command: DL

        Defines DOF constraints on lines.

        Parameters
        ----------
        line
            Line at which constraints are to be specified. If ALL, apply to all
            selected lines [LSEL]. If LINE = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI). A component name may also be substituted for LINE.

        area
            Area containing line. The normal to the symmetry or antisymmetry
            surface is assumed to lie on this area. Defaults to the lowest
            numbered selected area containing the line number.

        lab
            Symmetry label (see 2):

            SYMM - Generate symmetry constraints.

            ASYM - Generate antisymmetry constraints.

        value1
            Value of DOF (real part) or table name reference on the line.
            Valid for all DOF labels.  To specify a table, enclose the table
            name in % signs (e.g., DL,LINE,AREA,TEMP,%tabname%).  Use the *DIM
            command to define a table.

        value2
            For VOLT DOFs:

        Notes
        -----
        You can transfer constraints from lines  to nodes with the  DTRAN or
        SBCTRAN commands.  See the DK command for information about generating
        other constraints at lines.

        Symmetry and antisymmetry constraints are generated as described on the
        DSYM command.

        Setting Lab = VOLT and Value1 = 0 applies the J-normal boundary
        condition (current density vector (J) flows normal to the line).  No
        input is required for the J-parallel condition because it is the
        natural boundary condition.

        Tabular boundary conditions (Value1 = %tabname%) are available only for
        the following degree of freedom labels: Electric (VOLT), Structural
        (UX, UY, UZ, ROTX, ROTY, ROTZ), Acoustic (PRES, UX, UY, UZ), and
        temperature (TEMP, TBOT, TE2, TE3, . . ., TTOP).

        Constraints specified by the DL command can conflict with other
        specified constraints.  See Resolution of Conflicting Constraint
        Specifications in the Basic Analysis Guide for details.

        This command is also valid in PREP7.
        """
        command = "DL,%s,%s,%s,%s,%s" % (str(line), str(area), str(lab), str(value1), str(value2))
        return self.run(command, **kwargs)

    def master(self, **kwargs):
        """APDL Command: MASTER

        Specifies "Master DOF" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "MASTER,"
        return self.run(command, **kwargs)

    def plvect(self, item="", lab2="", lab3="", labp="", mode="", loc="",
               edge="", kund="", **kwargs):
        """APDL Command: PLVECT

        Displays results as vectors.

        Parameters
        ----------
        item
            Predefined vector item (from Table 223: PLVECT - Valid Item Labels
            below) or a label identifying the i-component of a user-defined
            vector.

        lab2
            Label identifying the j-component of a user-defined vector. In most
            cases, this value must be blank if Item is selected from
            Table 223: PLVECT - Valid Item Labels. Individual principal
            stresses (Item = S) or principal strains (Item = EPxx) may be
            plotted by specifying the value as 1, 2, or 3.

        lab3
            Label identifying the k-component of a user-defined vector.  Must
            be blank if Item is selected from list below or for 2-D user
            defined vector.

        labp
            Label assigned to resultant vector for display labeling (defaults
            to Item).

        mode
            Vector or raster mode override key:

            (blank) - Use the setting of KEY on the /DEVICE command.

            RAST - Use raster mode for PLVECT displays.

            VECT - Use vector mode for PLVECT displays.

        loc
            Vector location for display of field element results:

            ELEM - Display at element centroid (default).

            NODE - Display at element nodes.

        edge
            Edge display override key:

            (blank) - Use the setting of Key on the /EDGE  command.

            OFF - Deactivate the edge display.

            ON - Activate the edge display.

        kund
            Undisplaced shape key:

            0 - Display vectors on undeformed mesh or geometry.

            1 - Display vectors on deformed mesh or geometry.

        Notes
        -----
        Displays various solution results as vectors (arrows) for the selected
        nodes and/or elements (elements must contain at least three nodes that
        are not colinear).  For example, PLVECT,U displays the displacement
        vector for all selected nodes.  For section displays [/TYPE], the
        vectors are shown only on the section face (i.e., cutting plane).  The
        PLVECT display of principal strains and stresses  (Item = S, EPTO,
        EPEL, EPPL, EPCR, or EPTH) on a "cut" of the model (/TYPE,,1 ,5,7,8, or
        9) is not supported.  The resulting plot displays the vectors on all
        selected elements, not on just the sliced surface.  See the /VSCALE
        command to scale vector lengths. Vector magnitudes may be shown as a
        contour display with the PLNSOL command.  Various results also depend
        upon the recalculation method and the selected results location [LAYER,
        SHELL, and NSEL].

        Items may be selected from a set of recognized vector labels (Item) or
        a vector may be defined from up to three scalar labels
        (Item,Lab2,Lab3).  Scalar labels may be user-defined with the ETABLE
        command.  The vectors appear on an element display as arrows showing
        the relative magnitude of the vector and its direction.  The predefined
        items will be shown either at the node or at the element centroid,
        depending on what item is being displayed and depending on the Loc
        setting.  User defined ETABLE items will be shown at the element
        centroid, regardless of the Loc setting. Stress vectors appear as
        arrows at the element centroid, with the arrowheads pointing away from
        each other for tension and toward each other for compression.

        For PowerGraphics, vector arrow displays are generated in Global
        Cartesian (RSYS = 0). All subsequent displays will revert to your
        original coordinate system.

        When vector mode is active (Mode = VECT), use the Z-buffered display
        type [/TYPE,,6] to maximize speed of PLVECT plots  (other hidden
        display types may make plotting slow). For PowerGraphics
        [/GRAPHICS,POWER], the items marked with [1] are not supported  by
        PowerGraphics.

        It is possible to plot principal stresses (Item = S) or principal
        strains (Item = EPxx) individually. To do so, specify a Lab2 value of
        1, 2, or 3. For example, the following are valid commands:

        Table: 223:: : PLVECT - Valid Item Labels

        Not supported by PowerGraphics
        """
        command = "PLVECT,%s,%s,%s,%s,%s,%s,%s,%s" % (str(item), str(lab2), str(lab3), str(labp), str(mode), str(loc), str(edge), str(kund))
        return self.run(command, **kwargs)

    def sptopt(self, **kwargs):
        """APDL Command: SPTOPT

        Specifies "Spectrum analysis options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SPTOPT,"
        return self.run(command, **kwargs)

    
    def wrk(self, num="", **kwargs):
        """APDL Command: *WRK

        Sets the active workspace number.

        Parameters
        ----------
        num
            Number of the active memory workspace for APDLMath vector and
            matrices. All the following APDLMath vectors and matrices will
            belong to this memory workspace, until the next call to the *WRK
            command. By default, all the APDLMath objects belong to workspace
            number 1.

        Notes
        -----
        This feature enables you to associate a set of vector and matrices in a
        given memory workspace, so that you can easily manage the free step:

        This feature can be useful to free all the temporary APDLMath variables
        inside a MACRO in one call.
        """
        command = "*WRK,%s" % (str(num))
        return self.run(command, **kwargs)

    
    
    def pcalc(self, oper="", labr="", lab1="", lab2="", fact1="", fact2="",
              const="", **kwargs):
        """APDL Command: PCALC

        Forms additional labeled path items by operating on existing path
        items.

        Parameters
        ----------
        oper
            Type of operation to be performed.  See "Notes" below for specific
            descriptions of each operation:

            ADD - Adds two existing path items.

            MULT - Multiplies two existing path items.

            DIV - Divides two existing path items (a divide by zero results in a value of zero).

            EXP - Exponentiates and adds existing path items.

            DERI - Finds a derivative.

            INTG - Finds an integral.

            SIN - Sine.

            COS - Cosine.

            ASIN - Arcsine.

            ACOS - Arccosine.

            LOG - Natural log.

        labr
            Label assigned to the resulting path item.

        lab1
            First labeled path item in operation.

        lab2
            Second labeled path item in operation.  Lab2 must not be blank for
            the MULT, DIV, DERI, and INTG operations.

        fact1
            Factor applied to Lab1. A (blank) or '0' entry defaults to 1.0.

        fact2
            Factor applied to Lab2. A (blank) or '0' entry defaults to 1.0.

        const
            Constant value (defaults to 0.0).

        Notes
        -----
        If Oper = ADD, the command format is:

        PCALC,ADD,LabR,Lab1,Lab2,FACT1,FACT2,CONST

        This operation adds two existing path items according to the operation:

        LabR = (FACT1   x Lab1) + (FACT2 x Lab2) + CONST

        It may be used to scale the results for a single path item.

        If Oper = MULT, the command format is:

        PCALC,MULT,LabR,Lab1,Lab2,FACT1

        Lab2 must not be blank.  This operation multiplies two existing path
        items according to the operation:

        LabR = Lab1 x Lab2 x FACT1

        If Oper = DIV, the command format is:

        PCALC,DIV,LabR,Lab1,Lab2,FACT1

        Lab2 must not be blank.  This operation divides two existing path items
        according to the operation:

        LabR = (Lab1/Lab2) x FACT1

        If Oper = EXP, the command format is:

        PCALC,EXP,LabR,Lab1,Lab2,FACT1,FACT2

        This operation exponentiates and adds existing path items according to
        the operation:

        LabR = (|Lab1|FACT1) + (|Lab2|FACT2|)

        If Oper = DERI, the command format is:

        PCALC,DERI,LabR,Lab1,Lab2,FACT1

        Lab2 must not be blank.  This operation finds a derivative according to
        the operation:

        LabR = FACT1 x d(Lab1)/d(Lab2)

        If Oper = INTG, the command format is:

        PCALC,INTG,LabR,Lab1,Lab2,FACT1

        Lab2 must not be blank.  This operation finds an integral according to
        the operation:

        Use S for Lab2 to integrate Lab1 with respect to the path length.  S,
        the distance along the path, is automatically calculated by the program
        when a path item is created with the PDEF command.

        If Oper = SIN, COS, ASIN, ACOS, or LOG, the command format is:

        PCALC,Oper,LabR,Lab1,,FACT1,CONST

        where the function (SIN, COS, ASIN, ACOS or LOG) is substituted for
        Oper and Lab2 is blank.

        The operation finds the resulting path item according to one of the
        following formulas:

        LabR = FACT2 x sin(FACT1 x Lab1) + CONST

        LabR = FACT2 x cos(FACT1 x Lab1) + CONST

        LabR = FACT2 x sin-1(FACT1 x Lab1) + CONST

        LabR = FACT2 x cos-1(FACT1 x Lab1) + CONST

        LabR = FACT2 x log(FACT1 x Lab1) + CONST
        """
        command = "PCALC,%s,%s,%s,%s,%s,%s,%s" % (str(oper), str(labr), str(lab1), str(lab2), str(fact1), str(fact2), str(const))
        return self.run(command, **kwargs)

    def rappnd(self, lstep="", time="", **kwargs):
        """APDL Command: RAPPND

        Appends results data from the database to the results file.

        Parameters
        ----------
        lstep
            Load step number to be assigned to the results data set.  If it is
            the same as an existing load step number on the results file, the
            appended load step will be inaccessible.  Defaults to 1.

        time
            Time value to be assigned to the results data set.  Defaults to
            0.0.  A time value greater than the last load step should be used.

        Notes
        -----
        This command is typically used to append the results from a load case
        combination to the results file.  See the LCWRITE command to create a
        separate load case file.  Only summable and constant data are written
        to the results file by default; non-summable data are not written
        unless requested (LCSUM command). RAPPND should not be used to append
        results from a harmonic analysis.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "RAPPND,%s,%s" % (str(lstep), str(time))
        return self.run(command, **kwargs)

    def bioopt(self, **kwargs):
        """APDL Command: BIOOPT

        Specifies "Biot-Savart options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "BIOOPT,"
        return self.run(command, **kwargs)

    def expand(self, nrepeat="", hindex="", icsys="", sctang="", phase="",
               **kwargs):
        """APDL Command: EXPAND

        Displays the results of a modal cyclic symmetry analysis.

        Parameters
        ----------
        nrepeat
            Number of sector repetitions for expansion. The default is 0 (no
            expansion).

        modal
            Specifies that the expansion is for a modal cyclic symmetry
            analysis.

        hindex
            The harmonic index ID for the results to expand.

        icsys
            The coordinate system number used in the modal cyclic symmetry
            solution. The default is the global cylindrical coordinate system
            (specified via the CSYS command where KCN = 1).

        sctang
            The sector angle in degrees, equal to 360 divided by the number of
            cyclic sectors.

        --
            This field is reserved for future use.

        phase
            The phase angle in degrees to use for the expansion. The default is
            0. Typically, the value is the peak displacement (or stress/strain)
            phase angle obtained via the CYCPHASE command.

        Notes
        -----
        Issue this command to display the results of a modal cyclic symmetry
        analysis.

        When you issue the EXPAND,Nrepeat command, subsequent SET commands read
        data from the results file and expand them to Nrepeat sectors. As long
        as no entities have been modified, this expansion can be negated (that
        is, reverted to single sector) by issuing EXPAND with no arguments. If
        you modify entities and wish to return to the partial model, use the
        Session Editor (see Restoring Database Contents in the Operations
        Guide).

        EXPAND displays the results and allows you to print them, as if for a
        full model. The harmonic index (automatically retrieved from the
        results file) appears in the legend column.

        When plotting or printing element strain energy (SENE), the EXPAND
        command works with brick or tet models only. Element kinetic energy
        (KENE) plotting or printing is not supported.

        EXPAND is a specification command valid only in POST1.  It is
        significantly different from the /CYCEXPAND command in several
        respects, (although you can use either command to display the results
        of a modal cyclic symmetry analysis):

        EXPAND has none of the limitations of the /CYCEXPAND command.

        EXPAND changes the database by modifying the geometry, the nodal
        displacements, and element stresses as they are read from the results
        file, whereas the /CYCEXPAND command does not change the database.

        Caution:: : The EXPAND command creates new nodes and elements;
        therefore, saving (or issuing the /EXIT, ALL command) after issuing the
        EXPAND command can result in large databases.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "EXPAND,%s,%s,%s,%s,%s" % (str(nrepeat), str(hindex), str(icsys), str(sctang), str(phase))
        return self.run(command, **kwargs)

    
    
    def replot(self, label="", **kwargs):
        """APDL Command: /REPLOT

        Automatically reissues the last display command for convenience.

        Parameters
        ----------
        label
            Controls the type of replot.

            RESIZE - Issued internally when a graphics window resize occurs (Default).

            FAST - Only applicable for 3-D devices that allow a fast redisplay for changes in the
                   view characteristics only.

        Notes
        -----
        Reissues the last display command (NPLOT, EPLOT, KPLOT, PLNSOL, PLVAR,
        etc.), along with its parameters, for convenience.  The current display
        specifications are used.

        When the last display command is invalid in a particular processor, the
        use of the /REPLOT command is also invalid in that processor.  However,
        if you attempt a /REPLOT and the last display command is invalid in the
        current processor, ANSYS produces an element display [EPLOT] instead,
        as long as the last display command was PLNSOL, PLESOL, or PLDISP.
        ANSYS performs this substitution of /REPLOT with EPLOT for your
        convenience.

        For example, the PLNSOL command, which is used to display solution
        results as continuous contours, is a valid command in the general
        postprocessor [/POST1].  If you issue PLNSOL followed by /REPLOT while
        in the general postprocessor, the /REPLOT command effectively reissues
        your earlier PLNSOL command, along with its parameters.  But if you
        then exit the general postprocessor, enter the preprocessor [/PREP7],
        and issue the /REPLOT command again, ANSYS internally issues EPLOT
        instead.  This occurs because PLNSOL is not a valid command in the
        preprocessor.

        When you click on one of the buttons on the  Pan, Zoom, Rotate dialog
        box to manipulate the view of a model, the /REPLOT command is issued
        internally.  Thus, the substitution of /REPLOT with EPLOT as described
        above may occur not only for the PLNSOL, PLESOL, and PLDISP results
        display commands, but also for operations that you perform with the
        Pan, Zoom, Rotate dialog box.

        /REPLOT will not show boundary conditions if they are only applied to a
        solid model and the last display command (for example, EPLOT) displays
        the finite element model. To show boundary conditions, the following
        options are available:

        Issue /REPLOT after you issue the SBCTRAN command to transfer solid
        model boundary conditions to the finite element model.

        Issue /REPLOT after you issue a solid model display command (for
        example, VPLOT).

        This command is valid in any processor (except as noted above).
        """
        command = "/REPLOT,%s" % (str(label))
        return self.run(command, **kwargs)

    
    def coriolis(self, option="", refframe="", rotdamp="", rotmass="", **kwargs):
        """APDL Command: CORIOLIS

        Applies the Coriolis effect to a rotating structure.

        Parameters
        ----------
        option : str, bool, optional
            Flag to activate or deactivate the Coriolis effect:

            ``"ON"``, ``"YES"``, or ``True`` - Activate. This value is the default.

            ``"OFF"``, ``"NO"``, or ``False`` - Deactivate.

        refframe : str, bool, optional
            Flag to activate or deactivate a stationary reference frame.

            ``"ON"``, ``"YES"``, or ``True`` - Activate.

            ``"OFF"``, ``"NO"``, or ``False`` - Deactivate. This value is the default.

        rotdamp : str, bool, optional
            Flag to activate or deactivate rotating damping effect.

            ``"ON"``, ``"YES"``, or ``True`` - Activate.

            ``"OFF"``, ``"NO"``, or ``False`` - Deactivate. This value is the default.

        rotmass : str, bool, optional
           Flag to activate or deactivate rotor mass summary printout
           (only supported for ``refframe='on'``).

           ``"ON"``, ``"YES"``, or ``True`` - Activate.

           ``"OFF"``, ``"NO"``, or ``False`` - Deactivate. This value is the default.

        Examples
        --------
        Enable the coriolis effect with a stationary reference frame.

        >>> mapdl.coriolis('ON', refframe='ON')

        Alternatively, ``coriolis`` supports bool parameters.

        >>> mapdl.coriolis(True, refframe=True)

        Notes
        -----
        The CORIOLIS command is used for analyses in either a rotating
        or a stationary reference frame, and performs differently
        according to the designated RefFrame value. Specific
        restrictions and elements apply to each case, as follows:

        ROTATING REFERENCE FRAME ``refframe=False``):

        The command applies the Coriolis effect in the following
        structural element types: MASS21, SHELL181, PLANE182,
        PLANE183, SOLID185, SOLID186, SOLID187, BEAM188, BEAM189,
        SOLSH190, SHELL281, PIPE288 and PIPE289. It also applies this
        effect in the PLANE223, SOLID226, and SOLID227 analyses with
        structural degrees of freedom.

        In a rotating reference frame, both the Coriolis and
        spin-softening effects contribute to the gyroscopic
        moment. Therefore, ANSYS applies spin-softening by default for
        dynamic analyses. If a rotational velocity is specified (OMEGA
        or CMOMEGA), centrifugal forces will be included.

        To include Coriolis effects in a large deflection prestressed
        analysis, follow the procedure for linear perturbation
        detailed in Considerations for Rotating Structures. In a
        nonlinear transient analysis (ANTYPE,TRANS and NLGEOM, ON),
        any spinning motion applied through either the IC of the D
        commands will include the Coriolis effect without having to
        issue the CORIOLIS command. Refer to Rotating Structure
        Analysis in the Advanced Analysis Guide for more information.

        STATIONARY REFERENCE FRAME ``refframe=True``):

        The command activates the gyroscopic damping matrix in the
        following structural elements: MASS21, BEAM188, SHELL181,
        BEAM189, SOLID185, SOLID186, SOLID187, SOLID272, SOLID273,
        SHELL281, PIPE288, PIPE289, and MATRIX50.

        The rotating structure must be axisymmetric about the axis of
        rotation.

        Static analysis (ANTYPE, STATIC) does not support Coriolis
        effects with a stationary reference frame. However, you can
        include the gyroscopic effects in a prestresses analysis
        follow the procedure detailed in Considerations for Rotating
        Structures.

        Rotating damping effect (RotDamp = ON) applies only for the
        stationary reference frame. Therefore, this effect is
        supported only by the elements listed above that generate a
        gyroscopic damping matrix.  Proportional damping must be
        present in the element (MP,BETD or BETAD).  It is also
        supported by element COMBI214 with non zero and axisymmetric
        damping characteristics (non zero real constants C11=C22 and
        C21=C12=0).

        For more information about using the CORIOLIS command, see
        Rotating Structure Analysis in the Advanced Analysis Guide and
        also in the Rotordynamic Analysis Guide. For details about the
        Coriolis and gyroscopic effect element formulations, see the
        Mechanical APDL Theory Reference.

        Elements with layered section properties do not support
        Coriolis effects (rotating and stationary reference frames).

        This command is also valid in PREP7.
        """
        # handle bool instead of strings
        if isinstance(option, bool):
            option = int(option)

        if isinstance(refframe, bool):
            refframe = int(refframe)

        if isinstance(rotdamp, bool):
            rotdamp = int(rotdamp)

        if isinstance(rotmass, bool):
            rotmass = int(rotdamp)

        command = f"CORIOLIS,{option},,,{refframe},{rotdamp},{rotmass}"
        return self.run(command, **kwargs)

    def mfanalysis(self, key="", **kwargs):
        """APDL Command: MFANALYSIS

        Activates or deactivates an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        key
            Multifield analysis key:

            ON - Activates an ANSYS Multi-field solver analysis.

            OFF - Deactivates an ANSYS Multi-field solver analysis (default).

        Notes
        -----
        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFANALYSIS,%s" % (str(key))
        return self.run(command, **kwargs)

    def stargo(self, base="", **kwargs):
        """APDL Command: *GO

        Causes a specified line on the input file to be read next.

        Parameters
        ----------
        base
            "Go to" action:

            A user-defined label (beginning with a colon (:), 8 characters maximum).  The command reader will skip (and wrap to the beginning of the file, if necessary) to the first line that begins with the matching :label.   - Caution:   This label option may not be mixed with do-loop or if-then-else
                              constructs.

        Notes
        -----
        Causes the next read to be from a specified line on the input file.
        Lines may be skipped or reread.  The *GO command will not be executed
        unless it is part of a macro, user file (processed by *USE),  an
        alternate input file (processed by /INPUT), or unless it is used in a
        batch-mode input stream.  Jumping into, out of, or within a do-loop or
        an if-then-else construct to a :label line is not allowed.

        This command is valid in any processor.
        """
        command = "*GO,%s" % (str(base))
        return self.run(command, **kwargs)

    def pscr(self, kywrd="", key="", **kwargs):
        """APDL Command: PSCR

        Specifies various PostScript options.

        Parameters
        ----------
        index
            Color map index (0 to 15, 128 to 255).

        ired
            Red intensity (0 to 100).

        igrn
            Green intensity (0 to 100).

        iblu
            Blue intensity (0 to 100).

        Notes
        -----
        This command is available in both the ANSYS and DISPLAY programs.  It
        is valid for postscript format files chosen in ANSYS with the
        /SHOW,PSCR command, or in DISPLAY with /SHOWDISP,POSTSCRIPT.

        An output file is generated for each plot.  The ANSYS file is named
        JobnameNN.pscr.  In the DISPLAY program, this file is named PSCRnn.
        This file remains open for a subsequent /NOERASE plot, and will be
        incomplete until the program is closed (/EXIT), or until the next file
        is opened by the next /ERASE plot request.

        Issuing PSCR,STAT will list paper size, orientation and resolution
        modes.
        """
        command = "PSCR,%s,%s" % (str(kywrd), str(key))
        return self.run(command, **kwargs)

    def prnsol(self, item="", comp="", **kwargs):
        """APDL Command: PRNSOL

        Prints nodal solution results.

        Parameters
        ----------
        item
            Label identifying the item.  Valid item labels are shown in
            Table 225: PRNSOL - Valid Item and Component Labels below.  Some
            items also require a component label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in Table 225: PRNSOL - Valid Item and Component Labels below.
            Defaults to COMP.

        Notes
        -----
        Prints the nodal solution results for the selected nodes in the sorted
        sequence. For example, PRNSOL,U,X prints the X component of
        displacement vector U (that is, the UX degree of freedom). Component
        results are in the global Cartesian coordinate directions unless
        transformed (RSYS). Various element results also depend upon the
        recalculation method and the selected results location (AVPRIN, RSYS,
        LAYER, SHELL, and NSEL). If the LAYER command is issued, then the
        resulting output is listed in full graphics mode (/GRAPHICS,FULL). You
        can use the FORCE command to define which component of the nodal load
        (static, damping, inertia, or total) should be used.

        PowerGraphics can affect your nodal solution listings. For
        PowerGraphics (/GRAPHICS,POWER), results are listed only for the model
        exterior surfaces.

        When shell element types are present, results are output on a surface-
        by-surface basis. For shell elements, such as SHELL181 or SHELL281, and
        for ELBOW290, printed output is for both the top and bottom surfaces.
        For solid elements such as SOLID185, the output is averaged for each
        surface and printed as follows:

        For a node at a vertex, three lines are output (one printed line for
        each surface).

        For a node on an edge, two lines are output (one printed line for each
        surface).

        For nodes on a face, one value is output.

        For nodes interior to the volume, no printed values are output.

        If a node is common to more than one element, or if a geometric
        discontinuity exists, several conflicting listings may result. For
        example, a corner node incorporating results from solid elements and
        shell elements could yield as many as nine different results; the
        printed output would be averages at the top and bottom for the three
        shell surfaces plus averages at the three surfaces for the solid, for a
        total of nine lines of output. ANSYS does not average result listings
        across geometric discontinuities when shell element types are present.
        It is important to analyze the listings at discontinuities to ascertain
        the significance of each set of data.

        The printed output for full graphics (/GRAPHICS,FULL) follows the
        standard ANSYS convention of averaging results at the node.  For shell
        elements, the default for display is TOP so that the results for the
        top of the shell are averaged with the other elements attached to that
        node.

        If an NSORT, ESORT or /ESHAPE command is issued with PowerGraphics
        activated, then the PRNSOL listings will be the same as in full
        graphics mode (/GRAPHICS,FULL). The items marked with [2] are not
        supported by PowerGraphics. To print midside nodes, you must first
        issue an /EFACET,2 command.

        Table: 225:: : PRNSOL - Valid Item and Component Labels

        Failure criteria  [2][4].

        Default components: Maximum of all failure criteria defined at current
        location (MAX), maximum strain (EMAX), maximum stress (SMAX), Tsai-Wu
        Strength Index (TWSI), inverse of Tsai-Wu Strength Ratio Index (TWSR).
        """
        command = "PRNSOL,%s,%s" % (str(item), str(comp))
        return self.run(command, **kwargs)

    
    
    def mflcomm(self, type_="", fname1="", intname1="", label1="", fname2="",
                intname2="", label2="", option="", **kwargs):
        """APDL Command: MFLCOMM

        Defines a load transfer for code coupling analyses.

        Parameters
        ----------
        type\_
             Set to SURF for a surface load transfer. Only surface load
            transfers are available for MFX.

        fname1
            Sets the field solver name for the server (sending) code with a
            case-sensitive character string of up to 80 characters.

        intname1
            Sets the interface name or number for the field solver of the
            server code. ANSYS interfaces are numbered and are defined by the
            SF family of commands (SF, SFA, or SFE) with the FSIN surface load
            label. CFX interfaces use names, which are set in CFX-Pre.

        label1
            Sets the surface load label for the field solver of the server code
            with a character string of up to 80 characters. ANSYS uses a
            combination of the label and option to determine what data is
            transferred (e.g., heat flows and not fluxes are sent with the
            label/option pair HFLU/CPP). ANSYS cannot serve total force or
            total force density to CFX for either formulation. CFX will send
            the data requested by the label regardless of the option. CFX
            labels that have more than one word must be enclosed in single
            quotes. Note that this field is case-sensitive; i.e., FORC will
            work, but forc will not.

        fname2
            Sets the field solver name for the client (receiving) code with a
            character string of up to 80 characters.

        intname2
            Sets the interface name or number for the field solver of the
            client code with a character string of up to 80 characters. ANSYS
            interfaces are numbered and are defined by the SF family of
            commands (SF, SFA, or SFE) with the FSIN surface load label. CFX
            interfaces use names, which are set in CFX-Pre.

        label2
            Sets the surface load label for the field solver of the client code
            with a character string of up to 80 characters. ANSYS uses a
            combination of the label and option to determine what data is
            transferred (e.g., heat flows and not fluxes are sent with the
            label-option pair HFLU/CPP). CFX will send the data requested by
            the label regardless of the option. CFX labels that have more than
            one word must be enclosed in single quotes. Note that this field is
            case-sensitive; i.e., FORC will work, but forc will not.

        option
            NONC

            NONC - Profile preserving: Sets the interface load transfer to the nonconservative
                   formulation (default for displacement and temperature). In
                   the nonconservative formulation, the force density (or heat
                   flux) is transferred across the interface, preserving the
                   density profile between the two fields.

            CPP - Conservative: Uses a local conservative formulation while preserving the
                  density profile (default for total force and wall heat flow).
                  In the conservative formulation, total force (or heat flow)
                  must be transferred across the interface from the CFX field
                  solver to the ANSYS field solver.

        Notes
        -----
        ANSYS input should always be in consistent units for its model.

        ANSYS uses a combination of the label and option to determine what data
        to transfer. CFX will send exactly the data requested by the label,
        regardless of the option. However, for the NONC option, the CFX label
        must be Total Force Density or Wall Heat Flux and for the CPP option,
        the CFX label must be Total Force or Wall Heat Flow.

        For more information on profile preserving and conservative load
        transfer, see Load Interpolation in the Coupled-Field Analysis Guide.
        Mapping Diagnostics are also available; however, if the improperly-
        mapped nodes are based on the CFX mesh, you should ignore the ANSYS-
        generated components because the CFX nodes are not present in the ANSYS
        database.

        If you are working interactively, you can choose two pre-defined
        combinations, Mechanical or Thermal, or you can choose a Custom option.
        If you choose the Mechanical load type, then the Total Force Density
        and Total Mesh Displacement data (corresponding to the ANSYS FORC and
        DISP labels, respectively) is transferred. If you choose the Thermal
        load type, then the Temperature and Wall Heat Flux data (corresponding
        to the ANSYS TEMP and HFLU labels, respectively) is transferred. If you
        choose Custom, you can select any valid combination of label and option
        as described above.

        The ANSYS Multi-field solver solver does not allow you to switch the
        load transfer direction for the same load quantity across the same
        interfaces for a restart run. For example, if Field1 sends temperature
        to and receives heat flow from Field2 across Interface 1 in a previous
        solution, then you cannot make Field1 send heat flow to and receive
        temperatures from Field2 across the same interface in a restart run,
        even if you cleared the corresponding load transfer command.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFLCOMM,%s,%s,%s,%s,%s,%s,%s,%s" % (str(type_), str(fname1), str(intname1), str(label1), str(fname2), str(intname2), str(label2), str(option))
        return self.run(command, **kwargs)

    def madapt(self, errtargt="", nadapt="", nmax="", kplt="", ksmooth="",
               klst="", kcd="", device="", **kwargs):
        """APDL Command: MADAPT

        Adaptively meshes and solves an edge-based model.

        Parameters
        ----------
        errtargt
            Target percentage for Zienkiewitz Zhu magnetic flux error (defaults
            to 5).

        nadapt
            Maximum number of adaptive steps (defaults to 5).

        nmax
            Maximum number of elements at which the iterations may continue
            (defaults to 50,000). Limits the number of elements that can be
            chosen for refinement.

        kplt
            Plotting options:

            0 - No plot (default)

            1 - Elements and H

            2 - BERR error estimates

            3 - BDSG, BEPC error estimates

            4 - Adaptive details

        ksmooth
            Smoothing options for refinement

            0 - No postprocessing will be done (default).

            1 - Smoothing will be done.  Node locations may change.

            2 - Smoothing and cleanup will be done.  Existing elements may be deleted, and node
                locations may change.

        klst
            Listing options

            0 - No printing (default)

            1 - Final report

            2 - Report at each iteration step

            3 - Report Zienkiewitz Zhu magnetic errors BERR and BSGD

            4 - Regular details

            5 - Full details

            6 - Refine details

            7 - Track

        kcd
            Allows you to issue a CDWRITE or CDREAD at every iteration.

            0 - Do not issue CDWRITE or CDREAD (default).

            1 - Issue CDWRITE at every iteration (to save every mesh variation). This option
                issues CDWRITE,geom, writing the information to jobnameN.cdb.

            2 - Issue CDREAD at every iteration (to read every mesh variation). Reads from an
                existing jobnameN.cdb.

        device
            Defines the output device for plotting.

            0 - Screen only (default)

            1 - JPEG frames. Each frame is written to a file (jobnameN.jpg by default). See
                /SHOW.

        Notes
        -----
        MADAPT invokes a predefined ANSYS macro for adaptive meshing and
        solution of edge-based magnetic analyses.  The macro causes repeated
        runs of the PREP7, SOLUTION, and POST1 phases of the ANSYS program with
        mesh density refinements based upon the percentage error in energy
        norm.

        The MADAPT command macro requires a second, user-defined macro, which
        must be named madaptld.mac and must reside in the same directory where
        ANSYS is being run. This madaptld macro must contain loads and boundary
        conditions, based on permanent geometry or solid model features (such
        as sides or vertices). Loads specified in the madaptld macro cannot be
        based on node numbers because the node numbers will change throughout
        the refinement process. This secondary macro is required because the
        MADAPT macro process must delete all loads and boundary conditions at
        every refinement step.

        MADAPT refines tetrahedral volume elements based on error. Hexahedra,
        wedges, and pyramids are not refined (see NREFINE).

        This command is also valid at the Begin level.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MADAPT,%s,%s,%s,%s,%s,%s,%s,%s" % (str(errtargt), str(nadapt), str(nmax), str(kplt), str(ksmooth), str(klst), str(kcd), str(device))
        return self.run(command, **kwargs)

    
    def cycphase(self, type_="", option="", **kwargs):
        """APDL Command: CYCPHASE

        Provides tools for determining minimum and maximum possible result
        values from frequency couplets produced in a modal cyclic symmetry
        analysis.

        Parameters
        ----------
        type\_
            The type of operation requested:

            DISP - Calculate the maximum and minimum possible displacement at each node in the
                   original sector model.  Store the values and the phase angle
                   at which they occurred.

            STRESS - Calculate the maximum and minimum possible stresses at each node in the
                     original sector model.  Store the values and the phase
                     angle at which they occurred.

            STRAIN - Calculate the maximum and minimum possible strains at each node in the original
                     sector model.  Store the values and the phase angle at
                     which they occurred.

            ALL - Calculate the maximum and minimum possible displacement, stress and strain at
                  each node in the original sector model.  Store the values and
                  the phase angle at which they occurred.

            GET - Places the value of a MAX or MIN item into the _CYCVALUE parameter, the node
                  for that value in the _CYCNODE parameter, and the phase angle
                  for the value in the _CYCPHASE parameter.

            PUT - Put resulting sweep values for printing (via the PRNSOL command ) or plotting
                  (via the PLNSOL command).

            LIST - List the current minimum/maximum displacement, stress and strain nodal values.

            STAT - Summarize the results of the last phase sweep.

            CLEAR - Clear phase-sweep information from the database.

        option
            If TYPE = DISP, STRAIN, STRESS or ALL, controls the sweep angle
            increment to use in the search:

            Angle - The sweep angle increment in degrees, greater than 0.1 and less than 10. The
                    default is 1.

        Notes
        -----
        When you expand the results of a modal cyclic symmetry analysis (via
        the /CYCEXPAND or EXPAND command), ANSYS combines the real and
        imaginary results for a given nodal diameter, assuming no phase shift
        between them; however, the modal response can occur at any phase shift.

        CYCPHASE response results are valid only for the first cyclic sector.
        To obtain the response at any part of the expanded model, ANSYS, Inc.
        recommends using cyclic symmetry results expansion at the phase angle
        obtained via CYCPHASE.

        The phase angles returned by CYCPHASE contain the minimum and maximum
        values for USUM, SEQV and other scalar principal stress and strain
        quantities; however, they do not always return the true minimum and
        maximum values for directional quantities like UX or SX unless the
        values fall in the first sector.

        CYCPHASE does not consider midside node values when evaluating maximum
        and minimum values, which may affect DISPLAY quantities but no others.
        (Typically, ANSYS ignores midside node stresses and strains during
        postprocessing.)

        Issuing CYCPHASE,PUT clears the result values for midside nodes on high
        order elements; therefore, this option sets element faceting (/EFACET)
        to 1. The command reports that midside nodal values are set to zero and
        indicates that element faceting is set to 1.

        If the sweep values are available after issuing a CYCPHASE,PUT command,
        the PRNSOL or PLNSOL command will print or plot (respectively) the
        sweep values of structure displacement Ux, Uy, Uz, component
        stress/strain X, Y, Z, XY, YZ, ZX, principal stress/strain 1, 2, 3 and
        equivalent stress/strain EQV.  The vector sum of displacement (USUM)
        and stress/strain intensity (SINT) are not valid phase-sweep results.

        You can specify any coordinate system via the RSYS command for
        displaying or printing CYCPHASE results. However, after CYCPHASE
        results have been extracted, you cannot then transform them via the
        RSYS command. If you try to do so, ANSYS issues a warning message.

        The CYCPHASE command is valid in /POST1 and for cyclically symmetric
        models only.

        To learn more about analyzing a cyclically symmetric structure, see the
        Cyclic Symmetry Analysis Guide.
        """
        command = "CYCPHASE,%s,%s" % (str(type_), str(option))
        return self.run(command, **kwargs)

    def pcopy(self, key="", **kwargs):
        """APDL Command: /PCOPY

        Automatically generates hard copies for HP UNIX work stations.

        Parameters
        ----------
        key
            Copy key:

            0 - No specification setting for automatic hard copy of display.

            1 - Set specification for automatic hard copy after each display.

            NOW - (Action) Produce hard copy of current display (KEY is not reset to 1).

        Notes
        -----
        Sets automatic hard copy specification.  This command is available only
        on HP work stations, and only during interactive runs with the /SHOW
        specification active (for terminals with hard copy capability).

        This command is valid in any processor.
        """
        command = "/PCOPY,%s" % (str(key))
        return self.run(command, **kwargs)

    def nsort(self, item="", comp="", order="", kabs="", numb="", sel="",
              **kwargs):
        """APDL Command: NSORT

        Sorts nodal data.

        Parameters
        ----------
        item
            Label identifying the item to be sorted on.  Valid item labels are
            shown in the table below.  Some items also require a component
            label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in the table below.

        order
            Order of sort operation:

            0 - Sort into descending order.

            1 - Sort into ascending order.

        kabs
            Absolute value key:

            0 - Sort according to real value.

            1 - Sort according to absolute value.

        numb
            Number of nodal data records to be sorted in ascending or
            descending order (ORDER) before sort is stopped (remainder will be
            in unsorted sequence) (defaults to all nodes).

        sel
            Allows selection of nodes in the sorted field.

            (blank) - No selection (default).

            SELECT - Select the nodes in the sorted list.

        Notes
        -----
        Values are in the active coordinate system [CSYS for input data or RSYS
        for results data].  Various element results also depend upon the
        recalculation method and the selected results location [AVPRIN, RSYS,
        SHELL, ESEL, and NSEL].  If simultaneous load cases are stored, the
        last sorted sequence formed from any load case applies to all load
        cases.  Use NUSORT to restore the original order.   This command is not
        valid with PowerGraphics.

        Table: 213:: : NSORT - Valid Item and Component Labels

        Table: 214:: : NSORT - Valid Item and Component Labels for Nodal DOF
        Result Values

        Table: 215:: : NSORT - Valid Item and Component Labels for Element
        Result Values

        Works only if failure criteria information is provided. (For more
        information, see the documentation for the FC and TB commands.)

        Must be added via the FCTYP command first.
        """
        command = "NSORT,%s,%s,%s,%s,%s,%s" % (str(item), str(comp), str(order), str(kabs), str(numb), str(sel))
        return self.run(command, **kwargs)

    def fjlist(self, elem="", **kwargs):
        """APDL Command: FJLIST

        Lists forces and moments applied on joint elements.

        Parameters
        ----------
        elem
            Element number or ALL (or blank). Lists joint element forces and
            moments on the specified element(s).

        Notes
        -----
        Valid for MPC184 joint elements. See FJ for information on specifying
        forces and moments.
        """
        command = "FJLIST,%s" % (str(elem))
        return self.run(command, **kwargs)

    def sfllist(self, line="", lab="", **kwargs):
        """APDL Command: SFLLIST

        Lists the surface loads for lines.

        Parameters
        ----------
        line
            Line at which surface load is to be listed.  If ALL (or blank),
            list for all selected lines [LSEL].  If LINE = P, graphical picking
            is enabled and all remaining command fields are ignored (valid only
            in the GUI).  A component name may be substituted for LINE.

        lab
            Valid surface load label.  If ALL (or blank), use all appropriate
            labels.  See the SFL command for labels.

        Notes
        -----
        Lists the surface loads for the specified line.

        This command is valid in any processor.
        """
        command = "SFLLIST,%s,%s" % (str(line), str(lab))
        return self.run(command, **kwargs)

    def plcfreq(self, spec="", sectbeg="", sectend="", **kwargs):
        """APDL Command: PLCFREQ

        Plots the frequency response for the given CYCSPEC specification.

        Parameters
        ----------
        spec
            CYCSPEC specification number (ordered 1 to N in the order input;
            use CYCSPEC,LIST to view the current list order). Defaults to 1.

        sectbeg
            Beginning sector number to plot. Defaults to 1.

        sectend
            Ending sector number to plot. Defaults to the total number of
            sectors expanded (/CYCEXPAND).

        Notes
        -----
        Following a cyclic mode-superposition harmonic analysis, this command
        plots the result item given by a CYCSPEC specification versus the
        harmonic frequency, one curve for each of the specified sectors. A
        CYCCALC command must have been issued prior to this command.
        """
        command = "PLCFREQ,%s,%s,%s" % (str(spec), str(sectbeg), str(sectend))
        return self.run(command, **kwargs)

    
    def eqslv(self, lab="", toler="", mult="", keepfile="", **kwargs):
        """APDL Command: EQSLV

        Specifies the type of equation solver.

        Parameters
        ----------
        lab
            Equation solver type:

            SPARSE - Sparse direct equation solver.  Applicable to
                     real-value or complex-value symmetric and
                     unsymmetric matrices. Available only for STATIC,
                     HARMIC (full method only), TRANS (full method
                     only), SUBSTR, and PSD spectrum analysis types
                     [ANTYPE].  Can be used for nonlinear and linear
                     analyses, especially nonlinear analysis where
                     indefinite matrices are frequently
                     encountered. Well suited for contact analysis
                     where contact status alters the mesh
                     topology. Other typical well-suited applications
                     are: (a) models consisting of shell/beam or
                     shell/beam and solid elements (b) models with a
                     multi-branch structure, such as an automobile
                     exhaust or a turbine fan. This is an alternative
                     to iterative solvers since it combines both speed
                     and robustness. Generally, it requires
                     considerably more memory (~10x) than the PCG
                     solver to obtain optimal performance (running
                     totally in-core). When memory is limited, the
                     solver works partly in-core and out-of-core,
                     which can noticeably slow down the performance of
                     the solver. See the BCSOPTION command for more
                     details on the various modes of operation for
                     this solver.

            This solver can be run in shared memory parallel or
            distributed memory parallel (Distributed ANSYS) mode. When
            used in Distributed ANSYS, this solver preserves all of
            the merits of the classic or shared memory sparse
            solver. The total sum of memory (summed for all processes)
            is usually higher than the shared memory sparse
            solver. System configuration also affects the performance
            of the distributed memory parallel solver. If enough
            physical memory is available, running this solver in the
            in-core memory mode achieves optimal performance. The
            ideal configuration when using the out-of-core memory mode
            is to use one processor per machine on multiple machines
            (a cluster), spreading the I/O across the hard drives of
            each machine, assuming that you are using a high-speed
            network such as Infiniband to efficiently support all
            communication across the multiple machines.  - This solver
            supports use of the GPU accelerator capability.

            JCG - Jacobi Conjugate Gradient iterative equation
                  solver. Available only for STATIC, HARMIC (full
                  method only), and TRANS (full method only) analysis
                  types [ANTYPE]. Can be used for structural, thermal,
                  and multiphysics applications. Applicable for
                  symmetric, unsymmetric, complex, definite, and
                  indefinite matrices.  Recommended for 3-D harmonic
                  analyses in structural and multiphysics
                  applications. Efficient for heat transfer,
                  electromagnetics, piezoelectrics, and acoustic field
                  problems.

            This solver can be run in shared memory parallel or
            distributed memory parallel (Distributed ANSYS) mode. When
            used in Distributed ANSYS, in addition to the limitations
            listed above, this solver only runs in a distributed
            parallel fashion for STATIC and TRANS (full method)
            analyses in which the stiffness is symmetric and only when
            not using the fast thermal option (THOPT). Otherwise, this
            solver runs in shared memory parallel mode inside
            Distributed ANSYS. - This solver supports use of the GPU
            accelerator capability. When using the GPU accelerator
            capability, in addition to the limitations listed above,
            this solver is available only for STATIC and TRANS (full
            method) analyses where the stiffness is symmetric and does
            not support the fast thermal option (THOPT).

            ICCG - Incomplete Cholesky Conjugate Gradient iterative
                   equation solver. Available for STATIC, HARMIC (full
                   method only), and TRANS (full method only) analysis
                   types [ANTYPE].  Can be used for structural,
                   thermal, and multiphysics applications, and for
                   symmetric, unsymmetric, complex, definite, and
                   indefinite matrices. The ICCG solver requires more
                   memory than the JCG solver, but is more robust than
                   the JCG solver for ill-conditioned matrices.

            This solver can only be run in shared memory parallel
            mode. This is also true when the solver is used inside
            Distributed ANSYS. - This solver does not support use of
            the GPU accelerator capability.

            QMR - Quasi-Minimal Residual iterative equation
                  solver. Available for the HARMIC (full method only)
                  analysis type [ANTYPE]. Can be used for
                  high-frequency electromagnetic applications, and for
                  symmetric, complex, definite, and indefinite
                  matrices. The QMR solver is more stable than the
                  ICCG solver.

            This solver can only be run in shared memory parallel
            mode. This is also true when the solver is used inside
            Distributed ANSYS. - This solver does not support use of
            the GPU accelerator capability.

            PCG - Preconditioned Conjugate Gradient iterative equation
                  solver (licensed from Computational Applications and
                  Systems Integration, Inc.).  Requires less disk file
                  space than SPARSE and is faster for large
                  models. Useful for plates, shells, 3-D models, large
                  2-D models, and other problems having symmetric,
                  sparse, definite or indefinite matrices for
                  nonlinear analysis.  Requires twice as much memory
                  as JCG. Available only for analysis types [ANTYPE]
                  STATIC, TRANS (full method only), or MODAL (with PCG
                  Lanczos option only). Also available for the use
                  pass of substructure analyses (MATRIX50). The PCG
                  solver can robustly solve equations with constraint
                  equations (CE, CEINTF, CPINTF, and CERIG).  With
                  this solver, you can use the MSAVE command to obtain
                  a considerable memory savings.

            The PCG solver can handle ill-conditioned problems by
            using a higher level of difficulty (see
            PCGOPT). Ill-conditioning arises from elements with high
            aspect ratios, contact, and plasticity. - This solver can
            be run in shared memory parallel or distributed memory
            parallel (Distributed ANSYS) mode. When used in
            Distributed ANSYS, this solver preserves all of the merits
            of the classic or shared memory PCG solver. The total sum
            of memory (summed for all processes) is about 30% more
            than the shared memory PCG solver.

        toler
            Iterative solver tolerance value. Used only with the
            Jacobi Conjugate Gradient, Incomplete Cholesky Conjugate
            Gradient, Pre- conditioned Conjugate Gradient, and
            Quasi-Minimal Residual equation solvers. For the PCG
            solver, the default is 1.0E-8. The value 1.0E-5 may be
            acceptable in many situations. When using the PCG Lanczos
            mode extraction method, the default solver tolerance value
            is 1.0E-4. For the JCG and ICCG solvers with symmetric
            matrices, the default is 1.0E-8. For the JCG and ICCG
            solvers with unsymmetric matrices, and for the QMR solver,
            the default is 1.0E-6. Iterations continue until the SRSS
            norm of the residual is less than TOLER times the norm of
            the applied load vector. For the PCG solver in the linear
            static analysis case, 3 error norms are used. If one of
            the error norms is smaller than TOLER, and the SRSS norm
            of the residual is smaller than 1.0E-2, convergence is
            assumed to have been reached. See Iterative Solver in the
            Mechanical APDL Theory Reference for details.

        mult
            Multiplier (defaults to 2.5 for nonlinear analyses; 1.0
            for linear analyses) used to control the maximum number of
            iterations performed during convergence calculations. Used
            only with the Pre- conditioned Conjugate Gradient equation
            solver (PCG). The maximum number of iterations is equal to
            the multiplier (MULT) times the number of degrees of
            freedom (DOF). If MULT is input as a negative value, then
            the maximum number of iterations is equal to abs(MULT).
            Iterations continue until either the maximum number of
            iterations or solution convergence has been reached. In
            general, the default value for MULT is adequate for
            reaching convergence.  However, for ill-conditioned
            matrices (that is, models containing elements with high
            aspect ratios or material type discontinuities) the
            multiplier may be used to increase the maximum number of
            iterations used to achieve convergence.  The recommended
            range for the multiplier is 1.0 MULT 3.0.  Normally, a
            value greater than 3.0 adds no further benefit toward
            convergence, and merely increases time requirements.  If
            the solution does not converge with 1.0 MULT 3.0, or in
            less than 10,000 iterations, then convergence is highly
            unlikely and further examination of the model is
            recommended. Rather than increasing the default value of
            MULT, consider increasing the level of difficulty
            (Lev_Diff) on the PCGOPT command.

        keepfile
            Determines whether files from a SPARSE solver run should be deleted
            or retained. Applies only to Lab = SPARSE for static and full
            transient analyses.
        """
        return self.run(f"EQSLV,{lab},{toler},{mult},,{keepfile}", **kwargs)

    def lvscale(self, fact="", ldstep="", **kwargs):
        """APDL Command: LVSCALE

        Scales the load vector for mode-superposition analyses.

        Parameters
        ----------
        fact
            Scale factor applied to both the real and imaginary (if they exist)
            components of the load vector. Defaults to 0.0.

        ldstep
            Specifies the load step number from the modal analysis
            (MODCONT,ON). It corresponds to the load vector number. Defaults to
            1. The maximum value is 240.

        Notes
        -----
        Specifies the scale factor for the load vector that was created in a
        modal (ANTYPE,MODAL) analysis.  Applies only to the mode-superposition
        transient analysis (ANTYPE,TRANS), mode-superposition harmonic analysis
        (ANTYPE,HARMIC), random vibration analysis (ANTYPE,SPECTR with
        SPOPT,PSD), and multiple point response spectrum analysis
        (ANTYPE,SPECTR with SPOPT,MPRS).  For PSD and MPRS analyses, LVSCALE is
        only applicable for pressure loading.

        The LVSCALE command supports tabular boundary conditions (%TABNAME_X%)
        for FACT input values only as a function of time in the mode-
        superposition transient (ANTYPE,TRANS) or as a function of frequency in
        mode-superposition harmonic (ANTYPE,HARMIC).

        MPC contact generates constraint equations that can include constant
        terms (included on the right-hand side of the system equation). The
        LVSCALE command scales the constant terms.

        In mode-superposition transient and harmonic analyses, all of the load
        vectors need to be scaled in the first load step. Use a zero scale
        factor if they are not actually used in this first load step. :
        Similarly, in random vibration and multipoint response spectrum
        analyses, all of the load vectors need to be scaled in the first
        participation factor calculation (PFACT). : Use a zero scale factor if
        they are not actually used for the first input table.

        This command is also valid in PREP7.
        """
        command = "LVSCALE,%s,%s" % (str(fact), str(ldstep))
        return self.run(command, **kwargs)

    def pduser(self, fname="", ext="", **kwargs):
        """APDL Command: PDUSER

        Specifies options for user-specified sampling methods.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        If user-specified sampling methods are requested with the PDMETH, MCS,
        USER command or the PDMETH, RSM, USER command, then you need to specify
        which file contains the sample data. For more information on the format
        of this file, see Probabilistic Design in the Advanced Analysis Guide.
        """
        command = "PDUSER,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def numexp(self, num="", begrng="", endrng="", elcalc="", **kwargs):
        """APDL Command: NUMEXP

        Specifies solutions to be expanded from mode-superposition analyses or
        substructure analyses.

        Parameters
        ----------
        num
            The number of solutions to expand. This value is required.

            Num - Number of solutions to expand.

            ALL - Expand all substeps between BEGRNG and ENDRNG (provided that ENDRNG > 0). If
                  BEGRNG and ENDRNG have no specified values, this option
                  expands all substeps of all load steps.

        begrng, endrng
            Beginning and ending time (or frequency) range for expanded
            solutions. The default is 0 for both values.

        elcalc
            The element-calculation key:

            YES - Calculate element results, nodal loads, and reaction loads. This value is the
                  default.

            NO - Do not calculate these items.

        Notes
        -----
        Specifies a range of solutions to be expanded from analyses that use
        mode-superposition methods (ANTYPE,HARMIC or TRANS) or substructuring
        (ANTYPE,SUBSTR).

        For ANTYPE,TRANS, NUM, evenly spaced solutions are expanded between
        time BEGRNG and time ENDRNG.

        For ANTYPE,HARMIC, NUM, evenly spaced solutions are expanded between
        frequency BEGRNG and frequency ENDRNG.

        The first expansion in all cases is done at the first point beyond
        BEGRNG (that is, at BEGRNG + (ENDRNG - BEGRNG) / NUM)).

        The resulting results file will maintain the same load step, substep,
        and time (or frequency) values as the use pass.

        For a single expansion of a solution, or for multiple expansions when
        the solutions are not evenly spaced (such as in a mode-superposition
        harmonic analysis with the cluster option), ANSYS, Inc. recommends
        issuing one or more EXPSOL commands.

        The NUMEXP command is invalid in these cases:

        In a substructing analysis (ANTYPE,SUBST) when a factorized matrix file
        (the .LN22 file generated by the sparse solver) does not exist, causing
        ANSYS to employ the full-resolve method.

        If the full-resolve option is selected using the SEOPT command.

        In both situations, use the EXPSOL command to perform a single
        expansion for each solution desired.

        This command is also valid in PREP7.
        """
        command = "NUMEXP,%s,%s,%s,%s" % (str(num), str(begrng), str(endrng), str(elcalc))
        return self.run(command, **kwargs)

    def ctype(self, key="", dotd="", dots="", dshp="", tlen="", **kwargs):
        """APDL Command: /CTYPE

        Specifies the type of contour display.

        Parameters
        ----------
        key
            Type of display:

            0 - Standard contour display.

            1 - Isosurface display.

            2 - Particle gradient display.

            3 - Gradient triad display.

        dotd
            Maximum dot density for particle gradient display (KEY = 2).
            Density is expressed as dots per screen width (defaults to 30).

        dots
            Dot size for particle gradient display (KEY = 2).  Size is
            expressed as a fraction of the screen width (defaults to 0.0
            (single dot width)).

        dshp
            Spherical dot shape precision for particle gradient display (KEY =
            2).  (3-D options are supported only on 3-D devices):

            0 - Flat 2-D circular dot.

            1 - Flat-sided 3-D polyhedron.

            n - 3-D sphere with n (>1) polygon divisions per 90° of radius.

        tlen
            Maximum length of triads for gradient triad display (KEY = 3).
            Value is expressed as a fraction of the screen width (defaults to
            0.067).

        Notes
        -----
        Use /CTYPE,STAT to display the current settings.     Only the standard
        contour display [/CTYPE,0) and the isosurface contour display
        [/CTYPE,1] are supported by PowerGraphics [/GRAPHICS,POWER].

        This command is valid in any processor.
        """
        command = "/CTYPE,%s,%s,%s,%s,%s" % (str(key), str(dotd), str(dots), str(dshp), str(tlen))
        return self.run(command, **kwargs)

    
    def wmid(self, key="", **kwargs):
        """APDL Command: WMID

        Specifies reordering options for the WAVES command.

        Parameters
        ----------
        key
             Determines whether midside nodes are considered when reordering.

            NO - Do not consider midside nodes when reordering (default).

            YES - Consider midside nodes when reordering. This option
                  is useful for models where line elements are only
                  attached to midside nodes of solid elements.

        Notes
        -----
        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "WMID,%s" % (str(key))
        return self.run(command, **kwargs)

    def psdgraph(self, tblno1="", tblno2="", **kwargs):
        """APDL Command: PSDGRAPH

        Displays input PSD curves

        Parameters
        ----------
        tblno1
            PSD table number to display.

        tblno2
            Second PSD table number to display. TBLNO2 is used only in
            conjunction with the COVAL or the QDVAL commands.

        Notes
        -----
        The input PSD tables are displayed in log-log format as dotted lines.
        The best-fit curves, used to perform the closed-form integration, are
        displayed as solid lines. If there is a significant discrepancy between
        the two, then you should add one or more intermediate points to the
        table to obtain a better fit.

        If TBLNO2 is zero, blank, or equal to TBLNO1, then the autospectra
        (PSDVAL) are displayed for TBLNO1. If TBLNO2 is also specified, then
        the autospectra for TBLNO1 and TBLNO2 are displayed, along with the
        corresponding cospectra (COVAL) and quadspectra (QDVAL), if they are
        defined.

        This command is valid in any processor.
        """
        command = "PSDGRAPH,%s,%s" % (str(tblno1), str(tblno2))
        return self.run(command, **kwargs)

    def lcfile(self, lcno="", fname="", ext="", **kwargs):
        """APDL Command: LCFILE

        Creates a load case from an existing load case file.

        Parameters
        ----------
        lcno
            Arbitrary (1-99) pointer number assigned to this load case.

        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Creates a load case by establishing a pointer to an existing load case
        file [LCWRITE].  This pointer (LCNO) can then be used on the LCASE or
        LCOPER commands to read the load case data into the database.  This
        command is typically used to reestablish load case pointers in a new
        ANSYS session (pointers are not saved on the database file), or when
        more than one pointer to a single load case is desired.  See the LCDEF
        command for status and erase operations.  See also LCDEF to establish a
        pointer to a set of results on a results file (written during the ANSYS
        solution phase).
        """
        command = "LCFILE,%s,%s,%s" % (str(lcno), str(fname), str(ext))
        return self.run(command, **kwargs)

    def pdresu(self, fname="", ext="", **kwargs):
        """APDL Command: PDRESU

        Reads the probabilistic model data and loads it into the database.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Reads the probabilistic model data from the specified file and loads it
        into the database. Probabilistic analyses results are not stored in the
        database with the PDRESU command, rather they reside in separate
        results files. Analyses results are loaded automatically (one-by-one
        and on demand) when a probabilistic postprocessing command is issued.
        """
        command = "PDRESU,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def dscale(self, rfact="", ifact="", tbase="", **kwargs):
        """APDL Command: DSCALE

        Scales DOF constraint values.

        Parameters
        ----------
        rfact
            Scale factor for the real component.  Zero (or blank) defaults to
            1.0.  Use a small number for a zero scale factor.

        ifact
            Scale factor for the imaginary component.  Zero (or blank) defaults
            to 1.0.  Use a small number for a zero scale factor.

        tbase
            Base temperature for temperature difference.  For temperatures, the
            scale factor is applied to the temperature difference (T-TBASE) and
            then added to TBASE.  T is the current temperature.

        Notes
        -----
        Scales degree of freedom constraint values (displacement, temperature,
        etc.) in the database.  If velocity and acceleration boundary
        conditions are applied in a structural analysis, they are also scaled
        by this command. Solid model boundary conditions are not scaled by this
        command, but boundary conditions on the FE model are scaled.

        Note:: : Such scaled FE boundary conditions may still be overwritten by
        unscaled solid model boundary conditions if a subsequent boundary
        condition transfer occurs.

        Scaling applies to the previously defined values for the selected nodes
        [NSEL] and the selected degree of freedom labels [DOFSEL].  Issue DLIST
        command to review results.

        DSCALE does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "DSCALE,%s,%s,%s" % (str(rfact), str(ifact), str(tbase))
        return self.run(command, **kwargs)

    def plpath(self, lab1="", lab2="", lab3="", lab4="", lab5="", lab6="",
               **kwargs):
        """APDL Command: PLPATH

        Displays path items on a graph.

        Parameters
        ----------
        lab1, lab2, lab3, . . . , lab6
            Labels identifying the path items to be displayed.  Up to six items
            may be drawn per frame.  Predefined path geometry items XG, YG, ZG,
            and S [PDEF] may also be displayed.

        Notes
        -----
        The path must have been defined by the PATH and PPATH commands.  Path
        items and their labels must have been defined with the PDEF, PVECT,
        PCALC, PDOT, PCROSS, or PLNEAR commands.  Path items may also be
        printed with the PRPATH command.  Graph scaling may be controlled with
        the /XRANGE, /YRANGE, and PRANGE commands. You need to type all six
        characters to issue this command.
        """
        command = "PLPATH,%s,%s,%s,%s,%s,%s" % (str(lab1), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    
    def outpr(self, item="", freq="", cname="", **kwargs):
        """APDL Command: OUTPR

        Controls the solution printout.

        Parameters
        ----------
        item
            Item for print control:

            BASIC - Basic quantities (nodal DOF solution, nodal reaction loads, and element
                    solution) (default).

            NSOL - Nodal DOF solution.

            RSOL - Nodal reaction loads.

            ESOL - Element solution.

            NLOAD - Element nodal loads. When nonlinear stabilization is active, the stabilization
                    force/moments are also printed.

            SFOR - Stabilization force/moment at the applicable nodes (valid only when nonlinear
                   stabilization is active).

            VENG - Element energies. When nonlinear stabilization is active, the energy
                   dissipation due to stabilization is also printed.

            V - Nodal velocity (applicable to structural transient analysis  only
                (ANTYPE,TRANS)).

            A - Nodal acceleration (applicable to structural transient analysis only
                (ANTYPE,TRANS)).

            ALL - All of the above solution items.

        freq
            Print solution for this item every Freqth (and the last) substep of
            each load step.  If -n, print up to n equally spaced solutions
            (only applies to static or full transient analyses when automatic
            time stepping is enabled).  If NONE, suppress all printout for this
            item for this load step.  If ALL, print solution for this item for
            every substep.  If LAST, print solution for this item only for the
            last substep of each load step.  For a modal analysis, use NONE or
            ALL.

        cname
            Name of the component, created with the CM command, defining the
            selected set of nodes or elements for which this specification is
            active.  If blank, the set is all entities.

        Notes
        -----
        Controls the solution items to be printed, the frequency with which
        they are printed (in static, transient, or full harmonic analyses), and
        the set of nodes or elements to which this specification applies (in
        static, transient, or full harmonic analyses).  An item is associated
        with either a node (NSOL, RFORCE, V, and A items) or an element (all of
        the remaining items).  The specifications are processed in the order
        that they are input.  Up to 50 specifications (OUTPR and  OUTRES
        commands combined) may be defined.  Use OUTPR,STAT to list the current
        specifications and use OUTPR,ERASE to erase all the current
        specifications.

        As described above, OUTPR writes some or all items (depending on
        analysis type) for all elements.  To restrict the solution printout,
        use OUTPR to selectively suppress (Freq = NONE) the writing of solution
        data, or first suppress the writing of all solution data
        (OUTPR,ALL,NONE) and then selectively turn on the writing of solution
        data with subsequent OUTPR commands.

        If the generalized plane strain feature is active and OUTPR is issued,
        the change of fiber length at the ending point during deformation and
        the rotation of the ending plane about X and Y during deformation will
        be printed if any displacement at the nodes is printed. The reaction
        forces at the ending point will be printed if any reaction force at the
        nodes is printed.

        Nodal reaction loads (Item = RSOL) are processed according to the
        specifications listed for the PRRSOL command.

        Result printouts for interactive sessions are suppressed for models
        with more than 10 elements.

        This command is also valid in PREP7.
        """
        command = "OUTPR,%s,%s,%s" % (str(item), str(freq), str(cname))
        return self.run(command, **kwargs)

    
    def mrep(self, name="", arg1="", arg2="", arg3="", arg4="", arg5="",
             arg6="", arg7="", arg8="", arg9="", arg10="", arg11="", arg12="",
             arg13="", arg14="", arg15="", arg16="", arg17="", arg18="",
             **kwargs):
        """APDL Command: /MREP

        Enables you to reissue the graphics command macro "name" during a
        replot or zoom operation.

        Parameters
        ----------
        name
            The name identifying the macro file or macro block on a macro
            library file.  The name can contain up to eight characters maximum
            and must begin with a letter.

        arg1, arg2, arg3, . . . , arg18
            Values to be passed into the file or block.

        Notes
        -----
        This command reissues the graphics command macro "name" during a replot
        operation [/REPLOT] or a zoom [/ZOOM] operation.  The ANSYS program
        passes the command macro arguments to the replot and zoom feature for
        use by the graphics macro.  You should place the s-MREP command at the
        end of the graphics command macro, following the last graphics command
        within the macro, to enable the replot or zoom feature.
        """
        command = "/MREP,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(name), str(arg1), str(arg2), str(arg3), str(arg4), str(arg5), str(arg6), str(arg7), str(arg8), str(arg9), str(arg10), str(arg11), str(arg12), str(arg13), str(arg14), str(arg15), str(arg16), str(arg17), str(arg18))
        return self.run(command, **kwargs)

    
    def mstart(self, label="", key="", **kwargs):
        """APDL Command: /MSTART

        Controls the initial GUI components.

        Parameters
        ----------
        label
            Label identifying the GUI component:

            ZOOM - Pan, Zoom, Rotate dialog box, off by default.

            WORK - Offset Working Plane dialog box, off by default.

            WPSET - Working Plane Settings dialog box, off by default.

            ABBR - Edit Toolbar/Abbreviations dialog box, off by default.

            PARM - Scalar Parameters dialog box, off by default.

            SELE - Select Entities dialog box, off by default.

            ANNO - Annotation dialog box, off by default.

            HARD - Hard Copy dialog box, off by default.

            UTIL - Turns on the pre-ANSYS 6.1 (UIDL) GUI, off by default.

        key
            Switch value:

            OFF or 0 - Component does not appear when GUI is initialized.

            ON or 1 - Component appears when GUI is initialized.

        Notes
        -----
        Controls which components appear when the Graphical User Interface
        (GUI) is initially brought up.  This command is valid only before the
        GUI is brought up [/MENU,ON] and is intended to be used in the
        start162.ans file.  It only affects how the GUI is initialized; you can
        always bring up or close any component once you are in the GUI.

        This command is valid only at the Begin Level.
        """
        command = "/MSTART,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    def gresume(self, fname="", ext="", **kwargs):
        """APDL Command: /GRESUME

        Sets graphics settings to the settings on a file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Causes a file to be read to reset the graphics slash (/) commands as
        they were at the last  /GSAVE command.

        This command is valid in any processor.
        """
        command = "/GRESUME,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def fs(self, node="", nev="", nlod="", stitm="", c1="", c2="", c3="",
           c4="", c5="", c6="", **kwargs):
        """APDL Command: FS

        Stores fatigue stress components at a node.

        Parameters
        ----------
        node
            Node number corresponding to this location.  Used only to associate
            a node with a new location or to find an existing location.

        nev
            Event number to be associated with these stresses (defaults to 1).

        nlod
            Loading number to be associated with these stresses (defaults to
            1).

        stitm
            Starting item number for entering stresses (defaults to 1).  If 1,
            data input in field C1 of this command is entered as the first item
            in the list; if 7, data input in field C1 of this command is
            entered as the seventh item in the list; etc.  Items are as
            follows:

            1-6 - SX, SY, SZ, SXY, SYZ, SXZ total stress components

            7 - Temperature

            8-13 - SX, SY, SZ, SXY, SYZ, SXZ membrane-plus-bending stress components.

            14 - Time

        c1, c2, c3, . . . , c6
            Stresses assigned to six locations starting with STITM.  If a value
            is already in one of these locations, it will be redefined.  A
            blank retains the previous value (except in the C1 field, which
            resets the STITM item to zero).

        Notes
        -----
        Stores fatigue stress components at a node as input on this command
        instead of from the current data in the database.  Stresses are stored
        according to the event number and loading number specified.  The
        location is associated with that previously defined for this node [FL]
        or else it is automatically defined.  May also be used to modify any
        previously stored stress components.  Stresses input with this command
        should be consistent with the global coordinate system for any FSNODE
        or FSSECT stresses used at the same location.
        """
        command = "FS,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(nev), str(nlod), str(stitm), str(c1), str(c2), str(c3), str(c4), str(c5), str(c6))
        return self.run(command, **kwargs)

    def dnsol(self, node="", item="", comp="", v1="", v2="", v3="", v4="",
              v5="", v6="", **kwargs):
        """APDL Command: DNSOL

        Defines or modifies solution results at a node.

        Parameters
        ----------
        node
            Node for which results are specified.  If ALL, apply to all
            selected nodes [NSEL].  If NODE = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component name may also be substituted for NODE.

        item
            Label identifying results, see Table 131: DNSOL - Valid Item and
            Component Labels.   Items also require a component label.

        comp
            Component of the item.  Valid component labels are shown
            Table 131: DNSOL - Valid Item and Component Labels below.

        v1, v2, v3, . . . , v6
            Value assigned to result.  If zero, a zero value will be assigned.
            If blank, the value remains unchanged.  Additional values (if any)
            assigned to the remaining components (in the order corresponding to
            the Comp list shown below for the specified Item (starting from the
            specified Comp label and proceeding to the right).

        Notes
        -----
        DNSOL can be used only with FULL graphics activated (/GRAPHICS,FULL);
        it will not work correctly with PowerGraphics activated.

        DNSOL defines or modifies solution results in the database at a node.
        For example, DNSOL,35,U,X,.001,.002,.001 assigns values 0.001, 0.002,
        and 0.001 to UX, UY, and UZ (respectively) for node 35.  All results
        that are changed in the database, including the nodal degree of freedom
        results, are available for all subsequent operations.   All data is
        stored in the solution coordinate system, but will be displayed in the
        results coordinate system [RSYS].  Use the PRNSOL command to list the
        current results.

        Data input by DNSOL is stored in temporary space and does not replace
        information in the database. Therefore, data input by this command may
        be overwritten if a change is made to the selected set of nodes.

        Issuing the DNSOL command or its GUI equivalent requires you to place
        the data type (stress/strain) in the element nodal records.  To get
        around this requirement, use the DESOL command or equivalent path to
        add a "dummy" element stress/strain record.

        Result items are available depending on element type; check the
        individual element for availability. Valid item and component labels
        for element results are:

        Table: 131:: : DNSOL - Valid Item and Component Labels

        For SHELL131 and SHELL132 elements with KEYOPT(3) = 0 or 1, use the
        labels TBOT, TE2, TE3, ..., TTOP instead of TEMP.
        """
        command = "DNSOL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(item), str(comp), str(v1), str(v2), str(v3), str(v4), str(v5), str(v6))
        return self.run(command, **kwargs)

    
    def facet(self, lab="", **kwargs):
        """APDL Command: /FACET

        Specifies the facet representation used to form solid model displays.

        Parameters
        ----------
        lab
            Valid labels:

            FINE - Use finer tessellation to increase the number of facets for the display.
                   Provides the best representation (but decreases speed of
                   operation).

            NORML - Use the basic number of facets for the display (default).

            COAR - Use a limited number of facets for the display. This option will increase the
                   speed of the operations, but may produce poor
                   representations for some imported models.

            WIRE - Display model with a wireframe representation (fast, but surfaces will not be
                   shown).

        Notes
        -----
        Specifies the facet (or polygon) representation used to form solid
        model displays.  Used only with the APLOT, ASUM, VPLOT, and VSUM
        commands.

        This command is valid in any processor.
        """
        command = "/FACET,%s" % (str(lab))
        return self.run(command, **kwargs)

    def ftwrite(self, fname="", ext="", **kwargs):
        """APDL Command: FTWRITE

        Writes all currently stored fatigue data on a file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        Data are written in terms of the equivalent POST1 fatigue commands
        [FTSIZE, FL, FS, etc.] which you can then edit and resubmit to POST1
        (with a /INPUT command).

        Once you have created a fatigue data file, each subsequent use of the
        FTWRITE command overwrites the contents of that file.
        """
        command = "FTWRITE,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    def cat5in(self, name="", extension="", path="", entity="", fmt="",
               nocl="", noan="", **kwargs):
        """APDL Command: ~CAT5IN

        Transfers a .CATPart file into the ANSYS program.

        Parameters
        ----------
        name
            The name of a valid .CATPart file, created with CATIA Version 5.0.
            The first character of the file name must be an alphanumeric.

        extension
            The extension for the file. The default extension is .CATPart.

        path
            The path name of the directory in which the file resides enclosed
            in single quotes. The default path name is the current working
            directory.

        entity
            Entity to be imported.

            SOLIDS - Solids only, imported as ANSYS volumes (default).

            SURFACES - Surfaces only, imported as ANSYS areas.

            ALL - All entities. Use this option when the file contains different types of
                  entities.

        fmt
            The format in which ANSYS will store the model.

            0 - Neutral format (default). Defeaturing after import is restricted.

            1 - Solid format; this allows defeaturing after import.

        nocl
            Remove tiny objects.

            0 - Remove tiny objects without checking model validity (default).

            1 - Do not remove tiny objects.

        noan
            Perform an analysis of the model.

            0 - Analyze the model (default).

            1 - Do not analyze the model.

        Notes
        -----
        If defeaturing is specified (FMT = 1), this command must be the last
        line of any file, script, or other interactive input.

        More information on importing CATIA Version 5 parts is available in
        CATIA V5 in the Connection User's Guide.
        """
        command = "~CAT5IN,%s,%s,%s,%s,%s,%s,%s" % (str(name), str(extension), str(path), str(entity), str(fmt), str(nocl), str(noan))
        return self.run(command, **kwargs)

    # def if(self, val1="", oper1="", val2="", base1="", val3="", oper2="",
    #        val4="", base2="", **kwargs):
    #     """APDL Command: *IF

    #     Conditionally causes commands to be read.

    #     Parameters
    #     ----------
    #     val1
    #         First numerical value (or parameter which evaluates to a numerical
    #         value) in the conditional comparison operation.  VAL1, VAL2, VAL3,
    #         and VAL4 can also be character strings (enclosed in quotes) or
    #         parameters for Oper = EQ and NE only.

    #     oper1
    #         Operation label.  A tolerance of 1.0E-10 is used for comparisons
    #         between real numbers:

    #         Equal (for VAL1 = VAL2). - Not equal (for VAL1 ≠ VAL2).

    #         Less than (for VAL1 < VAL2). - Greater than (for VAL1 > VAL2).

    #         Less than or equal (for VAL1   VAL2). - Greater than or equal (for VAL1   VAL2).

    #         Absolute values of VAL1 and VAL2 before < operation. - Absolute values of VAL1 and VAL2 before > operation.

    #     val2
    #         Second numerical value (or parameter which evaluates to a numerical
    #         value) in the conditional comparison operation.

    #     base1
    #         Action based on the logical expression (Oper1) being true.  If
    #         false, continue reading at the next line. This is conditional,
    #         except for the IF-THEN-ELSE constructs described below; any of the
    #         following constructs (through Base1 = THEN) cause all subsequent
    #         fields to be ignored:

    #         A user-defined label (beginning with a colon (:), 8 characters maximum).  The command reader will skip (and wrap to the beginning of the file, if necessary) to the first line that begins with the matching :label. - Caution:   This label option may not be mixed with do-loop or if-then-else
    #                           constructs.

    #         This action will cause an exit from the ANSYS program at this line, unless running in interactive mode. In interactive mode, the program will not stop. - Exit the current do-loop [*EXIT].

    #         Skip to the end of the current do-loop [*CYCLE]. - Make this *IF an if-then-else construct (see below).

    #     val3
    #         Third numerical value (or parameter which evaluates to a numerical
    #         value).

    #     oper2
    #         Operation label. This will have the same labels as Oper1, except it
    #         uses Val3 and Val4. A tolerance of 1.0E-10 is used for comparisons
    #         between real numbers.

    #     val4
    #         Fourth numerical value (or parameter value which evaluates to a
    #         numerical value).

    #     base2
    #         Action based on the logical expression (Oper1 and Oper2) being
    #         true. They will be the same values as Base1, except as noted.

    #     Notes
    #     -----
    #     Conditionally causes commands to be read from a specific block or at a
    #     specific location.  Twenty levels of nested *IF blocks are allowed.
    #     Jumping to a :label line is not allowed with keyboard entry.  Jumping
    #     into, out of, or within a do-loop or an if-then-else construct to a
    #     :label line is not allowed. Using *IF interactively or from the command
    #     line prevents rereading the file to find a label. To do so, use batch
    #     mode or /INPUT.

    #     The following is an example of an if-then-else construct:

    #     *IF,VAL1,Oper,VAL2,THEN

    #     ----

    #     *ELSEIF,VAL1,Oper,VAL2

    #     ----

    #     *ELSEIF,VAL1,Oper,VAL2

    #     ----

    #     *ELSE

    #     ----

    #     *ENDIF

    #     where "----" represents a block of any number of commands.  Any number
    #     of *ELSEIF clauses (or none) may be included (in the location shown).
    #     One *ELSE clause (at most) may be included (in the location shown).
    #     The *IF command is executed by evaluating its logical expression.  If
    #     it is true, the block of commands following it is executed.  The
    #     construct is considered to be complete and the command following the
    #     *ENDIF is executed next.  If the logical expression is false, the next
    #     *ELSEIF command (if any) following the block is executed.  The
    #     execution logic is the same as for *IF.  The effect is that the logical
    #     expressions in the *IF and the *ELSEIF commands are sequentially tested
    #     until one is found to be true.  Then the block of commands immediately
    #     following the expression is executed, which completes the execution of
    #     the if-then-else construct.  If all *IF and *ELSEIF expressions are
    #     false, the block following the *ELSE command is executed, if there is
    #     one.  Only one block of commands (at most) is executed within the if-
    #     then-else construct.  If a batch input stream hits an end-of-file
    #     during a false *IF condition, the ANSYS run will not terminate
    #     normally. You will need to terminate it externally (use either the
    #     Linux "kill" function or the Windows task manager). The *IF, *ELSEIF,
    #     *ELSE, and *ENDIF commands for each if-then-else construct must all be
    #     read from the same file (or keyboard).

    #     This command is valid in any processor.
    #     """
    #     command = "*IF,%s,%s,%s,%s,%s,%s,%s,%s" % (str(val1), str(oper1), str(val2), str(b_ase1), str(val3), str(oper2), str(val4), str(b_ase2))
    #     return self.run(command, **kwargs)

    
    def fp(self, stitm="", c1="", c2="", c3="", c4="", c5="", c6="", **kwargs):
        """APDL Command: FP

        Defines the fatigue S vs. N and Sm vs. T tables.

        Parameters
        ----------
        stitm
            Starting item number for entering properties (defaults to 1).  If
            1, data input in field C1 of this command is entered as the first
            item in the list; if 7, data input in field C1 of this command is
            entered as the seventh item in the list; etc.  If the item number
            is negative, C1-C6 are ignored and the item is deleted.  If -ALL,
            the table is erased.  Items are as follows (items 41-62 are
            required only if simplified elastic-plastic code calculations are
            to be performed):

            1,2,...20 - N1, N2, ... N20

            21,22,...40 - S1, S2, ... S20

            41,42,...50 - T1, T2, ... T10

            51,52,...60 - Sm1, Sm2, ... Sm10

            61 - M (first elastic-plastic material parameter)

            62 - N (second elastic-plastic material parameter)

        c1, c2, c3, . . . , c6
            Data inserted into six locations starting with STITM.  If a value
            is already in one of these locations, it will be redefined.  A
            blank retains the previous value.

        Notes
        -----
        Defines the fatigue alternating stress (S) vs. cycles (N) table and the
        design stress-intensity value (Sm) vs. temperature (T) table.  May also
        be used to modify any previously stored property tables.  Log-log
        interpolation is used in the S vs. N table and linear interpolation is
        used in the Sm vs. T table.  Cycles and temperatures must be input in
        ascending order; S and Sm values in descending order.  Table values
        must be supplied in pairs, i.e., every N entry must have a
        corresponding S entry, etc.  Not all property pairs per curve need be
        used.  If no S vs. N table is defined, the fatigue evaluation will not
        produce usage factor results.  See the Structural Analysis Guide for
        details.
        """
        command = "FP,%s,%s,%s,%s,%s,%s,%s" % (str(stitm), str(c1), str(c2), str(c3), str(c4), str(c5), str(c6))
        return self.run(command, **kwargs)

    def term(self, kywrd="", opt1="", opt2="", opt3="", **kwargs):
        """APDL Command: TERM

        Specifies various terminal driver options.

        Parameters
        ----------
        ncopy
            Activate hard copy device for NCOPY (0,1,2, etc.) copies.

        Notes
        -----
        Used only with terminal driver names on /SHOWDISP command.

        This command is also valid in PREP7.
        """
        command = "TERM,%s,%s,%s,%s" % (str(kywrd), str(opt1), str(opt2), str(opt3))
        return self.run(command, **kwargs)

    
    def soluopt(self, **kwargs):
        """APDL Command: SOLUOPT

        Specifies "Solution options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "SOLUOPT,"
        return self.run(command, **kwargs)

    
    
    def bflist(self, node="", lab="", **kwargs):
        """APDL Command: BFLIST

        Lists the body force loads on nodes.

        Parameters
        ----------
        node
            Node at which body load is to be listed.  If ALL (or blank), list
            for all selected nodes [NSEL].  If NODE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for NODE.

        lab
            Valid body load label. If ALL (or blank), use all appropriate
            labels. See the BF command for labels. In an explicit dynamic
            analysis, the only valid body load label is TEMP.

        Notes
        -----
        Lists the body force loads for the specified node and label.  Nodal
        body loads may be defined with the BF command (except in an explicit
        dynamic analysis).

        The command BFLIST,TEMP can be used in an explicit dynamic analysis to
        list temperature loads that are read in by the LDREAD command. BFLIST
        cannot be used to list temperature loads defined by the EDLOAD command
        (use EDLOAD,LIST to list this type of load).

        This command is valid in any processor.
        """
        command = "BFLIST,%s,%s" % (str(node), str(lab))
        return self.run(command, **kwargs)

    def pmap(self, form="", discon="", **kwargs):
        """APDL Command: PMAP

        Creates mapping of the path geometry by defining path interpolation
        division points.

        Parameters
        ----------
        form
            Defines the mapping method:

            UNIFORM - Maps uniform divisions (specified on the nDiv argument of the PATH command)
                      between specified points.  This is the default.

            ACCURATE - Map geometry using a small division at the beginning and end of each segment.
                       This gives you accurate derivatives, integrals,
                       tangents, and normals for curves which do not have
                       continuous slopes at the specified points. To create
                       nonuniform divisions, the nDiv argument of the PATH
                       command must be greater than 2.

        discon
            Sets mapping for discontinuities in the field.  The divisions are
            modified to put a point just before and just after the
            discontinuity.  The valid label is MAT, for a material
            discontinuity.  No discontinuity is the default.  Discontinuity
            mapping involves the NOAV option on the PDEF command.
        """
        command = "PMAP,%s,%s" % (str(form), str(discon))
        return self.run(command, **kwargs)

    
    def plnsol(self, item="", comp="", kund="", fact="", fileid ="", **kwargs):
        """APDL Command: PLNSOL

        Displays results as continuous contours.

        Parameters
        ----------
        item
            Label identifying the item.  Valid item labels are shown in
            Table 220: PLNSOL - Valid Item and Component Labels below.  Some
            items also require a component label.

        comp
            Component of the item (if required).  Valid component labels are
            shown in  Table 220: PLNSOL - Valid Item and Component Labels
            below.

        kund
            Undisplaced shape key:

            0 - Do not overlay undeformed structure display

            1 - Overlay displaced contour plot with undeformed display (appearance is system-
                dependent)

            2 - Overlay displaced contour plot with undeformed edge display (appearance is
                system-dependent)

        fact
            Scale factor for 2-D display for contact items.  Default value is
            1.  A negative scaling factor may be used to invert the display.

        fileid
            The file index number (obtained via the NLDIAG,NRRE,ON command).
            Valid only for Item = NRRE.

        Notes
        -----
        Displays the solution results as continuous contours across element
        boundaries for the selected nodes and elements. For example, PLNSOL,S,X
        displays the X component of stress S (that is,  the SX stress
        component). Various element results depend upon the recalculation
        method and the selected results location [AVPRIN, RSYS, LAYER, SHELL,
        and NSEL].  Contours are determined by linear interpolation within each
        element from the nodal values, which are averaged at a node whenever
        two or more elements connect to the same node (except for FMAG, which
        is summed at the node).

        For PowerGraphics displays [/GRAPHICS,POWER], results are plotted only
        for the model exterior surface.  The items marked with [2] are not
        supported by PowerGraphics. To plot midside nodes, you must first issue
        /EFACET,2.

        Table: 220:: : PLNSOL - Valid Item and Component Labels
        """
        command = "PLNSOL,%s,%s,%s,%s,%s" % (str(item), str(comp), str(kund), str(fact), str(fileid))
        return self.run(command, **kwargs)

    
    def lcoper(self, oper="", lcase1="", oper2="", lcase2="", **kwargs):
        """APDL Command: LCOPER

        Performs load case operations.

        Parameters
        ----------
        oper
            Valid operations are:

            ZERO - Zero results portion of database (LCASE1 ignored).

            SQUA - Square database values (LCASE1 ignored).

            SQRT - Square root of database (absolute) values (LCASE1 ignored).

            LPRIN - Recalculate line element principal stresses (LCASE1 ignored).  Stresses are as
                    shown for the NMISC items of the ETABLE command for the
                    specific line element type.

            ADD - Add LCASE1 to database values.

            SUB - Subtract LCASE1 from database values.

            SRSS - Square root of the sum of the squares of database and LCASE1.

            MIN - Compare and save in database the algebraic minimum of database and LCASE1.

            MAX - Compare and save in database the algebraic maximum of database and LCASE1.

            ABMN - Compare and save in database the absolute minimum of database and LCASE1 (based
                   on magnitudes, then apply the corresponding sign).

            ABMX - Compare and save in database the absolute maximum of database and LCASE1 (based
                   on magnitudes, then apply the corresponding sign).

        lcase1
            First load case in the operation (if any).  See LCNO of the LCDEF
            command. If ALL, repeat operations using all selected load cases
            [LCSEL].

        oper2
            Valid operations are:

            MULT - Multiplication: LCASE1*LCASE2

            CPXMAX - This option does a phase angle sweep to calculate the maximum of derived
                     stresses and equivalent strain for a complex solution
                     where LCASE1 is the real part and LCASE2 is the imaginary
                     part. The Oper field is not applicable with  this option.
                     Also, the LCABS and SUMTYPE commands have no effect on
                     this option. The value of S3 will be a minimum.   This
                     option does not apply to derived displacement amplitude
                     (USUM). Load case writing (LCWRITE) is not supported. See
                     POST1 and POST26 – Complex Results Postprocessing in the
                     Mechanical APDL Theory Reference for more information.

        lcase2
            Second load case.  Used only with Oper2 operations.

        Notes
        -----
        LCOPER operates on the database and one or two load cases according to:

        Database = Database Oper (LCASE1 Oper2 LCASE2)

        where operations Oper and Oper2 are as described above.  Absolute
        values and scale factors may be applied to the load cases before the
        operations [LCABS, LCFACT].  If LCASE1 is not specified, only operation
        Oper is performed on the current database.  If LCASE2 is specified,
        operation Oper2 will be performed before operation Oper.  If LCASE2 is
        not specified, operation Oper2 is ignored.  Solution items not
        contained [OUTRES] in either the database or the applicable load cases
        will result in a null item during a load case operation.  Harmonic
        element data read from a result file load case are processed at zero
        degrees.  All load case combinations are performed in the solution
        coordinate system, and the data resulting from load case combinations
        are stored in the solution coordinate system.  The resultant data are
        then transformed to the active results coordinate system [RSYS] when
        listed or displayed. Except in the cases of Oper = LPRIN, ADD, or SUB,
        you must use RSYS,SOLU to list or display, and in the case of layered
        elements, the layer (LAYER) must also be specified.

        Use the FORCE command prior to any combination operation to correctly
        combine the requested force type.

        If Oper2=CPXMAX, the derived stresses and strain calculation do not
        apply to line elements.
        """
        command = "LCOPER,%s,%s,%s,%s" % (str(oper), str(lcase1), str(oper2), str(lcase2))
        return self.run(command, **kwargs)

    def psdspl(self, tblno="", rmin="", rmax="", **kwargs):
        """APDL Command: PSDSPL

        Defines a partially correlated excitation in a PSD analysis.

        Parameters
        ----------
        tblno
            Input PSD table number defined with PSDVAL command.

        rmin
            Minimum distance between excitation points which are partially
            correlated. Excited nodes closer than RMIN will be fully
            correlated.

        rmax
            Maximum distance between excitation points which are partially
            correlated. Excited nodes farther apart than RMAX will be
            uncorrelated.

        Notes
        -----
        Defines a partially correlated excitation in terms of a sphere of
        influence relating excitation point geometry (in a PSD analysis).  If
        the distance between any two excitation points is less than RMIN, then
        the excitation is fully correlated.  If the distance is greater than
        RMAX, then the excitation is uncorrelated.  If the distance lies
        between RMIN and RMAX, then the excitation is partially correlated with
        the degree of correlation dependent on the separation distance between
        the points. This command is not available for a pressure PSD analysis.

        This command is also valid in PREP7.
        """
        command = "PSDSPL,%s,%s,%s" % (str(tblno), str(rmin), str(rmax))
        return self.run(command, **kwargs)

    
    def slashdelete(self, fname="", ext="", distkey="", **kwargs):
        """APDL Command: /DELETE

        Deletes a file.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

        ext
            Filename extension (eight-character maximum).

        distkey
            Key that specifies whether the file deletion is performed
            on all processes in distributed parallel mode (Distributed
            ANSYS):

            1 (ON or YES) - The program performs the file deletion
            locally on each process.

            0 (OFF or NO) - The program performs the file deletion
            only on the master process (default).

        Notes
        -----
        In distributed parallel mode (Distributed ANSYS), only the
        master process will delete Fname.Ext by default. However, when
        DistKey is set to 1 (or ON or YES), the command is executed by
        all processes. In this case, Fname will automatically have the
        process rank appended to it.  This means FnameN.Ext will be
        deleted by all processes, where N is the Distributed ANSYS
        process rank. For more information see Differences in General
        Behavior in the Parallel Processing Guide.
        """
        return self.run(f"/DELETE,{fname},{ext},,{distkey}", **kwargs)

    def anharm(self, nfram="", delay="", ncycl="", nperiod="", cms_antype="",
               cms_modopt="", **kwargs):
        """APDL Command: ANHARM

        Produces an animated sequence of time-harmonic results or complex mode
        shapes.

        Parameters
        ----------
        nfram
            Number of frame captures per cycle.  Defaults to 12.

        delay
            Time delay (seconds) during animation.  Defaults to 0.1 seconds.

        ncycl
            Number of animation cycles.  Defaults to 5.  Not available in the
            GUI.

        nperiod
            Period number for the second set of frames showing the decay or
            growth of a mode shape. Only applies to complex mode shape
            animation. Defaults to 1, animating the decay or growth on the
            first period. Issue -1 to animate without decay or growth.

        cms_antype
            Analysis type performed in the CMS use pass. No default.

            MODAL - Modal analysis

            HARMIC - Harmonic analysis

        cms_modopt
            Mode extraction method selected in the CMS use pass. No default.

            UNSYM - Unsymmetric matrix

            DAMP - Damped system

            QRDAMP - Damped system using QR algorithm

        Notes
        -----
        ANHARM invokes an ANSYS macro which produces an animated sequence of:

        Time-harmonic results in the case of a harmonic analysis
        (ANTYPE,HARMIC)

        Complex mode shapes in the case of a modal analysis (ANTYPE,MODAL).

        In both cases, the results are those of the last plot action (for
        example, PLNSOL,B,SUM).

        The animation converts the complex solution variables (real and
        imaginary sets) into time varying results over one period. For example,
        if NFRAM = 12, then the frame captures are in increments of 30 degree
        phase angles.

        A second set of NFRAM frames will be generated for damped eigenmodes
        from complex eigensolvers to visualize any exponential decay or growth
        of the oscillations. The second set generated will display frames from
        the period number specified by NPERIOD.

        In a CMS analysis, the ANHARM command can be used after the CMS
        expansion pass or the use pass. To use ANHARM after the expansion pass,
        you must indicate whether a modal analysis or a harmonic analysis was
        performed in the CMS use pass by setting CMS_ANTYPE to either MODAL or
        HARMIC. If the use pass was a modal analysis, you must also set the
        CMS_MODOPT field to indicate the mode extraction method that was used
        (UNSYM, DAMP, or QRDAMP). If CMS_MODOPT = QRDAMP, it is assumed that
        CPXMOD was set to ON in the MODOPT command to request complex
        eigenmodes. If the ANHARM command is used after the use pass, it is not
        necessary to set the CMS_ANTYPE or CMS_MODOPT arguments.

        For more information about complex results postprocessing, see POST1
        and POST26 – Complex Results Postprocessing in the Mechanical APDL
        Theory Reference
        """
        command = "ANHARM,%s,%s,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(nperiod), str(cms_antype), str(cms_modopt))
        return self.run(command, **kwargs)

    def bfllist(self, line="", lab="", **kwargs):
        """APDL Command: BFLLIST

        Lists the body force loads on a line.

        Parameters
        ----------
        line
            Line at which body load is to be listed.  If ALL (or blank), list
            for all selected lines [LSEL].  If LINE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for LINE.

        lab
            Valid body load label. If ALL, use all appropriate labels. Load
            labels are listed under "Body Loads" in the input table for each
            element type in the Element Reference. See the BFL command for
            labels.

        Notes
        -----
        Lists the body force loads for the specified line and label.  Body
        loads may be defined on a line with the BFL command.

        This command is valid in any processor.
        """
        command = "BFLLIST,%s,%s" % (str(line), str(lab))
        return self.run(command, **kwargs)

    def pcircle(self, xcentr="", ycentr="", xlrad="", **kwargs):
        """APDL Command: /PCIRCLE

        Creates an annotation circle (GUI).

        Parameters
        ----------
        xcentr
            Circle X center location (-1.0 < X < 2.0).

        ycentr
            Circle Y center location (-1.0 < Y < 1.0).

        xlrad
            Circle radius length.

        Notes
        -----
        Creates an annotation circle to be written directly onto the display at
        a specified location.  This is a command generated by the Graphical
        User Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All circles are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC and the /PSPEC command to set
        the attributes of the circle.

        This command is valid in any processor.
        """
        command = "/PCIRCLE,%s,%s,%s" % (str(xcentr), str(ycentr), str(xlrad))
        return self.run(command, **kwargs)

    
    def plopts(self, label="", key="", **kwargs):
        """APDL Command: /PLOPTS

        Controls graphics options on subsequent displays.

        Parameters
        ----------
        label
            Apply display items as selected from the following labels:

            INFO - Controls the display of the legend (ON or OFF) and allows the choice of preset
                   or Multi-legend placement. Control is provided by the KEY
                   values. (Defaults to KEY=3 when the GUI is on. Defaults to
                   KEY= 2 otherwise.)

            LEG1 - Header portion of legend column (defaults to ON).

            LEG2 - View portion of legend column (defaults to ON (except off with contour
                   displays)).

            LEG3 - View the contour section of the legend column (defaults to ON).

            FRAME - Frame border lines around windows (defaults to ON).

            TITLE - Title (bottom left text) (defaults to ON).

            MINM - Min-Max symbols on contour displays (defaults to ON).

            LOGO - ANSYS logo (defaults to OFF (displayed as text at top of legend column)).  If
                   KEY = ON, the text is removed from legend column but the
                   logo symbol is displayed in whichever active window is
                   either in the uppermost right corner and on top, or if there
                   is no window in that location, then in the window to the
                   furthest right of the screen.  Version information remains
                   in the legend column.

            WINS - Controls whether graphics windows automatically stretch or shrink to adjust to
                   screen size as the legend column is turned off or on
                   [/PLOPTS,INFO] (defaults to ON).  If WINS is on and the
                   legend column is changed from off to on, all windows are
                   shrunk regardless of what their correct size is.

            WP - Working plane (defaults to OFF).  The working plane is drawn as part of the
                 display (not just an overlaid image as in WPSTYL).  This
                 option is best used in combination with a hidden-line
                 technique [/TYPE].

            DATE - Controls the display of the date and time in your legend. Subsequent KEY values
                   control the display as follows:

            FILE - Controls the display of the ANSYS jobname in your legend. Subsequent KEY values
                   control the display as follows:

        key
            Switch:

            OFF or 0 - Do not apply this display item. For Label = DATE, no time or date are
                       displayed.

            ON or 1 - Apply this display item. For Label = DATE, show only the date.

            AUTO or 2 - For Label = INFO, initiate Auto-legend mode.  If the display has contours, the
                        legend is ON; if the display has no contours, the
                        legend is OFF. For Label = DATE, display both the date
                        and time.

            3 - For Label = INFO , switch to Multi-legend mode. See the /UDOC command for the
                available legend configurations.

        Notes
        -----
        Use /PLOPTS,STAT to display settings.  Use /PLOPTS,DEFA to reset all
        specifications back to their defaults.

        When you perform multiple results displays, contours on the legend
        column may be truncated.  To avoid this, specify /PLOPTS,LEG1,0.

        The Multi-legend mode provides a number of legend data item priority
        and placement options. These options are accessed via the GUI at
        Utility Menu> PlotCtrls> Window Controls> Window Options. The /UDOC
        command provides command line options for this capability.

        This command is valid in any processor.

        This command is not available for Academic Research or Teaching level
        products
        """
        command = "/PLOPTS,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    def spval(self, tblno="", curvno="", sv1="", sv2="", sv3="", sv4="",
              sv5="", sv6="", sv7="", **kwargs):
        """APDL Command: SPVAL

        Defines multi-point response spectrum values.

        Parameters
        ----------
        tblno
            Input table number. It corresponds to TBLNO on the SPFREQ command.

        curvno
            Input curve number. It corresponds to CURVNO on the SPDAMP command
            (optional).

        sv1, sv2, sv3, , , . . . , sv7
            Spectral values corresponding to the frequency points (SPFREQ) and
            damping ratio (SPDAMP). Values are interpreted as defined with the
            SPUNIT command.

        Notes
        -----
        Defines multi-point response spectrum values to be associated with the
        previously defined frequency points (SPFREQ). It can also be associated
        with the previously defined damping value (SPDAMP). If CURVNO is not
        specified, the input spectrum is not associated with a damping value.

        Repeat SPVAL command for additional values, up to the number of
        frequency points (SPFREQ). Values are added after the last nonzero
        value.

        The interpolation method between response spectrum points and curves is
        specified using KeyInterp on the SPUNIT command. It is logarithmic by
        default.

        Use the SPTOPT and STAT commands to list current spectrum curve values.

        This command is also valid in PREP7.
        """
        command = "SPVAL,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(tblno), str(curvno), str(sv1), str(sv2), str(sv3), str(sv4), str(sv5), str(sv6), str(sv7))
        return self.run(command, **kwargs)

    
    
    
    
    def spdamp(self, tblno="", curvno="", dampratio ="", **kwargs):
        """APDL Command: SPDAMP

        Defines input spectrum damping in a multi-point response spectrum
        analysis.

        Parameters
        ----------
        tblno
            Input table number. Corresponds to the frequency table number
            (TBLNO on the SPFREQ command).

        curvno
            Input curve number. Corresponds to the spectrum values curve number
            (CURVNO on the SPVAL command).

        dampratio
            Damping ratio for the response spectrum curve. Up to 20 different
            curves may be defined, each with a different damping ratio. Damping
            values must be input in ascending order.

        Notes
        -----
        Defines multi-point response spectrum damping value to be associated
        with:

        Previously defined frequency points (SPFREQ).

        Subsequently defined spectrum points (SPVAL).

        Damping values are used only to identify input spectrum values for the
        mode coefficients calculation.

        The curve number must be input in ascending order starting with 1.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "SPDAMP,%s,%s,%s" % (str(tblno), str(curvno), str(dampratio))
        return self.run(command, **kwargs)

    def sumtype(self, label="", **kwargs):
        """APDL Command: SUMTYPE

        Sets the type of summation to be used in the following load case
        operations.

        Parameters
        ----------
        label
            Summation type

            COMP - Combine element component stresses only.  Stresses such as average nodal
                   stresses, principal stresses, equivalent stresses, and
                   stress intensities are derived from the combined element
                   component stresses. Default.

            PRIN - Combine principal stress, equivalent stress, and stress intensity directly as
                   stored on the results file.  Component stresses are not
                   available with this option.

        Notes
        -----
        Issue SUMTYPE,PRIN when you want to have a load case operation (LCOPER)
        act on the principal / equivalent stresses instead of the component
        stresses. Also issue SUMTYPE,PRIN when you want to read in load cases
        (LCASE). Note that the SUMTYPE setting is not maintained between /POST1
        sessions.

        SUMTYPE,PRIN also causes principal nodal values to be the average of
        the contibuting principal element nodal values (see AVPRIN,1).

        BEAM188 and BEAM189 elements compute principal stress, equivalent
        stress, and stress intensity values on request instead of storing them
        on the results file;  SUMTYPE,PRIN does not apply for these elements.
        """
        command = "SUMTYPE,%s" % (str(label))
        return self.run(command, **kwargs)

    
    def synchro(self, ratio="", cname="", **kwargs):
        """APDL Command: SYNCHRO

        Specifies whether the excitation frequency is synchronous or
        asynchronous with the rotational velocity of a structure.

        Parameters
        ----------
        ratio
            The ratio between the frequency of excitation and the frequency of
            the rotational velocity of the structure. This value must be
            greater than 0. The default is an unbalance excitation (RATIO =
            1.0).

        cname
            The name of the rotating component on which to apply the harmonic
            excitation.

        Notes
        -----
        The SYNCHRO command specifies whether the excitation frequency is
        synchronous or asynchronous with the rotational velocity of a structure
        in a harmonic analysis. Use the command to take into account rotating
        harmonic forces on rotating structures.

        Mechanical APDL calculatestes the rotational velocity Ω of the
        structure from the excitation frequency f, defined (via the HARFRQ
        command) as Ω = 2πf / RATIO. The rotational velocity is applied along
        the direction cosines of the rotation axis (specified via an OMEGA or
        CMOMEGA command).

        Specifying any value for RATIO causes a general rotational force
        excitation and not an unbalance force. To define an unbalance
        excitation force (F = Ω2 * Unb), RATIO should be left blank (the nodal
        unbalance Unb is specified via the F command).

        The SYNCHRO command is valid only for a full-solution harmonic analysis
        (HROPT,Method = FULL) and the Variational Technology method
        (HROPT,Method = VT) involving a rotating structure (OMEGA or CMOMEGA)
        with Coriolis enabled in a stationary reference frame
        (CORIOLIS,,,,RefFrame = ON).
        """
        command = "SYNCHRO,%s,%s" % (str(ratio), str(cname))
        return self.run(command, **kwargs)

    
    def paput(self, parray="", popt="", **kwargs):
        """APDL Command: PAPUT

        Retrieves path information from an array variable.

        Parameters
        ----------
        parray
            Name of the array variable containing the path information.

        popt
            Specifies which path data to retrieve:

            POINTS - Retrieve path point information (specified with the PPATH command and stored
                     with the PAGET,POINTS command).  The path data name will
                     be assigned to the path points.

            TABLE - Retrieve path data items (defined via the PDEF command and stored with the
                    PAGET,,TABLE command).

            LABEL - Retrieve path labels stored with the PAGET,,LABEL command.

        Notes
        -----
        When retrieving path information, restore path points (POINTS option)
        first, then the path data (TABLE option), and then the path labels
        (LABEL option).
        """
        command = "PAPUT,%s,%s" % (str(parray), str(popt))
        return self.run(command, **kwargs)

    def psdunit(self, tblno="", type_="", gvalue="", **kwargs):
        """APDL Command: PSDUNIT

        Defines the type of input PSD.

        Parameters
        ----------
        tblno
            Input table number.

        type\_
            Label identifying the type of spectrum:

            DISP - Displacement spectrum (in terms of displacement2/Hz ).

            VELO - Velocity spectrum (in terms of velocity2/Hz ).

            ACEL - Acceleration spectrum (in terms of acceleration2/Hz ).

            ACCG - Acceleration spectrum (in terms of g2/Hz ).

            FORC - Force spectrum (in terms of force2/Hz ).

            PRES - Pressure spectrum (in terms of pressure2/Hz ).

        gvalue
            Value of acceleration due to gravity in any arbitrary units for
            Type=ACCG.  Default is 386.4 in/sec2.

        Notes
        -----
        Defines the type of PSD defined by the PSDVAL, COVAL, and QDVAL
        commands.

        Force (FORC) and pressure (PRES) type spectra can be used only as a
        nodal excitation.

        GVALUE is valid only when type ACCG is specified.  A zero or negative
        value cannot be used.  A parameter substitution can also be performed.

        This command is also valid in PREP7.
        """
        command = "PSDUNIT,%s,%s,%s" % (str(tblno), str(type_), str(gvalue))
        return self.run(command, **kwargs)

    def alphad(self, value="", **kwargs):
        """APDL Command: ALPHAD

        Defines the mass matrix multiplier for damping.

        Parameters
        ----------
        value
            Mass matrix multiplier for damping.

        Notes
        -----
        This command defines the mass matrix multiplier α used to form the
        viscous damping matrix [C] = α[M] where [M] is the mass matrix.

        Values of  α may also be input as a material property (use the ALPD
        label on the MP command). If ALPD is included, the ALPD value is added
        to the ALPHAD value as appropriate (see Damping Matrices in the
        Mechanical APDL Theory Reference). Damping is not used in the static
        (ANTYPE,STATIC) or buckling (ANTYPE,BUCKLE) analyses.

        This command is also valid in PREP7.
        """
        command = "ALPHAD,%s" % (str(value))
        return self.run(command, **kwargs)

    def triad(self, lab="", **kwargs):
        """APDL Command: /TRIAD

        Shows the global XYZ coordinate triad on displays.

        Parameters
        ----------
        lab
            Display triad as follows:

            ORIG - Display triad at global origin (default).

            OFF - Turn off triad display.

            LBOT - Display triad in lower left screen corner.

            RBOT - Display triad in lower right screen corner.

            LTOP - Display triad in upper left screen corner.

            RTOP - Display triad in upper right screen corner.

        Notes
        -----
        For efficiency, ANSYS 3-D graphics logic maintains a single data
        structure (segment), which includes the triad as a 3-D data object.  If
        a 3-D device is involved (/SHOW,3D), and the ANSYS graphics are not
        being displayed as multi-plots, then the triad location is determined
        by the view settings for Window #1.  A request for triad display
        anywhere except for the origin could yield an improper display in
        windows 2 through 5. The program displays the same segment in all
        windows.  The view settings of each window constitute the only
        difference in the display in the active windows.

        This command is valid in any processor.
        """
        command = "/TRIAD,%s" % (str(lab))
        return self.run(command, **kwargs)

    def devdisp(self, label="", key="", **kwargs):
        """APDL Command: /DEVDISP

        Controls graphics device options.

        Parameters
        ----------
        label
            Device function label:

            BBOX - Disables display information sorting for PowerGraphics displays. When activated
                   (KEY = 1 or ON), model rotations and replots are performed
                   without recalculating edge and surface data. This will speed
                   up the rotation (especially for 2-D displays) of large
                   models, although the display information will not be
                   resolved as quickly (you will see a bounding box instead of
                   the model during dynamic rotations). The default is OFF (KEY
                   = 0).

            DITHER - Dithering.  When turned on (default), dithering smooths transitions in color
                     intensity.  Applies only to Z-buffered displays.

            FONT - Font selection for the ANSYS graphics window.  When Label = FONT, the command
                   format is: /DEVDISP,FONT,KEY,Val1,Val2,Val3,VAL4,Val5,Val6,
                   where KEY determines the type of font being controlled, and
                   values 1 through 6 control various font parameters. Note
                   that these values are device specific; using the same
                   command input file [/INPUT] on different machines may yield
                   different results.The following KEY values determine the
                   font information that will be supplied to the appropriate
                   driver (e.g., Postscript, X11, Win32, JPEG, ...):

            KEY = 1 - The command controls the LEGEND (documentation column) font.

            KEY = 2 - The command controls the ENTITY (node and keypoint number) font.

            KEY = 3 - The command controls the ANNOTATION/GRAPH font.

            Linux: Values 1 through 4 are used to find a match in the X11 database of font strings.  Values 1, 2, and 3 are character strings; value 4 is a nonzero integer:    - Val1

            Family name (e.g., Courier*New). Substitute an asterisk (*) for any blank character that appears in a family name. If Val1 = MENU, all other values are ignored, and a font selection menu appears (GUI must be active).  - Val2

            Weight (e.g., medium) - Val3

            Slant (e.g., r) - Val4

            Pixel size (e.g., 14). Note that this value does not affect the annotation fonts (KEY = 3). Use the /TSPEC command to control the pixel size of your annotation fonts.  - Val5

            unused - Val6

            unused - PC: The values are encoded in a PC logical font structure.  Value 1 is a
                     character string, and the remaining values are integers:

            Val1 - Family name (e.g., Courier*New) Substitute an asterisk (*) for any blank
                   character that appears in a family name. If Val1 = MENU, all
                   other values are ignored and a font selection menu appears
                   (GUI must be active). A value containing all blank
                   characters causes ANSYS to use the first available resource
                   it finds.

            Val2 - Weight (0 - 1000)

            Val3 - Orientation (in tenths of a degree)

            Val4 - Height (in logical units) Note that this value does not affect the annotation
                   fonts (KEY =3). Use the /TSPEC command to control the height
                   of your annotation fonts.

            Val5 - Width (in logical units)

            Val6 - Italics (0 = OFF, 1 = ON)

            TEXT - Text size specification for the ANSYS Graphics window. When Label = TEXT, the
                   command format is: /DEVDISP,TEXT,KEY,PERCENT, where KEY
                   determines the type of text being controlled (1 for LEGEND,
                   and 2 for ENTITY), and PERCENT specifies the new text size
                   as a percent of the default text size.  If PERCENT = 100,
                   the new text size is precisely the default size.  If PERCENT
                   = 200, the new text size is twice the default text size.

        key
            Control key:

            OFF or 0 - Turns specified function off.

            ON or 1 - Turns specified function on.
        """
        command = "/DEVDISP,%s,%s" % (str(label), str(key))
        return self.run(command, **kwargs)

    def nusort(self, **kwargs):
        """APDL Command: NUSORT

        Restores original order for nodal data.

        Notes
        -----
        This command restores the nodal data to its original order (sorted in
        ascending node number sequence) after an NSORT command.  Changing the
        selected nodal set [NSEL] also restores the original nodal order.
        """
        command = "NUSORT,"
        return self.run(command, **kwargs)

    def biot(self, label="", **kwargs):
        """APDL Command: BIOT

        Calculates the Biot-Savart source magnetic field intensity.

        Parameters
        ----------
        label
            Controls the Biot-Savart calculation:

            NEW - Calculate the magnetic source field intensity (Hs) from the selected set of
                  source elements to the selected set of nodes.  Overwrite any
                  existing Hs field values.

            SUM - Calculate the Hs field from the selected set of source elements to the selected
                  set of nodes.  Accumulate with any existing Hs field values.

        Notes
        -----
        Calculates the Biot-Savart source magnetic field intensity (Hs) at the
        selected nodes from the selected source elements.  The calculation is
        done at the time the BIOT command is issued.

        Source elements include primitives described by element SOURC36, and
        coupled-field elements SOLID5, LINK68, and SOLID98.  Current conduction
        elements do not have a solved-for current distribution from which to
        calculate a source field until after the first substep.  Inclusion of a
        current conduction element Hs field will require a subsequent BIOT,SUM
        command (with SOURC36 elements unselected) and a SOLVE command.

        The units of Hs are as specified by the current EMUNIT command setting.

        This command is also valid in PREP7.
        """
        command = "BIOT,%s" % (str(label))
        return self.run(command, **kwargs)

    def shrink(self, ratio="", **kwargs):
        """APDL Command: /SHRINK

        Shrinks elements, lines, areas, and volumes for display clarity.

        Parameters
        ----------
        ratio
            Shrinkage ratio (input as a decimal (0.0 to 0.5)).  Defaults to 0.0
            (no shrinkage).  Values greater than 0.5 default to 0.1 (10%
            shrinkage).

        Notes
        -----
        Shrinks the elements, lines, areas, and volumes so that adjacent
        entities are separated for clarity.  Portions of this command are not
        supported by PowerGraphics [/GRAPHICS,POWER].

        If only the common lines of non-coplanar faces are drawn (as per the
        /EDGE command), then this command is ignored.

        This command is valid in any processor.
        """
        command = "/SHRINK,%s" % (str(ratio))
        return self.run(command, **kwargs)

    
    def mfsorder(self, gname1="", gname2="", **kwargs):
        """APDL Command: MFSORDER

        Sets up the solution sequence of simultaneous field solver groups for
        code coupling analyses.

        Parameters
        ----------
        gname1, gname2
            Specifies the group name for groups defined by the MFPSIMUL command
            with a character string of up to 80 characters.

        Notes
        -----
        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFSORDER,%s,%s" % (str(gname1), str(gname2))
        return self.run(command, **kwargs)

    
    def fslist(self, nloc1="", nloc2="", ninc="", nev="", nlod="", **kwargs):
        """APDL Command: FSLIST

        Lists the stresses stored for fatigue evaluation.

        Parameters
        ----------
        nloc1, nloc2, ninc
            List stresses from NLOC1 (defaults to 1) to NLOC2 (defaults to
            NLOC1) in steps of NINC (defaults to 1).  If NLOC1 = ALL, NLOC2 and
            NINC are ignored and stresses for all locations are listed.

        nev
            Event number for stress listing (defaults to ALL).

        nlod
            Loading number for stress listing (defaults to ALL).

        Notes
        -----
        Stresses may be listed per location, per event, per loading, or per
        stress condition.  Use FELIST and FLLIST if only event and location
        parameters (no stresses) are to be listed.
        """
        command = "FSLIST,%s,%s,%s,%s,%s" % (str(nloc1), str(nloc2), str(ninc), str(nev), str(nlod))
        return self.run(command, **kwargs)

    
    def nrlsum(self, signif="", label="", labelcsm="", forcetype="", **kwargs):
        """APDL Command: NRLSUM

        Specifies the Naval Research Laboratory (NRL) sum mode combination
        method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF threshold. For single point, multipoint, or DDAM response
            (SPOPT,SPRS, MPRS or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes. Any mode whose significance level is
            less than SIGNIF is considered insignificant and is not contributed
            to the mode combinations. The higher the SIGNIF threshold, the
            fewer the number of modes combined. SIGNIF defaults to 0.001. If
            SIGNIF is specified as 0.0, it is taken as 0.0. (This mode
            combination method is not valid for SPOPT,PSD.)

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default). Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution. Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution. Accelerations, "stress accelerations," "force
                   accelerations," etc., are available.

        labelcsm
            Label identifying the CSM (Closely Spaced Modes) method.

            CSM - Use the CSM method.

            Blank  - Do not use the CSM method (default).

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        This command is also valid in PREP7. This mode combination method is
        usually used for SPOPT,DDAM.

        This CSM method is only applicable in a DDAM analysis (SPOPT,DDAM). The
        CSM method combines two closely spaced modes into one mode when their
        frequencies are within 10 percent of the common mean frequency and
        their responses are opposite in sign. The contribution of these closely
        spaced modes is then included in the NRL sum as a single effective
        mode. Refer to Closely Spaced Modes (CSM) Method in the Mechanical APDL
        Theory Reference for more information.

        NRLSUM is not allowed in ANSYS Professional.
        """
        command = "NRLSUM,%s,%s,%s,%s" % (str(signif), str(label), str(labelcsm), str(forcetype))
        return self.run(command, **kwargs)

    def sfldele(self, line="", lab="", **kwargs):
        """APDL Command: SFLDELE

        Deletes surface loads from lines.

        Parameters
        ----------
        line
            Line to which surface load deletion applies.  If ALL, delete load
            from all selected lines [LSEL].  If LINE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may be substituted for LINE.

        lab
            Valid surface load label.  If ALL, use all appropriate labels.  See
            the SFL command for labels.

        Notes
        -----
        Deletes surface loads (and all corresponding finite element loads) from
        selected lines.

        This command is also valid in PREP7.
        """
        command = "SFLDELE,%s,%s" % (str(line), str(lab))
        return self.run(command, **kwargs)

    def antime(self, nfram="", delay="", ncycl="", autocntrky="", rsltdat="",
               min_="", max_="", **kwargs):
        """APDL Command: ANTIME

        Produces a  sequential contour animation over a range of time.

        Parameters
        ----------
        nfram
            Number of frame captures (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        autocntrky
            Auto-scales contour values, based on the overall subset range of
            values.  The auto-scaling option defaults to 0, no auto-scaling.

        rsltdat
            The results data to be used for the animation sequence.  This can
            be:

            0 - Current load step data (default).

            1 - Range of load step data.

            2 - Range of time data.

        min\_
            The range minimum value.  If left blank defaults to the first data
            point.

        max\_
            The range maximum value.  If left blank defaults to the last data
            point.

        Notes
        -----
        The ANTIME command operates only on graphic display platforms
        supporting the /SEG command. It uses an ANSYS macro to produce an
        animation of contour values for the last plot action command (for
        example, PLDISP).  After executing ANTIME, the ANIM command will replay
        the animated sequence.

        This command functions only in the postprocessor.
        """
        command = "ANTIME,%s,%s,%s,%s,%s,%s,%s" % (str(nfram), str(delay), str(ncycl), str(autocntrky), str(rsltdat), str(min_), str(max_))
        return self.run(command, **kwargs)

    
    
    def awave(self, wavenum="", wavetype="", opt1="", opt2="", val1="",
              val2="", val3="", val4="", val5="", val6="", val7="", val8="",
              val9="", val10="", val11="", val12="", val13="", **kwargs):
        """APDL Command: AWAVE

        Specifies input data for an acoustic incident wave.

        Parameters
        ----------
        wavenum
            Wave number. You specify the integer number for an acoustic
            incident wave inside or outside the model.  The number must be
            between 1 and 20.

        wavetype
            Wave type:

            PLAN - Planar incident wave

            MONO - Monopole or pulsating sphere incident wave

            DIPO - Dipole incident wave

            BACK - Back enclosed loudspeaker

            BARE - Bare loudspeaker

            STATUS - Displays the status of the acoustic wave settings if Wavenum = a number between
                     1 and 20 or ALL.

            DELE - Deletes the acoustic wave settings if Wavenum = a number between 1 and 20 or
                   ALL.

        opt1
            PRES

            PRES - Pressure

            VELO - Velocity

        opt2
            EXT

            EXT - Incident wave outside the model.

            INT - Incident wave inside the model. This option is only available for pure
                  scattered pressure formulation.

        val1, val2, val3, . . . , val13
            If Wavetype = PLAN, MONO, DIPO, BACK, or BARE:

            VAL1 - Amplitude of pressure or normal velocity to the sphere surface.

            VAL2 - Phase angle of the applied pressure or velocity (in degrees). Defaults to 0
                   degrees.

        Notes
        -----
        Use the ASOL command to activate the scattered field algorithm and the
        ASCRES command for output control with the scattered field algorithm.
        Refer to Acoustics in the Mechanical APDL Theory Reference for more
        information about pure scattered field formulation.
        """
        command = "AWAVE,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(wavenum), str(wavetype), str(opt1), str(opt2), str(val1), str(val2), str(val3), str(val4), str(val5), str(val6), str(val7), str(val8), str(val9), str(val10), str(val11), str(val12), str(val13))
        return self.run(command, **kwargs)

    def sf(self, nlist="", lab="", value="", value2="", **kwargs):
        """APDL Command: SF

        Specifies surface loads on nodes.

        Parameters
        ----------
        nlist
            Nodes defining the surface upon which the load is to be applied.
            Use the label ALL or P, or a component name.  If ALL, all selected
            nodes [NSEL] are used (default).  If P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).

        lab
            Valid surface load label. Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.

        value
            Surface load value or table name reference for specifying tabular
            boundary conditions.

        value2
            Second surface load value (if any).

        Notes
        -----
        Individual nodes may not be entered for this command.  The node list is
        to identify a surface and the Nlist field must contain a sufficient
        number of nodes to define an element surface.  The loads are internally
        stored on element faces defined by the specified nodes.  All nodes on
        an element face (including midside nodes, if any) must be specified for
        the face to be used, and the element must be selected.

        If all nodes defining a face are shared by an adjacent face of another
        selected element, the face is not free and will not have a load
        applied.  If more than one element can share the same nodes (for
        example, a surface element attached to a solid element), select the
        desired element type before issuing the SF command. The SF command
        applies only to area and volume elements.

        For shell elements, if the specified nodes include face one (which is
        usually the bottom face) along with other faces (such as edges), only
        face one is used.  Where faces cannot be uniquely determined from the
        nodes, or where the face does not fully describe the load application,
        use the SFE command.  A load key of 1 (which is typically the first
        loading condition on the first face) is used if the face determination
        is not unique.  A uniform load value is applied over the element face.
        """
        command = "SF,%s,%s,%s,%s" % (str(nlist), str(lab), str(value), str(value2))
        return self.run(command, **kwargs)

    def prnear(self, lab="", opt="", kcn="", val1="", val2="", val3="",
               val4="", val5="", val6="", val7="", val8="", val9="", **kwargs):
        """APDL Command: PRNEAR

        Prints the pressure in the near zone exterior to the equivalent source
        surface.

        Parameters
        ----------
        lab
            Print the maximum pressure or sound pressure level:

            POINT - at the point (x,y,z)

            SPHERE - on the spherical structure

            PATH - along the path

        opt
            PSUM

            PSUM  - Maximum complex pressure for acoustics.

            PHAS  - Phase angle of complex pressure for acoustics.

            SPL  - Sound pressure level for acoustics.

            SPLA - A-weighted sound pressure level for acoustics (dBA).

        kcn
            KCN is the coordinate system reference number. It may be 0
            (Cartesian) or any previously defined local coordinate system
            number (>10). Defaults to 0.

        val1, val2, val3, . . . , val9
            For Lab = POINT:

            VAL1 - x coordinate value

            VAL2 - y coordinate value

            VAL3 - z coordinate value

            VAL4 - VAL8 - not used

            VAL9 - Thickness of model in z direction (defaults to 0).

        Notes
        -----
        The command uses the equivalent source principle to calculate the
        pressure in the near zone exterior to the equivalent source surface
        (flagged with the Maxwell surface flag in the preprocessor) for one of
        the following locations:

        A point X, Y, Z in the KCN coordinate system

        A spherical surface in the KCN coordinate system

        A path defined by the PATH and PPATH commands

        To list the pressure results for a path, use the PRPATH command. See
        HFSYM command for the model symmetry.

        To retrieve saved equivalent source data, issue the
        SET,Lstep,Sbstep,,REAL command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PRNEAR,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(opt), str(kcn), str(val1), str(val2), str(val3), str(val4), str(val5), str(val6), str(val7), str(val8), str(val9))
        return self.run(command, **kwargs)

    def mode(self, mode="", isym="", **kwargs):
        """APDL Command: MODE

        Specifies the harmonic loading term for this load step.

        Parameters
        ----------
        mode
            Number of harmonic waves around circumference for this harmonic
            loading term (defaults to 0).

        isym
            Symmetry condition for this harmonic loading term (not used when
            MODE = 0):

            1 - Symmetric (UX, UY, ROTZ, TEMP use cosine terms; UZ uses sine term) (default).

            -1 - Antisymmetric (UX, UY, ROTZ, TEMP use sine terms; UZ uses cosine term).

        Notes
        -----
        Used with axisymmetric elements having nonaxisymmetric loading
        capability (for example, PLANE25, SHELL61, etc.).  For analysis types
        ANTYPE,MODAL, HARMIC, TRANS, and SUBSTR, the term must be defined in
        the first load step and may not be changed in succeeding load steps.

        This command is also valid in PREP7.
        """
        command = "MODE,%s,%s" % (str(mode), str(isym))
        return self.run(command, **kwargs)

    def plfar(self, lab="", option="", phi1="", phi2="", nph1="", theta1="",
              theta2="", ntheta="", val1="", val2="", val3="", **kwargs):
        """APDL Command: PLFAR

        Plots pressure far fields and far field parameters.

        Parameters
        ----------
        lab
            Parameters to plot :

            PRES - Acoustic parameters

            PROT - Acoustic parameters with the y-axis rotated extrusion

        option
            Plot option, based on the specified plot parameter type:

        phi1, phi2
            Starting and ending φ angles (degrees) in the spherical coordinate
            system. Defaults to 0.

        nphi
            Number of divisions between the starting and ending φ angles for
            data computations. Defaults to 0.

        theta1, theta2
            Starting and ending θ angles (degrees) in the spherical coordinate
            system. Defaults to 0 in 3-D and 90 in 2-D.

        ntheta
            Number of divisions between the starting and ending θ angles for
            data computations. Defaults to 0.

        val1
            Radius of the sphere surface. Used only when Option = SUMC, SUMP,
            PHSC, PHSP, SPLC, SPLP, SPAC, SPAP, PSCT, PSPL, TSCT, or TSPL.

        val2
            When Option = SPLC, SPLP, SPAC, or SPAP: Reference rms sound
            pressure. Defaults to 2x10-5 Pa.

        val3
            When Lab = PRES: Thickness of 2-D model extrusion in the z
            direction (no default).

        Notes
        -----
        The PLFAR command plots pressure far fields and far field parameters as
        determined by the equivalent source principle. Use this command to plot
        pressure and acoustic    parameters. See the HFSYM command for the
        model symmetry and the     HFANG command for spatial radiation angles.

        When Option = PWL no plot is generated, but the sound power level
        appears in the output.

        To retrieve saved equivalent source data, issue the
        SET,Lstep,Sbstep,,REAL command.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLFAR,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(lab), str(option), str(phi1), str(phi2), str(nph1), str(theta1), str(theta2), str(ntheta), str(val1), str(val2), str(val3))
        return self.run(command, **kwargs)

    def svplot(self, optionscale="", damp1="", damp2="", damp3="", damp4="",
               **kwargs):
        """APDL Command: SVPLOT

        Displays input spectrum curves.

        Parameters
        ----------
        optionscale
            Flag to activate or deactivate input spectrum value scaling:

            OFF  - Do not scale the input spectrum values with scale factor FACT (SVTYP command).
                   This is the default value.

            ON  - Scale the input spectrum values with scale factor FACT (SVTYP command)

        damp1
            Damping ratio corresponding to DAMP (SV command) defining the first
            spectrum curve.

        damp2
            Damping ratio corresponding to DAMP (SV command) defining the
            second spectrum curve.

        damp3
            Damping ratio corresponding to DAMP (SV command) defining the third
            spectrum curve.

        damp4
            Damping ratio corresponding to DAMP (SV command) defining the
            fourth spectrum curve.

        Notes
        -----
        You can display up to four input spectrum tables (SV and FREQ commands)
        with log X scale. If no damping ratio is specified, all spectrum tables
        are displayed.

        This command is valid in any processor.
        """
        command = "SVPLOT,%s,%s,%s,%s,%s" % (str(optionscale), str(damp1), str(damp2), str(damp3), str(damp4))
        return self.run(command, **kwargs)

    def cgrow(self, action="", par1="", par2="", **kwargs):
        """APDL Command: CGROW

        Defines crack-growth information

        Parameters
        ----------
        action
            Specifies the action for defining or manipulating crack-growth
            data:

            NEW - Initiate a new set of crack-growth simulation data (default).

            CID - Specify the crack-calculation (CINT) ID for energy-release rates to be used in
                  the fracture criterion calculation.

            FCOPTION - Specify the fracture criterion for crack-growth/delamination.

            CPATH - Specify the element component for crack growth.

            DTIME - Specify the initial time step for crack growth.

            DTMIN - Specify the minimum time step for crack growth.

            DTMAX - Specify the maximum time step for crack growth.

            FCRAT - Fracture criterion ratio (fc).

            STOP - Stops the analysis when the specified maximum crack extension is reached.

            METHOD - Define the method of crack propagation.

        Notes
        -----
        When Action = NEW, the CGROW command initializes a crack-growth
        simulation set. Subsequent CGROW commands define the parameters
        necessary for the simulation.

        For multiple cracks, issue multiple CGROW,NEW commands (and any
        subsequent CGROW commands necessary to define the parameters) for each
        crack.

        If the analysis is restarted (ANTYPE,,RESTART), the CGROW command must
        be re-issued.

        For VCCT crack growth:

        Crack-growth element components must use the crack tip nodes as the
        starting nodes of the crack path.

        Fracture criteria (Action = FCOPTION) use energy-release rates
        calculated via VCCT technology (CINT,TYPE,VCCT). For information about
        the fracture criteria available, see Fracture Criteria in the Fracture
        Analysis Guide or the documentation for the TB,CGCR command.

        For XFEM-based crack growth:

        When using XFEM to grow the crack (CGROW,METHOD,XFEM), the crack
        specification originates via the XFENRICH and XFDATAa   >       c   o
        m   m   a   n   d   s   .       /   p   >   /   l   i   >   l   i
        c   l   a   s   s   =   "   l   i   s   t   i   t   e   m   "   >   p
        >   I   n       a   n       X   F   E   M   -   b   a   s   e   d
        c   r   a   c   k       g   r   o   w   t   h       a   n   a   l   y
        s   i   s   ,       e   m       c   l   a   s   s   =   "   r   e   p
        l   a   c   e   a   b   l   e   "   >   c   o   d   e   >   A   c   t
        i   o   n   /   c   o   d   e   >   /   e   m   >       =       C   P
        A   T   H   ,   D   T   M   I   N   ,   D   T   M   A   X       a   n
        d       S   T   O   P       h   a   v   e       n   o       e   f   f
        e   c   t   .   /   p   >   /   l   i   >   /   u   l   >   /   d   i
        v   >   /   d   i   v   >   d   i   v       c   l   a   s   s   =   "
        r   e   f   s   e   c   t   1   "       t   i   t   l   e   =   "   M
        e   n   u       P   a   t   h   s   "   >   a       n   a   m   e   =
        "   C   G   R   O   W   .   m   e   n   u   p   a   t   h   "   >   /
        a   >   h   2   >   M   e   n   u       P   a   t   h   s   /   h   2
        >   t   a   b   l   e       b   o   r   d   e   r   =   "   0   "
        s   u   m   m   a   r   y   =   "   S   i   m   p   l   e       l   i
        s   t   "       c   l   a   s   s   =   "   s   i   m   p   l   e   l
        i   s   t   "   >   t   r   >   t   d   >   s   p   a   n       c   l
        a   s   s   =   "   g   u   i   m   e   n   u   "   >   s   t   r   o
        n   g   >   T   h   i   s       c   o   m   m   a   n   d       c   a
        n   n   o   t       b   e       a   c   c   e   s   s   e   d       f
        r   o   m       a       m   e   n   u   .   /   s   t   r   o   n   g
        >   /   s   p   a   n   >   /   t   d   >   /   t   r   >   /   t   a
        b   l   e   >   /   d   i   v   >   /   d   i   v   >   h   r   >   p
        c   l   a   s   s   =   "   l   e   g   a   l   f   o   o   t   e   r
        "   >   s   m   a   l   l   >   i   >   R   e   l   e   a   s   e
        1   6   .   2       -       &c   o   p   y   ;       S   A   S       I
        P   ,       I   n   c   .       A   l   l       r   i   g   h   t   s
        r   e   s   e   r   v   e   d   .   /   i   >   /   s   m   a   l   l
        >   /   p   >   /   b   o   d   y   >   /   h   t   m   l   >
        """
        command = "CGROW,%s,%s,%s" % (str(action), str(par1), str(par2))
        return self.run(command, **kwargs)

    def kcalc(self, kplan="", mat="", kcsym="", klocpr="", **kwargs):
        """APDL Command: KCALC

        Calculates stress intensity factors in fracture mechanics analyses.

        Parameters
        ----------
        kplan
            Key to indicate stress state for calculation of stress intensity
            factors:

            0 - Plane strain and axisymmetric condition (default).

            1 - Plane stress condition.

        mat
            Material number used in the extrapolation (defaults to 1).

        kcsym
            Symmetry key:

            0 or 1  - Half-crack model with symmetry boundary conditions [DSYM] in the crack-tip
                      coordinate system.  KII = KIII = 0.  Three nodes are
                      required on the path.

            2 - Like 1 except with antisymmetric boundary conditions (KI = 0).

            3 - Full-crack model (both faces).  Five nodes are required on the path (one at the
                tip and two on each face).

        klocpr
            Local displacements print key:

            0 - Do not print local crack-tip displacements.

            1 - Print local displacements used in the extrapolation technique.

        Notes
        -----
        Calculates the stress intensity factors (KI, KII, and KIII) associated
        with homogeneous isotropic linear elastic fracture mechanics.  A
        displacement extrapolation method is used in the calculation (see POST1
        -  Crack Analysis in the Mechanical APDL Theory Reference). This method
        assumes that the displacement calculations are for the plane strain
        state. If the displacement calculations are performed using a plane
        stress formulation, the calculation of the stress intensity factors can
        be converted to the plane strain state by using KPLAN = 1. ANSYS Uses
        minor Poisson's ratio (MP,NUXY) for the stress intensity factor
        calculation, therefore the material's Poisson's ratio must be defined
        using MP,NUXY command. The PATH and PPATH commands must be used to
        define a path with the crack face nodes (NODE1 at the crack tip, NODE2
        and NODE3 on one face, NODE4 and NODE5 on the other (optional) face).
        A crack-tip coordinate system, having x parallel to the crack face (and
        perpendicular to the crack front) and y perpendicular to the crack
        face, must be the active RSYS and CSYS before KCALC is issued.
        """
        command = "KCALC,%s,%s,%s,%s" % (str(kplan), str(mat), str(kcsym), str(klocpr))
        return self.run(command, **kwargs)

    def rescombine(self, numfiles="", fname="", ext="", lstep="", sbstep="",
                   fact="", kimg="", time="", angle="", nset="", order="",
                   **kwargs):
        """APDL Command: RESCOMBINE

        Reads results from local results files into the database after a
        distributed memory parallel (Distributed ANSYS) solution.

        Parameters
        ----------
        numfiles
            Number of local results files that are to be read into the database
            from the distributed memory parallel solution. This number should
            be equal to the number of processes used in the parallel solution.

        fname
            File name (jobname) used during the distributed parallel solution.
            The file name must be an alphanumeric string (up to 32 characters)
            enclosed in single quotes.

        ext
            File extension for the results files (for example, RST, RTH, RMG,
            etc.). The file extension must be an alphanumeric string (up to 8
            characters) enclosed in single quotes.

        lstep
            Load step number of the data set to be read (defaults to 1):

            N - Read load step N.

            FIRST - Read the first data set (Sbstep and TIME are ignored).

            LAST - Read the last data set (Sbstep and TIME are ignored).

            NEXT - Read the next data set (Sbstep and TIME are ignored).  If at the last data set,
                   the first data set will be read as the next.

            PREVIOUS - Read the previous data set (Sbstep and TIME are ignored).  If at the first data
                       set, the last data set will be read as the previous.

            NEAR - Read the data set nearest to TIME (Sbstep is ignored).  If TIME is blank, read
                   the first data set.

            LIST - Scan the results files and list a summary of each load step (KIMG, TIME, ANGLE,
                   NSET, and ORDER are ignored.)

        sbstep
            Substep number within Lstep (defaults to the last substep of the
            load step). For a buckling (ANTYPE,BUCKLE) or modal (ANTYPE,MODAL)
            analysis, Sbstep corresponds to the mode number (defaults to the
            first mode). Specify Sbstep = LAST to store the last substep for
            the specified load step.

        fact
            Scale factor applied to data read from the files. If zero (or
            blank), a value of 1.0 is used. A nonzero factor excludes non-
            summable items. Harmonic velocities or accelerations may be
            calculated from the displacement results from a modal
            (ANTYPE,MODAL) or harmonic (ANTYPE,HARMIC) analysis. If Fact =
            VELO, the harmonic velocities (v) are calculated from the
            displacements (d) at a particular frequency (f) according to the
            relationship v = 2πfd. Similarly, if Fact = ACEL, the harmonic
            accelerations (a) are calculated as a = (2πf)2d.

        kimg
            Used only with complex results (harmonic and complex modal
            analyses).

            0 or REAL - Store the real part of a complex solution (default).

            1, 2 or IMAG - Store the imaginary part of a complex solution.

            3 or AMPL - Store the amplitude.

            4 or PHAS - Store the phase angle. The angle value, expressed in degrees, will be between
                        -180°  and +180°.

        time
            Time-point identifying the data set to be read. For a harmonic
            analysis, time corresponds to the frequency. For a buckling
            analysis, time corresponds to the load factor.  Used only in the
            following cases:  If Lstep = NEAR, read the data set nearest to
            TIME. If both Lstep and Sbstep are zero (or blank), read data set
            at time = TIME. If TIME is between two solution time points on the
            results file, a linear interpolation is done between the two data
            sets. Solution items not written to the results file (OUTRES) for
            either data set will result in a null item after data set
            interpolation. If TIME is beyond the last time point on the file,
            the last time point will be used.

        angle
            Circumferential location (0.0 to 360°). Defines the circumferential
            location for the harmonic calculations used when reading from the
            results file. The harmonic factor (based on the circumferential
            angle) is applied to the harmonic elements (PLANE25, PLANE75,
            PLANE78, PLANE83, and SHELL61) of the load case. See the Mechanical
            APDL Theory Reference for details. Note that factored values of
            applied constraints and loads will overwrite any values existing in
            the database.

        nset
            Data set number of the data set to be read. If a positive value for
            NSET is entered, Lstep, Sbstep, KIMG, and TIME are ignored.
            Available set numbers can be determined by RESCOMBINE,,,,LIST.

        order
            Key to sort the harmonic index results. This option applies to
            cyclic symmetry buckling and modal analyses only, and is valid only
            when Lstep = FIRST, LAST, NEXT, PREVIOUS, NEAR or LIST.

            ORDER  - Sort the harmonic index results in ascending order of eigenfrequencies or
                     buckling load multipliers.

            (blank)  - No sorting takes place.

        Notes
        -----
        RESCOMBINE is an ANSYS command macro that allows you to combine results
        from a distributed memory parallel (Distributed ANSYS) solution. In a
        distributed memory parallel solution, a global results file is saved by
        default. However, if you issued DMPOPTION,RST,NO in the parallel
        solution, no global results file is written and all local results files
        will be kept. In this case, you can use the RESCOMBINE command macro in
        the general postprocessor (/POST1) to read results into the database
        for postprocessing.

        In order to use the RESCOMBINE command, all local results files from
        the distributed memory parallel solution must be in the current working
        directory. If running on a single machine, the local results files are
        saved in the working directory by default. If running on a cluster, the
        local results files are kept in the working directory on each compute
        node. For this latter case, you must copy the local results files to
        the working directory on the primary compute node.

        Similar to the SET command, the RESCOMBINE command macro defines the
        data set to be read from the results files into the database. Various
        operations may also be performed during the read operation (see the SET
        command for more details). The database must have the model data
        available (or use the RESUME command before the RESCOMBINE command to
        restore the geometry from Jobname.DB).

        After a set of data is combined into the database using RESCOMBINE, the
        RESWRITE command can be used to write this set of data into a new
        results file. This new results file will essentially contain the
        current set of results data for the entire (i.e., global) model.
        """
        command = "RESCOMBINE,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(numfiles), str(fname), str(ext), str(lstep), str(sbstep), str(fact), str(kimg), str(time), str(angle), str(nset), str(order))
        return self.run(command, **kwargs)

    def path(self, name="", npts="", nsets="", ndiv="", **kwargs):
        """APDL Command: PATH

        Defines a path name and establishes parameters for the path.

        Parameters
        ----------
        name
            Name for this path (eight characters maximum. If nPts is blank, set
            the current path to the path with this name. If nPts is greater
            than zero, create a path of this name. If a path with this name
            already exists, replace it with a new path. If the NAME value is
            STATUS, display the status for path settings.

        npts
            The number of points used to define this path.  The minimum number
            is two, and the maximum is 1000. Default is 2.

        nsets
            The number of sets of data which you can map to this path.  You
            must specify at least four:  X, Y, Z, and S.  Default is 30.

        ndiv
            The number of divisions between adjacent points.  Default is 20.
            There is no maximum number of divisions.

        Notes
        -----
        The PATH command is used to define parameters for establishing a path.
        The path geometry is created by the PPATH command.  Multiple paths may
        be defined and named; however, only one path may be active for data
        interpolation [PDEF] and data operations [PCALC, etc.].  Path geometry
        points and data are stored in memory while in POST1.  If you leave
        POST1, the path information is erased.  Path geometry and data may be
        saved in a file by archiving the data using the PASAVE command.  Path
        information may be restored by retrieving the data using the PARESU
        command.

        For overlapping nodes, the lowest numbered node is assigned to the
        path.

        The number of divisions defined using nDiv does NOT affect the number
        of divisions used by PLSECT and PRSECT.

        For information on displaying paths you have defined, see  the Basic
        Analysis Guide.
        """
        command = "PATH,%s,%s,%s,%s" % (str(name), str(npts), str(nsets), str(ndiv))
        return self.run(command, **kwargs)

    
    def iclwid(self, factor="", **kwargs):
        """APDL Command: /ICLWID

        Scales the line width of circuit builder icons.

        Parameters
        ----------
        factor
            Multiplication factor applied to the default line width (defaults
            to 1). The minimum is 1 and the maximum is 6.

        Notes
        -----
        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "/ICLWID,%s" % (str(factor))
        return self.run(command, **kwargs)

    
    def mffr(self, fname="", lab="", rfini="", rfmin="", rfmax="", **kwargs):
        """APDL Command: MFFR

        Setup Multi-Field relaxation factors for field solutions.

        Parameters
        ----------
        fname
             Field name (MFX) or number (MFS). Must be the ANSYS field (cannot
            be a CFX field).

        lab
            Label name. Valid values are DISP and TEMP.

        rfini
            Initial relaxation factor. Defaults to 0.75.

        rfmin
            Minimum relaxation factor. Defaults to RFINI.

        rfmax
            Maximum relaxation factor. Defaults to RFINI.

        Notes
        -----
        Use this command to relax the field solutions in fluid-solid
        interaction analyses and thermal-thermal analyses for a better
        convergence rate in coupled problems, especially cases that need
        dynamic relaxation. The ANSYS field that has the MFFR command applied
        will do only one nonlinear stagger iteration within each multi-field
        stagger; the convergence of the ANSYS field solver will be satisfied
        through multiple multi-field staggers. Note that the CFX field solver
        can have multiple iterations within the field solver; see the CFX
        documentation for more details. ANSYS will not terminate the nonlinear
        field solution until the ANSYS field solver converges or reaches the
        maximum number of multi-field staggers as specified on MFITER.

        The interface load relaxation (MFRELAX) will be automatically turned
        off for the corresponding surface loads that have MFFR applied. The
        automatic change of the relaxation factor for accelerating the
        nonlinear convergence of the coupled field solution is based on
        Aitken's acceleration scheme.

        This command is valid only with coupled problems involving surface load
        transfer only. No subcycling is allowed for the field solver if using
        this command.
        """
        command = "MFFR,%s,%s,%s,%s,%s" % (str(fname), str(lab), str(rfini), str(rfmin), str(rfmax))
        return self.run(command, **kwargs)

    
    def mapsolve(self, maxsbstep="", **kwargs):
        """APDL Command: MAPSOLVE

        Maps solved node and element solutions from an original mesh to a new
        mesh.

        Parameters
        ----------
        maxsbstep
            The maximum number of substeps for rebalancing the residuals. The
            default value is 5.

        Notes
        -----
        Used during the rezoning process, the MAPSOLVE command maps solved node
        and element solutions from the original mesh to the new mesh and
        achieves equilibrium based on the new mesh.

        Additional substeps are necessary to reduce the residuals to zero.

        During the rebalancing stage, the external loads and time remain
        unchanged.

        The MAPSOLVE command is valid only for rezoning (REZONE).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MAPSOLVE,%s" % (str(maxsbstep))
        return self.run(command, **kwargs)

    def rimport(self, source="", type_="", loc="", lstep="", sbstep="",
                fname="", ext="", spscale="", mscale="", **kwargs):
        """APDL Command: RIMPORT

        Imports initial stresses from an explicit dynamics run into ANSYS.

        Parameters
        ----------
        source
            The type of analysis run from which stresses are imported.

            OFF - Ignore initial stresses.

            DYNA - Get initial stresses from an earlier explicit
            (ANSYS LS-DYNA) run (default).

        type\_
            Type of data imported.  Note that this is an ANSYS-defined
            field; the only valid value is STRESS.

        loc
            Location where the data is imported.  Note that this is an
            ANSYS- defined field; the only valid value is ELEM (data
            imported at the element integration points).

        lstep
            Load step number of data to be imported.  Defaults to the
            last load step.

        sbstep
            Substep number of data to be imported.  Defaults to the
            last substep.

        fname
            File name and directory path (248 characters maximum,
            including the characters needed for the directory path).
            An unspecified directory path defaults to the working
            directory; in this case, you can use all 248 characters
            for the file name.

        ext
            Filename extension (eight-character maximum).

        spscale
            Stabilization factor. This factor is used in a springback
            analysis to scale (up or down) the initial stiffness of
            the applied spring.  No default; input a value only if you
            want to activate stabilization. If SPSCALE is blank,
            stabilization is not activated.

        mscale
            Acceptable stabilization stiffness (defaults to 1.0 X
            10--4). In a springback analysis, iterations will stop
            when the applied spring stiffness comes down to this
            value. MSCALE is not used if SPSCALE is blank.

        Notes
        -----
        This command imports initial stress information into ANSYS
        from an earlier explicit (ANSYS LS-DYNA) run.  The stress
        state from SHELL163 and SOLID164 elements in the explicit
        analysis is imported to the corresponding SHELL181 and
        SOLID185 implicit elements. For the shell elements, the
        current shell element thickness is also imported. This command
        is valid only before the first SOLVE command of the implicit
        analysis (which comes after the explicit analysis) and is
        ignored if issued after subsequent SOLVE commands (that is,
        stresses will not be re-imported).

        RIMPORT is typically used to perform springback analysis of
        sheet metal forming. We recommend that you use SHELL163
        elements in the explicit analysis with 3 to 5 integration
        points through the thickness. This ensures that the
        through-thickness stress distribution is transferred
        accurately to the SHELL181 elements. If more than 5
        integration points are used, ANSYS imports resultants (forces
        and moments) to the SHELL181 elements. This implies that
        linearization of the through-thickness stress distribution is
        assumed in SHELL181 elements. If SHELL163 uses full
        integration in the shell plane, stress and thickness data are
        averaged and then transferred. For the solid elements, the
        stress at the SOLID164 element centroid is transferred to the
        SOLID185 element centroid. If SOLID164 has full integration,
        the stress is averaged and then transferred.

        When the SPSCALE argument is specified, artificial springs
        with exponentially decaying stiffness (as a function of
        iterations) are applied. This technique is recommended only
        for those cases in which there are severe convergence
        difficulties. In general, you should first attempt a
        springback analysis without using the stabilization factors
        SPSCALE and MSCALE. (For more information on springback
        stabilization, see the ANSYS LS-DYNA User's Guide.)

        This command is not written to the Jobname.CDB file when the
        CDWRITE command is issued. Further, the RIMPORT information is
        not saved to the database; therefore, the RIMPORT command must
        be reissued if the database is resumed.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = f"RIMPORT,{source},{type_},{loc},{lstep},{sbstep},{fname},{ext},,{spscale},{mscale}"
        return self.run(command, **kwargs)

    
    def nforce(self, item="", **kwargs):
        """APDL Command: NFORCE

        Sums the nodal forces and moments of elements attached to nodes.

        Parameters
        ----------
        item
            Specifies the selected set of nodes for summing forces and moments
            for contact elements.

            (blank) - Sums the nodal forces of elements for all selected nodes and excludes contact
                      elements (elements 169-177).

            CONT - Sums the nodal forces of elements for contact nodes only.

            BOTH - Sums the nodal forces of elements for all selected nodes, including contact
                   elements.

        Notes
        -----
        Sums and prints, in each component direction for each selected node,
        the nodal force and moment contributions of the selected elements
        attached to the node.  If all elements are selected, the sums are
        usually zero except where constraints or loads are applied.  The nodal
        forces and moments may be displayed [/PBC,FORC and /PBC,MOME].  Use
        PRESOL to print nodal forces and moments on an element-by-element
        basis.  You can use the FORCE command to specify which component
        (static, damping, inertia, or total) of the nodal load is to be used.
        Nodal forces associated with surface loads are not included.

        This vector sum is printed in the global Cartesian system. Moment
        summations are about the global origin unless another point is
        specified with the SPOINT command.  The summations for each node are
        printed in the global Cartesian system unless transformed [RSYS].  This
        command is generally not applicable to axisymmetric models because
        moment information from the NFORCE command is not correct for
        axisymmetric elements.

        Selecting a subset of elements [ESEL] and then issuing this command
        will give the forces and moments required to maintain equilibrium of
        that set of elements.  The effects of nodal coupling and constraint
        equations are ignored. The option ITEM = CONT provides the forces and
        moments for the contact elements (CONTA171, CONTA172, CONTA173,
        CONTA174, CONTA175, CONTA176, and CONTA177). Setting ITEM = BOTH
        provides the forces and moments for all selected nodes, including
        contact elements.

        This command also includes the FSUM command function which vectorially
        sums and prints, in each component direction for the total selected
        node set, the nodal force and moment contributions of the selected
        elements attached to the selected node set.
        """
        command = "NFORCE,%s" % (str(item))
        return self.run(command, **kwargs)

    def plsect(self, item="", comp="", rho="", kbr="", **kwargs):
        """APDL Command: PLSECT

        Displays membrane and membrane-plus-bending linearized stresses.

        Parameters
        ----------
        item
            Label identifying the item to be processed.  Valid item labels are
            shown in Table 221: PLSECT - Valid Item and Component Labels below.
            Items also require a component label.

        comp
            Component of the item.  Valid component labels are shown in
            Table 221: PLSECT - Valid Item and Component Labels below.

        rho
            In-plane (X-Y) average radius of curvature of the inside and
            outside surfaces of an axisymmetric section.  If zero (or blank), a
            plane or 3-D structure is assumed.  If nonzero, an axisymmetric
            structure is assumed.  Use a very large number (or -1) for an
            axisymmetric straight section.

        kbr
            Through-thickness bending stresses key for an axisymmetric analysis
            (RHO ≠ 0):

            0 - Include the thickness-direction bending stresses.

            1 - Ignore the thickness-direction bending stresses.

            2 - Include the thickness-direction bending stress using the same formula as the Y
                (axial direction ) bending stress. Also use the same formula
                for the shear stress.

        Notes
        -----
        Calculates and displays the membrane and membrane-plus-bending
        linearized stresses (as described for the PRSECT command) along a path
        section [PATH] as a graph.  The path section is defined by two points
        specified with the PPATH command. For linearized stress calculations,
        the path must be defined with nodes. The path must be entirely within
        the selected elements (that is, there must not be any element gaps
        along the path). The total stress (equivalent to the PLPATH display) is
        also displayed.  This command always uses 48 divisions along the path,
        regardless of the number of divisions defined by PATH.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].

        Table: 221:: : PLSECT - Valid Item and Component Labels
        """
        command = "PLSECT,%s,%s,%s,%s" % (str(item), str(comp), str(rho), str(kbr))
        return self.run(command, **kwargs)

    
    def bfint(self, fname1="", ext1="", fname2="", ext2="", kpos="", clab="",
              kshs="", tolout="", tolhgt="", **kwargs):
        """APDL Command: BFINT

        Activates the body force interpolation operation.

        Parameters
        ----------
        fname1
            File name and directory path (248 characters maximum,
            including directory) from which to read data for
            interpolation. If you do not specify a directory path, it
            will default to your working directory and you can use all
            248 characters for the file name.

        ext1
            Filename extension (eight-character maximum).

        fname2
            File name and directory path (248 characters maximum,
            including directory) to which BF commands are written. If
            you do not specify a directory path, it will default to
            your working directory and you can use all 248 characters
            for the file name.

        ext2
            Filename extension (eight-character maximum).

        kpos
            Position on Fname2 to write block of BF commands:

            0 - Beginning of file (overwrite existing file).

            1 - End of file (append to existing file).

        clab
            Label (8 characters maximum, including the colon) for this
            block of BF commands in Fname2.  This label is appended to
            the colon (:).  Defaults to BFn, where n is the cumulative
            iteration number for the data set currently in the
            database.

        kshs
            Shell-to-solid submodeling key:

            0 - Solid-to-solid or shell-to-shell submodel.

            1 - Shell-to-solid submodel.

        tolout
            Extrapolation tolerance about elements, based on a
            fraction of the element dimension. Submodel nodes outside
            the element by more than TOLOUT are not accepted as
            candidates for DOF extrapolation.  Defaults to 0.5 (50%).

        tolhgt
            Height tolerance above or below shell elements, in units
            of length.  Used only for shell-to-shell submodeling (KSHS
            = 0). Submodel nodes off the element surface by more than
            TOLHGT are not accepted as candidates for DOF
            interpolation or extrapolation. Defaults to 0.0001 times
            the maximum element dimension.

        Notes
        -----
        File Fname1 should contain a node list for which body forces are to be
        interpolated [NWRITE].  File Fname2 is created, and contains
        interpolated body forces written as a block of nodal BF commands.

        Body forces are interpolated from elements having TEMP as a valid body
        force or degree of freedom, and only the label TEMP is written on the
        nodal BF commands.  Interpolation is performed for all nodes on file
        Fname1 using the results data currently in the database. For layered
        elements, use the LAYER command to select the locations of the
        temperatures to be used for interpolation. Default locations are the
        bottom of the bottom layer and the top of the top layer.

        The block of BF commands begins with an identifying colon label command
        and ends with a /EOF command.  The colon label command is of the form
        :Clab, where Clab is described above.  Interpolation from multiple
        results sets can be performed by looping through the results file in a
        user-defined macro.  Additional blocks can be appended to Fname2 by
        using KPOS and unique colon labels.  A /INPUT command, with the
        appropriate colon label, may be used to read the block of commands.

        If the model has coincident (or very close) nodes, BFINT must be
        applied to each part of the model separately to ensure that the mapping
        of the nodes is correct.  For example, if nodes belonging to two
        adjacent parts linked by springs are coincident, the operation should
        be performed on each part of the model separately.
        """
        command = f"BFINT,{fname1},{ext1},,{fname2},{ext2},,{kpos},{clab},{kshs},{tolout},{tolhgt}"
        return self.run(command, **kwargs)

    def mdele(self, node="", lab1="", nend="", ninc="", lab2="", lab3="",
              lab4="", lab5="", lab6="", **kwargs):
        """APDL Command: MDELE

        Deletes master degrees of freedom.

        Parameters
        ----------
        node, lab1, nend, ninc
            Delete master degrees of freedom in the Lab1 direction [M] from
            NODE to NEND (defaults to NODE) in steps of NINC (defaults to 1).
            If NODE = ALL, NEND and NINC are ignored and masters for all
            selected nodes [NSEL] are deleted.  If Lab1 = ALL, all label
            directions will be deleted.  If NODE = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for NODE.

        lab2, lab3, lab4, . . . , lab6
            Delete masters in these additional directions.

        Notes
        -----
        Deletes master degrees of freedom.  If used in SOLUTION, this command
        is valid only within the first load step.

        This command is also valid in PREP7.
        """
        command = "MDELE,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(lab1), str(nend), str(ninc), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    
    
    def sfe(self, elem="", lkey="", lab="", kval="", val1="", val2="", val3="",
            val4="", **kwargs):
        """APDL Command: SFE

        Specifies surface loads on elements.

        Parameters
        ----------
        elem
            Element to which surface load applies.  If ALL, apply load to all
            selected elements [ESEL].  If Elem = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may be substituted for Elem.

        lkey
            Load key or face number associated with surface load (defaults to
            1).  Load keys (1,2,3, etc.) are listed under "Surface Loads" in
            the input data table for each element type in the Element
            Reference.

        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.

        kval
            Value key.  If Lab = PRES:

            0 or 1 - VAL1 through VAL4 are used as real components of pressures.

            2 - VAL1 through VAL4 are used as imaginary components of pressures.

        val1
            First surface load value (typically at the first node of the face)
            or the name of a table for specifying tabular boundary conditions.
            Face nodes are listed in the order given for "Surface Loads" in the
            input data table for each element type in the Element Reference.
            For example, for SOLID185, the item 1-JILK associates LKEY = 1
            (face 1) with nodes J, I, L, and K.  Surface load value VAL1 then
            applies to node J of face 1.  To specify a table, enclose the table
            name in percent signs (%), e.g., %tabname%.  Use the *DIM command
            to define a table.  Only one table can be specified, and it must be
            specified in the VAL1 position; tables specified in the VAL2, VAL3,
            or VAL4 positions will be ignored. VAL2 applies to node I, etc.
        """
        command = "SFE,%s,%s,%s,%s,%s,%s,%s,%s" % (str(elem), str(lkey), str(lab), str(kval), str(val1), str(val2), str(val3), str(val4))
        return self.run(command, **kwargs)

    def secfunction(self, table="", kcn="", **kwargs):
        """APDL Command: SECFUNCTION

        Specifies shell section thickness as a tabular function.

        Parameters
        ----------
        table
            Table name or array parameter reference for specifying thickness.

        kcn
            Local coordinate system reference number or array interpretation
            pattern for this tabular function evaluation.

        Notes
        -----
         The SECFUNCTION command is associated with the section most recently
        defined via the SECTYPE command.

        A table (TABLE) can define tabular thickness as a function of
        coordinates. Alternatively, you can use an array parameter (indexed by
        node number) that expresses the function to be mapped. (For example,
        func (17) should be the desired shell thickness at node 17.)  To
        specify a table, enclose the table or array name in percent signs (%)
        (SECFUNCTION,%tablename%). Use the *DIM command to define a table.

        The table or array defines the total shell thickness at any point in
        space. In multilayered sections, the total thickness and each layer
        thickness are scaled accordingly.

        The Function Tool is a convenient way to define your thickness tables.
        For more information, see Using the Function Tool in the Basic Analysis
        Guide.

        If you do not specify a local coordinate system (KCN), the program
        interprets TABLE in global XYZ coordinates. (For information about
        local coordinate systems, see the LOCAL command documentation.)

        When KCN = NODE, the program interprets TABLE as an array parameter
        (indexed by node number) that expresses the function to be mapped.

        When KCN = NOD2, the program interprets TABLE as a 2-D array parameter
        (where columns contain node numbers and rows contain the corresponding
        thicknesses) that expresses the function to be mapped.
        """
        command = "SECFUNCTION,%s,%s" % (str(table), str(kcn))
        return self.run(command, **kwargs)

    
    
    def pdwrite(self, file="", fnam="", lnam="", **kwargs):
        """APDL Command: PDWRITE

        Generates an HTML report for the probabilistic analyses.

        Parameters
        ----------
        file
            File name and directory path (248 characters maximum, including
            directory) from which to read the report. If you do not specify a
            directory path, it will default to your working directory and you
            can use all 248 characters for the file name.

        fnam
            First name of the author of the report (32 characters maximum).
            This first name must not include blanks.

        lnam
            Last name of the author of the report (32 characters maximum). This
            last name must not include blanks.

        Notes
        -----
        Generates an HTML report for the probabilistic analysis. An HTML report
        includes a description of the deterministic model, the probabilistic
        model, the probabilistic methods used for the analyses and the results
        obtained from the analyses.
        """
        command = "PDWRITE,%s,%s,%s" % (str(file), str(fnam), str(lnam))
        return self.run(command, **kwargs)

    def cntr(self, option="", key="", **kwargs):
        """APDL Command: CNTR

        Redirects contact pair output quantities to a text file.

        Parameters
        ----------
        option
            Output option:

            OUT - Contact output control.

        key
            Control key:

            NO - Write contact information to the output file or to the screen (default).

            YES - Write contact information to the Jobname.CNM file.

        Notes
        -----
        Issue the command CNTR,OUT,YES to redirect contact pair output
        quantities to the Jobname.CNM file.

        To ensure that the contact information is written to Jobname.CNM,
        reissue CNTR,OUT,YES each time you reenter the solution processor
        (/SOLU).
        """
        command = "CNTR,%s,%s" % (str(option), str(key))
        return self.run(command, **kwargs)

    
    def fplist(self, **kwargs):
        """APDL Command: FPLIST

        Lists the property table stored for fatigue evaluation.
        """
        command = "FPLIST,"
        return self.run(command, **kwargs)

    
    def resvec(self, key="", **kwargs):
        """APDL Command: RESVEC

        Calculates or includes residual vectors.

        Parameters
        ----------
        key
            Residual vector key:

            OFF - Do not calculate or include residual vectors. This option is the default.

            ON  - Calculate or include residual vectors.

        Notes
        -----
        In a modal analysis, the RESVEC command calculates residual vectors. In
        a mode-superposition transient dynamic, mode-superposition harmonic,
        PSD or spectrum analysis, the command includes residual vectors.

        In a component mode synthesis (CMS) generation pass, the RESVEC command
        calculates one residual vector which is included in the normal modes
        basis used in the transformation matrix. It is supported for the three
        available CMS methods. RESVEC,ON can only be specified in the first
        load step of a generation pass and is ignored if issued at another load
        step.

        If rigid-body modes exist, pseudo-constraints are required for the
        calculation. Issue the D,,,SUPPORT command to specify only the minimum
        number of pseudo-constraints necessary to prevent rigid-body motion.

        For more information about residual vector formulation, see Residual
        Vector Method in the Mechanical APDL Theory Reference.
        """
        command = "RESVEC,%s" % (str(key))
        return self.run(command, **kwargs)

    def uis(self, label="", value="", **kwargs):
        """APDL Command: /UIS

        Controls the GUI behavior.

        Parameters
        ----------
        label
            Behavior control key:

            BORD - Controls the functionality of the mouse buttons for dynamic viewing mode only.
                   When Label = BORD, the three values that follow control the
                   functionality of the LEFT, MIDDLE and RIGHT buttons,
                   respectively (see below).

            MSGPOP - Controls which messages from the ANSYS error message subroutine are displayed
                     in a message dialog box.

            REPLOT - Controls whether or not an automatic replot occurs after functions affecting
                     the model are executed.

            ABORT - Controls whether or not ANSYS displays dialog boxes to show the status of an
                    operation in progress and to cancel that operation.

            DYNA - Controls whether the dynamic mode preview is a bounding box or the edge outline
                   of the model.  This label only applies to 2-D display
                   devices (i.e., /SHOW,XII or /SHOW,WIN32).  This "model edge
                   outline" mode is only supported in PowerGraphics
                   [/GRAPHICS,POWER] and is intended for element, line,
                   results, area, or volume displays.

            PICK - Controls how graphical entities are highlighted from within the ANSYS Select
                   menu.

            POWER - Controls whether or not PowerGraphics is active when the GUI is initiated. The
                    ANSYS program default status is PowerGraphics "ON";  this
                    command is used (placed in the start.ans file) when full
                    graphics is desired on start up.

            DPRO - Controls whether or not the ANSYS input window displays a dynamic prompt. The
                   dynamic prompt shows the correct command syntax for the
                   command, as you are entering it.

            UNDO - Controls whether or not the session editor includes nonessential commands or
                   comments in the file it creates. You can use this option to
                   include comments and other materials in the session editor
                   file.

            LEGE - Controls whether or not the multi-legend is activated when you start the GUI.
                   The multi-legend enables you to specify the location of your
                   legend items in each of the five graphics windows. You can
                   place this option in your start.ans file and have the GUI
                   start with the legend items in a pre-specified location.

            PBAK - Controls whether or not the background shading is activated when you start the
                   GUI. You can place this option in your start.ans file.

            ZPIC - Controls the sorting order for entities that are coincident (directly in front
                   of or behind each other) to a picked spot on your model.
                   When you pick a spot on your model that could indicate two
                   or more entities, a message warns you of this condition, and
                   a list of the coincident entities can be generated. The
                   VALUE term (below) will determine the sort order.

            HPOP - Controls the prioritization of your GUI windows when the contents are ported to
                   a plot or print file (/UI,COPY,SAVE). OpenGL (3D) graphics
                   devices require that the ANSYS Graphics Screen contents be
                   set in front of all overlying windows in order to port them
                   to a printer or a file. This operation can sometimes
                   conflict with /NOERASE settings. See the VALUE term (below)
                   to determine the available control options.

        value
            Values controlling behavior if Label = BORD:

            1 - PAN, controls dynamic translations.

            2 - ZOOM, controls zoom, and dynamic rotation about the view vector.

            3 - ROTATE, controls dynamic rotation about the screen X and Y axes.
        """
        command = "/UIS,%s,%s" % (str(label), str(value))
        return self.run(command, **kwargs)

    def spower(self, inletport="", outletport="", **kwargs):
        """APDL Command: SPOWER

        Calculates sound power parameters.

        Parameters
        ----------
        inletport
            Inlet source port number.

        outletport
            Outlet port number.

        Notes
        -----
        The SPOWER command calculates the input sound power level, reflected
        sound power level, return loss, and absorption coefficient for an inlet
        port.

        If a matched outlet port is defined, the command also calculates the
        transmission loss.

        The sound power parameters are output to the file
        jobname%ARG1%%ARG2%.anp (where n = 1 or 2).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "SPOWER,%s,%s" % (str(inletport), str(outletport))
        return self.run(command, **kwargs)

    
    
    def cgloc(self, xloc="", yloc="", zloc="", **kwargs):
        """APDL Command: CGLOC

        Specifies the origin location of the acceleration coordinate system.

        Parameters
        ----------
        xloc, yloc, zloc
            Global Cartesian X, Y, and Z coordinates of the acceleration
            coordinate system origin.

        Notes
        -----
        Specifies the origin location of the acceleration coordinate system
        with respect to the global Cartesian system.  The axes of this
        acceleration coordinate system are parallel to the global Cartesian
        axes.

        A structure may be rotating about the global Cartesian origin [OMEGA,
        DOMEGA], which may in turn be rotating about another point (the origin
        of the acceleration coordinate system), introducing Coriolis effects.
        The location of this point (relative to the global Cartesian origin) is
        specified with this CGLOC command.  For example, if Y is vertical and
        the global system origin is at the surface of the earth while the
        acceleration system origin is at the center of the earth, YLOC should
        be -4000 miles (or equivalent) if the rotational effects of the earth
        are to be included.  The rotational velocity of the global Cartesian
        system about this point is specified with the CGOMGA command, and the
        rotational acceleration is specified with the DCGOMG command.

        The rotational velocities and accelerations are mainly intended to
        include mass effects in a static (ANTYPE,STATIC) analysis.  If used in
        dynamic analyses, no coupling exists between the user input terms and
        the time history response of the structure.  See Acceleration Effect in
        the Mechanical APDL Theory Reference for details.  Related commands are
        ACEL, CGOMGA, DCGOMG, DOMEGA, and OMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        This command is also valid in PREP7.
        """
        command = "CGLOC,%s,%s,%s" % (str(xloc), str(yloc), str(zloc))
        return self.run(command, **kwargs)

    def dcgomg(self, dcgox="", dcgoy="", dcgoz="", **kwargs):
        """APDL Command: DCGOMG

        Specifies the rotational acceleration of the global origin.

        Parameters
        ----------
        dcgox, dcgoy, dcgoz
            Rotational acceleration of the global origin about the acceleration
            system X, Y, and Z axes.

        Notes
        -----
        Specifies the rotational acceleration of the global origin about each
        of the acceleration coordinate system axes [CGLOC].  Rotational
        accelerations may be defined in analysis types ANTYPE,STATIC, HARMIC
        (full or mode-superposition), TRANS (full or mode-superposition), and
        SUBSTR. See Acceleration Effect in the Mechanical APDL Theory Reference
        for details.  Units are radians/time2.

        The DCGOMG command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for DCGOMG_X, DCGOMG_Y, and DCGOMG_Z
        input values (*DIM) for full transient and harmonic analyses.

         Related commands are ACEL, CGLOC, CGOMGA, DOMEGA, and OMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        This command is also valid in PREP7.
        """
        command = "DCGOMG,%s,%s,%s" % (str(dcgox), str(dcgoy), str(dcgoz))
        return self.run(command, **kwargs)

    def psdcom(self, signif="", comode="", forcetype="", **kwargs):
        """APDL Command: PSDCOM

        Specifies the power spectral density mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds theSIGNIF
            threshold.  For PSD response (SPOPT,PSD), the significance level is
            defined as the modal covariance matrix term, divided by the maximum
            modal covariance matrix term.  Any term whose significance level is
            less than SIGNIF is considered insignificant and is not contributed
            to the mode combinations.  The higher the SIGNIF threshold, the
            fewer the number of terms used. SIGNIF defaults to 0.0001.  If
            SIGNIF is specified as 0.0, it is taken as 0.0.

        comode
            First COMODE number of modes to be actually combined.  COMODE must
            always be less than or equal to NMODE (input quantity NMODE on the
            SPOPT command).  COMODE defaults to NMODE.  COMODE performs a
            second level of control for the first sequential COMODE number of
            modes to be combined.  It uses the significance level threshold
            indicated by SIGNIF and operates only on the significant modes.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        This command is also valid for PREP7.   This command is valid only for
        SPOPT,PSD.

        PSDCOM is not allowed in ANSYS Professional.
        """
        command = "PSDCOM,%s,%s,%s" % (str(signif), str(comode), str(forcetype))
        return self.run(command, **kwargs)

    
    def perturb(self, type_="", matkey="", contkey="", loadcontrol="",
                **kwargs):
        """APDL Command: PERTURB

        Sets linear perturbation analysis options.

        Parameters
        ----------
        type\_
            Type of linear perturbation analysis to be performed:

            STATIC - Perform a linear perturbation static analysis.

            MODAL - Perform a linear perturbation modal analysis.

            BUCKLE - Perform a linear perturbation eigenvalue buckling analysis.

            HARMONIC - Perform a linear perturbation full harmonic analysis.

            SUBSTR - Perform a linear perturbation substructure generation pass.

            OFF - Do not perform a linear perturbation analysis (default).

        matkey
            Key for specifying how the linear perturbation analysis uses
            material properties, valid for all structural elements except
            contact elements. For more information, see Linear Perturbation
            Analysis in the Mechanical APDL Theory Reference.

            AUTO - The program selects the material properties for the linear perturbation
                   analysis automatically (default). The materials are handled
                   in the following way:

            For pure linear elastic materials used in the base analysis, the same properties are used in the linear perturbation analysis. - For hyperelastic materials used in the base analysis, the material properties
                              are assumed to be linear elastic in the linear
                              perturbation analysis. The material property data
                              (or material Jacobian) is obtained based on the
                              tangent of the hyperelastic material's
                              constitutive law at the point where restart
                              occurs.

            For any nonlinear materials other than hyperelastic materials used in the base analysis, the material properties are assumed to be linear elastic in the linear perturbation analysis. The material data is the same as the linear portion of the nonlinear materials (that is, the parts defined by MP commands). - For COMBIN39, the stiffness is that of the first segment of the force-
                              deflection curve.

            TANGENT - Use the tangent (material Jacobian) on the material constitutive curve as the
                      material property. The material property remains linear
                      in the linear perturbation analysis and is obtained at
                      the point of the base analysis where restart occurs. The
                      materials are handled in the following way:

            For pure linear elastic materials used in the base analysis, the same properties are used in the linear perturbation analysis. Because the material constitutive curve is linear, the tangent is the same as the base analysis.  - For hyperelastic materials used in the base analysis, the program uses the same
                              tangent as that used for MatKey = AUTO, and the
                              results are therefore identical.

            For any nonlinear materials other than hyperelastic materials used in the base analysis, the material properties are obtained via the material tangent on the material constitutive curve at the restart point of the base analysis.  - The materials and properties typically differ from Matkey = AUTO, but it is
                              possible the results could be identical or very
                              similar if a.) the material is elasto-plastic
                              rate-independent and is unloading (or has neutral
                              loading) at the restart point, or b.) the
                              material is rate-dependent, depending on the
                              material properties and loading conditions.

            For COMBIN39, the stiffness is equal to the tangent of the current segment of the force-deflection curve. - In a modal restart solution that follows a linear perturbation modal analysis,
                              the TANGENT option is overridden by the AUTO
                              option and linear material properties are used
                              for stress calculations in the modal restart. See
                              the discussion in the Notes for more information.

        contkey
            Key that controls contact status for the linear perturbation
            analysis. This key controls all contact elements (TARGE169,
            TARGE170, and CONTA171 through CONTA178) globally for all contact
            pairs. Alternatively, contact status can be controlled locally per
            contact pair by using the CNKMOD command. Note that the contact
            status from the base analysis solution is always adjusted by the
            local contact controls specified by CNKMOD first and then modified
            by the global sticking or bonded control (ContKey = STICKING or
            BONDED). The tables in the Notes section show how the contact
            status is adjusted by CNKMOD and/or the ContKey setting.

            CURRENT - Use the current contact status from the restart snapshot (default). If the
                      previous run is nonlinear, then the nonlinear contact
                      status at the point of restart is frozen and used
                      throughout the linear perturbation analysis.

            STICKING - For frictional contact pairs (MU > 0), use sticking contact (e.g., MU*KN for
                       tangential contact stiffness)  everywhere the contact
                       state is closed (i.e., status is sticking or sliding).
                       This option only applies to contact pairs that are in
                       contact and have a frictional coefficient MU greater
                       than zero. Contact pairs without friction (MU = 0) and
                       in a sliding state remain free to slide in the linear
                       perturbation analysis.

            BONDED - Any contact pairs that are in the closed (sticking or sliding) state are moved
                     to bonded (for example, KN for both normal and tangential
                     contact stiffness). Contact pairs that have a status of
                     far-field or near-field remain open.

        loadcontrol
            Key that controls how the load vector of {Fperturbed} is
            calculated. This control is provided for convenience of load
            generation for linear perturbation analysis. In general, a new set
            of loads is required for a linear perturbation analysis. This key
            controls all mechanical loads; it does not affect non-mechanical
            loads. Non-mechanical loads (including thermal loads) are always
            kept (i.e., not deleted).

            ALLKEEP - Keep all the boundary conditions (loads and
                      constraints) from the end of the load step of
                      the current restart point. This option is
                      convenient for further load application and is
                      useful for a linear perturbation analysis
                      restarted from a previous linear analysis. For
                      this option, {Fend} is the total load vector at
                      the end of the load step at the restart point.

            INERKEEP - Delete all loads and constraints from the
                       restart step, except for displacement
                       constraints and inertia loads (default). All
                       displacement constraints and inertia loads are
                       kept for convenience when performing the linear
                       perturbation analysis. Note that nonzero and
                       tabular displacement constraints can be
                       considered as external loads; however, they are
                       not deleted when using this option.

            PARKEEP - Delete all loads and constraints from the
                      restart step, except for displacement
                      constraints. All displacement constraints are
                      kept for convenience when performing the linear
                      perturbation analysis. Note that nonzero and
                      tabular displacement constraints can be
                      considered as external loads; however, they are
                      not deleted when using this option.

            DZEROKEEP - Behaves the same as the PARKEEP option, except
                        that all nonzero displacement constraints are
                        set to zero upon the onset of linear
                        perturbation.

            NOKEEP - Delete all the loads and constraints, including
                     all displacement constraints.  For this option,
                     {Fend} is zero unless non-mechanical loads (e.g.,
                     thermal loads) are present.

        Notes
        -----
        This command controls options relating to linear perturbation analyses.
        It must be issued in the first phase of a linear perturbation analysis.

        This command is also valid in PREP7.
        """
        command = "PERTURB,%s,%s,%s,%s" % (str(type_), str(matkey), str(contkey), str(loadcontrol))
        return self.run(command, **kwargs)

    
    
    def sfscale(self, lab="", fact="", fact2="", **kwargs):
        """APDL Command: SFSCALE

        Scales surface loads on elements.

        Parameters
        ----------
        lab
            Valid surface load label.  If ALL, use all appropriate labels.

        fact
            Scale factor for the first surface load value.  Zero (or blank)
            defaults  to 1.0.  Use a small number for a zero scale factor.

        fact2
            Scale factor for the second surface load value.  Zero (or blank)
            defaults  to 1.0.  Use a small number for a zero scale factor.

        Notes
        -----
        Scales surface loads (pressure, convection, etc.) in the database on
        the selected elements.  Surface loads are applied with the SF, SFE, or
        SFBEAM commands.  Issue the SFELIST command to list the surface loads.
        Solid model boundary conditions are not scaled by this command, but
        boundary conditions on the FE model are scaled.

        Note:: : Such scaled FE boundary conditions may still be overwritten by
        unscaled solid model boundary conditions if a subsequent boundary
        condition transfer occurs.

        SFSCALE does not work for tabular boundary conditions.

        This command is also valid in PREP7 and in the /MAP processor.
        """
        command = "SFSCALE,%s,%s,%s" % (str(lab), str(fact), str(fact2))
        return self.run(command, **kwargs)

    def segen(self, mode="", nsuper="", mdof="", stopstage="", **kwargs):
        """APDL Command: SEGEN

        Automatically generate superelements.

        Parameters
        ----------
        mode
            Specify action to take (must be specified as one of the following):

            AUTO - Turn on feature.

            OFF - Turn off feature.

        nsuper
            Number of superelements to create. The minimum number of
            superelements is 2, and the maximum number of superelements is 999.
            Note that the number of requested superelements may not be the same
            as the number of defined superelements (see "Notes" for more
            details).

        mdof
            Specifies whether to use the master DOF defined by the user.

            YES - Use master DOF defined by the user with the M command.

            NO - Use the master DOF defined by the automatic generation process. Be aware that
                 this option can generate a large number of master DOFs (see
                 "Notes"  for more details).

        stopstage
            Specifies when to stop the automatic superelement generation
            process.

            PREVIEW - Preview the superelements only; stop after creating the domains which will
                      become the superelements, and after creating master DOF
                      on the interfaces between each domain.

            GEN - Create (generate) the superelements.

        Notes
        -----
        This command can be used to quickly generate a set of superelements.
        Each superelement is created in a separate file (jobnameXXX.sub, where
        XXX is a positive number from 1 to 999).

        Due to the heuristics in the automatic domain decomposer, which is used
        to define the domains that will become superelements, the number of
        defined superelements may exceed the number of requested superelements.
        Use the mDof and stopStage options to determine exactly how many
        superelements will be created, the interfaces between each
        superelement, and where master DOF will be defined. With the
        /PNUM,DOMAIN command, you can graphically (visually) preview the
        elements in each superelement.  Then, if required, you can add
        additional master DOF to (or remove from) the boundaries of the
        superelements. Use the SEGEN command again with stopStage = GEN to
        actually create the superelements.

        ANSYS automatically defines master DOF at each of the following: all
        interface DOF between superelements, all DOF attached to contact
        elements (TARGE169 to CONTA177), and all DOF associated with nodes
        having a point load defined.  Note that for regular superelements, all
        interface DOFs must be defined as master DOFs for the correct solution
        to be obtained. However, for CMS superelements, some of the interface
        DOFs can be removed without a significant loss of accuracy.

        For the case when mDof = YES, you should select the preview option
        first (stopStage = PREVIEW) to verify exactly how many superelements
        will be created and where the superelement boundaries are located.  If
        more superelements will be created than were requested, you should
        define master DOF on the interface(s) between all superelements.

        This command is valid only for substructuring analyses (ANTYPE,SUBSTR).
        Use SEOPT to specify any options for all of the superelements (e.g.,
        which matrices to reduce), and possibly CMSOPT for any CMS
        substructuring analysis.  Note that the created superelements will
        follow the current /FILNAME instead of SENAME from SEOPT.  Also, only
        one load vector will be written to each .SUB file.  Multiple load steps
        are not supported with the automatic superelement generation process.

        During the actual creation of the superelements, the output is
        redirected to jobname.autoTemp.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "SEGEN,%s,%s,%s,%s" % (str(mode), str(nsuper), str(mdof), str(stopstage))
        return self.run(command, **kwargs)

    def bfcum(self, lab="", oper="", fact="", tbase="", **kwargs):
        """APDL Command: BFCUM

        Specifies that nodal body force loads are to be accumulated.

        Parameters
        ----------
        lab
            Valid body load label.  If ALL, use all appropriate labels.

        oper
            Accumulation key:

            REPL - Subsequent values replace the previous values (default).

            ADD - Subsequent values are added to the previous values.

            IGNO - Subsequent values are ignored.

        fact
            Scale factor for the nodal body load values.  Zero (or blank)
            defaults to 1.0.  Use a small number for a zero scale factor.  The
            scale factor is not applied to body load phase angles.

        tbase
            Used (only with Lab = TEMP) to calculate the temperature used in
            the add or replace operation (see Oper) as:

        Notes
        -----
        Allows repeated nodal body force loads to be replaced, added, or
        ignored.  Nodal body loads are applied with the BF command.  Issue the
        BFLIST command to list the nodal body loads.  The operations occur when
        the next body loads are defined.  For example, issuing the BF command
        with a temperature of 250 after a previous BF command with a
        temperature of 200 causes the new value of the temperature to be 450
        with the add operation, 250 with the replace operation, or 200 with the
        ignore operation.  A scale factor is also available to multiply the
        next value before the add or replace operation.  A scale factor of 2.0
        with the previous "add" example results in a temperature of 700.  The
        scale factor is applied even if no previous values exist.  Issue
        BFCUM,STAT to show the current label, operation, and scale factors.
        Solid model boundary conditions are not affected by this command, but
        boundary conditions on the FE model are affected.

        Note:: : FE boundary conditions may still be overwritten by existing
        solid model boundary conditions if a subsequent boundary condition
        transfer occurs.

        BFCUM does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "BFCUM,%s,%s,%s,%s" % (str(lab), str(oper), str(fact), str(tbase))
        return self.run(command, **kwargs)

    def andscl(self, nfram="", delay="", ncycl="", **kwargs):
        """APDL Command: ANDSCL

        Produces an animated sequence of a deformed shape.

        Parameters
        ----------
        nfram
            Number of frames captured (defaults to 5).

        delay
            Time delay during animation (defaults to 0.1 seconds).

        ncycl
            Number of animation cycles (defaults to 5).  Available in non-UI
            mode only.

        Notes
        -----
        ANDSCL involves an ANSYS macro which produces an animation of
        displacement of the last plot action command (for example, PLDISP).
        This command operates only on graphic display platforms supporting the
        /SEG command.  After executing ANDSCL, you can replay the animated
        sequence by issuing the ANIM command.

        The command functions only in the postprocessor.
        """
        command = "ANDSCL,%s,%s,%s" % (str(nfram), str(delay), str(ncycl))
        return self.run(command, **kwargs)

    
    
    def psf(self, item="", comp="", key="", kshell="", color="", **kwargs):
        """APDL Command: /PSF

        Shows surface load symbols on model displays.

        Parameters
        ----------
        item, comp
            Labels identifying the surface load to be shown; see
            Table 227: /PSF - Valid Item and Component Labels.

        key
            Key to turn surface load symbols on or off:

            0 - Off (default).

            1 - On, shown as face outlines.  Line surface loads (SFL) on solid model plots are
                shown as arrows.

            2 - On, shown as arrows.

            3 - On, shown as color filled surfaces.  Line and area surface loads (SFL and SFA)
                on solid model plots are shown as arrows.

        kshell
            Visibility key for shell elements.

            0 - Off (default),  surface load symbols are displayed only on visible load faces.

            1 - On, surface load symbols are displayed even if load face is not visible.

        color
            Visibility key for contour legend.

            ON - The symbols (arrows or face outlines) will show up in color with the legend
                 showing the corresponding color labels (default).

            OFF - The contour legend will not be displayed. The symbols (arrows or face outlines)
                  will show up in grey. The size of the arrows will be
                  proportional to the applied load.

        Notes
        -----
        The /PSF command determines whether and how to show surface loads on
        subsequent model displays.

        If surface loads are applied to solid model entities, only solid model
        plots show the load symbols; node and element plots do not show them
        unless the loads are transferred (SFTRAN or SBCTRAN).  Similarly, solid
        model plots do not show the load symbols if surface loads are applied
        to nodes and elements.  For node and element plots of shell element
        models, the surface load symbols are shown only if the load face is
        visible from the current viewing direction.

        The effects of the /PSF command are not cumulative (that is, the
        command does not modify an existing setting from a previously issued
        /PSF command).  Only the setting specified via the most recent /PSF
        command applies.

        If you issue a postprocessing (POST1) plot command that produces result
        contours (such as PLNSOL), the /PSF command has no effect. This
        behavior prevents conflicting contours in the graphics window.

        When using the radiosity method (Item = RDSF and Comp = ENCL) with Key
        = 2, the radiation arrows point outward from any element face. When
        using SURF154 with KEYOPT(2) = 1, set the Item to PRES and leave the
        Component Label blank.

        /PSF,STAT displays current /PSF settings, and /PSF,DEFA resets them
        back to default.

        Other useful commands are /PNUM,SVAL,1 to show the values of the
        surface loads, /VSCALE to change arrow lengths, and /PBC and /PBF to
        activate other load symbols.

        For beam elements, only the colors representing shear (GREEN) and
        normal (RED) pressures are displayed for the arrows. The color of these
        arrows does not correspond to the magnitudes in the contour legend. The
        length of these arrows does, however, correlate to the relative
        magnitude of the pressures.

        For elements SURF159, SOLID272, SOLID273, PIPE288 and PIPE289, the /PSF
        command is not available when displaying elements with shapes
        determined from the real constants or section definition (/ESHAPE). For
        PIPE288 and PIPE289, only external loads applied via the SFBEAM command
        are displayed.

        This command is valid in any processor.

        Table: 227:: : /PSF - Valid Item and Component Labels

        Pressure loads apply to the element coordinate system (KEYOPT(2) = 0).
        Adjust appropriately for a local coordinate system (KEYOPT(2) = 1). See
        Figure: 153.2:: Pressures in the Element Reference.
        """
        command = "/PSF,%s,%s,%s,%s,%s" % (str(item), str(comp), str(key), str(kshell), str(color))
        return self.run(command, **kwargs)

    
    
    def lcase(self, lcno="", **kwargs):
        """APDL Command: LCASE

        Reads a load case into the database.

        Parameters
        ----------
        lcno
            Load case pointer number [LCDEF,STAT].  Defaults to 1.

        Notes
        -----
        Reads a load case into the database.  Load cases are created as
        described on the LCDEF or LCWRITE commands.  The results portion of the
        database and the applied forces and displacements are cleared before
        reading the data in.  Absolute values [LCABS] and scale factors
        [LCFACT] can be applied during the read operation.
        """
        command = "LCASE,%s" % (str(lcno))
        return self.run(command, **kwargs)

    def octype(self, datatype="", name="", **kwargs):
        """APDL Command: OCTYPE

        Specifies the type of ocean load data to follow.

        Parameters
        ----------
        datatype
            The type of ocean data to be input following this command:

            BASIC - The basic ocean load, required for any ocean loading.

            CURR - An optional drift current.

            WAVE - An optional ocean wave state.

        name
            An eight-character name for the ocean load. An ocean name can
            consist of letters and numbers, but cannot contain punctuation,
            special characters, or spaces.

        Notes
        -----
        The OCTYPE command specifies the type of ocean load data to follow
        (basic, current, or wave). Issue this command before defining your
        ocean load data (OCDATA and OCTABLE).

        Ocean loading applies only to current-technology pipe (PIPE288 and
        PIPE289), surface (SURF154), link (LINK180) and beam (BEAM188 and
        BEAM189) elements.

        An ocean current or wave is accessible repeatedly. For example, it is
        not necessary to input an identical current table again just because
        the drag coefficients of the basic input table have changed.

        The following example shows how you can use the basic (DataType =
        BASIC), current (DataType = CURR), and wave (DataType = WAVE) ocean
        data types within the context of a simple input file fragment:
        """
        command = "OCTYPE,%s,%s" % (str(datatype), str(name))
        return self.run(command, **kwargs)

    def bf(self, node="", lab="", val1="", val2="", val3="", val4="", val5="",
           val6="", **kwargs):
        """APDL Command: BF

        Defines a nodal body force load.

        Parameters
        ----------
        node
            Node to which body load applies.  If Node = ALL, apply to all
            selected nodes [NSEL].  A component name may also be substituted
            for Node.

        lab
            Valid body load label. Load labels are listed under "Body Loads" in
            the input table for each element type in the Element Reference.

        val1, val2, val3, val4, val5, val6
            Value associated with the Lab item or table name reference for
            tabular boundary conditions. To specify a table, enclose the table
            name in percent signs (%) (e.g., BF,Node,TEMP,%tabname%). Use the
            *DIM command to define a table. Use only VAL1 for TEMP, FLUE, HGEN,
            DGEN, MVDI, CHRGD. If Lab = CHRGD for acoustics, VAL1 is the static
            pressure for a non-uniform acoustic medium calculation.

            VAL1 - Mass source with units kg/(m3s) in a harmonic analysis, or mass source rate
                   with units kg/( m3s2) in a transient analysis

            VAL2 - Phase angle in degrees

            VAL3 - Not used

            VAL4 - Not used

            VAL5 - Not used

            VAL6 - Not used

        Notes
        -----
        Defines a nodal body force load (such as temperature in a structural
        analysis, heat generation rate in a thermal analysis, etc.). Nodal body
        loads default to the BFUNIF values, if they were previously specified.

        Table names are valid for Lab value (VALn) inputs in these cases only:

        VAL = %tabname% for temperatures (TEMP), diffusing substance generation
        rates (DGEN), heat generation rates (HGEN), and nodal body force
        densities (FORC).

        VAL1 = %tabname1%, VAL2 = %tabname2%, VAL3 = %tabname3%, VAL4 =
        %tabname4%, VAL5 = %tabname5%, and VAL6 = %tabname6% for velocities or
        accelerations (VELO).

        VAL1 = %tabname1% and VAL2 = %tabname2% for mass sources or mass source
        rates (MASS).

        The heat generation rate loads specified with the BF command are
        multiplied by the weighted nodal volume of each element adjacent to
        that node. This yields the total heat generation at that node.

        Graphical picking is available only via the listed menu paths.

        Body load labels VELO and MASS cannot be accessed from a menu.

        This command is also valid in PREP7.
        """
        command = "BF,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(lab), str(val1), str(val2), str(val3), str(val4), str(val5), str(val6))
        return self.run(command, **kwargs)

    def mfiter(self, maxiter="", miniter="", target="", **kwargs):
        """APDL Command: MFITER

        Sets the number of stagger iterations for an ANSYS Multi-field solver
        analysis.

        Parameters
        ----------
        maxiter
            Maximum number of iterations. Defaults to 10.

        miniter
            Minimum number of iterations. Defaults to 1.

        target
            Target number of iterations. Defaults to 5.

        Notes
        -----
        The number of stagger iterations applies to each time step in an ANSYS
        Multi-field solver analysis. MINITER and TARGET are valid only when
        multi-field auto time stepping is on (MFDTIME).

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFITER,%s,%s,%s" % (str(maxiter), str(miniter), str(target))
        return self.run(command, **kwargs)

    
    def rock(self, cgx="", cgy="", cgz="", omx="", omy="", omz="", **kwargs):
        """APDL Command: ROCK

        Specifies a rocking response spectrum.

        Parameters
        ----------
        cgx, cgy, cgz
            Global Cartesian X, Y, and Z location of center of rotation about
            which rocking occurs.

        omx, omy, omz
            Global Cartesian angular velocity components associated with the
            rocking.

        Notes
        -----
        Specifies a rocking response spectrum effect in the spectrum
        (ANTYPE,SPECTR) analysis.

        The excitation direction with rocking included is not normalized to
        one; rather, it scales the spectrum. For more information, see
        Participation Factors and Mode Coefficients.

        This command is also valid in PREP7.
        """
        command = "ROCK,%s,%s,%s,%s,%s,%s" % (str(cgx), str(cgy), str(cgz), str(omx), str(omy), str(omz))
        return self.run(command, **kwargs)

    
    
    def pdcmat(self, rlab="", matrix="", name1="", name2="", corr="",
               slevel="", popt="", **kwargs):
        """APDL Command: PDCMAT

        Prints the correlation coefficient matrix.

        Parameters
        ----------
        rlab
            Result set label. Identifies the result set to be used for
            postprocessing. A result set label can be the solution set label
            you defined in a PDEXE command (if you are directly postprocessing
            Monte Carlo Simulation results), or the response surface set label
            defined in an RSFIT command (for Response Surface Analyses).

        matrix
            Keyword for the type of correlation coefficient matrix.

            IO - Matrix of correlation coefficients between random input variables and output
                 parameters.

            II - Matrix of correlation coefficients between random input variables and other
                 random input variables

            OO - Matrix of correlation coefficients between random output parameters and other
                 random output parameters.

            S - Correlation coefficient between a single random parameter (input or output) and
                another random parameter (input or output). The probabilistic
                design parameters must be specified in Name1 and Name2 for this
                option.

        name1, name2
            Parameter names. The parameters must have been previously defined
            as a random input variable or a random output parameter with the
            PDVAR command. These parameters are used for Matrix = S only and
            are ignored for the other Matrix keywords.

        corr
            Keyword for the type of correlation coefficients to be used for the
            output.

            RANK - Spearman rank-order correlation coefficient (default).

            LIN - Pearson linear correlation coefficient.

        slevel
            Significance level. The value for the significance level must be
            between 0.0 and 1.0. The default value is 0.025 (2.5%).

        popt
            Specifies whether the probabilities should be printed with the
            correlation coefficients.

            0 - Print only the correlation coefficients.

            1 - Print both the correlation coefficients and the probabilities (default).

        Notes
        -----
        Prints the correlation coefficient matrix.

        If Rlab is left blank, then the result set label is inherited from the
        last PDEXE command (Slab), RSFIT command (RSlab), or the most recently
        used PDS postprocessing command where a result set label was explicitly
        specified.

        For all correlation coefficients the probabilistic design tool
        evaluates the probability that the correlation coefficient can be
        neglected. The evaluation of this probability is based on statistical
        test theory. The larger this probability is the likelier it is that the
        correlation coefficient does not really reflect an observable
        statistical interdependence between the parameters involved. If this
        probability exceeds the significance level as specified by the SLEVEL
        parameter, the correlation coefficient should be regarded as negligible
        or insignificant. The higher the significance level SLEVEL, the more
        correlation coefficients are considered significant. Using the Popt
        parameter you can also get a list of the probabilities and review them
        as to how far they exceed the significance level or how far they stay
        below it.

        The PDCMAT command cannot be used to postprocess the results in a
        solution set that is based on Response Surface Methods, only Monte
        Carlo Simulations.
        """
        command = "PDCMAT,%s,%s,%s,%s,%s,%s,%s" % (str(rlab), str(matrix), str(name1), str(name2), str(corr), str(slevel), str(popt))
        return self.run(command, **kwargs)

    def yrange(self, ymin="", ymax="", num="", **kwargs):
        """APDL Command: /YRANGE

        Specifies a linear ordinate (Y) scale range.

        Parameters
        ----------
        ymin
            Minimum ordinate scale value.

        ymax
            Maximum ordinate scale value.

        num
            Y-axis number to which range applies (defaults to 1).  Valid
            numbers are 1 to 3 for /GRTYP,2 and 1 to 6 for /GRTYP,3.  If ALL,
            apply to all Y-axes.

        Notes
        -----
        Specifies a linear ordinate (Y) scale range for the line graph display.
        Use /YRANGE,DEFAULT to return to automatic scaling.  For multiple
        Y-axes graphs [/GRTYP], see /GROPT, ASCAL to automatically scale the
        additional Y-axes.

        Automatic scaling will often yield inappropriate range values for
        logarithmic scales (/GROPT, LOGY).

        This command is valid in any processor.
        """
        command = "/YRANGE,%s,%s,%s" % (str(ymin), str(ymax), str(num))
        return self.run(command, **kwargs)

    
    def prpath(self, lab1="", lab2="", lab3="", lab4="", lab5="", lab6="",
               **kwargs):
        """APDL Command: PRPATH

        Prints path items along a geometry path.

        Parameters
        ----------
        lab1, lab2, lab3, . . . , lab6
            Labels identifying the path items to be printed.  Up to six items
            may be printed at a time.  Predefined path geometry items XG, YZ,
            ZG, and S [PDEF] may also be printed.

        Notes
        -----
        Prints path items with respect to a geometry path (as defined by the
        PATH  and PPATH commands).  Path items and their labels must have been
        defined with the PDEF, PVECT, PCALC, PDOT, PCROSS, or PRNEAR commands.
        Path items may also be displayed with the PLPATH and PLPAGM commands.
        See the PRANGE command for range control of the path.
        """
        command = "PRPATH,%s,%s,%s,%s,%s,%s" % (str(lab1), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    
    
    def tsres(self, array="", **kwargs):
        """APDL Command: TSRES

        Defines an array of key times at which the time-stepping strategy
        changes.

        Parameters
        ----------
        array
            Identifies an Nx1x1 array parameter containing the key times at
            which the heat transfer time-stepping strategy changes (the time
            step is reset to the initial time step based on DELTIM or NSUBST
            settings).  The array name must be enclosed by % signs (e.g.,
            %array%).  See *DIM for more information on array parameters.

        Notes
        -----
        Time values in the array parameter must be in ascending order and must
        not exceed the time at the end of the load step as defined on the TIME
        command. The time increment between time points in the array list must
        be larger than the initial time step defined on the DELTIM or NSUBST
        command.  Time values must also fall between the beginning and ending
        time values of the load step.  For multiple load step problems, you
        must either change the parameter values to fall between the beginning
        and ending time values of the load step or reissue the command with a
        new array parameter.  To clear the array parameter specification, issue
        TSRES,ERASE.  Results can be output at the requested time points if the
        array or time values in the array are also specified in the OUTRES
        command using FREQ=%array%.  Use this command to reset the time-
        stepping strategy within a load step. You may need to reset the time-
        stepping strategy when using tabular time-varying boundary conditions.

        See Steady-State Thermal Analysis of the Thermal Analysis Guide  for
        more information on applying boundary conditions via tabular input.
        See Transient Thermal Analysis of the Thermal Analysis Guide for more
        information on defining the key time array.
        """
        command = "TSRES,%s" % (str(array))
        return self.run(command, **kwargs)

    
    def pltrac(self, analopt="", item="", comp="", trpnum="", name="",
               mxloop="", toler="", option="", escl="", mscl="", **kwargs):
        """APDL Command: PLTRAC

        Displays a particle flow or charged particle trace on an element
        display.

        Parameters
        ----------
        analopt
            Analysis option

            FLUID - Particle trace in fluid flow (default)

            ELEC - Particle trace in electric field

            MAGN - Particle trace in magnetic field

            EMAG - Particle trace in presence of both electric and magnetic fields

        item
            Label identifying the item to be contoured.  Valid item labels are
            shown in Table 222: PLTRAC - Valid Item and Component Labels
            below.  Some items also require a component label.  If Item is
            blank, display only the path trajectory.

        comp
            Component of the item (if required).  Valid component labels are
            shown in Table 222: PLTRAC - Valid Item and Component Labels below.

        trpnum
            Trace point number for storing trajectory data for use with PATH
            logic. Defaults to 0 (no trajectory path data is stored for further
            processing with PATH logic).

        name
            Name of prefix of array variable. Defaults to TRAC. NamePOIN stores
            trajectory path points for trace point number TRPNum. If Analopt =
            ELEC, MAGN, or EMAG, two additional array parameters, NameDATA and
            NameLABL, store trajectory path data and labels for the same
            TRPNum.

        mxloop
            Maximum number of loops traced by a particle.  Defaults to 25 for
            Opt = FLUID; otherwise, defaults to 1000.

        toler
            Length tolerance used for particle trajectory geometry calculation.
            Valid only for Analopt = ELEC, MAGN, or EMAG.  If particle trace
            appears to terminate inside an element, adjusting the length
            tolerance may be necessary.  Defaults to 1.0 x 10-8.

        option
            Flow trace option:

            0 - Use the undeformed mesh for computing the flow trace.

            1 - Use the deformed mesh for computing the flow trace.

        escl
            Electric field scale factor. Setting this scale factor affects only
            the tracing, not the field solution results. A negative factor
            corresponds to the opposite vector direction. Valid only for
            Analopt = ELEC or EMAG. Defaults to 1.

        mscl
            Magnetic field scale factor. Setting this scale factor affects only
            the tracing, not the field solution results. A negative factor
            corresponds to the opposite vector direction. Valid only for
            Analopt = MAGN or EMAG. Defaults to 1.

        Notes
        -----
        For a specified item, the variation of the item is displayed along the
        particle trace as a color-contoured ribbon.  The TRPOIN command must be
        used to define a point on the trajectory path.  Multiple traces may be
        displayed simultaneously by defining multiple trace points.  Issue the
        TRPLIS command to list the current tracing points.  Issue the TRPDEL
        command to delete tracing points defined earlier.   Use the PAPUT
        command with the POIN option to retrieve the particle trajectory points
        as path points.

        The model must be 3-D for the ELEC, MAGN, and EMAG analysis options.

        Three array parameters are created at the time of the particle trace:
        TRACPOIN, TRACDATA and TRACLABL. These array parameters can be used to
        put the particle velocity and the elapsed time into path form.   The
        procedure to put the arrays into a path named PATHNAME is as follows:

        Not used if Analopt = FLUID.  If working in the GUI, use the "All
        information" option to retrieve information from all three arrays at
        once.

        If OPTION is set to 1, the deformed mesh is based on the displacement
        degrees of freedom UX, UY, and UZ, which must be available in the load
        step.

        Table: 222:: : PLTRAC - Valid Item and Component Labels

        See the Basic Analysis Guide for more information on particle flow and
        charged particle traces.  See Animation in the Basic Analysis Guide for
        information on particle trace animation.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PLTRAC,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(analopt), str(item), str(comp), str(trpnum), str(name), str(mxloop), str(toler), str(option), str(escl), str(mscl))
        return self.run(command, **kwargs)

    
    
    def suget(self, surfname="", rsetname="", parm="", geom="", **kwargs):
        """APDL Command: SUGET

        Moves surface geometry and mapped results to an array parameter.

        Parameters
        ----------
        surfname
            Eight character surface name.

        rsetname
            Eight character result name.

        parm
            APDL array parameter name (up to 32 characters).

        geom
            Switch controlling how data is written.

            ON (or 1 or YES) - Writes geometry data and interpolated results information to the parameter.

            OFF (or 0 or NO) - Writes only interpolated results information to the parameter. (Default)

        Notes
        -----
        For Geom = OFF (or 0 or NO), only results information is written to
        this parameter.

        For Geom = ON (or 1 or YES), both geometry data and results information
        are written to this parameter.  Geometry data includes 7 data items:
        (GCX, GCY, GCZ, NORMX, NORMY, NORMZ, and DA). Results information is
        then written to the 8th column of the parameter. SetNames of GCX, GCY,
        GCZ, NORMX, NORMY, NORMZ, and DA are predefined and computed when SUCR
        is issued.
        """
        command = "SUGET,%s,%s,%s,%s" % (str(surfname), str(rsetname), str(parm), str(geom))
        return self.run(command, **kwargs)

    def powerh(self, **kwargs):
        """APDL Command: POWERH

        Calculates the rms power loss in a conductor or lossy dielectric.

        Notes
        -----
        POWERH invokes an ANSYS macro which calculates the time-averaged (rms)
        power loss in a conductor or lossy dielectric material from a harmonic
        analysis.  The power loss is stored in the parameter PAVG.  Conductor
        losses include solid conductors and surface conductors approximated by
        impedance or shielding boundary conditions. The power loss density for
        solid conductors or dielectrics is stored in the element table with the
        label PLOSSD and may be listed [PRETAB] or displayed [PLETAB].  PLOSSD
        does not include surface losses. The elements of the conducting region
        must be selected before this command is issued.  POWERH is valid for
        2-D and 3-D analyses.
        """
        command = "POWERH,"
        return self.run(command, **kwargs)

    
    def supr(self, surfname="", rsetname="", **kwargs):
        """APDL Command: SUPR

        Print global status, geometry information and/or result information.

        Parameters
        ----------
        surfname
            Eight character surface name. If SurfName = ALL, repeat printout
            for all selected surfaces.

        rsetname
            Eight character result set name.

        Notes
        -----
        When no arguments are specified, SUPR generates a global status summary
        of all defined surfaces. If only SurfName is specified, the geometry
        information for that surface is printed. If both SurfName and RSetName
        are specified, the value of the results set at each point, in addition
        to the geometry information, is printed.
        """
        command = "SUPR,%s,%s" % (str(surfname), str(rsetname))
        return self.run(command, **kwargs)

    def plchist(self, spec="", freqpt="", **kwargs):
        """APDL Command: PLCHIST

        Plots a histogram of the frequency response of each sector for the
        given CYCSPEC specification.

        Parameters
        ----------
        spec
            CYCSPEC specification number (ordered 1 to N in the order input;
            use CYCSPEC,LIST to view the current list order). Defaults to 1.

        freqpt
            Harmonic frequency point to plot (the data set number NSET or
            CUMULATIVE on SET,LIST). Defaults to the current SET frequency.

        Notes
        -----
        Following a cyclic mode-superposition harmonic analysis, this command
        creates a histogram plot of the result item given by a CYCSPEC
        specification versus the sector number. A CYCCALC command must have
        been issued prior to this command.
        """
        command = "PLCHIST,%s,%s" % (str(spec), str(freqpt))
        return self.run(command, **kwargs)

    def omega(self, omegx="", omegy="", omegz="", **kwargs):
        """APDL Command: OMEGA

        Specifies the rotational velocity of the structure.

        Parameters
        ----------
        omegx, omegy, omegz
            Rotational velocity of the structure about the global Cartesian X,
            Y, and Z axes.

        Notes
        -----
        This command specifies the rotational velocity of the structure about
        each of the global Cartesian axes (right-hand rule).  Rotational
        velocities may be defined in these analysis types:

        Static (ANTYPE,STATIC)

        Harmonic (ANTYPE,HARMIC) -- Full or mode-superposition

        Transient (ANTYPE,TRANS)  -- Full or mode-superposition

        Substructuring (ANTYPE,SUBSTR)

        Modal (ANTYPE,MODAL)

        The OMEGA command supports tabular boundary conditions (%TABNAME_X%,
        %TABNAME_Y%, and %TABNAME_Z%) for OMEGA_X, OMEGA_Y, and OMEGA_Z input
        values (*DIM) for full transient and harmonic analyses.

        Rotational velocities are combined with the element mass matrices to
        form a body force load vector term.  Units are radians/time.  Related
        commands are ACEL, CGLOC, CGOMGA, DCGOMG, and DOMEGA.

        See Analysis Tools in the Mechanical APDL Theory Reference for more
        information.

        If you have applied the Coriolis effect (CORIOLIS) using a stationary
        reference frame, the OMEGA command takes the gyroscopic damping matrix
        into account for the elements listed in the "Stationary Reference
        Frame" heading in the notes section of the CORIOLIS command. The
        element axis must pass through the global Cartesian origin. ANSYS
        verifies that the rotation vector axis is parallel to the axis of the
        element; if not, the gyroscopic effect is not applied. After issuing
        the OMEGA command when the Coriolis or gyroscopic effect is present, a
        subsequently issued CMOMEGA command has no effect.

        In a mode-superposition harmonic or transient analysis, you must apply
        the load in the modal portion of the analysis. Mechanical APDL
        calculates a load vector and writes it to the MODE file, which you can
        apply via the LVSCALE command.

        This command is also valid in PREP7.
        """
        command = "OMEGA,%s,%s,%s" % (str(omegx), str(omegy), str(omegz))
        return self.run(command, **kwargs)

    
    def pwedge(self, xcentr="", ycentr="", xlrad="", angle1="", angle2="",
               **kwargs):
        """APDL Command: /PWEDGE

        Creates an annotation wedge (GUI).

        Parameters
        ----------
        xcentr
            Wedge X center location (-1.0 < X < 2.0).

        ycentr
            Wedge Y center location (-1.0 < Y < 1.0).

        xlrad
            Wedge radius length.

        angle1
            Starting angle of wedge.

        angle2
            Ending angle of wedge.  The wedge is drawn counterclockwise from
            the starting angle, ANGLE1, to the ending angle, ANGLE2.

        Notes
        -----
        Creates an annotation wedge to be written directly onto the display at
        a specified location.  This is a command generated by the Graphical
        User Interface (GUI) and will appear in the log file (Jobname.LOG) if
        annotation is used.  This command is not intended to be typed in
        directly in an ANSYS session (although it can be included in an input
        file for batch input or for use with the /INPUT command).

        All wedges are shown on subsequent displays unless the annotation is
        turned off or deleted.  Use the /LSPEC and the /PSPEC command to set
        the attributes of the wedge.

        This command is valid in any processor.
        """
        command = "/PWEDGE,%s,%s,%s,%s,%s" % (str(xcentr), str(ycentr), str(xlrad), str(angle1), str(angle2))
        return self.run(command, **kwargs)

    
    def dmpext(self, smode="", tmode="", dmpname="", freqb="", freqe="",
               nsteps="", **kwargs):
        """APDL Command: DMPEXT

        Extracts modal damping coefficients in a specified frequency range.

        Parameters
        ----------
        smode
            Source mode number. There is no default for this field; you must
            enter an integer greater than zero.

        tmode
            Target mode. Defaults to SMODE.

        dmpname
            Array parameter name containing the damping results. Defaults to
            d_damp.

        freqb
            Beginning frequency range (real number greater than zero) or 'EIG'
            at eigenfrequency of source mode. 'EIG' is valid only if SMODE =
            TMODE. Note that EIG must be enclosed in single quotes when this
            command is used on the command line or in an input file. There is
            no default for this field; you must enter a value.

        freqe
            End of frequency range. Must be blank for Freqb = EIG. Default is
            Freqb.

        nsteps
            Number of substeps. Defaults to 1.

        Notes
        -----
        DMPEXT invokes an ANSYS macro that uses modal projection techniques to
        compute the damping force by the modal velocity of the source mode onto
        the target mode. From the damping force, damping parameters are
        extracted. DMPEXT creates an array parameter Dmpname, with the
        following entries in each row:

        response frequency

        modal damping coefficient

        modal squeeze stiffness coefficient

        damping ratio

        squeeze-to-structural stiffness ratio

        The macro requires the modal displacements from the file Jobname.EFL
        obtained from the RMFLVEC command. In addition, a node component FLUN
        must exist from all FLUID136 nodes. The computed damping ratio may be
        used to specify constant or modal damping by means of the DMPRAT or
        MDAMP commands. For Rayleigh damping, use the ABEXTRACT command to
        compute ALPHAD and BETAD damping parameters. See Thin Film Analysis for
        more information on thin film analyses.

        The macro uses the LSSOLVE command to perform two load steps for each
        frequency.  The first load case contains the solution of the source
        mode excitation and can be used for further postprocessing. Solid model
        boundary conditions are deleted from the model.  In addition,
        prescribed nodal boundary conditions are applied to the model.  You
        should carefully check the boundary conditions of your model prior to
        executing a subsequent analysis.

        This command is also valid in PREP7.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "DMPEXT,%s,%s,%s,%s,%s,%s" % (str(smode), str(tmode), str(dmpname), str(freqb), str(freqe), str(nsteps))
        return self.run(command, **kwargs)

    def dynopt(self, **kwargs):
        """APDL Command: DYNOPT

        Specifies "Dynamic analysis options" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "DYNOPT,"
        return self.run(command, **kwargs)

    def fklist(self, kpoi="", lab="", **kwargs):
        """APDL Command: FKLIST

        Lists the forces at keypoints.

        Parameters
        ----------
        kpoi
            List forces at this keypoint.  If ALL (default), list for all
            selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        lab
            Force label to be listed (defaults to ALL).  See the DOFSEL command
            for labels.

        Notes
        -----
        Listing applies to the selected keypoints [KSEL] and the selected force
        labels [DOFSEL].

        This command is valid in any processor.
        """
        command = "FKLIST,%s,%s" % (str(kpoi), str(lab))
        return self.run(command, **kwargs)

    
    def starvget(self, parr="", entity="", entnum="", item1="", it1num="",
                 item2="", it2num="", kloop="", **kwargs):
        """APDL Command: *VGET

        Retrieves values and stores them into an array parameter.

        Parameters
        ----------
        parr
            The name of the resulting vector array parameter.  See *SET for
            name restrictions.

        entity
            Entity keyword.  Valid keywords are NODE, ELEM, KP, LINE, AREA,
            VOLU, etc. as shown for Entity = in the tables below.

        entnum
            The number of the entity (as shown for ENTNUM = in the tables
            below).

        item1
            The name of a particular item for the given entity.  Valid items
            are as shown in the Item1 columns of the tables below.

        it1num
            The number (or label) for the specified Item1 (if any).  Valid
            IT1NUM values are as shown in the IT1NUM columns of the tables
            below.  Some Item1 labels do not require an IT1NUM value.

        item2, it2num
            A second set of item labels and numbers to further qualify the item
            for which data is to be retrieved.  Most items do not require this
            level of information.

        kloop
            Field to be looped on:

            Loop on the ENTNUM  field (default). - Loop on the Item1 field.

            Loop on the IT1NUM field.  Successive items are as shown with IT1NUM. - Loop on the Item2 field.

        Notes
        -----
        Retrieves values for specified items and stores the values in an output
        vector of a user-named array parameter according to:

        ParR = f(Entity, ENTNUM, Item1, IT1NUM, Item2, IT2NUM)

        where (f) is the *GET function; Entity, Item1, and Item2 are keywords;
        and ENTNUM, IT1NUM, and IT2NUM are numbers or labels corresponding to
        the keywords. Looping continues over successive entity numbers (ENTNUM)
        for the KLOOP default.  For example, *VGET,A(1),ELEM,5,CENT,X returns
        the centroid x-location of element 5 and stores the result in the first
        location of A.  Retrieving continues with element 6, 7, 8, etc.,
        regardless of whether the element exists or is selected, until
        successive array locations are filled.  Use *VLEN or *VMASK to skip
        locations. Absolute values and scale factors may be applied to the
        result parameter [*VABS, *VFACT].  Results may be cumulative [*VCUM].
        See the *VOPER command for general details.  Results can be put back
        into an analysis by writing a file of the desired input commands with
        the *VWRITE command.  See also the *VPUT command.

        Both *GET and *VGET retrieve information from the active data stored in
        memory. The database is often the source, and sometimes the information
        is retrieved from common memory blocks that ANSYS uses to manipulate
        information. Although POST1 and POST26 operations use a *.rst file, GET
        data is accessed from the database or from the common blocks. Get
        operations do not access the *.rst file directly.

        The *VGET command retrieves both the unprocessed real and the imaginary
        parts (original and duplicate sector nodes and elements) of a cyclic
        symmetry solution.

        Each of the sections for accessing *VGET parameters are shown in the
        following order:

        *VGET PREP7 Items

        *VGET POST1 Items

        This command is valid in any processor.
        """
        command = "*VGET,%s,%s,%s,%s,%s,%s,%s,%s" % (str(parr), str(entity), str(entnum), str(item1), str(it1num), str(item2), str(it2num), str(kloop))
        return self.run(command, **kwargs)

    
    def dkdele(self, kpoi="", lab="", **kwargs):
        """APDL Command: DKDELE

        Deletes DOF constraints at a keypoint.

        Parameters
        ----------
        kpoi
            Keypoint for which constraint is to be deleted.  If ALL, delete for
            all selected keypoints [KSEL].  If KPOI = P, graphical picking is
            enabled and all remaining command fields are ignored (valid only in
            the GUI).  A component name may also be substituted for KPOI.

        lab
            Valid degree of freedom label.  If ALL, use all appropriate labels.
            Structural labels:  UX, UY, or UZ (displacements); ROTX, ROTY, or
            ROTZ (rotations); WARP (warping).  Thermal labels: TEMP, TBOT, TE2,
            TE3, . . ., TTOP (temperature). Acoustic labels:  PRES (pressure);
            UX, UY, or UZ (displacements for FSI coupled elements). Electric
            label:  VOLT (voltage).  Magnetic labels:  MAG (scalar magnetic
            potential); AX, AY, or AZ (vector magnetic potentials).  Diffusion
            label: CONC (concentration).

        Notes
        -----
        Deletes the degree of freedom constraints (and all corresponding finite
        element constraints) at a keypoint.  See the DDELE command for details.

        This command is also valid in PREP7.
        """
        command = "DKDELE,%s,%s" % (str(kpoi), str(lab))
        return self.run(command, **kwargs)

    def secmodif(self, secid="", kywrd="", **kwargs):
        """APDL Command: SECMODIF

        Modifies a pretension section

        Parameters
        ----------
        secid
            Unique section number. This number must already be assigned to a
            section.

        norm
            Keyword specifying that the command will modify the pretension
            section normal direction.

        nx, ny, nz
            Specifies the individual normal components to modify.

        kcn
            Coordinate system number. This can be either 0 (Global Cartesian),
            1 (Global Cylindrical) 2 (Global Spherical), 4 (Working Plane), 5
            (Global Y Axis Cylindrical) or an arbitrary reference number
            assigned to a coordinate system.

        Notes
        -----
        The SECMODIF command either modifies the normal for a specified
        pretension section, or changes the name of the specified pretension
        surface.
        """
        command = "SECMODIF,%s,%s" % (str(secid), str(kywrd))
        return self.run(command, **kwargs)

    
    def mfconv(self, lab="", toler="", minref="", **kwargs):
        """APDL Command: MFCONV

        Sets convergence values for an ANSYS Multi-field solver analysis.

        Parameters
        ----------
        lab
            Valid labels:

        toler
            Convergence tolerance about program calculated reference value (the
            L2 norm of the new load in a multi-field analysis). Defaults to
            0.01 (1%) for all labels. Must be less than 1.0.

        minref
            The minimum value allowed for the program calculated reference
            value. If negative, no minimum is enforced. Defaults to 1.0e-6 for
            all labels. Not available in the GUI. MINREF corresponds to
            ||ϕnew|| as defined in Set up Stagger Solution in the Coupled-Field
            Analysis Guide.

        Notes
        -----
        MFCONV sets convergence values for variables at the ANSYS
        Multi-field solver interface.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide
        for a list of all ANSYS Multi-field solver commands and their
        availability for MFS and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported
        in Distributed ANSYS.
        """
        return self.run(f"MFCONV,{lab},{toler},,{minref}", **kwargs)

    def ftsize(self, mxloc="", mxev="", mxlod="", **kwargs):
        """APDL Command: FTSIZE

        Defines the fatigue data storage array.

        Parameters
        ----------
        mxloc
            Maximum number of fatigue locations (defaults to 5).

        mxev
            Maximum number of fatigue events (defaults to 10).

        mxlod
            Maximum number of loadings in each event (defaults to 3).

        Notes
        -----
        Defines the size and erases the stress conditions for the fatigue data
        storage array.  A stress condition is a loading (stresses) at a
        particular location (node) for a particular event.  Size is defined in
        terms of the maximum number of locations, events, and loadings.  The
        array size cannot be changed once data storage has begun (without
        erasing all previously stored data).  If a size change is necessary,
        see the FTWRITE command.
        """
        command = "FTSIZE,%s,%s,%s" % (str(mxloc), str(mxev), str(mxlod))
        return self.run(command, **kwargs)

    def mfinter(self, option="", **kwargs):
        """APDL Command: MFINTER

        Specifies the interface load transfer interpolation option for an ANSYS
        Multi-field solver analysis.

        Parameters
        ----------
        option
            Interface load transfer option:

            CONS - Conservative formulation for load transfer.

            NONC - Nonconservative formulation for load transfer (default).

        Notes
        -----
        This command only applies to the interpolation method for forces, heat
        flux, and heat generation. Displacement and temperature transfers are
        always nonconservative.

        For more information on conservative and nonconservative load transfer,
        see Load Transfer in the Coupled-Field Analysis Guide.

        This command is also valid in PREP7.

        See Multi-field Commands in the Coupled-Field Analysis Guide for a list
        of all ANSYS Multi-field solver commands and their availability for MFS
        and MFX analyses.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "MFINTER,%s" % (str(option))
        return self.run(command, **kwargs)

    
    def prerr(self, **kwargs):
        """APDL Command: PRERR

        Prints SEPC and TEPC.

        Notes
        -----
        Prints the percent error in structural energy norm (SEPC) and the
        thermal energy norm percent error (TEPC).  Approximations of mesh
        discretization error associated with a solution are calculated for
        analyses having structural or thermal degrees of freedom.

        The structural approximation is based on the energy error (which is
        similar in concept to the strain energy) and represents the error
        associated with the discrepancy between the calculated stress field and
        the globally continuous stress field (see POST1 - Error Approximation
        Technique in the Mechanical APDL Theory Reference).  This discrepancy
        is due to the assumption in the elements that only the displacements
        are continuous at the nodes.  The stress field is calculated from the
        displacements and should also be continuous, but generally is not.

        Thermal analyses may use any solid and shell thermal element having
        only temperature degrees of freedom.  The thermal approximation is
        based on the total heat flow dissipation and represents the error
        associated with the discrepancy between the calculated nodal thermal
        flux within an element and a continuous global thermal flux.  This
        continuous thermal flux is calculated with the normal nodal averaging
        procedure.

        The volume (result label VOLU) is used to calculate the energy error
        per element (result label SERR for the structural energy error and TERR
        for the thermal energy error).  These energy errors, along with the
        appropriate energy, are then used to calculate the percent error in
        energy norm (SEPC for structural and TEPC for thermal). These
        percentages can be listed by the PRERR command, retrieved by the *GET
        command (with labels SEPC and TEPC) for further calculations, and shown
        on the displacement display (PLDISP), as applicable.

        For structural analyses, the maximum absolute value of nodal stress
        variation of any stress component for any node of an element (result
        item SDSG) is also calculated.  Similarly, for thermal gradient
        components, TDSG is calculated.  Minimum and maximum result bounds
        considering the possible effect of discretization error will be shown
        on contour displays (PLNSOL).  For shell elements, the top surface
        location is used to produce a meaningful percentage value.  SERR, TERR,
        SEPC, TEPC, SDSG, and TDSG will be updated whenever the nodal stresses
        or fluxes are recalculated.

        If the energy error is a significant portion of the total energy, then
        the analysis should be repeated using a finer mesh to obtain a more
        accurate solution.  The energy error is relative from problem to
        problem but will converge to a zero energy error as the mesh is
        refined.  An automated adaptive meshing procedure using this energy
        error is described with the ADAPT macro.

        The following element- and material-type limitations apply:

        Valid with most 2-D solid, 3-D solid, axisymmetric solid, or 3-D shell
        elements.

        The following element types are not valid: SHELL28, SHELL41, and
        SOLID65.

        The model should have only structural or thermal degrees of freedom.

        The analysis must be linear (for both material and geometry).

        Multi-material (for example, composite) elements are not valid.

        Transition regions from one material to another are not valid (that is,
        the entire model should consist of one material).

        Anisotropic materials (TB,ANEL) are not considered.
        """
        command = "PRERR,"
        return self.run(command, **kwargs)

    def menu(self, key="", **kwargs):
        """APDL Command: /MENU

        Activates the Graphical User Interface (GUI).

        Parameters
        ----------
        key
            Activation key:

            ON - Activates the menu system (device dependent).

            GRPH - Enters non-GUI graphics mode.

        Notes
        -----
        Activates the Graphical User Interface (GUI).

        Caution:: : if you include the /MENU,ON command in your start162.ans,
        it should be the last command in the file.  Any commands after /MENU,ON
        may be ignored.  (It is not necessary to include the /SHOW and /MENU,ON
        commands in start162.ans if you will be using the launcher to enter the
        ANSYS program.)

        This command is valid in any processor.
        """
        command = "/MENU,%s" % (str(key))
        return self.run(command, **kwargs)

    def smult(self, labr="", lab1="", lab2="", fact1="", fact2="", **kwargs):
        """APDL Command: SMULT

        Forms an element table item by multiplying two other items.

        Parameters
        ----------
        labr
            Label assigned to results.  If same as existing label, the existing
            values will be overwritten by these results.

        lab1
            First labeled result item in operation.

        lab2
            Second labeled result item in operation (may be blank).

        fact1
            Scale factor applied to Lab1. A (blank) or '0' entry defaults to
            1.0.

        fact2
            Scale factor applied to Lab2. A (blank) or '0' entry defaults to
            1.0.

        Notes
        -----
        Forms a labeled result item (see ETABLE command) for the selected
        elements by multiplying two existing labeled result items according to
        the operation:

        LabR = (FACT1 x Lab1) x (FACT2 x Lab2)

        May also be used to scale results for a single labeled result item.  If
        absolute values are requested [SABS,1], the absolute values of Lab1 and
        Lab2 are used.
        """
        command = "SMULT,%s,%s,%s,%s,%s" % (str(labr), str(lab1), str(lab2), str(fact1), str(fact2))
        return self.run(command, **kwargs)

    def sfcum(self, lab="", oper="", fact="", fact2="", **kwargs):
        """APDL Command: SFCUM

        Specifies that surface loads are to be accumulated.

        Parameters
        ----------
        lab
            Valid surface load label.  If ALL, use all appropriate labels.

        oper
            Accumulation key:

            REPL - Subsequent values replace the previous values (default).

            ADD - Subsequent values are added to the previous values.

            IGNO - Subsequent values are ignored.

        fact
            Scale factor for the first surface load value. A (blank) or '0'
            entry defaults to 1.0.

        fact2
            Scale factor for the second surface load value. A (blank) or '0'
            entry defaults to 1.0.

        Notes
        -----
        Allows repeated surface loads (pressure, convection, etc.) to be
        replaced, added, or ignored.  Surface loads are applied with the SF,
        SFE, and SFBEAM commands.  Issue the SFELIST command to list the
        surface loads.  The operations occur when the next surface load
        specifications are defined.  For example, issuing the SF command with a
        pressure value of 25 after a previous SF command with a pressure value
        of 20 causes the current value of that pressure to be 45 with the add
        operation, 25 with the replace operation, or 20 with the ignore
        operation.  All new pressures applied with SF after the ignore
        operation will be ignored, even if no current pressure exists on that
        surface.

        Scale factors are also available to multiply the next value before the
        add or replace operation.  A scale factor of 2.0 with the previous
        "add" example results in a pressure of 70.  Scale factors are applied
        even if no previous values exist.  Issue SFCUM,STAT to show the current
        label, operation, and scale factors.  Solid model boundary conditions
        are not affected by this command, but boundary conditions on the FE
        model are affected.

        Note:: : The FE boundary conditions may still be overwritten by
        existing solid model boundary conditions if a subsequent boundary
        condition transfer occurs.

        SFCUM does not work for tabular boundary conditions.

        This command is also valid in PREP7.
        """
        command = "SFCUM,%s,%s,%s,%s" % (str(lab), str(oper), str(fact), str(fact2))
        return self.run(command, **kwargs)

    def slashtype(self, wn="", type_="", **kwargs):
        """APDL Command: /TYPE

        Defines the type of display.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        type\_
            Display type.  Defaults to ZBUF for raster mode displays or BASIC
            for vector mode displays:

            BASIC or 0 - Basic display (no hidden or section operations).

            SECT or 1 - Section display (plane view).  Use the /CPLANE command to define the cutting
                        plane.

            HIDC or 2 - Centroid hidden display (based on item centroid sort).

            HIDD or 3 - Face hidden display (based on face centroid sort).

            HIDP or 4 - Precise hidden display (like HIDD but with more precise checking). Because all
                        facets are sorted, this mode can be extremely slow,
                        especially for large models.

            CAP or 5 - Capped hidden display (same as combined SECT and HIDD with model in front of
                       section plane removed).

            ZBUF or 6 - Z-buffered display (like HIDD but using software Z-buffering).

            ZCAP or 7 - Capped Z-buffered display (same as combined SECT and ZBUF with model in front
                        of section plane removed).

            ZQSL or 8 - QSLICE Z-buffered display (same as SECT but the edge lines of the remaining 3-D
                        model are shown).

            HQSL or 9 - QSLICE precise hidden display (like ZQSL but using precise hidden).

        Notes
        -----
        Defines the type of display, such as section display or hidden-line
        display.  Use the /DEVICE command to specify either raster or vector
        mode.

        The SECT, CAP, ZCAP, ZQSL, and HQSL options produce section displays.
        The section or "cutting" plane is specified on the /CPLANE command as
        either normal to the viewing vector at the focus point (default), or as
        the working plane.

        When you use PowerGraphics, the section display options (Section,
        Slice, and Capped) use different averaging techniques for the interior
        and exterior results. Because of the different averaging schemes,
        anomalies may appear at the transition areas. In many cases, the
        automatically computed MIN and MAX values will differ from the full
        range of interior values. You can lessen the effect of these anomalies
        by issuing AVRES,,FULL (Main Menu> General Post Proc> Options for
        Outp). This command sets your legend's automatic contour interval range
        according to the minimum and maximum results found throughout the
        entire model.

        With PowerGraphics active (/GRAPHICS,POWER), the averaging scheme for
        surface data with interior element data included (AVRES,,FULL) and
        multiple facets per edge (/EFACET,2 or /EFACET,4) will yield differing
        minimum and maximum contour values depending on the  Z-Buffering
        options (/TYPE,,6 or /TYPE,,7).  When the Section data is not included
        in the averaging schemes (/TYPE,,7), the resulting absolute value for
        the midside node is significantly smaller.

        The HIDC, HIDD, HIDP, ZBUF, ZQSL, and HQSL options produce displays
        with "hidden" lines removed.  Hidden lines are lines obscured from view
        by another element, area, etc.  The choice of non-Z-buffered hidden-
        line procedure types is available only for raster mode [/DEVICE]
        displays.  For vector mode displays, all non-Z-buffered "hidden-line"
        options use the same procedure (which is slightly different from the
        raster procedures).  Both geometry and postprocessing displays may be
        of the hidden-line type.  Interior stress contour lines within solid
        elements can also be removed as hidden lines, leaving only the stress
        contour lines and element outlines on the visible surfaces.  Midside
        nodes of elements are ignored on postprocessing displays.  Overlapping
        elements will not be displayed.

        The ZBUF, ZCAP, and ZQSL options use a specific hidden-line technique
        called software Z-buffering.  This technique allows a more accurate
        display of overlapping surfaces (common when using Boolean operations
        or /ESHAPE on element displays), and allows smooth shaded displays on
        all interactive graphics displays.  Z-buffered displays can be
        performed faster than HIDP and CAP type displays for large models.  See
        also the /LIGHT, /SHADE, and /GFILE commands for additional options
        when Z-buffering is used.

        This command is valid in any processor.
        """
        command = "/TYPE,%s,%s" % (str(wn), str(type_))
        return self.run(command, **kwargs)

    def angle(self, wn="", theta="", axis="", kincr="", **kwargs):
        """APDL Command: /ANGLE

        Rotates the display about an axis.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        theta
            Angle (degrees) for changing display orientation (positive,
            counterclockwise about specified axis).

        axis
            Rotation axis:  XS, YS, or ZS (default) for the screen axes;  XM,
            YM, or ZM for the global Cartesian model axes.  ZS is normal to the
            screen; all axes pass through the focus point.

        kincr
            Cumulative rotation key:

            0 - Do not use cumulative successive rotations.

            1 - Use cumulative rotations.  Rotations are relative to the previous rotation.
                View settings (/VIEW) are recalculated.

        Notes
        -----
        Default orientation is YS vertical. When the /XFRM command is set for
        rotation about two points, or for entities, the /ANGLE command is
        functional only for Axis = ZS or ZM and KINCR = 1.

        This command is valid in any processor.
        """
        command = "/ANGLE,%s,%s,%s,%s" % (str(wn), str(theta), str(axis), str(kincr))
        return self.run(command, **kwargs)

    def fl(self, nloc="", node="", scfx="", scfy="", scfz="", title="",
           **kwargs):
        """APDL Command: FL

        Defines a set of fatigue location parameters.

        Parameters
        ----------
        nloc
            Reference number for this location (within MXLOC).  When defining a
            new location, defaults to lowest unused location.  If the specified
            NODE is already associated with a location, NLOC defaults to that
            existing location.

        node
            Node number corresponding to this location (must be unique).  Used
            only to associate a node with a new location or to find an existing
            location (if NLOC is not input).  If NODE = -1 (or redefined),
            erase all parameters and fatigue stresses for this location.

        scfx, scfy, scfz
            Stress concentration factors applied to the total stresses.
            Factors are applied in the global X, Y, and Z directions unless the
            axisymmetric option of the FSSECT is used (i.e., RHO is nonzero),
            in which case the factors are applied in the section x, y, and z
            (radial, axial, and hoop) directions.

        title
            User-defined title for this location (up to 20 characters).

        Notes
        -----
        Repeat FL command to define additional sets of location parameters
        (MXLOC limit), to redefine location parameters, or to delete location
        stress conditions.

        One location must be defined for each node of interest and only one
        node can be associated with each location.  See the FTSIZE command for
        the maximum locations (MXLOC) allowed.  A location will be
        automatically defined for a node not having a location when the FSSECT,
        FSNODE, or FS command is issued.  Automatically defined locations are
        assigned the lowest available location number, unity stress
        concentration factors, and no title.
        """
        command = "FL,%s,%s,%s,%s,%s,%s" % (str(nloc), str(node), str(scfx), str(scfy), str(scfz), str(title))
        return self.run(command, **kwargs)

    
    def sfalist(self, area="", lab="", **kwargs):
        """APDL Command: SFALIST

        Lists the surface loads for the specified area.

        Parameters
        ----------
        area
            Area at which surface load is to be listed.  If ALL (or blank),
            list for all selected areas [ASEL].  If AREA = P, graphical picking
            is enabled and all remaining command fields are ignored (valid only
            in the GUI).  A component name may be substituted for AREA.

        lab
            Valid surface load label.  If ALL (or blank), use all appropriate
            labels.  See the SFA command for labels.

        Notes
        -----
        This command is valid in any processor.
        """
        command = "SFALIST,%s,%s" % (str(area), str(lab))
        return self.run(command, **kwargs)

    def prvect(self, item="", lab2="", lab3="", labp="", **kwargs):
        """APDL Command: PRVECT

        Prints results as vector magnitude and direction cosines.

        Parameters
        ----------
        item
            Predefined vector item (from Table 226: PRVECT - Valid Item and
            Component Labels below) or a label identifying the i-component of a
            user-defined vector.

        lab2
            Label identifying the j-component of a user-defined vector. In most
            cases, this value must be blank if Item is selected from
            Table 226: PRVECT - Valid Item and Component Labels. Individual
            principal stresses (Item = S) or principal strains (Item = EPxx)
            may be printed by specifying the value as 1, 2, or 3.

        lab3
            Label identifying the k-component of a user-defined vector.  Must
            be blank if Item is selected from list below or for 2-D user
            defined vector.

        labp
            Label assigned to resultant vector for printout labeling (defaults
            to Item).

        Notes
        -----
        Prints various solution results as vector magnitude and direction
        cosines for the selected nodes and/or elements.  For example, PRVECT,U
        prints the displacement magnitude and its direction cosines for all
        selected nodes.  For nodal degree of freedom vector results, direction
        cosines are with respect to the results coordinate system RSYS. For
        element results, direction cosines are with respect to the global
        Cartesian system. Item components may be printed with the PRNSOL
        command.  Various results also depend upon the recalculation method and
        the selected results location [LAYER, SHELL, NSEL, and ESEL].  Items
        may be selected from a set of recognized vector labels (Item) or a
        vector may be defined from up to three scalar labels (Item,Lab2,Lab3).
        Scalar labels may be user-defined with the ETABLE command.

        Portions of this command are not supported by PowerGraphics
        [/GRAPHICS,POWER].

        Table: 226:: : PRVECT - Valid Item and Component Labels
        """
        command = "PRVECT,%s,%s,%s,%s" % (str(item), str(lab2), str(lab3), str(labp))
        return self.run(command, **kwargs)

    
    def lsclear(self, lab="", **kwargs):
        """APDL Command: LSCLEAR

        Clears loads and load step options from the database.

        Parameters
        ----------
        lab
            Label identifying the data to be cleared:

            SOLID - Delete only solid model loads.

            FE - Delete only finite element loads.

            INER - Delete only inertia loads (ACEL, etc.).

            LFACT - Initialize only load factors (on DCUM, FCUM, SFCUM, etc.).

            LSOPT - Initialize only load step options.

            ALL - Delete all loads and initialize all load step options and load factors.

        Notes
        -----
        Loads are deleted, and load step options are initialized to their
        default values.

        This command is also valid in PREP7.
        """
        command = "LSCLEAR,%s" % (str(lab))
        return self.run(command, **kwargs)

    def pstatus(self, wn="", **kwargs):
        """APDL Command: /PSTATUS

        Displays the global or window display specifications.

        Parameters
        ----------
        wn
            Window number for status (defaults to global specifications).

        Notes
        -----
        Displays the current global or window display specifications.  Global
        display specifications are common to all windows (e.g. /SHOW, etc.).
        Window display specifications are specific to one window (e.g. /VIEW,
        /TYPE, etc.).

        This command is valid in any processor.
        """
        command = "/PSTATUS,%s" % (str(wn))
        return self.run(command, **kwargs)

    def bucopt(self, method="", nmode="", shift="", ldmulte="", rangekey="",
               **kwargs):
        """APDL Command: BUCOPT

        Specifies buckling analysis options.

        Parameters
        ----------
        method
            Mode extraction method to be used for the buckling analysis:

            LANB - Block Lanczos

            SUBSP - Subspace iteration

        nmode
            Number of buckling modes (i.e., eigenvalues or load multipliers) to
            extract (defaults to 1).

        shift
            By default, this value acts as the initial shift point about which
            the buckling modes are calculated (defaults to 0.0).

        ldmulte
            Boundary for the load multiplier range of interest (defaults to ).

        rangekey
            Key used to control the behavior of the eigenvalue extraction
            method (defaults to CENTER):

            CENTER - Use the CENTER option control (default); the program computes NMODE buckling
                     modes centered around SHIFT in the range of (-LDMULTE,
                     +LDMULTE).

            RANGE - Use the RANGE option control; the program computes NMODE buckling modes in the
                    range of (SHIFT, LDMULTE).

        Notes
        -----
        Eigenvalues from a buckling analysis can be negative and/or positive.
        The program sorts the eigenvalues from the most negative to the most
        positive values. The minimum buckling load factor may correspond to the
        smallest eigenvalue in absolute value, or to an eigenvalue within the
        range, depending on your application (i.e., linear perturbation
        buckling analysis or purely linear buckling analysis).

        It is recommended that you request an additional few buckling modes
        beyond what is needed in order to enhance the accuracy of the final
        solution. It is also recommended that you input a non zero SHIFT value
        and a reasonable LDMULTE value (i.e., a smaller LDMULTE that is closer
        to the last buckling mode of interest) when numerical problems are
        encountered.

        When using the RANGE option, defining a range that spans zero is not
        recommended. If you are seeking both negative and positive eigenvalues,
        it is recommended that you use the CENTER option.

        This command is also valid in PREP7.  If used in SOLUTION, this command
        is valid only within the first load step.

        Distributed ANSYS Restriction: Both extraction methods (LANB and SUBSP)
        are supported within Distributed ANSYS. However, the subspace iteration
        eigensolver (SUBSP) is the only distributed eigensolver that will run a
        fully distributed solution. The Block Lanczos eigensolver (LANB) is not
        a distributed eigensolver; therefore, you will not see the full
        performance improvements with this method that you would with a fully
        distributed solution.
        """
        command = "BUCOPT,%s,%s,%s,%s,%s" % (str(method), str(nmode), str(shift), str(ldmulte), str(rangekey))
        return self.run(command, **kwargs)

    
    def icdele(self, **kwargs):
        """APDL Command: ICDELE

        Deletes initial conditions at nodes.

        Notes
        -----
        Deletes all initial conditions previously specified with the IC command
        at all nodes.

        This command is also valid in PREP7.
        """
        command = "ICDELE,"
        return self.run(command, **kwargs)

    
    
    def sueval(self, parm="", lab1="", oper="", **kwargs):
        """APDL Command: SUEVAL

        Perform operations on a mapped item and store result in a scalar
        parameter.

        Parameters
        ----------
        parm
            APDL parameter name.

        lab1
            Eight character set name for the first set used in calculation.

        oper
            Operation to perform:

            SUM - Sum of lab1 result values.

            INTG - Integral of lab1 over surface.

            AVG - Area-weighted average of a result item [Σ(lab1*DA) / Σ(DA)]

        Notes
        -----
        The result of this operation is a scalar APDL parameter value. If
        multiple surfaces are selected when this command is issued, then the
        operation is carried out on each surface individually and the parameter
        reperesents the culmulative value of the operation on all selected
        surfaces.
        """
        command = "SUEVAL,%s,%s,%s" % (str(parm), str(lab1), str(oper))
        return self.run(command, **kwargs)

    def avres(self, key="", opt="", **kwargs):
        """APDL Command: AVRES

        Specifies how results data will be averaged when PowerGraphics is
        enabled.

        Parameters
        ----------
        key
            Averaging key.

            1 - Average results at all common subgrid locations.

            2 - Average results at all common subgrid locations except where material type
                [MAT] discontinuities exist. This option is the default.

            3 - Average results at all common subgrid locations except where real constant
                [REAL] discontinuities exist.

            4 - Average results at all common subgrid locations except where material type
                [MAT] or real constant [REAL] discontinuities exist.

        opt
            Option to determine how results data are averaged.

            (blank) - Average surface results data using only the exterior element faces (default).

            FULL - Average surface results data using the exterior face and interior element data.

        Notes
        -----
        The AVRES command specifies how results data will be averaged at
        subgrid locations that are common to 2 or more elements.  The command
        is valid only when PowerGraphics is enabled (via the /GRAPHICS,POWER
        command).

        With PowerGraphics active (/GRAPHICS,POWER), the averaging scheme for
        surface data with interior element data included (AVRES,,FULL) and
        multiple facets per edge (/EFACET,2 or /EFACET,4) will yield differing
        minimum and maximum contour values depending on the  Z-Buffering
        options (/TYPE,,6 or /TYPE,,7).  When the Section data is not included
        in the averaging schemes (/TYPE,,7), the resulting absolute value for
        the midside node is significantly smaller.

        PowerGraphics does not average your stresses across discontinuous
        surfaces. The normals for various planes and facets are compared to a
        tolerance to determine continuity. The ANGLE value you specify in the
        /EDGE command is the tolerance for classifying surfaces as continuous
        or "coplanar."

        The command affects nodal solution contour plots (PLNSOL), nodal
        solution printout (PRNSOL), and subgrid solution results accessed
        through the Query Results function (under General Postprocessing) in
        the GUI.

        The command has no effect on the nodal degree of freedom solution
        values (UX, UY, UZ, TEMP, etc.).

        For cyclic symmetry mode-superposition harmonic solutions, AVRES,,FULL
        is not supported. Additionally, averaging does not occur across
        discontinuous surfaces, and the ANGLE value on the /EDGE command has no
        effect.

        The command is also available in /SOLU.
        """
        command = "AVRES,%s,%s" % (str(key), str(opt))
        return self.run(command, **kwargs)

    def m(self, node="", lab1="", nend="", ninc="", lab2="", lab3="", lab4="",
          lab5="", lab6="", **kwargs):
        """APDL Command: M

        Defines master degrees of freedom for superelement generation analyses.

        Parameters
        ----------
        node
            Node number at which master degree of freedom is defined.  If ALL,
            define master degrees of freedom at all selected nodes (NSEL).  If
            NODE = P, graphical picking is enabled and all remaining command
            fields are ignored (valid only in the GUI).  A component name may
            also be substituted for NODE.

        lab1
            Valid degree of freedom label. If ALL, use all appropriate labels.
            Structural labels:  UX, UY, or UZ (displacements); ROTX, ROTY, or
            ROTZ (rotations). Thermal labels: TEMP, TBOT, TE2, TE3, . . ., TTOP
            (temperature).  Electric labels:  VOLT (voltage).

        nend, ninc
            Define all nodes from NODE to NEND (defaults to NODE) in steps of
            NINC (defaults to 1) as master degrees of freedom in the specified
            direction.

        lab2, lab3, lab4, . . . , lab6
            Additional master degree of freedom labels.  The nodes defined are
            associated with each label specified.

        Notes
        -----
        Defines master degrees of freedom (MDOF) for superelement generation.
        If defined for other analyses, MDOF are ignored.  If used in SOLUTION,
        this command is valid only within the first load step.

        Repeat M command for additional master degrees of freedom.  The limit
        for the number of master nodes used is determined by the maximum system
        memory available.

        The substructure (ANTYPE,SUBSTR) analysis utilizes the matrix
        condensation technique to reduce the structure matrices to those
        characterized by a set of master degrees of freedom.

        Master degrees of freedom are identified by a list of nodes and their
        nodal directions.  The actual degree of freedom directions available
        for a particular node depends upon the degrees of freedom associated
        with element types (ET) at that node.  There must be some mass (or
        stress stiffening in the case of the buckling analysis) associated with
        each master degree of freedom (except for the VOLT label).  The mass
        may be due either to the distributed mass of the element or due to
        discrete lumped masses at the node.  If a master degree of freedom is
        specified at a constrained point, it is ignored.  If a master degree of
        freedom is specified at a coupled node, it should be specified at the
        prime node of the coupled set.

        Substructure analysis connection points must be defined as master
        degrees of freedom.

        This command is also valid in PREP7.
        """
        command = "M,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(node), str(lab1), str(nend), str(ninc), str(lab2), str(lab3), str(lab4), str(lab5), str(lab6))
        return self.run(command, **kwargs)

    def pdanl(self, fname="", ext="", **kwargs):
        """APDL Command: PDANL

        Defines the analysis file to be used for probabilistic looping.

        Parameters
        ----------
        fname
            File name and directory path (248 characters maximum, including the
            characters needed for the directory path).  An unspecified
            directory path defaults to the working directory; in this case, you
            can use all 248 characters for the file name.

        ext
            Filename extension (eight-character maximum).

        Notes
        -----
        The analysis file containing the deterministic, parameterized model
        must be specified if the probabilistic analysis is performed
        interactively. The file must exist at the time the PDANL command is
        issued. In this file, where /PREP7 and /PDS occur, they must be the
        first nonblank characters on the line (do not use the $ delimiter on
        any /PREP7 and /PDS command lines).

        By default the analysis files specified with PDANL are executed from
        the top. All definitions of random input variables (for example, APDL
        parameters defined as random input variables with the PDVAR command,
        using *SET or Pname = ... ) are ignored in the analysis file. The PDS
        takes control of setting the values of random input variable values for
        each loop.

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "PDANL,%s,%s" % (str(fname), str(ext))
        return self.run(command, **kwargs)

    
    def cqc(self, signif="", label="", forcetype="", **kwargs):
        """APDL Command: CQC

        Specifies the complete quadratic mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF threshold.  For single point, multipoint, or DDAM response
            (SPOPT,SPRS, MPRS or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes.  Any mode whose significance level
            is less than SIGNIF is considered insignificant and is not
            contributed to the mode combinations.  The higher the SIGNIF
            threshold, the fewer the number of modes combined.  SIGNIF defaults
            to 0.001.  If SIGNIF is specified as 0.0, it is taken as 0.0.
            (This mode combination method is not valid for SPOPT,PSD.)

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default).  Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution.  Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution.  Accelerations, "stress accelerations," "force
                   accelerations," etc., are available.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        Damping is required for this mode combination method.  The CQC command
        is also valid for PREP7.
        """
        command = "CQC,%s,%s,%s" % (str(signif), str(label), str(forcetype))
        return self.run(command, **kwargs)

    
    def dsys(self, kcn="", **kwargs):
        """APDL Command: DSYS

        Activates a display coordinate system for geometry listings and plots.

        Parameters
        ----------
        kcn
            Coordinate system reference number.  KCN may be 0,1,2 or any
            previously defined local coordinate system number.

        Notes
        -----
          Boundary condition symbols, vector arrows, and element coordinate
        system triads are not transformed to the display coordinate system. The
        display system orientation (for the default view) is X horizontal to
        the right, Y vertical upward, and Z out of the screen (normal).

        Line directions and area directions (/PSYMB,LDIR and /PSYMB,ADIR) are
        not plotted for DSYS >0.

        When you create ANSYS 3-D annotation, the coordinates are stored to the
        database in the DSYS that was active at the time of creation. Changing
        the DSYS does not change the annotation coordinate data in the
        database.

        This command is valid in any processor.
        """
        command = "DSYS,%s" % (str(kcn))
        return self.run(command, **kwargs)

    
    
    def atype(self, **kwargs):
        """APDL Command: ATYPE

        Specifies "Analysis types" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "ATYPE,"
        return self.run(command, **kwargs)

    
    def fllist(self, nloc1="", nloc2="", ninc="", **kwargs):
        """APDL Command: FLLIST

        Lists the fatigue location parameters.

        Parameters
        ----------
        nloc1, nloc2, ninc
            List location parameters from NLOC1 (defaults to 1) to NLOC2
            (defaults to NLOC1) in steps of NINC (defaults to 1).  If NLOC1 =
            ALL, NLOC2 and NINC are ignored and all locations are listed.
        """
        command = "FLLIST,%s,%s,%s" % (str(nloc1), str(nloc2), str(ninc))
        return self.run(command, **kwargs)

    def point(self, **kwargs):
        """APDL Command: POINT

        Specifies "Point flow tracing settings" as the subsequent status topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "POINT,"
        return self.run(command, **kwargs)

    def outaero(self, sename="", timeb="", dtime="", **kwargs):
        """APDL Command: OUTAERO

        Outputs the superelement matrices and load vectors to formatted files
        for aeroelastic analysis.

        Parameters
        ----------
        sename
            Name of the superelement that models the wind turbine supporting
            structure. Defaults to the current Jobname.

        timeb
            First time at which the load vector is formed (defaults to be read
            from SENAME.sub).

        dtime
            Time step size of the load vectors (defaults to be read from
            SENAME.sub).

        Notes
        -----
        Both TIMEB and DTIME must be blank if the time data is to be read from
        the SENAME.sub file.

        The matrix file (SENAME.SUB) must be available from the substructure
        generation run before issuing this command. This superelement that
        models the wind turbine supporting structure must contain only one
        master node with six freedoms per node: UX, UY, UZ, ROTX, ROTY, ROTZ.
        The master node represents the connection point between the turbine and
        the supporting structure.

        This command will generate four files that are exported to the
        aeroelastic code for integrated wind turbine analysis. The four files
        are Jobname.GNK for the generalized stiffness matrix, Jobname.GNC for
        the generalized damping matrix, Jobname.GNM for the generalized mass
        matrix and Jobname.GNF for the generalized load vectors.

        For detailed information on how to perform a wind coupling analysis,
        see Coupling to External Aeroelastic Analysis of Wind Turbines in the
        Mechanical APDL Advanced Analysis Guide.
        """
        command = "OUTAERO,%s,%s,%s" % (str(sename), str(timeb), str(dtime))
        return self.run(command, **kwargs)

    
    
    def dist(self, wn="", dval="", kfact="", **kwargs):
        """APDL Command: /DIST

        Specifies the viewing distance for magnifications and perspective.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        dval
            Distance along the view line from the observer to the focus point
            (defaults to value producing full-window display).  Distances "too
            close" to the object will produce excessive magnifications.  If
            DVAL = AUTO, zero, or blank, the program will calculate the
            distance automatically.  If DVAL = USER, the distance of last
            display will be used (useful when last display automatically
            calculated distance).

        kfact
            DVAL interpretation key:

            0 - Interpret numerical DVAL values as described above.

            1 - Interpret DVAL as a multiplier on the current distance (DVAL of 2 gives twice
                the current distance; 0.5 gives half the current distance,
                etc.).

        Notes
        -----
        The scale factor is relative to the window shape.  For example, for
        objects centered in a square window and with parallel projection (no
        perspective), a distance of :  /2 (+10%) produces a full window
        magnification, where :  is the largest in-plane vertical or horizontal
        dimension.  See also /AUTO and /USER commands.

        This command is valid in any processor.
        """
        command = "/DIST,%s,%s,%s" % (str(wn), str(dval), str(kfact))
        return self.run(command, **kwargs)

    def dsum(self, signif="", label="", td="", forcetype="", **kwargs):
        """APDL Command: DSUM

        Specifies the double sum mode combination method.

        Parameters
        ----------
        signif
            Combine only those modes whose significance level exceeds the
            SIGNIF threshold.  For single point, multipoint, or DDAM response
            (SPOPT, SPRS, MPRS, or DDAM), the significance level of a mode is
            defined as the mode coefficient of the mode, divided by the maximum
            mode coefficient of all modes.  Any mode whose significance level
            is less than SIGNIF is considered insignificant and is not
            contributed to the mode combinations.  The higher the SIGNIF
            threshold, the fewer the number of modes combined. SIGNIF defaults
            to 0.001.  If SIGNIF is specified as 0.0, it is taken as 0.0.
            (This mode combination method is not valid for SPOPT, PSD.)

        label
            Label identifying the combined mode solution output.

            DISP - Displacement solution (default).  Displacements, stresses, forces, etc., are
                   available.

            VELO - Velocity solution.  Velocities, "stress velocities," "force velocities," etc.,
                   are available.

            ACEL - Acceleration solution.  Accelerations, "stress accelerations," "force
                   accelerations," etc., are available.

        td
            Time duration for earthquake or shock spectrum.  TD defaults to 10.

        forcetype
            Label identifying the forces to be combined:

            STATIC - Combine the modal static forces (default).

            TOTAL - Combine the modal static plus inertial forces.

        Notes
        -----
        This command is also valid for PREP7.
        """
        command = "DSUM,%s,%s,%s,%s" % (str(signif), str(label), str(td), str(forcetype))
        return self.run(command, **kwargs)

    
    def sfa(self, area="", lkey="", lab="", value="", value2="", **kwargs):
        """APDL Command: SFA

        Specifies surface loads on the selected areas.

        Parameters
        ----------
        area
            Area to which surface load applies.  If ALL, apply load to all
            selected areas [ASEL].  If Area = P, graphical picking is enabled
            and all remaining command fields are ignored (valid only in the
            GUI).  A component may be substituted for Area.

        lkey
            Load key associated with surface load (defaults to 1).  Load keys
            (1,2,3, etc.) are listed under "Surface Loads" in the input data
            table for each element type in the Element Reference.  LKEY is
            ignored if the area is the face of a volume region meshed with
            volume elements.

        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each area type in the Element
            Reference.

        value
            Surface load value or table name reference for specifying tabular
            boundary conditions.

        value2
            Second surface load value (if any).

        Notes
        -----
        Surface loads may be transferred from areas to elements with the SFTRAN
        or SBCTRAN commands.  See the SFGRAD command for an alternate tapered
        load capability.

        Tabular boundary conditions (VALUE = %tabname% and/or VALUE2 =
        %tabname%) are available for the following surface load labels (Lab)
        only: : PRES (real and/or imaginary components), CONV (film coefficient
        and/or bulk temperature) or HFLUX, and RAD (surface emissivity and
        ambient temperature). Use the *DIM command to define a table.

        This command is also valid in PREP7.
        """
        command = "SFA,%s,%s,%s,%s,%s" % (str(area), str(lkey), str(lab), str(value), str(value2))
        return self.run(command, **kwargs)

    
    def exprofile(self, ldtype="", load="", value="", pname="", fname="",
                  fext="", fdir="", **kwargs):
        """APDL Command: EXPROFILE

        Exports interface loads or loads on selected nodes to an ANSYS CFX
        Profile file.

        Parameters
        ----------
        ldtype
            Load type:

            SURF  - Surface load.

            VOLU  - Volumetric load.

        load
            Surface loads:

            DISP  - Displacement (in a static analysis) or mode shape and global parameters (in a
                    modal analysis).

            MODE  - Normalized mode shape and global parameters (in a modal analysis only).

            TEMP  - Temperature.

            HFLU  - Heat flux.

        value
            If a positive integer, specifies the number of the surface or
            volume interface. If 0 (zero), the selected nodes or Named
            Selection are used.

        pname
            Field name in CFX Profile file (32-character maximum). Defaults to
            jobname_bcploadnumber for a surface load and jobname_subdloadnumber
            for volumetric load.

        fname
            The CFX Profile filename (248-character maximum). Defaults to
            jobname_bcploadnumber for a surface load and jobname_subdloadnumber
            for a volumetric load.

        fext
            The Profile file extension (8-character maximum). Defaults to.csv.

        fdir
            The Profile file directory (8-character maximum). Defaults to
            current directory.

        Notes
        -----
        By default, the EXPROFILE command assumes the data it writes to the
        Profile file are in SI units. For models not described in SI units,
        issue the EXUNIT command as needed to write the correct unit labels on
        the Profile file.

        For a modal analysis, if Load = DISP or MODE, global parameters
        including mass, frequency, and maximum displacement are also written to
        the ANSYS CFX Profile file. You should therefore issue the EXUNIT
        command for DISP, TIME, and MASS.

        Verify that the coordinate system is set to the global Cartesian
        (RSYS,0) before using this command.

        To transfer multiple loads across an interface, specify a unique file
        name and extension for each load.

        Force (FORC) and heat generation (HGEN) are per-unit volume.

        For modal analysis, this command does not support the following mode-
        extraction methods (MODOPT): unsymmetric matrix (UNSYM), the damped
        system (DAMP), or the QR-damped system (QRDAMP).

        To write the normalized (instead of non-normalized) mode shapes from a
        modal analysis to the file:

        Use Load = MODE.

        Verify that the mode shapes are normalized to the mass matrix
        (MODOPT,,,,,,OFF), the default behavior.

        Verify that the scale factor is set to 1.0 (SET,,,1.0), the default
        value.

        For loads not specified directly via commands (such as SF and BF),
        loads must first be read into the database (SET or LCASE).

        Distributed ANSYS Restriction: This command is not supported in
        Distributed ANSYS.
        """
        command = "EXPROFILE,%s,%s,%s,%s,%s,%s,%s" % (str(ldtype), str(load), str(value), str(pname), str(fname), str(fext), str(fdir))
        return self.run(command, **kwargs)

    def user(self, wn="", **kwargs):
        """APDL Command: /USER

        Conveniently resets /FOCUS and /DIST to USER.

        Parameters
        ----------
        wn
            Window number (or ALL) to which command applies (defaults to 1).

        Notes
        -----
        Conveniently resets scale parameters to USER on the /FOCUS and /DIST
        commands.  Scale parameters will be internally respecified to those
        used for the last display.  Convenient when the last scale parameters
        were automatically calculated.  User specified parameters hold until
        changed or removed [/AUTO].  Parameters may be reset on the individual
        commands after this command has been issued.

        This command is valid in any processor.
        """
        command = "/USER,%s" % (str(wn))
        return self.run(command, **kwargs)

    def dfswave(self, kcn="", radius="", psdref="", dens="", sonic="",
                incang="", npara="", sampopt="", **kwargs):
        """APDL Command: DFSWAVE

        Specifies the incident planar waves with random phases for a diffuse
        sound field.

        Parameters
        ----------
        kcn
            Local coordinate system:

            N - Coordinate system number. Default = 0.

            DELETE - Delete defined incident diffused planar waves.

        radius
            Radius of the reference sphere on which the incident planar waves
            are distributed with equal energy. Defaults to 50 x the half-
            maximum dimension of the structural panel.

        psdref
            Reference power spectral density. Default = 1.

        dens
            Mass density of incident planar wave media. Default = 2041 kg/m3.

        sonic
            Sound speed in incident planar wave media. Default = 343.24 m/s)

        incang
            Maximum incident angle (0o <= degree <= 180o) against the positive
            z axis in the local coordinate system KCN. Default = 0o.

        npara
            Number of divisions on the reference sphere with cutting planes
            parallel to the x-y coordinate plane of the local coordinate
            system. Default = 20.

        sampopt
            Random sampling option:

            ALL - Initializes the random generator of incident planar wave phases and samples the
                  phases at each solving frequency.

            MULT - Initializes the random generator of incident planar wave phases at the first
                   frequency and samples the phases at each solving frequency.

            MONO - Initializes the random generator of incident planar wave phases and samples the
                   phases only once at first solving frequency so that the same
                   phases are used over the whole frequency range for each
                   incident planar wave.

        Notes
        -----
        Issue the DFSWAVE command to activate a diffuse sound field. (The AWAVE
        command does not activate a diffuse sound field.)

        The SURF154 surface element must be defined on the surface of the
        structural solid element for the excitation.

        The acoustic elements and the absorbing boundary condition must be
        defined in the open acoustic domain. Do not define the acoustic domain
        on the excitation side.

        The PLST command calculates the average transmission loss for multiple
        sampling phases at each frequency over the frequency range.

        The symmetry of a panel structure cannot be used to reduce the
        simulation size, as the incident plane waves have varying random phase
        angles. The z axis of the Cartesian coordinate system (KCN) must be
        consistent with the panel’s outward normal unit vector at the center of
        the panel’s sending side.
        """
        command = "DFSWAVE,%s,%s,%s,%s,%s,%s,%s,%s" % (str(kcn), str(radius), str(psdref), str(dens), str(sonic), str(incang), str(npara), str(sampopt))
        return self.run(command, **kwargs)

    def hbc(self, wn="", key="", **kwargs):
        """APDL Command: /HBC

        Determines how boundary condition symbols are displayed in a display
        window.

        Parameters
        ----------
        wn
            Window reference number. This number can be any window numbered 1
            to 5, or ALL (for all active windows). Defaults to 1

        key
            Key to enable/disable hidden surface boundary condition symbol
            display for 2-D graphics devices and to request improved pressure
            contour display for 2-D and 3-D devices: Key = ON, YES or 1 will
            show your BC symbols on the hidden surfaces and use an improved
            pressure contour display. Key = OFF, NO or 0 (default) will hide
            the symbols .
        """
        command = "/HBC,%s,%s" % (str(wn), str(key))
        return self.run(command, **kwargs)

    
    def datadef(self, **kwargs):
        """APDL Command: DATADEF

        Specifies "Directly defined data status" as the subsequent status
        topic.

        Notes
        -----
        This is a status [STAT] topic command.  Status topic commands are
        generated by the GUI and will appear in the log file (Jobname.LOG) if
        status is requested for some items under Utility Menu> List> Status.
        This command will be immediately followed by a STAT command, which will
        report the status for the specified topic.

        If entered directly into the program, the STAT command should
        immediately follow this command.
        """
        command = "DATADEF,"
        return self.run(command, **kwargs)

    
    
    
    def dv3d(self, lab="", key="", **kwargs):
        """APDL Command: /DV3D

        Sets 3-D device option modes.

        Parameters
        ----------
        lab
            Mode label:

            ACCU - Allows ANSYS to use the accumulation buffer for OpenGL graphics. Activating
                   this feature will provide faster model rotation when shaded
                   backgrounds are in use. This feature is off by default.

            ACTR - Label term to designate the cursor position as the center for automatic dynamic
                   rotational center capability.  The subsequent Key value (see
                   below) turns this capability on and off. This feature is on
                   by default. (Available for OpenGL displays only)

            ANIM - Animation mode.  The ANIM option allows you to create animation frames in
                   pixmap mode instead of display list mode.  This may improve
                   large model performance, but it eliminates local
                   manipulation while animation is in progress. This feature is
                   on by default.

            ANTI - Label term to control Anti-aliasing, a smoothing technique for your graph
                   plots. (see below) The subsequent Key value turns this
                   capability on and off. The default for this feature is off.
                   (Available for OpenGL displays only).

            CNTR - Switches banded contours on (1) or off (0) for your 3–D contour display. The
                   default is 1 (ON). Other contour parameters such as number
                   of contours or the increment and range are defined using the
                   /CONTOUR command. When either 9 or 128 contours are
                   specified via /CONTOUR, this command is ignored and a smooth
                   contour is always displayed.

            DGEN - Local manipulation degenerate mode.  You access the DGEN option to set wire-
                   frame local manipulation mode for 3-D devices (device
                   dependent). This feature is off by default.

            DLIST - With DLIST, you can specify whether screen updates and redraws will be
                    performed using the ANSYS Display List (off), or the 3-D
                    device's Display List (on). DLIST is on by default for
                    Windows systems, but off for Linux.

            DELS - You use DELS to suppress contour display screen overwrites when /NOERASE is
                   active. This prevents the bleed-through that occurs when you
                   overlay contour plots.

            TRIS - Triangle strip mode. Tri-stripping provides faster 3-D display capabilities and
                   is on by default. Some display enhancements, such as
                   texturing, are adversely affected by tri-stripping. You can
                   turn off tri-stripping in order to improve these display
                   functions. Be sure to turn tri-stripping on after the
                   desired output is obtained.

        key
            The following key options apply to Lab = ACCU:

            0 - (OFF)  The accumulation buffer is not accessed. (default)

            1 - (ON)  Access to the buffer is enabled.

        Notes
        -----
        ANSYS uses display list animation for its 3-D models. This memory
        resident array method interfaces with the OpenGL model information to
        allow the program to efficiently pan, zoom, rotate and dynamically
        manipulate your model during animation. The logo, legend, contour and
        other annotation items are produced in 2-D and will not appear when
        /DV3D, ANIM, 0 is in effect. To display these items, use /DV3D, ANIM,
        1. All screen data will be displayed, but manipulation of the model
        will not be possible.
        """
        command = "/DV3D,%s,%s" % (str(lab), str(key))
        return self.run(command, **kwargs)

    
    def sfbeam(self, elem="", lkey="", lab="", vali="", valj="", val2i="",
               val2j="", ioffst="", joffst="", lenrat="", **kwargs):
        """APDL Command: SFBEAM

        Specifies surface loads on beam and pipe elements.

        Parameters
        ----------
        elem
            Element to which surface load is applied.  If ALL, apply load to
            all selected beam elements (ESEL).  If Elem = P, graphical picking
            is enabled and all remaining command fields are ignored (valid only
            in the GUI).  A component name may be substituted in Elem.

        lkey
            Load key associated with surface load (defaults to 1).  Load keys
            (1, 2, 3, etc.) are listed under "Surface Loads" in the input table
            for each element type in the Element Reference.  For beam and some
            pipe elements, the load key defines the load orientation.

        lab
            Valid surface load label.  Load labels are listed under "Surface
            Loads" in the input table for each element type in the Element
            Reference.  Structural labels:  PRES (pressure).

        vali, valj
            Surface load values at nodes I and J.  If VALJ is blank, it
            defaults to VALI.  If VALJ is zero, a zero is used.

        val2i, val2j
            Second surface load values at nodes I and J.  Currently not used.

        ioffst, joffst
            Offset distance from node I (toward node J) where VALI is applied,
            and offset distance from node J (toward node I) where VALJ is
            applied, respectively.

        lenrat
            Offset distance flag:

            0  - Offset is in terms of length units (default).

            1  - Offset is in terms of a length ratio (0.0 to 1.0).

        Notes
        -----
        Specifies surface loads on the selected beam elements. Distributed
        loads are applied on a force-per-length basis (that is, the width of
        the underlying element is not considered). To list and delete surface
        loads applied with this command, use the SFELIST and SFEDELE commands,
        respectively.

        If no offset values (IOFFSET and JOFFSET) are specified, the load is
        applied over the full element length. Values may also be input as
        length fractions, depending on the LENRAT setting. For example,
        assuming a line length of 5.0, an IOFFST of 2.0 with LENRAT = 0 or an
        IOFFST of 0.4 with LENRAT = 1 represent the same point.  If JOFFST =
        -1, VALI is assumed to be a point load at the location specified via
        IOFFST, and VALJ is ignored. (IOFFSET cannot be equal to -1.) The
        offset values are stepped even if you issue a KBC,0 command.

        Offsets are only available for element types BEAM188 and PIPE288 if
        using the cubic shape function (KEYOPT(3) = 3) for those element types.

        To accumulate (add) surface loads applied with this command, use the
        SFCUM,,ADD command. Use the same offset values used on the previous
        SFBEAM command (for a given element face); otherwise, the loads do not
        accumulate. If no offsets are specified, the command applies the
        previous offset values.

        This command is also valid in PREP7.
        """
        command = "SFBEAM,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s" % (str(elem), str(lkey), str(lab), str(vali), str(valj), str(val2i), str(val2j), str(ioffst), str(joffst), str(lenrat))
        return self.run(command, **kwargs)

    
    def dalist(self, area="", **kwargs):
        """APDL Command: DALIST

        Lists the DOF constraints on an area.

        Parameters
        ----------
        area
            List constraints for this area.  If ALL (default), list for all
            selected areas [ASEL].  If P1 = P, graphical picking is enabled and
            all remaining command fields are ignored (valid only in the GUI).
            A component name may also be substituted for AREA.

        Notes
        -----
        Lists the degree of freedom constraints on an area previously specified
        with the DA command.

        This command is valid in any processor.
        """
        command = "DALIST,%s" % (str(area))
        return self.run(command, **kwargs)

    def ekill(self, elem: Union[str, int] = "",
              **kwargs) -> Optional[str]:
        """Deactivates an element (for the birth and death capability).

        APDL Command: EKILL

        Parameters
        ----------
        elem
            Element to be deactivated. If ALL, deactivate all
            selected elements [ESEL]. A component name may also be
            substituted for ELEM.

        Notes
        -----
        Deactivates the specified element when the birth and death
        capability is being used. A deactivated element remains in
        the model but contributes a near-zero stiffness (or
        conductivity, etc.) value (ESTIF) to the overall matrix. Any
        solution-dependent state variables (such as stress, plastic
        strain, creep strain, etc.) are set to zero. Deactivated
        elements contribute nothing to the overall mass (or
        capacitance, etc.) matrix.

        The element can be reactivated with the EALIVE command.

        ANSYS, Inc. recommends using element deactivation/reactivation
        (EKILL/EALIVE) for linear elastic materials only. For all other
        materials, validate the results carefully before using them.

        This command is also valid in PREP7.
        """
        command = f"EKILL,{elem}"
        return self.run(command, **kwargs)

    
    
    def etable(self, lab: str = "", item: str = "", comp: str = "",
               option: str = "", **kwargs) -> Optional[str]:
        """Fills a table of element values for further processing.

        APDL Command: ETABLE

        Parameters
        ----------
        lab
            Any unique user defined label for use in subsequent
            commands and output headings (maximum of eight characters
            and not a General predefined Item label). Defaults to an
            eight character label formed by concatenating the first
            four characters of the Item and Comp labels. If the same
            as a previous user label, this result item will be
            included under the same label. Up to 200 different labels
            may be defined. The following labels are predefined and
            are not available for user-defined labels: ``'REFL''`,
            ``'STAT'``, and ``'ERAS'``.  ``lab='REFL'`` refills all
            tables previously defined with the :meth:`etable` commands
            (not the CALC module commands) according to the latest
            ETABLE specifications and is convenient for refilling
            tables after the load step (SET) has been
            changed. Remaining fields will be ignored if
            ``Lab='REFL'``.  ``lab='STAT'`` displays stored table
            values.  ``lab='ERAS'`` erases the entire table.

        item
            Label identifying the item. General item labels are shown
            in the table below. Some items also require a component
            label. Character parameters may be used. ``item='eras'``
            erases a Lab column.

        comp
            Component of the item (if required). General component
            labels are shown in the table below. Character parameters
            may be used.

        option
            Option for storing element table data:

            * ``'MIN'`` - Store minimum element nodal value of the specified
              item component.
            * ``'MAX'`` - Store maximum element nodal value of the specified
              item component.
            * ``'AVG'`` - Store averaged element centroid value of the
              specified item component (default).

        Examples
        --------
        Print the volume of individual elements.

        >>> mapdl.clear()
        >>> output = mapdl.input(examples.vmfiles['vm6'])
        >>> mapdl.post1()
        >>> label = 'MYVOLU'
        >>> mapdl.etable(label, 'VOLU')
        >>> print(mapdl.pretab(label))
        PRINT ELEMENT TABLE ITEMS PER ELEMENT
           *****ANSYS VERIFICATION RUN ONLY*****
             DO NOT USE RESULTS FOR PRODUCTION
          ***** POST1 ELEMENT TABLE LISTING *****
            STAT     CURRENT
            ELEM     XDISP
               1  0.59135E-001
               2  0.59135E-001
               3  0.59135E-001
        ...

        Notes
        -----
        The ETABLE command defines a table of values per element (the
        element table) for use in further processing. The element
        table is organized similar to spreadsheet, with rows
        representing all selected elements and columns consisting of
        result items which have been moved into the table (Item,Comp)
        via ETABLE. Each column of data is identified by a
        user-defined label (Lab) for listings and displays.

        After entering the data into the element table, you are not
        limited to merely listing or displaying your data (PLESOL,
        PRESOL, etc.). You may also perform many types of operations
        on your data, such as adding or multiplying columns (SADD,
        SMULT), defining allowable stresses for safety calculations
        (SALLOW), or multiplying one column by another (SMULT).  See
        Getting Started in the Basic Analysis Guide for more
        information.

        Various results data can be stored in the element table. For
        example, many items for an element are inherently
        single-valued (one value per element). The single-valued items
        include: SERR, SDSG, TERR, TDSG, SENE, SEDN, TENE, KENE, AENE,
        JHEAT, JS, VOLU, and CENT. All other items are multivalued
        (varying over the element, such that there is a different
        value at each node). Because only one value is stored in the
        element table per element, an average value (based on the
        number of contributing nodes) is calculated for multivalued
        items. Exceptions to this averaging procedure are FMAG and all
        element force items, which represent the sum only of the
        contributing nodal values.

        Two methods of data access can be used with the ETABLE
        command. The method you select depends upon the type of data
        that you want to store.  Some results can be accessed via a
        generic label (Component Name method), while others require a
        label and number (Sequence Number method).

        The Component Name method is used to access the General
        element data (that is, element data which is generally
        available to most element types or groups of element
        types). All of the single-valued items and some of the more
        general multivalued items are accessible with the Component
        Name method.  Various element results depend on the
        calculation method and the selected results location (AVPRIN,
        RSYS, LAYER, SHELL, and ESEL).

        Although nodal data is readily available for listings and
        displays (PRNSOL, PLNSOL) without using the element table, you
        may also use the Component Name method to enter these results
        into the element table for further "worksheet"
        manipulation. (See Getting Started in theBasic Analysis Guide
        for more information.) A listing of the General Item and Comp
        labels for the Component Name method is shown below.

        The Sequence Number method allows you to view results for data
        that is not averaged (such as pressures at nodes, temperatures
        at integration points, etc.), or data that is not easily
        described in a generic fashion (such as all derived data for
        structural line elements and contact elements, all derived
        data for thermal line elements, layer data for layered
        elements, etc.). A table illustrating the Items (such as LS,
        LEPEL, LEPTH, SMISC, NMISC, SURF, etc.) and corresponding
        sequence numbers for each element is shown in the Output Data
        section of each element description found in the Element
        Reference.

        Some element table data are reported in the results coordinate
        system.  These include all component results (for example, UX,
        UY, etc.; SX, SY, etc.). The solution writes component results
        in the database and on the results file in the solution
        coordinate system. When you issue the ETABLE command, these
        results are then transformed into the results coordinate
        system (RSYS) before being stored in the element table. The
        default results coordinate system is global Cartesian
        (RSYS,0).  All other data are retrieved from the database and
        stored in the element table with no coordinate transformation.

        Use the PRETAB, PLETAB, or ETABLE,STAT commands to display the
        stored table values. Issue ETABLE,ERAS to erase the entire
        table. Issue ETABLE,Lab,ERAS to erase a Lab column.

        The element table data option (Option) is not available for
        all output items.

        """
        command = f"ETABLE,{lab},{item},{comp},{option}"
        return self.run(command, **kwargs)

    def eusort(self, **kwargs) -> Optional[str]:
        """Restore original order of the element table.

        APDL Command: EUSORT

        Examples
        --------
        >>> mapdl.post1()
        >>> mapdl.eusort()
        'ELEMENT SORT REMOVED'

        Notes
        -----
        Changing the selected element set [ESEL] also restores the original
        element order.
        """
        return self.run("EUSORT", **kwargs)

    
    def estif(self, kmult: MapdlFloat = "", **kwargs) -> Optional[str]:
        """Specifies the matrix multiplier for deactivated elements.

        APDL Command: ESTIF

        Parameters
        ----------
        kmult
            Stiffness matrix multiplier for deactivated elements (defaults to
            1.0E-6).

        Examples
        --------
        >>> mapdl.prep7()
        >>> mapdl.estif(1E-8)
        'DEAD ELEMENT STIFFNESS MULTIPLIER= 0.10000E-07'

        Notes
        -----
        Specifies the stiffness matrix multiplier for elements deactivated with
        the EKILL command (birth and death).

        This command is also valid in PREP7.
        """
        command = f"ESTIF,{kmult}"
        return self.run(command, **kwargs)

    
    
    def eshape(self, scale: Union[str, int] = "", key: MapdlInt = "",
               **kwargs) -> Optional[str]:
        """Displays elements with shapes determined from the real constants or section definition.

        APDL Command: /ESHAPE


        Parameters
        ----------
        scale
            Scaling factor:

            * 0 - Use simple display of line and area elements. This
              value is the default.

            * 1 - Use real constants or section definition to form a
                solid shape display of the applicable elements.

            FAC - Multiply certain real constants, such as thickness,
                  by FAC (where FAC > 0.01) and use them to form a
                  solid shape display of elements.

        key
            Current shell thickness key:

            * 0 - Use current thickness in the displaced solid shape
                  display of shell elements (valid for SHELL181,
                  SHELL208, SHELL209, and SHELL281). This value is the
                  default.

            * 1 - Use initial thickness in the displaced solid shape
              display of shell elements.

        Notes
        -----
        The /ESHAPE command allows beams, shells, current sources, and
        certain special-purpose elements to be displayed as solids
        with the shape determined from the real constants or section
        types. Elements are displayed via the EPLOT command. No checks
        for valid or complete input are made for the display.

        Following are details about using this command with various
        element types:

        SOLID65 elements are displayed with internal lines that
        represent rebar sizes and orientations (requires vector mode
        [/DEVICE] with a basic type of display [/TYPE,,BASIC]). The
        rebar with the largest volume ratio in each element plots as a
        red line, the next largest as green, and the smallest as blue.

        COMBIN14, COMBIN39, and MASS21 are displayed with a graphics
        icon, with the offset determined by the real constants and
        KEYOPT settings.

        BEAM188, BEAM189, PIPE288, PIPE289 and ELBOW290 are displayed
        as solids with the shape determined via the section-definition
        commands (SECTYPE and SECDATA). The arbitrary section option
        (Subtype = ASEC) has no definite shape and appears as a thin
        rectangle to show orientation. The elements are displayed with
        internal lines representing the cross- section mesh.

        SOLID272 and SOLID273 are displayed as solids with the shape
        determined via the section-definition commands (SECTYPE and
        SECDATA).  The 2-D master plane is revolved around the
        prescribed axis of symmetry.

        Contour plots are available for these elements in
        postprocessing for PowerGraphics only (/GRAPHICS,POWER). To
        view 3-D deformed shapes for the elements, issue OUTRES,MISC
        or OUTRES,ALL for static or transient analyses. To view 3-D
        mode shapes for a modal or eigenvalue buckling analysis,
        expand the modes with element results calculation ON (Elcalc =
        YES for MXPAND).

        SOURC36, CIRCU124, and TRANS126 elements always plot using
        /ESHAPE when PowerGraphics is activated (/GRAPHICS,POWER).

        In most cases, /ESHAPE renders a thickness representation of
        your shell, plane and layered elements more readily in
        PowerGraphics (/GRAPHICS,POWER). This type of representation
        employs PowerGraphics to generate the enhanced representation,
        and will often provide no enhancement in Full Graphics
        (/GRAPHICS,FULL). This is especially true for POST1 results
        displays, where /ESHAPE is not supported for most element
        types with FULL graphics.

        When PowerGraphics is active, /ESHAPE may degrade the image if
        adjacent elements have overlapping material, such as shell
        elements which are not co-planar. Additionally, if adjacent
        elements have different thicknesses, the polygons depicting
        the connectivity between the "thicker" and "thinner" elements
        along the shared element edges may not always be displayed.

        For POST1 results displays (such as PLNSOL), the following
        limitations apply:

        Rotational displacements for beam elements are used to create
        a more realistic displacement display. When /ESHAPE is active,
        displacement plots (via PLNSOL,U,X and PLDISP, for example)
        may disagree with your PRNSOL listings. This discrepancy will
        become more noticeable when the SCALE value is not equal to
        one.

        When shell elements are not co-planar, the resulting PLNSOL
        display with /ESHAPE will actually be a PLESOL display as the
        non-coincident pseudo-nodes are not averaged. Additionally,
        /ESHAPE should not be used with coincident elements because
        the plot may incorrectly average the displacements of the
        coincident elements.

        When nodes are initially coincident and PowerGraphics is
        active, duplicate polygons are eliminated to conserve display
        time and disk space. The command may degrade the image if
        initially coincident nodes have different displacements. The
        tolerance for determining coincidence is 1E-9 times the
        model’s bounding box diagonal.

        If you want to view solution results (PLNSOL, etc.) on layered
        elements (such as SHELL181, SOLSH190, SOLID185 Layered Solid,
        SOLID186 Layered Solid, SHELL208, SHELL209, SHELL281, and
        ELBOW290), set KEYOPT(8) = 1 for the layer elements so that
        the data for all layers is stored in the results file.

        You can plot the through-thickness temperatures of elements
        SHELL131 and SHELL132 regardless of the thermal DOFs in use by
        issuing the PLNSOL,TEMP command (with PowerGraphics and
        /ESHAPE active).

        The /ESHAPE,1 and /ESHAPE,FAC commands are incompatible with
        the /CYCEXPAND command used in cyclic symmetry analyses.

        This command is valid in any processor.

        """
        warnings.warn('pymapdl does not support /ESHAPE when plotting in '
                      'Python using ``mapdl.eplot()``.  '
                      'Use ``mapdl.eplot(vtk=False)`` ')
        command = f"/ESHAPE,{scale},{key}"
        return self.run(command, **kwargs)

    
    
    
    def ealive(self, elem: str = "", **kwargs) -> Optional[str]:
        """Reactivates an element (for the birth and death capability).

        APDL Command: EALIVE

        Parameters
        ----------
        elem
            Element to be reactivated:

            ALL  - Reactivates all selected elements (ESEL).

            Comp - Specifies a component name.

        Notes
        -----
        Reactivates the specified element when the birth and death
        capability is being used. An element can be reactivated only
        after it has been deactivated (EKILL).

        Reactivated elements have a zero strain (or thermal heat
        storage, etc.)  state.

        ANSYS, Inc. recommends using the element
        deactivation/reactivation procedure for analyses involving
        linear elastic materials only. Do not use element
        deactivation/reactivation in analyses involving time-
        dependent materials, such as viscoelasticity, viscoplasticity,
        and creep analysis.

        This command is also valid in PREP7.
        """
        command = f"EALIVE,{elem}"
        return self.run(command, **kwargs)

    def escheck(self, sele: str = "", levl: str = "",
                defkey: MapdlInt = "", **kwargs) -> Optional[str]:
        """Perform element shape checking for a selected element set.

        APDL Command: ESCHECK

        Parameters
        ----------
        sele
            Specifies whether to select elements for checking:

            (blank) - List all warnings/errors from element shape
            checking.

            ESEL - Select the elements based on the .Levl criteria
            specified below.

        levl
            WARN - Select elements producing warning and error messages.

            ERR - Select only elements producing error messages (
            default).

        defkey
            Specifies whether check should be performed on deformed
            element
            shapes. .

            0 - Do not update node coordinates before performing
            shape checks (default).

            1 - Update node coordinates using the current set of
            deformations in the database.

        Notes
        -----
        Shape checking will occur according to the current SHPP
        settings. Although ESCHECK is valid in all processors,
        Defkey  uses the current results in the database. If no
        results are available a warning will be issued.

        This command is also valid in PREP7, SOLUTION and POST1.
        """
        command = f"ESCHECK,{sele},{levl},{defkey}"
        return self.run(command, **kwargs)

    
    
    
    def ematwrite(self, key: str = "", **kwargs) -> Optional[str]:
        """Forces the writing of all the element matrices to File.EMAT.

        APDL Command: EMATWRITE

        Parameters
        ----------
        key
            Write key:

            YES - Forces the writing of the element matrices to
                  File.EMAT even if not normally
                  done.

            NO - Element matrices are written only if required. This
                 value is the default.

        Notes
        -----
        The EMATWRITE command forces ANSYS to write the File.EMAT
        file. The file is necessary if you intend to follow the
        initial load step with a subsequent inertia relief
        calculation (IRLF). If used in the solution
        processor (/SOLU), this command is only valid within the
        first load step.

        This command is also valid in PREP7.
        """
        command = f"EMATWRITE,{key}"
        return self.run(command, **kwargs)

    
    
    def esort(self, item: str = "", lab: str = "", order: MapdlInt = "",
              kabs: MapdlInt = "", numb: MapdlInt = "",
              **kwargs) -> Optional[str]:
        """Sorts the element table.

        APDL Command: ESORT

        Parameters
        ----------
        item
            Label identifying the item:
            ETAB - (currently the only Item available)

        lab
            element table label: Lab - Any user-defined label from
            the ETABLE command (input in the Lab field of the ETABLE
            command).

        order
            Order of sort operation:

            0 - Sort into descending order.

            1 - Sort into ascending order.

        kabs
            Absolute value key:

            0 - Sort according to real value.

            1 - Sort according to absolute value.

        numb
            Number of elements (element table rows) to be sorted in
            ascending or descending order (ORDER) before sort is
            stopped (remainder will be in unsorted sequence)
            (defaults to all elements).

        Notes
        -----
        The element table rows are sorted based on the column
        containing the Lab values. Use EUSORT to restore the original
        order. If ESORT is specified with PowerGraphics on
        [/GRAPHICS,POWER], then the nodal solution results listing
        [PRNSOL] will be the same as with the full graphics mode
        [/GRAPHICS,FULL].
        """
        command = f"ESORT,{item},{lab},{order},{kabs},{numb}"
        return self.run(command, **kwargs)

    
    
    def lssolve(self, lsmin="", lsmax="", lsinc="", **kwargs):
        """APDL Command: LSSOLVE

        Reads and solves multiple load steps.

        Parameters
        ----------
        lsmin, lsmax, lsinc
            Range of load step files to be read and solved, from
            ``lsmin`` to ``lsmax`` in steps of ``lsinc``.  ``lsmax``
            defaults to ``lsmin``, and ``lsinc`` defaults to 1. If
            ``lsmin`` is blank, a brief command description is
            displayed.  The load step files are assumed to be named
            Jobname.Sn, where n is a number assigned by the
            ``lswrite`` command (01--09, 10, 11, etc.).  On systems
            with a 3-character limit on the extension, the "S" is
            dropped for numbers > 99.

        Examples
        --------
        Write the load and load step option data to a file and solve
        it.  In this case, write the second load step.

        >>> mapdl.lswrite(2)
        >>> mapdl.lssolve(1, 2)

        Notes
        -----
        ``lssolve`` invokes an ANSYS macro to read and solve multiple
        load steps.  The macro loops through a series of load step
        files written by the LSWRITE command.  The macro file called
        by ``lssolve`` is called LSSOLVE.MAC.

        ``lssolve`` cannot be used with the birth-death option.

        ``lssolve`` is not supported for cyclic symmetry analyses.

        ``lssolve`` does not support restarts.
        """
        with self.non_interactive:
            self.run(f"LSSOLVE,{lsmin},{lsmax},{lsinc}", **kwargs)
        return self.last_response

    def mascale(self, massfact="", **kwargs):
        """Activates scaling of the entire system matrix.

        APDL Command: MASCALE

        Parameters
        ----------
        massfact
           Scaling factor (> 0) for the mass matrix. Default = 1.0.

        Notes
        -----
        This command is supported in the first load step of the analysis only.
        The following features are not affected by the scaling:

        * Ocean loading
        * Steady-state rolling SSTATE

        The mass-related information (mass, center of mass, and mass
        moments of inertia) printed in the mass summary is based on
        unscaled mass properties.
        """
        return self.run(f"MASCALE,{massfact}", **kwargs)

    
    def mrpm(self, val1="", **kwargs):
        """Defines the revolutions per minute (RPM) for a machine rotation.

        APDL Command: MRPM

        Parameters
        ----------
        val1
            The RPM value (no default).

        Notes
        -----
        A different RPM value can be defined at each load step. The RPM
        value is used to postprocess the equivalent radiated power from
        the structural surface (the PRAS and PLAS commands) or the
        radiated sound power level (the PRFAR and PLFAR commands).
        """
        return self.run(f"MRPM,{val1}", **kwargs)

    def mpchg(self, mat="", elem="", **kwargs):
        """Changes the material number attribute of an element.

        APDL Command: MPCHG

        Parameters
        ----------
        mat
            Assign this material number to the element. Material numbers
            are defined with the material property commands MP.

        elem
            Element for material change. If ALL, change materials for all
            selected elements ESEL.

        Notes
        -----
        Changes the material number of the specified element. Between load
        steps in SOLUTION, material properties cannot be changed from
        linear to nonlinear, or from one nonlinear option to another.

        If you change from one CHABOCHE model to another CHABOCHE model,
        the different models need to have the same number of data points.
        """
        return self.run(f"MPCHG,{mat},{elem}", **kwargs)

    def icrotate(self, node="", omega="", x1="", y1="", z1="", x2="", y2="",
                 z2="", vx="", vy="", vz="", accel="", **kwargs):
        """Specifies initial velocity at nodes as a sum of rotation about an axis and translation.

        APDL Command: ICROTATE

        Parameters
        ----------
        NODE
            Node at which the initial velocity is to be specified. If ALL,
            apply to all selected nodes NSEL.  A component name may be
            input for NODE.

        OMEGA
            Scalar rotational velocity about the rotational axis.

        X1, Y1, Z1
            Coordinates (in the global Cartesian coordinate system) of the
            beginning point of the rotational axis vector.

        X2, Y2, Z2
            Coordinates (in the global Cartesian coordinate system) of the
            end point of the rotational axis vector.

        Vx
            Initial translational velocity in direction x of the nodal
            coordinate system.

        Vy
            Initial translational velocity in direction y of the nodal
            coordinate system.

        Vz
            Initial translational velocity in direction z of the nodal
            coordinate system.

        accel
            Key to initialize acceleration due to centrifugal effects:

            * ``""`` : (blank) Do not initialize acceleration (default).
            * ``"CENT"`` : Initialize acceleration due to centrifugal
              effects along with the initial velocity.

        Notes
        -----
        The ICROTATE command specifies initial velocity for all
        translational degrees of freedom of the specified nodes. The
        velocity value is a combination of velocity due to rotation about
        an axis and translation.
        """
        command = f"ICROTATE,{node},{omega},{x1},{y1},{z1},{x2},{y2},{z2},{vx},{vy},{vz},{accel}"
        return self.run(command, **kwargs)

    
    def aport(self, portnum="", label="", kcn="", pres="", phase="", val1="",
              val2="", val3="", val4="", **kwargs):
        """Specifies input data for plane wave and acoustic duct ports.

        APDL Command: APORT

        Parameters
        ----------
        portnum
            Port number. This number is associated with an exterior port
            or interior port previously specified by the SF and BF family
            of commands, respectively. The number must be between 1 and
            50.

        Label

            * ``"PLAN"`` : Incident plane wave.
            * ``"RECT"`` : Rectangular duct.
            * ``"CIRC"`` : Circular duct.
            * ``"COAX"`` : Coaxial duct.
            * ``"LIST"`` : List the port settings. If PortNum = ALL, list the port settings for all defined ports.
            * ``"DELE"`` : Delete defined ports. If PortNum = ALL, delete all defined ports.

        kcn
            A previously-defined local (KCN >10) or global (KCN = 0)
            Cartesian coordinate system number used to specify the
            geometric properties of the duct. Defaults to the global
            Cartesian coordinate system (0). The local Z-direction must be
            the direction of wave propagation. The origin of the local
            coordinate system must be centered about the face of the duct
            port without considering symmetry.

        pres
            Zero-to-peak amplitude of the pressure. If blank, the port
            will appear as a matching impedance.

        phase
            Phase angle of the applied pressure in degrees. Defaults to 0.

        VAL1, VAL2, VAL3, VAL4
            Additional input. The meaning of VAL1 through VAL4 varies
            depending on the specified Label.  If ``label="PLAN"``:

            * ``"VAL1"`` : angle from positive X-axis to positive Y-axis
              in the local Cartesian coordinates (KCN).

            * ``"VAL2"`` : angle away from positive Z-axis in the local
              Cartesian coordinates (KCN).

            if ``label="RECT"``:

            * ``"VAL1"`` : Width of the rectangular duct.
            * ``"VAL2"`` : Height of the rectangular duct.
            * ``"VAL3"`` : Mode index for pressure variation along the
              width (defaults to 0).
            * ``"VAL4"`` : Mode index for pressure variation along the
              height (defaults to 0).

            if ``label="CIRC"``:

            * ``"VAL1"`` : Radius of the circular duct.
            * ``"VAL2"`` : Not used.
            * ``"VAL3"`` : Mode index for pressure variation along the
              azimuth (defaults to 0).
            * ``"VAL4"`` : Mode index for pressure variation along the
              radii (defaults to 0).

            if ``label="COAX"``:

            * ``"VAL1"`` : Inner radius of the coaxial duct.
            * ``"VAL2"`` : Outer radius of the coaxial duct.
            * ``"VAL3"`` : Mode index for pressure variation along the
              azimuth (defaults to 0).
            * ``"VAL4"`` : Mode index for pressure variation along the
              radii (defaults to 0).

        Notes
        -----
        Use the APORT command to launch a specified analytic acoustic mode
        into a guided duct.

        The low-order FLUID30 element does not support the higher modes in
        the coaxial duct ``label="COAX"``.

        For more information, see Specified Mode Excitation in an Acoustic
        Duct in the Acoustic Analysis Guide, and Analytic Port Modes in a
        Duct in the Mechanical APDL Theory Reference.
        """
        command = f"APORT,{portnum},{label},{kcn},{pres},{phase},,{val1},{val2},{val3},{val4}"
        return self.run(command, **kwargs)

    def scopt(self, tempdepkey="", **kwargs):
        """Specifies System Coupling options.

        APDL Command: SCOPT

        Parameters
        ----------
        tempdepkey
            Temperature-dependent behavior key based on the convection
            coefficient:

            * ``"YES"`` : A negative convection coefficient, -N, is
              assumed to be a function of temperature and is determined
              from the HF property table for material N (MP command). This
              is the default.

            * ``"NO"`` : A negative convection coefficient, -N, is used as
              is in the convection calculation.

        Notes
        -----
        By default in the Mechanical APDL program, a negative convection
        coefficient value triggers temperature-dependent behavior. In
        System Coupling, and in some one-way CFD to Mechanical APDL
        thermal simulations, it is desirable to allow convection
        coefficients to be used as negative values. To do so, issue the
        command ``scopt("NO")``.
        """
        return self.run(f"SCOPT,{tempdepkey}", **kwargs)

    def moddir(self, key="", directory="", fname="", **kwargs):
        """Activates the remote read-only modal files usage.

        APDL Command: MODDIR

        Parameters
        ----------
        key
            Key to activate the remote modal files usage

            * ``"1 (ON or YES)"`` : The program performs the analysis
              using remote modal files. The files are read-only.

            * ``"0 (OFF or NO)"`` : The program performs the analysis
              using modal files located in the working directory
              (default).

        directory
            Directory path (248 characters maximum). The directory
            contains the modal analysis files.  The directory path
            defaults to the current working directory.

        fname
            File name (no extension or directory path) for the modal
            analysis files.  The file name defaults to the current
            Jobname.

        Notes
        -----
        Only applies to spectrum analyses (ANTYPE,SPECTR).

        Using the default for both the directory path (Directory) and the
        file name (Fname) is not valid. At least one of these values must
        be specified.

        The MODDIR command must be issued during the first solution and at
        the beginning of the solution phase (before LVSCALE in
        particular).

        Remote modal files usage is not supported when mode file reuse is
        activated (modeReuseKey = YES on SPOPT).
        """
        return self.run(f"MODDIR,{key},{directory},{fname}", **kwargs)

    def lanboption(self, strmck="", **kwargs):
        """Specifies Block Lanczos eigensolver options.

        APDL Command: LANBOPTION

        strmck
            Controls whether the Block Lanczos eigensolver will perform a
            Sturm sequence check:

            * ``"OFF"`` : Do not perform the Sturm sequence check
              (default).

            * ``"ON"`` : Perform a Sturm sequence check. This requires
              additional matrix factorization (which can be expensive),
              but does help ensure that no modes are missed in the
              specified range.

        Notes
        -----
        LANBOPTION specifies options to be used with the Block Lanczos
        eigensolver during an eigenvalue buckling analysis (BUCOPT,LANB)
        or a modal analysis (MODOPT,LANB).

        By default the sturm sequence check is off for the Block Lanczos
        eigensolver when it is used in a modal analysis, and on when it is
        used in a buckling analysis.

        """
        return self.run(f"LANBOPTION,{strmck}", **kwargs)

    def exbopt(self, outinv2="", outtcms="", outsub="", outcms="", outcomp="",
               outrm="", noinv="", outele="", **kwargs):
        """Specifies .EXB file output options in a CMS generation pass.

        APDL Command: EXBOPT

        Parameters
        ----------
        outinv2
            Output control for 2nd order invariant:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the second order invariant.

        outtcms
            Output control for .TCMS file:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the .TCMS file.

        outsub
            Output control for .SUB file:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the .SUB file.

        OUTCMS
            Output control for .CMS file:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the .CMS file.

        outcomp
            Output control for node and element component information:

            * ``"0"`` : Do not output any component information.
            * ``"1"`` : Output node component information only.
            * ``"2"`` : Output element component information only.
            * ``"3"`` : Output both node and element component information (default).

        outrm
            Output control for the recovery matrix:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the recovery matrix to file.EXB.
            * ``"2"`` : Output the recovery matrix to a separate file, file_RECOVER.EXB.

        noinv
            Invariant calculation:

            * ``"0"`` : Calculate all invariants (default).
            * ``"1"`` : Suppress calculation of the 1st and 2nd order
              invariants. NOINV = 1 suppresses OUTINV2 = 1.

        OUTELE
        Output control for the element data:

            * ``"0"`` : Do not output (default).
            * ``"1"`` : Output the element data.

        Notes
        -----
        When the body property file (file.EXB) is requested in a CMS
        generation pass (CMSOPT,,,,,,,EXB command), the .TCMS, .SUB, and
        .CMS files are not output by default. Use the EXBOPT command to
        request these files, as needed.

        EXBOPT can also be used to manage some content in the .EXB file
        for improving performance and storage (see the OUTINV2, OUTCOMP,
        OUTRM, NOINV, and OUTELE arguments described above).

        If both recovery matrix output (OUTRM = 1 or 2) and the .TCMS file
        (OUTTCMS = 1) are requested, the .TCMS file writing is turned off
        due to potentially large in-core memory use.

        For more information on how to generate file.EXB, see ANSYS
        Interface to AVL EXCITE in the Mechanical APDL Substructuring
        Analysis Guide
        """
        command = f"EXBOPT,{outinv2},{outtcms},{outsub},{outcms},{outcomp},{outrm},{noinv},{outele}"
        return self.run(command, **kwargs)

    def cncheck(self, option="", rid1="", rid2="", rinc="", intertype="",
                trlevel="", cgap="", cpen="", ioff="", **kwargs):
        """Provides and/or adjusts the initial status of contact pairs.

        APDL Command: CNCHECK

        Parameters
        ----------
        option
            Option to be performed:

            * ``"DETAIL"`` : List all contact pair properties (default).

            * ``"SUMMARY"`` : List only the open/closed status for each
              contact pair.

            * ``"POST"`` : Execute a partial solution to write the initial
              contact configuration to the Jobname.RCN file.

            * ``"ADJUST"`` : Physically move contact nodes to the target
              in order to close a gap or reduce penetration. The initial
              adjustment is converted to structural displacement values
              (UX, UY, UZ) and stored in the Jobname.RCN file.

            * ``"MORPH"`` : Physically move contact nodes to the target in
              order to close a gap or reduce penetration, and also morph
              the underlying solid mesh. The initial adjustment of contact
              nodes and repositioning of solid element nodes due to mesh
              morphing are converted to structural displacement values
              (UX, UY, UZ) and stored in the Jobname.RCN file.

            * ``"RESET"`` : Reset target element and contact element key
              options and real constants to their default values. This
              option is not valid for general contact.

            * ``"AUTO"`` : Automatically sets certain real constants and
              key options to recommended values or settings in order to
              achieve better convergence based on overall contact pair
              behaviors. This option is not valid for general contact.

            * ``"TRIM"`` : Trim contact pair (remove certain contact and
              target elements).

            * ``"UNSE"`` : Unselect certain contact and target elements.

        rid1, rid2, rinc
            For pair-based contact, the range of real constant pair IDs
            for which Option will be performed. If RID2 is not specified,
            it defaults to RID1. If no value is specified, all contact
            pairs in the selected set of elements are considered.

            For general contact (InterType = GCN), RID1 and RID2 are
            section IDs associated with general contact surfaces instead
            of real constant IDs. If RINC = 0, the Option is performed
            between the two sections, RID1 and RID2. If RINC > 0, the
            Option is performed among all specified sections (RID1 to RID2
            with increment of RINC).

        intertype
            The type of contact interface (pair-based versus general
            contact) to be considered; or the type of contact pair to be
            trimmed/unselected/auto-set.

            The following labels specify the type of contact interface:

            * ``""`` : (blank) Include all contact definitions (pair-based
              and general contact).

            * ``"GCN"`` : Include general contact definitions only (not valid when Option = RESET or AUTO).

            The following labels specify the type of contact pairs to be
            trimmed/unselected/auto-set (used only when Option = TRIM,
            UNSE, or AUTO, and only for pair-based contact definitions):

            * ``"ANY"`` : All types (default).

            * ``"MPC"`` : MPC-based contact pairs (KEYOPT(2) = 2).

            * ``"BOND"`` : Bonded contact pairs (KEYOPT(12) = 3, 5, 6).

            * ``"NOSP"`` : No separation contact pairs (KEYOPT(12) = 2, 4).

            * ``"INAC"`` : Inactive contact pairs (symmetric contact pairs for MPC contact or KEYOPT(8) = 2).

            * ``"TRlevel"`` : mming level (used only when Option = TRIM, UNSE, or MORPH):

            * ``"(blank)"`` : Normal trimming (default): remove/unselect contact and target elements which are in far-field.

            * ``"AGGRE"`` : Aggressive trimming: remove/unselect contact and target elements which are in far-field, and certain elements in near-field.

        cgap
            They are only valid when Option = ADJUST or MORPH.  Control
            parameter for opening gap. Close the opening gap if the
            absolute value of the gap is smaller than the CGAP value. CGAP
            defaults to 0.25*PINB (where PINB is the pinball radius) for
            bonded and no-separation contact; otherwise it defaults to the
            value of real constant ICONT.

        CPEN
            They are only valid when Option = ADJUST or MORPH.  Control
            parameter for initial penetration. Close the initial
            penetration if the absolute value of the penetration is
            smaller than the CPEN value. CPEN defaults to 0.25*PINB (where
            PINB is the pinball radius) for any type of interface behavior
            (either bonded or standard contact).

        IOFF
            They are only valid when Option = ADJUST or MORPH.  Control
            parameter for initial adjustment. Input a positive value to
            adjust the contact nodes towards the target surface with a
            constant interference distance equal to IOFF. Input a negative
            value to adjust the contact node towards the target surface
            with a uniform gap distance equal to the absolute value of
            IOFF.

        Notes
        -----
        The CNCHECK command provides information for surface-to-surface,
        node-to-surface, and line-to-line contact pairs (element types
        TARGE169, TARGE170, CONTA171, CONTA172, CONTA173, CONTA174,
        CONTA175, CONTA176, CONTA177). All contact and target elements of
        interest, along with the solid elements and nodes attached to
        them, must be selected for the command to function properly. For
        performance reasons, the program uses a subset of nodes and
        elements based on the specified contact regions (RID1, RID2, RINC)
        when executing the CNCHECK command.

        For additional details, see the notes section at:
        https://www.mm.bme.hu/~gyebro/files/ans_help_v182/ans_cmd/Hlp_C_CNCHECK.html

        """
        command = f"CNCHECK,{option},{rid1},{rid2},{rinc},{intertype},{trlevel},{cgap},{cpen},{ioff}"
        return self.run(command, **kwargs)

    def fdele(self, node="", lab="", nend="", ninc="", lkey="", **kwargs):
        """Deletes force loads on nodes.

        APDL Command: FDELE

        Parameters
        ----------
        node
            Node for which force is to be deleted.  If ALL, NEND and NINC are
            ignored and forces are deleted on all selected nodes [NSEL].  If
            NODE = P, graphical picking is enabled and all remaining command
            fields are ignored (valid only in the GUI).  A component name may
            also be substituted for NODE.

        lab
            Valid force label.  If ALL, use all appropriate labels.  Structural
            labels:  FX, FY, or FZ (forces); MX, MY, or MZ (moments).  Thermal
            labels:  HEAT, HBOT, HE2, HE3, . . ., HTOP (heat flow).  Fluid
            labels:  FLOW (fluid flow).  Electric labels:  AMPS (current flow),
            CHRG (electric charge).  Magnetic labels:  FLUX (magnetic flux);
            CSGX, CSGY, or CSGZ (magnetic current segments).  Diffusion labels:
            RATE (diffusion flow rate).

        nend, ninc
            Delete forces from NODE to NEND (defaults to NODE) in steps of NINC
            (defaults to 1).

        lkey
            Lock key:

            (blank) - The DOF is not locked (default).

            FIXED - Displacement on the specified degrees of freedom (Lab) is locked. The program
                    prescribes the degree of freedom to the "current" relative
                    displacement value in addition to deleting the force. If a
                    displacement constraint (for example, D command) is applied
                    in conjunction with this option, the actual applied
                    displacement will be ramped during the next load step. The
                    displacement is ramped from the current value to the newly
                    defined value. This option is only valid for the following
                    labels: FX, FY, FZ, MX, MY, MZ. This option is intended
                    primarily for use in the ANSYS Workbench interface to apply
                    an increment length adjustment (bolt pretension loading).

        Notes
        -----
        The node and the degree of freedom label corresponding to the force
        must be selected [NSEL, DOFSEL].

        This command is also valid in PREP7.
        """
        command = "FDELE,%s,%s,%s,%s,%s" % (str(node), str(lab), str(nend), str(ninc), str(lkey))
        return self.run(command, **kwargs)

    def exoption(self, ldtype="", option="", value="", **kwargs):
        """Specifies the EXPROFILE options for the Mechanical APDL to ANSYS CFX profile file transfer.

        APDL Command: EXOPTION

        Parameters
        ----------
        ldtype
            Load type:

            * ``"SURF"`` : Surface load

            * ``"VOLU"`` : Volume load

        option
            Surface options:

            * ``"Precision"`` : Number of significant digits for the
              fractional part of real data

            * ``"Connectivity"`` : Key to include face connectivity in the
              exported profile file

            * ``"Precision"`` : Number of significant digits after the
              decimal for real data

        value
            Specify the value for either Precision or Connectivity.

            For Precision, specify the number of significant digits. Can
            be any value between 1 to 20, default 8. When 0 or an invalid
            value is specified, the program will use the default value of
            8 and issue a warning message.

            For Connectivity, specify the key to include the element face
            connectivity data for surface loads (does not support volume
            loads):

            * ``"OFF"`` : Do not include the connectivity data in the exported file (default)

            * ``"ON"`` : Include the connectivity data in the exported file

        Notes
        -----
        This command is not supported in Distributed ANSYS.
        """
        return self.run(f"EXOPTION,{ldtype},{option},{value}", **kwargs)

    
