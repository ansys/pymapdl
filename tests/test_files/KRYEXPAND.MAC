!COM ***********************************************************************
!COM KRYEXPAND.MAC                                                         *
!COM                                                                       *
!COM   This macro expands the reduced solution for a harmonic analysis     *
!COM   back to the original space.  Optional calculation of the residual   *
!COM   is available.  Note, when this macro is finished all APDL Math      *
!COM   parameters will be deleted via the *FREE,ALL command.               *
!COM                                                                       *
!COM   COMMAND USAGE: KRYEXPAND,outKey,resKey                              *
!COM     outKey  - [optional] key to output expanded solution to Xz_*.txt  *
!COM               file                                                    *
!COM     resKey  - [optional] key to compute the residual of the expanded  *
!COM               solution                                                *
!COM               = 0 means do not compute the residual                   *
!COM               = 1 means compute the L-inf norm of the residual        *
!COM               = 2 means compute the L-1 norm of the residual          *
!COM               = 3 means compute the L-2 norm of the residual          *
!COM                                                                       *
!COM ***********************************************************************

!Store input arguments from user
outKey=arg1
resKey=arg2

!Check for illegal input values by user
*IF,outKey,LT,0,THEN
  *msg,error
  The outKey value for expanding the reduced solution is required to be 0 or 1
  _nerr=1
*ENDIF
*IF,outKey,GT,1,THEN
  *msg,error
  The outKey value for expanding the reduced soluion is required to be 0 or 1
  _nerr=1
*ENDIF
*IF,resKey,LT,0,THEN
  *msg,error
  The resKey value for expanding the reduced solution is required to be 0 -> 3
  _nerr=1
*ENDIF
*IF,outKey,GT,3,THEN
  *msg,error
  The resKey value for expanding the reduced soluion is required to be 0 -> 3
  _nerr=1
*ENDIF


!Execute macro if no errors above
*IF,_nerr,EQ,0,THEN

*DMAT,RzV,Z,ALLOC,nDOF,1,INCORE

!Build mapping vectors
*VEC,MapForward,I,IMPORT,FULL,fullfile,FORWARD
*VEC,MapBack,I,IMPORT,FULL,fullfile,BACK
*INQ,MapForward,DIM1,MAXNODE
*INQ,MapBack,DIM1,NUMNODE

!Expand reduced solution
*SET,omega,freqBeg*twoPi                   !circular frequency at starting point
*DO,iFreq,1,numFreq
  *VEC,iY,Z,LINK,Yz,iFreq
  *VEC,Xi,Z,LINK,DzV,iFreq                 !vector of solution in solver space
  *INIT,Xi,ZERO                  
  *DO,jVect,1,dimQ                         !collect each vector's contribution
    *VEC,Qzj,Z,LINK,Qz,jVect               !link to the jVect-th vector
    yrj = iY(jVect,1)                      !real part of reduced solution
    yij = iY(jVect,2)                      !imaginary part of reduced solution
    *AXPY,yrj,yij,Qzj,1.0,0.0,Xi           !{Xi} = {Xi} + (yrj,yri)*{Qzj}
  *ENDDO

  !Output solution vectors (if requested)
  *IF,outKey,EQ,1,THEN
    *MULT,Nod2Solv,TRAN,Xi,,Xii            !Map {Xi} to internal (ANSYS) order

    !Map {Xii} to user ordering
    *INQ,Xii,DIM1,NUMEQN
    NUMDOF = NUMEQN/NUMNODE
    *CFOPEN,%thejob%_Xzu_%iFreq%,txt,,     !Write to Xiu_*.txt in user ordering
    *DO,extNode,1,MAXNODE
      intNode = MapForward(extNode)
      *IF,intNode,LE,0,THEN                !Skip nodes not mapped
         *CYCLE
      *ENDIF
      intEqn = (intNode-1)*NUMDOF
      extEqn = (extNode-1)*NUMDOF
      *DO,idof,1,NUMDOF
        Xii_real = Xii(intEqn+idof,1)      !Real value
        Xii_imag = Xii(intEqn+idof,2)      !Image value
        *vwrite,extNode,extEqn+idof,Xii_real,Xii_imag
        ('Node#=',F9.0,', Eqn#=',F9.0,', X=',E23.15,E23.15)
      *ENDDO
    *ENDDO
    *CFCLOS
    *PRINT,Xi,%thejob%_Xz_%iFreq%.txt      !internal solver space, Xz_*.txt
    *PRINT,Xii,%thejob%_Xzi_%iFreq%.txt    !internal ANSYS space, Xzi_*.txt
  *ENDIF

  !Compute residual norm (if requested)
  *IF,resKey,GT,0,THEN
    !form {iRHS}
    *INIT,iRHS,ZERO
    *IF,loadKey,eq,0,then
      !apply ramped loading
      *SET,ratio,2*iFreq/numFreq
      *IF,numFreq,EQ,1,THEN
        *SET,ratio,1.0d0
      *ENDIF
    *ELSE
       !apply stepped loading
       *SET,ratio,1.0d0
    *ENDIF
    *AXPY,ratio,,Fz0,1.0,,iRHS

    !Form Az
    *SET,omega,omega+intV*twoPi            !define circular frequecy value
    *SET,ccf,-omega*omega
    *SMAT,Az,Z,COPY,MatK                   !modified K: [MatK] -> [Az]
    *AXPY,ccf,0.0,MatM,1.0,0.0,Az          !       -w*w*[MatM] +> [Az]
    *AXPY,0.0,omega,Mat_C,1.0,0.0,Az        !       +i*w*[Mat_C] +> [Az]

    !Compute {Rz}={iRHS}-[Az]*{Xi}
    *VEC,Rzi,Z,LINK,RzV,1
    *INIT,Rzi,ZERO
    *MULT,Az,,Xi,,Rzi  
    *AXPY,1.0,0.0,iRHS,-1.0,0.0,Rzi

    !Output norms of residual vector
    *CFOPEN,%thejob%_Rzi_%iFreq%,txt,,
    normRz = 0.0d0
    *IF,resKey,EQ,1,THEN                   !L-inf norm
      *SET,title,'Inf'
      *NRM,Rzi,NRMINF,normRz,NO
      *NRM,iRHS,NRMINF,normFz,NO
      *IF,normFz,NE,0.0,THEN
        normRz = normRz/normFz
      *ENDIF
    *ELSEIF,resKey,EQ,2,THEN               !L-1 norm
      *SET,title,'L-1'
      *NRM,Rzi,NRM1,normRz,NO
      *NRM,iRHS,NRM1,normFz,NO
      *IF,normFz,NE,0.0,THEN
        normRz = normRz/normFz
      *ENDIF
    *ELSEIF,resKey,EQ,3,THEN               !L-2 norm
      *SET,title,'L-2'
      *NRM,Rzi,NRM2,normRz,NO
      *NRM,iRHS,NRM2,normFz,NO
      *IF,normFz,NE,0.0,THEN
        normRz = normRz/normFz
      *ENDIF
    *ENDIF
    /gopr
    *vwrite,title,normRz,normFz,iFreq
    ('Calculated ',A3,' Residual Norm: |R|=',E25.15,' |F|=',E25.15,' at subst=',F4.0)
    *INQ,Rzi,DIM1,NUMEQN  
    *DO,iEQ,1,NUMEQN
      Rzi_real = Rzi(iEQ,1)                !real value of residual
      Rzi_imag = Rzi(iEQ,2)                !imaginary value of residual
      *vwrite,iEQ,Rzi_real,Rzi_imag
      ('iEQN=',F9.0,' Rz=',E23.15,E23.15)
    *ENDDO
    *CFCLOS
  *ENDIF
*ENDDO

*ENDIF

