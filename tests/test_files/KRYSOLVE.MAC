!COM *****************************************************************************
!COM KRYSOLVE.MAC                                                                *
!COM                                                                             *
!COM  This macro uses a KRYLOV subspace to solve a reduced harmonic              *
!COM  analysis over a specified frequency range for a given number of            *
!COM  frequency points (intervals).                                              *
!COM                                                                             *
!COM  COMMAND USAGE: KRYSOLVE,freqBeg,freqEnd,numFreq,outKey                     *
!COM    freqBeg - starting value of the frequency range (Hz)                     *
!COM    freqEnd - ending value of the frequency range (Hz)                       *
!COM    numFreq - user specified number of intervals in frequency range          *
!COM    loadKey - key specifying whether load should be ramped(0) or stepped(1)  *
!COM    outKey  - [optional] key to output reduced solution to Yz.txt file       *
!COM                                                                             *
!COM *****************************************************************************

!Store input arguments from user
freqBeg=arg1
freqEnd=arg2
numFreq=arg3
loadKey=arg4
outKey=arg5

!Check for illegal input values by user
*IF,freqBeg,LT,0.0,THEN
  *msg,error
  The beginning frequency value for solving the reduced solution is required to be greater than or equal to 0
  _nerr=1
*ENDIF
*IF,numFreq,LE,0,THEN
  *msg,error
  The number of frequencies for which to compute the reduced solution is required to be greater than 0
  _nerr=1
*ENDIF
*IF,loadKey,LT,0,THEN
  *msg,error
  The loadKey value for computing the reduced solution is required to be 0 or 1
  _nerr=1
*ENDIF
*IF,loadKey,GT,1,THEN
  *msg,error
  The loadKey value for computing the reduced soluion is required to be 0 or 1
  _nerr=1
*ENDIF
*IF,outKey,LT,0,THEN
  *msg,error
  The outKey value for computing the reduced solution is required to be 0 or 1
  _nerr=1
*ENDIF
*IF,outKey,GT,1,THEN
  *msg,error
  The outKey value for computing the reduced soluion is required to be 0 or 1
  _nerr=1
*ENDIF


!Execute macro if no errors above
*IF,_nerr,EQ,0,THEN

!Define solution variables
*INQ,Az,DIM2,nDOF
*VEC,QtF,Z,ALLOC,dimQ                   !{QtF}, force vector in subspace
*DMAT,QtAQ,Z,ALLOC,dimQ,dimQ,INCORE     ![QtAQ], reduced matrix
*DMAT,Yz,Z,ALLOC,dimQ,numFreq,INCORE    ![Yz], reduced solution over range
*DMAT,QtA,Z,ALLOC,nDOF,dimQ,INCORE      ![QtA]
*DMAT,DzV,Z,ALLOC,nDOF,numFreq,INCORE   !{DzV}, displacement vector
*VEC,iRHS,Z,ALLOC,nDOF

!Loop over frequency range
*SET,omega,freqBeg*twoPi                !circular frequency at starting point
*SET,intV,(freqEnd-freqBeg)/numFreq
*DO,iFreq,1,numFreq
  !form RHS at the i-th frequency point
  *INIT,iRHS,ZERO                       !{iRHS}=0
  *IF,loadKey,eq,0,then
    !apply ramped loading
    *SET,ratio,2*iFreq/numFreq
    *IF,numFreq,EQ,1,THEN
      *SET,ratio,1.0d0
    *ENDIF
  *ELSE
     !apply stepped loading
     *SET,ratio,1.0d0
  *ENDIF
  *AXPY,ratio,0.0,Fz0,1.0,0.0,iRHS      !get {iRHS} at iFreq
  *MULT,Qz,TRANS,iRHS,,QtF              !reduce [Qz]^t{iRHS} -> {QtF}
  *VEC,iY,Z,LINK,Yz,iFreq               !link iY to Yz(iFreq)

  !Reduced system at omega
  *SET,omega,omega+intV*twoPi           !defined frequency value
  *SET,ccf,-omega*omega
  *SMAT,Az,Z,COPY,MatK                  !modified K:[Az]=[MatK]
  *AXPY,ccf,0.0,MatM,1.0,0.0,Az         ![Az]=(1,0)*[Az]+(ccf,0)*[MatM]
  *AXPY,0.0,omega,Mat_C,1.0,0.0,Az       ![Az]=(1,0)*[Az]-(0,omega)*[Mat_C]
  *MULT,Az,,Qz,,AQ                      ![AQ]=[Az][Qz]
  *MULT,Qz,TRANS,AQ,,QtAQ               ![QtAQ]=[Q^t][AQ]

  *LSENGINE,LAPACK,LAsolver,QtAQ,INCORE !create reduced system of equations
  *LSFACTOR,LAsolver                    !factor [QtAQ]
  *LSBAC,LAsolver,QtF,iY                !back solve for {iY}=Yz[iFreq]

  !Output reduced solution (if requested)
  *IF,outKey,EQ,1,THEN
    *PRINT,iY,'%thejob%_Yz_%iFreq%.txt' !Yz_*.txt, reduced solution vector
  *ENDIF
*ENDDO

*ENDIF

