
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/06-verif-manual/vm-006-pinched_cylinder.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_06-verif-manual_vm-006-pinched_cylinder.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_06-verif-manual_vm-006-pinched_cylinder.py:


.. _ref_vm6_example:

Pinched Cylinder
----------------
Problem Description:
 - A thin-walled cylinder is pinched by a force :math:`F` at the middle
   of the cylinder length. Determine the radial displacement :math:`\delta`
   at the point where the force :math:`F` is applied.
   The ends of the cylinder are free edges.

Reference:
 - R. D. Cook, Concepts and Applications of Finite Element Analysis, 2nd Edition,
   John Wiley and Sons, Inc., New York, NY, 1981, pp. 284-287.
   H. Takemoto, R. D. Cook, "Some Modifications of an Isoparametric Shell
   Element", International Journal for Numerical Methods in Engineering, Vol.7
   No. 3, 1973.

Analysis Type(s):
 - Static Analysis ``ANTYPE=0``

Element Type(s):
 - 4-Node Finite Strain Shell Elements (SHELL181)
 - 8-Node Finite Strain Shell Elements (SHELL281)

.. image:: ../../../_static/vm6_setup.png
   :width: 400
   :alt: VM6 Pinched Cylinder Problem Sketch

Material Properties
 - :math:`E = 10.5 \cdot 10^6 psi`
 - :math:`\nu = 0.3125`

Geometric Properties:
 - :math:`l = 10.35  in`
 - :math:`r = 4.953  in`
 - :math:`t = 0.094  in`

Loading:
 - :math:`F = 100  lb`

Analysis Assumptions and Modeling Notes:
 - A one-eighth symmetry model is used. One-fourth of the load is applied
   due to symmetry.

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    # sphinx_gallery_thumbnail_path = '_static/vm6_setup.png'








.. GENERATED FROM PYTHON SOURCE LINES 50-52

Start MAPDL
~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 52-59

.. code-block:: default


    from ansys.mapdl.core import launch_mapdl

    # Start mapdl.
    mapdl = launch_mapdl()









.. GENERATED FROM PYTHON SOURCE LINES 60-63

Initiate Pre-Processing
~~~~~~~~~~~~~~~~~~~~~~~
Enter verification example mode and the pre-processing routine.

.. GENERATED FROM PYTHON SOURCE LINES 63-74

.. code-block:: default



    def start_prep7():
        mapdl.clear()
        mapdl.verify()
        mapdl.prep7()


    start_prep7()









.. GENERATED FROM PYTHON SOURCE LINES 75-78

Define Element Type
~~~~~~~~~~~~~~~~~~~
Set up the element type (a shell-type).

.. GENERATED FROM PYTHON SOURCE LINES 78-115

.. code-block:: default


    # Define the element type number.
    def define_element(elem_type):
        # Type of analysis: Static.
        mapdl.antype("STATIC")

        # Define the element type number.
        elem_num = 1

        if elem_type == "SHELL181":

            # Element type: SHELL181.
            mapdl.et(elem_num, elem_type)

            # Special Features are defined by keyoptions of shell element:

            # KEYOPT(3)
            # Integration option:
            # Full integration with incompatible modes.
            mapdl.keyopt(elem_num, 3, 2)  # Cubic shape function

        elif elem_type == "SHELL281":

            # Element type: SHELL181.
            mapdl.et(elem_num, "SHELL281")

        return elem_type, mapdl.etlist()


    # Return the number of the element type.
    elem_type, elem_type_list = define_element(elem_type="SHELL181")
    print(
        f"Selected element type is: {elem_type},\n"
        f"Printout the element list with its own properties:\n {elem_type_list}"
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Selected element type is: SHELL181,
    Printout the element list with its own properties:
     ELEMENT TYPE        1 IS SHELL181     4-NODE SHELL                
      KEYOPT( 1- 6)=        0      0      2        0      0      0
      KEYOPT( 7-12)=        0      0      0        0      0      0
      KEYOPT(13-18)=        0      0      0        0      0      0

     CURRENT NODAL DOF SET IS  UX    UY    UZ    ROTX  ROTY  ROTZ
      THREE-DIMENSIONAL MODEL




.. GENERATED FROM PYTHON SOURCE LINES 116-121

Define Material
~~~~~~~~~~~~~~~
Set up the material properties, where:
Young Modulus is :math:`E = 10.5 \cdot 10^6 psi`,
Poisson's ratio is :math:`\nu = 0.3125`.

.. GENERATED FROM PYTHON SOURCE LINES 121-137

.. code-block:: default


    # Define material number.
    mat_num = 1

    # Define material properties.
    def define_material():
        # Define material properties.
        mapdl.mp("EX", mat_num, 10.5e6)
        mapdl.mp("NUXY", mat_num, 0.3125)
        return mapdl.mplist()


    material_list = define_material()
    print(material_list)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MATERIAL NUMBER        1

          TEMP        EX  
                   0.1050000E+08

          TEMP        NUXY
                   0.3125000




.. GENERATED FROM PYTHON SOURCE LINES 138-141

Define Section
~~~~~~~~~~~~~~
Set up the cross-section properties for a shell element.

.. GENERATED FROM PYTHON SOURCE LINES 141-158

.. code-block:: default


    # Define cross-section number and thickness of the shell element.
    sec_num = 1
    t = 0.094

    # Define shell cross-section.
    def define_section():
        # Define shell cross-section.
        mapdl.sectype(secid=sec_num, type_="SHELL", name="shell181")
        mapdl.secdata(t, mat_num, 0, 5)
        return mapdl.slist()


    section_list = define_section()
    print(section_list)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    *****ANSYS VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION
                     
       SECTION ID NUMBER:           1
       SHELL SECTION TYPE:    
       SHELL SECTION NAME IS:     shell181
       SHELL SECTION DATA SUMMARY:
        Number of Layers    =      1
        Total Thickness     =     0.094000

      Layer      Thickness   MatID   Ori. Angle  Num Intg. Pts

          1        0.0940     1        0.0000     5
                 
        Shell Section is offset to MID surface of Shell

        Section Solution Controls
        User Transverse Shear Stiffness (11)=  0.0000    
                                        (22)=  0.0000    
                                        (12)=  0.0000    
        Added Mass Per Unit Area            =  0.0000    
        Hourglass Scale Factor; Membrane    =  1.0000    
                                Bending     =  1.0000    
        Drill Stiffness Scale Factor        =  1.0000




.. GENERATED FROM PYTHON SOURCE LINES 159-162

Define Geometry
~~~~~~~~~~~~~~~
Set up the keypoints and create the area through the keypoints.

.. GENERATED FROM PYTHON SOURCE LINES 162-209

.. code-block:: default


    # Define geometry of the simplified mathematical model.
    def define_geometry():
        # Change active coordinate system
        # to the global cylindrical coordinate system.
        mapdl.csys(1)

        # Define keypoints by coordinates.
        mapdl.k(1, 4.953)
        mapdl.k(2, 4.953, "", 5.175)

        # Generate additional keypoints from a pattern of keypoints.
        mapdl.kgen(2, 1, 2, 1, "", 90)

        # Create an area through keypoints.
        mapdl.a(1, 2, 4, 3)

        if elem_type == "SHELL181":
            # Plot the lines.
            mapdl.lplot(color_lines=True, cpos="iso")

            # Plot the area using PyVista parameters.
            mapdl.aplot(
                title="Display the selected area",
                cpos="iso",
                vtk=True,
                color="#06C2AC",
                show_line_numbering=True,
                show_area_numbering=True,
                show_lines=True,
            )


    define_geometry()


    # Define the number of the keypoint where F is applied using inline function.
    def keypoint_number(mapdl):
        keypoint_num = mapdl.queries.kp(4.953, 90, 0)
        return keypoint_num


    # Call the function to get the number of keypoint.
    top_keypoint = keypoint_number(mapdl)
    print(f"The number of the keypoint where F is applied: {top_keypoint}")





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_001.png
          :alt: vm 006 pinched cylinder
          :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_001.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_002.png
          :alt: vm 006 pinched cylinder
          :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_002.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    The number of the keypoint where F is applied: 3




.. GENERATED FROM PYTHON SOURCE LINES 210-213

Meshing
~~~~~~~
Define line division of the lines, then mesh the area with shell elements.

.. GENERATED FROM PYTHON SOURCE LINES 213-252

.. code-block:: default


    # Define mesh properties and create the mesh with shell elements.
    def meshing():
        # Specify the default number of line divisions.
        mapdl.esize(size="", ndiv=8)

        # Mesh the area.
        mapdl.amesh(1)

        # Define global cartesian coordinate system.
        mapdl.csys(0)

        if elem_type == "SHELL181":
            # Plot the mesh.
            mapdl.eplot(
                title="Plot of the currently selected elements",
                vtk=True,
                cpos="iso",
                show_edges=True,
                edge_color="white",
                show_node_numbering=True,
                color="purple",
            )

        # Print the list of elements.
        print(mapdl.elist())

        # Plot the nodes using VTK.
        mapdl.nplot(
            vtk=True, nnum=True, background="", cpos="iso", show_bounds=True, point_size=10
        )

        # Print the list of nodes.
        print(mapdl.nlist())


    meshing()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_003.png
          :alt: vm 006 pinched cylinder
          :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_003.png
          :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_004.png
          :alt: vm 006 pinched cylinder
          :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_004.png
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LIST ALL SELECTED ELEMENTS.  (LIST NODES)
           1   1   1   1   0   1      1     3    33    32
           2   1   1   1   0   1      3     4    40    33
           3   1   1   1   0   1      4     5    47    40
           4   1   1   1   0   1      5     6    54    47
           5   1   1   1   0   1      6     7    61    54
           6   1   1   1   0   1      7     8    68    61
           7   1   1   1   0   1      8     9    75    68
           8   1   1   1   0   1      9     2    11    75
           9   1   1   1   0   1     32    33    34    31
          10   1   1   1   0   1     33    40    41    34
          11   1   1   1   0   1     40    47    48    41
          12   1   1   1   0   1     47    54    55    48
          13   1   1   1   0   1     54    61    62    55
          14   1   1   1   0   1     61    68    69    62
          15   1   1   1   0   1     68    75    76    69
          16   1   1   1   0   1     75    11    12    76
          17   1   1   1   0   1     31    34    35    30
          18   1   1   1   0   1     34    41    42    35
          19   1   1   1   0   1     41    48    49    42
          20   1   1   1   0   1     48    55    56    49
          21   1   1   1   0   1     55    62    63    56
          22   1   1   1   0   1     62    69    70    63
          23   1   1   1   0   1     69    76    77    70
          24   1   1   1   0   1     76    12    13    77
          25   1   1   1   0   1     30    35    36    29
          26   1   1   1   0   1     35    42    43    36
          27   1   1   1   0   1     42    49    50    43
          28   1   1   1   0   1     49    56    57    50
          29   1   1   1   0   1     56    63    64    57
          30   1   1   1   0   1     63    70    71    64
          31   1   1   1   0   1     70    77    78    71
          32   1   1   1   0   1     77    13    14    78
          33   1   1   1   0   1     29    36    37    28
          34   1   1   1   0   1     36    43    44    37
          35   1   1   1   0   1     43    50    51    44
          36   1   1   1   0   1     50    57    58    51
          37   1   1   1   0   1     57    64    65    58
          38   1   1   1   0   1     64    71    72    65
          39   1   1   1   0   1     71    78    79    72
          40   1   1   1   0   1     78    14    15    79
          41   1   1   1   0   1     28    37    38    27
          42   1   1   1   0   1     37    44    45    38
          43   1   1   1   0   1     44    51    52    45
          44   1   1   1   0   1     51    58    59    52
          45   1   1   1   0   1     58    65    66    59
          46   1   1   1   0   1     65    72    73    66
          47   1   1   1   0   1     72    79    80    73
          48   1   1   1   0   1     79    15    16    80
          49   1   1   1   0   1     27    38    39    26
          50   1   1   1   0   1     38    45    46    39
          51   1   1   1   0   1     45    52    53    46
          52   1   1   1   0   1     52    59    60    53
          53   1   1   1   0   1     59    66    67    60
          54   1   1   1   0   1     66    73    74    67
          55   1   1   1   0   1     73    80    81    74
          56   1   1   1   0   1     80    16    17    81
          57   1   1   1   0   1     26    39    25    18
          58   1   1   1   0   1     39    46    24    25
          59   1   1   1   0   1     46    53    23    24
          60   1   1   1   0   1     53    60    22    23
          61   1   1   1   0   1     60    67    21    22
          62   1   1   1   0   1     67    74    20    21
          63   1   1   1   0   1     74    81    19    20
          64   1   1   1   0   1     81    17    10    19
    1   4.9530        0.0000        0.0000          0.00     0.00     0.00
            2   4.9530        0.0000        5.1750          0.00     0.00     0.00
            3   4.9530        0.0000       0.64687          0.00     0.00     0.00
            4   4.9530        0.0000        1.2937          0.00     0.00     0.00
            5   4.9530        0.0000        1.9406          0.00     0.00     0.00
            6   4.9530        0.0000        2.5875          0.00     0.00     0.00
            7   4.9530        0.0000        3.2344          0.00     0.00     0.00
            8   4.9530        0.0000        3.8812          0.00     0.00     0.00
            9   4.9530        0.0000        4.5281          0.00     0.00     0.00
           10   0.0000        4.9530        5.1750          0.00     0.00     0.00
           11   4.8578       0.96628        5.1750          0.00     0.00     0.00
           12   4.5760        1.8954        5.1750          0.00     0.00     0.00
           13   4.1183        2.7517        5.1750          0.00     0.00     0.00
           14   3.5023        3.5023        5.1750          0.00     0.00     0.00
           15   2.7517        4.1183        5.1750          0.00     0.00     0.00
           16   1.8954        4.5760        5.1750          0.00     0.00     0.00
           17  0.96628        4.8578        5.1750          0.00     0.00     0.00
           18   0.0000        4.9530        0.0000          0.00     0.00     0.00
           19   0.0000        4.9530        4.5281          0.00     0.00     0.00
           20   0.0000        4.9530        3.8812          0.00     0.00     0.00
           21   0.0000        4.9530        3.2344          0.00     0.00     0.00
           22   0.0000        4.9530        2.5875          0.00     0.00     0.00
           23   0.0000        4.9530        1.9406          0.00     0.00     0.00
           24   0.0000        4.9530        1.2937          0.00     0.00     0.00
           25   0.0000        4.9530       0.64688          0.00     0.00     0.00
           26  0.96628        4.8578        0.0000          0.00     0.00     0.00
           27   1.8954        4.5760        0.0000          0.00     0.00     0.00
           28   2.7517        4.1183        0.0000          0.00     0.00     0.00
           29   3.5023        3.5023        0.0000          0.00     0.00     0.00
           30   4.1183        2.7517        0.0000          0.00     0.00     0.00
           31   4.5760        1.8954        0.0000          0.00     0.00     0.00
           32   4.8578       0.96628        0.0000          0.00     0.00     0.00
           33   4.8578       0.96628       0.64687          0.00     0.00     0.00
           34   4.5760        1.8954       0.64688          0.00     0.00     0.00
           35   4.1183        2.7517       0.64688          0.00     0.00     0.00
           36   3.5023        3.5023       0.64688          0.00     0.00     0.00
           37   2.7517        4.1183       0.64688          0.00     0.00     0.00
           38   1.8954        4.5760       0.64688          0.00     0.00     0.00
           39  0.96628        4.8578       0.64688          0.00     0.00     0.00
           40   4.8578       0.96628        1.2937          0.00     0.00     0.00
           41   4.5760        1.8954        1.2937          0.00     0.00     0.00
           42   4.1183        2.7517        1.2937          0.00     0.00     0.00
           43   3.5023        3.5023        1.2937          0.00     0.00     0.00
           44   2.7517        4.1183        1.2938          0.00     0.00     0.00
           45   1.8954        4.5760        1.2938          0.00     0.00     0.00
           46  0.96628        4.8578        1.2937          0.00     0.00     0.00
           47   4.8578       0.96628        1.9406          0.00     0.00     0.00
           48   4.5760        1.8954        1.9406          0.00     0.00     0.00
           49   4.1183        2.7517        1.9406          0.00     0.00     0.00
           50   3.5023        3.5023        1.9406          0.00     0.00     0.00
           51   2.7517        4.1183        1.9406          0.00     0.00     0.00
           52   1.8954        4.5760        1.9406          0.00     0.00     0.00
           53  0.96628        4.8578        1.9406          0.00     0.00     0.00
           54   4.8578       0.96628        2.5875          0.00     0.00     0.00
           55   4.5760        1.8954        2.5875          0.00     0.00     0.00
           56   4.1183        2.7517        2.5875          0.00     0.00     0.00
           57   3.5023        3.5023        2.5875          0.00     0.00     0.00
           58   2.7517        4.1183        2.5875          0.00     0.00     0.00
           59   1.8954        4.5760        2.5875          0.00     0.00     0.00
           60  0.96628        4.8578        2.5875          0.00     0.00     0.00
           61   4.8578       0.96628        3.2344          0.00     0.00     0.00
           62   4.5760        1.8954        3.2344          0.00     0.00     0.00
           63   4.1183        2.7517        3.2344          0.00     0.00     0.00
           64   3.5023        3.5023        3.2344          0.00     0.00     0.00
           65   2.7517        4.1183        3.2344          0.00     0.00     0.00
           66   1.8954        4.5760        3.2344          0.00     0.00     0.00
           67  0.96628        4.8578        3.2344          0.00     0.00     0.00
           68   4.8578       0.96628        3.8812          0.00     0.00     0.00
           69   4.5760        1.8954        3.8812          0.00     0.00     0.00
           70   4.1183        2.7517        3.8813          0.00     0.00     0.00
           71   3.5023        3.5023        3.8813          0.00     0.00     0.00
           72   2.7517        4.1183        3.8813          0.00     0.00     0.00
           73   1.8954        4.5760        3.8813          0.00     0.00     0.00
           74  0.96628        4.8578        3.8813          0.00     0.00     0.00
           75   4.8578       0.96628        4.5281          0.00     0.00     0.00
           76   4.5760        1.8954        4.5281          0.00     0.00     0.00
           77   4.1183        2.7517        4.5281          0.00     0.00     0.00
           78   3.5023        3.5023        4.5281          0.00     0.00     0.00
           79   2.7517        4.1183        4.5281          0.00     0.00     0.00
           80   1.8954        4.5760        4.5281          0.00     0.00     0.00
           81  0.96628        4.8578        4.5281          0.00     0.00     0.00




.. GENERATED FROM PYTHON SOURCE LINES 253-256

Define Boundary Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~
Application of symmetric boundary conditions for simplified model.

.. GENERATED FROM PYTHON SOURCE LINES 256-272

.. code-block:: default


    # Select nodes by location and apply BC.
    def define_bc():
        # Select nodes by location and apply BC.
        mapdl.nsel("S", "LOC", "X", 0)
        mapdl.dsym("SYMM", "X", 0)
        mapdl.nsel("S", "LOC", "Y", 0)
        mapdl.dsym("SYMM", "Y", 0)
        mapdl.nsel("S", "LOC", "Z", 0)
        mapdl.dsym("SYMM", "Z", 0)
        mapdl.nsel("ALL")


    define_bc()









.. GENERATED FROM PYTHON SOURCE LINES 273-276

Define Distributed Loads
~~~~~~~~~~~~~~~~~~~~~~~~
Apply the force of :math:`F = (100/4) lb` in the y-direction.

.. GENERATED FROM PYTHON SOURCE LINES 276-290

.. code-block:: default


    # Define loads.
    def define_loads():
        # Parametrization of the :math:`F` load for the quarter of the model.
        force = 100 / 4

        # Application of the load to the model.
        mapdl.fk(top_keypoint, "FY", -force)
        mapdl.finish()


    define_loads()









.. GENERATED FROM PYTHON SOURCE LINES 291-294

Solve
~~~~~
Enter solution mode and solve the system. Print the solver output.

.. GENERATED FROM PYTHON SOURCE LINES 294-306

.. code-block:: default



    def solve_procedure():
        mapdl.run("/solu")
        out = mapdl.solve()
        mapdl.finish()
        return out


    simulation_info = solve_procedure()
    print(simulation_info)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    *****  ANSYS SOLVE    COMMAND  *****

     TRANSFER SOLID MODEL BOUNDARY CONDITIONS TO FINITE ELEMENT MODEL
          FORCES         TRANSFERRED FROM KEYPOINTS     =      1

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     There is no title defined for this analysis.                            

     *** SELECTION OF ELEMENT TECHNOLOGIES FOR APPLICABLE ELEMENTS ***
                    ---GIVE SUGGESTIONS ONLY---

     ELEMENT TYPE         1 IS SHELL181. IT IS ASSOCIATED WITH ELASTOPLASTIC 
     MATERIALS ONLY. KEYOPT(8)=2 IS SUGGESTED AND KEYOPT(3)=2 IS SUGGESTED FOR
     HIGHER ACCURACY OF MEMBRANE STRESSES; OTHERWISE, KEYOPT(3)=0 IS SUGGESTED.


       *****ANSYS VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  
       DEGREES OF FREEDOM. . . . . . UX   UY   UZ   ROTX ROTY ROTZ
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     Present time 0 is less than or equal to the previous time.  Time will   
     default to 1.                                                           

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1
       TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    
       NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1
       STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN
                                                      FOR THE LAST SUBSTEP


     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     Predictor is ON by default for structural elements with rotational      
     degrees of freedom.  Use the PRED,OFF command to turn the predictor     
     OFF if it adversely affects the convergence.                            


     Range of element maximum matrix coefficients in global coordinates
     Maximum = 596623.888 at element 0.                                      
     Minimum = 596623.886 at element 0.                                      

       *** ELEMENT MATRIX FORMULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL181      0.000   0.000000
     Time at end of element matrix formulation CP = 0.                       

     SPARSE MATRIX DIRECT SOLVER.
      Number of equations =         407,    Maximum wavefront =      0
      Memory available (MB) =    0.0    ,  Memory required (MB) =    0.0    

     Sparse solver maximum pivot= 0 at node 0 .                              
     Sparse solver minimum pivot= 0 at node 0 .                              
     Sparse solver minimum pivot in absolute value= 0 at node 0 .            

       *** ELEMENT RESULT CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL181      0.000   0.000000

       *** NODAL LOAD CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL181      0.000   0.000000
     *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1
     *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX




.. GENERATED FROM PYTHON SOURCE LINES 307-312

Post-processing
~~~~~~~~~~~~~~~
Enter post-processing for the model with elements ``shell181``.
Plotting nodal displacement.
Get the the radial displacement at the node where force F is applied.

.. GENERATED FROM PYTHON SOURCE LINES 312-322

.. code-block:: default


    # Start post-processing mode.
    def post_processing():
        mapdl.post1()
        mapdl.set(1)


    post_processing()









.. GENERATED FROM PYTHON SOURCE LINES 323-326

Plotting
~~~~~~~~
Plot nodal displacement using PyVista.

.. GENERATED FROM PYTHON SOURCE LINES 326-343

.. code-block:: default



    def plot_nodal_disp():
        mapdl.post_processing.plot_nodal_displacement(
            title="Nodal Displacements",
            component="Y",
            cpos="zx",
            scalar_bar_args={"title": "Nodal Displacements", "vertical": True},
            show_node_numbering=True,
            show_axes=True,
            show_edges=True,
        )


    plot_nodal_disp()





.. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_005.png
   :alt: vm 006 pinched cylinder
   :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 344-348

Getting the radial displacements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To determine the radial displacement :math:`\delta` at the point
where F is applied, we can use :meth:`Mapdl.get_value <ansys.mapdl.core.Mapdl.get_value>`.

.. GENERATED FROM PYTHON SOURCE LINES 348-376

.. code-block:: default



    def get_displacements():
        # Select keypoint by its number ``top_keypoint``.
        mapdl.ksel("S", vmin="top_keypoint")

        # Select the node associated with the selected keypoint.
        mapdl.nslk()

        # Get the number of the selected node by :meth:`Mapdl.get <ansys.mapdl.core.Mapdl.get>`
        top_node = int(mapdl.get("_", "node", 0, "num", "max"))

        # Define radial displacement at the node where F is applied.
        deflect_shell = mapdl.get_value(
            entity="node", entnum=top_node, item1="u", it1num="y"
        )

        return top_node, deflect_shell


    # Call the function and get the value of the deflection.
    top_node_181, deflect_shell_181 = get_displacements()
    print(
        f"Number of the node attached to the top keypoint: {top_node_181},\n"
        f"Radial displacement: {(round(deflect_shell_181, 4))}"
    )






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Number of the node attached to the top keypoint: 18,
    Radial displacement: -0.11




.. GENERATED FROM PYTHON SOURCE LINES 377-380

Rerun Model with SHELL281
~~~~~~~~~~~~~~~~~~~~~~~~~~
Perform the simulation again using the element type SHELL281.

.. GENERATED FROM PYTHON SOURCE LINES 380-392

.. code-block:: default


    # Restart pre-processing routine.
    start_prep7()
    elem_type = define_element(elem_type="SHELL281")
    define_material()
    define_section()
    define_geometry()
    meshing()
    define_bc()
    define_loads()





.. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_006.png
   :alt: vm 006 pinched cylinder
   :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LIST ALL SELECTED ELEMENTS.  (LIST NODES)
           1   1   1   1   0   1      1     4    73    63     3    72    65    64
           2   1   1   1   0   1      4     6    95    73     5    94    87    72
           3   1   1   1   0   1      6     8   117    95     7   116   109    94
           4   1   1   1   0   1      8    10   139   117     9   138   131   116
           5   1   1   1   0   1     10    12   161   139    11   160   153   138
           6   1   1   1   0   1     12    14   183   161    13   182   175   160
           7   1   1   1   0   1     14    16   205   183    15   204   197   182
           8   1   1   1   0   1     16     2    20   205    17    19   219   204
           9   1   1   1   0   1     63    73    75    61    65    74    66    62
          10   1   1   1   0   1     73    95    97    75    87    96    88    74
          11   1   1   1   0   1     95   117   119    97   109   118   110    96
          12   1   1   1   0   1    117   139   141   119   131   140   132   118
          13   1   1   1   0   1    139   161   163   141   153   162   154   140
          14   1   1   1   0   1    161   183   185   163   175   184   176   162
          15   1   1   1   0   1    183   205   207   185   197   206   198   184
          16   1   1   1   0   1    205    20    22   207   219    21   220   206
          17   1   1   1   0   1     61    75    77    59    66    76    67    60
          18   1   1   1   0   1     75    97    99    77    88    98    89    76
          19   1   1   1   0   1     97   119   121    99   110   120   111    98
          20   1   1   1   0   1    119   141   143   121   132   142   133   120
          21   1   1   1   0   1    141   163   165   143   154   164   155   142
          22   1   1   1   0   1    163   185   187   165   176   186   177   164
          23   1   1   1   0   1    185   207   209   187   198   208   199   186
          24   1   1   1   0   1    207    22    24   209   220    23   221   208
          25   1   1   1   0   1     59    77    79    57    67    78    68    58
          26   1   1   1   0   1     77    99   101    79    89   100    90    78
          27   1   1   1   0   1     99   121   123   101   111   122   112   100
          28   1   1   1   0   1    121   143   145   123   133   144   134   122
          29   1   1   1   0   1    143   165   167   145   155   166   156   144
          30   1   1   1   0   1    165   187   189   167   177   188   178   166
          31   1   1   1   0   1    187   209   211   189   199   210   200   188
          32   1   1   1   0   1    209    24    26   211   221    25   222   210
          33   1   1   1   0   1     57    79    81    55    68    80    69    56
          34   1   1   1   0   1     79   101   103    81    90   102    91    80
          35   1   1   1   0   1    101   123   125   103   112   124   113   102
          36   1   1   1   0   1    123   145   147   125   134   146   135   124
          37   1   1   1   0   1    145   167   169   147   156   168   157   146
          38   1   1   1   0   1    167   189   191   169   178   190   179   168
          39   1   1   1   0   1    189   211   213   191   200   212   201   190
          40   1   1   1   0   1    211    26    28   213   222    27   223   212
          41   1   1   1   0   1     55    81    83    53    69    82    70    54
          42   1   1   1   0   1     81   103   105    83    91   104    92    82
          43   1   1   1   0   1    103   125   127   105   113   126   114   104
          44   1   1   1   0   1    125   147   149   127   135   148   136   126
          45   1   1   1   0   1    147   169   171   149   157   170   158   148
          46   1   1   1   0   1    169   191   193   171   179   192   180   170
          47   1   1   1   0   1    191   213   215   193   201   214   202   192
          48   1   1   1   0   1    213    28    30   215   223    29   224   214
          49   1   1   1   0   1     53    83    85    51    70    84    71    52
          50   1   1   1   0   1     83   105   107    85    92   106    93    84
          51   1   1   1   0   1    105   127   129   107   114   128   115   106
          52   1   1   1   0   1    127   149   151   129   136   150   137   128
          53   1   1   1   0   1    149   171   173   151   158   172   159   150
          54   1   1   1   0   1    171   193   195   173   180   194   181   172
          55   1   1   1   0   1    193   215   217   195   202   216   203   194
          56   1   1   1   0   1    215    30    32   217   224    31   225   216
          57   1   1   1   0   1     51    85    48    34    71    86    49    50
          58   1   1   1   0   1     85   107    46    48    93   108    47    86
          59   1   1   1   0   1    107   129    44    46   115   130    45   108
          60   1   1   1   0   1    129   151    42    44   137   152    43   130
          61   1   1   1   0   1    151   173    40    42   159   174    41   152
          62   1   1   1   0   1    173   195    38    40   181   196    39   174
          63   1   1   1   0   1    195   217    36    38   203   218    37   196
          64   1   1   1   0   1    217    32    18    36   225    33    35   218
    1   4.9530        0.0000        0.0000          0.00     0.00     0.00
            2   4.9530        0.0000        5.1750          0.00     0.00     0.00
            3   4.9530        0.0000       0.32344          0.00     0.00     0.00
            4   4.9530        0.0000       0.64687          0.00     0.00     0.00
            5   4.9530        0.0000       0.97031          0.00     0.00     0.00
            6   4.9530        0.0000        1.2937          0.00     0.00     0.00
            7   4.9530        0.0000        1.6172          0.00     0.00     0.00
            8   4.9530        0.0000        1.9406          0.00     0.00     0.00
            9   4.9530        0.0000        2.2641          0.00     0.00     0.00
           10   4.9530        0.0000        2.5875          0.00     0.00     0.00
           11   4.9530        0.0000        2.9109          0.00     0.00     0.00
           12   4.9530        0.0000        3.2344          0.00     0.00     0.00
           13   4.9530        0.0000        3.5578          0.00     0.00     0.00
           14   4.9530        0.0000        3.8812          0.00     0.00     0.00
           15   4.9530        0.0000        4.2047          0.00     0.00     0.00
           16   4.9530        0.0000        4.5281          0.00     0.00     0.00
           17   4.9530        0.0000        4.8516          0.00     0.00     0.00
           18   0.0000        4.9530        5.1750          0.00     0.00     0.00
           19   4.9291       0.48548        5.1750          0.00     0.00     0.00
           20   4.8578       0.96628        5.1750          0.00     0.00     0.00
           21   4.7397        1.4378        5.1750          0.00     0.00     0.00
           22   4.5760        1.8954        5.1750          0.00     0.00     0.00
           23   4.3682        2.3348        5.1750          0.00     0.00     0.00
           24   4.1183        2.7517        5.1750          0.00     0.00     0.00
           25   3.8287        3.1421        5.1750          0.00     0.00     0.00
           26   3.5023        3.5023        5.1750          0.00     0.00     0.00
           27   3.1421        3.8287        5.1750          0.00     0.00     0.00
           28   2.7517        4.1183        5.1750          0.00     0.00     0.00
           29   2.3348        4.3682        5.1750          0.00     0.00     0.00
           30   1.8954        4.5760        5.1750          0.00     0.00     0.00
           31   1.4378        4.7397        5.1750          0.00     0.00     0.00
           32  0.96628        4.8578        5.1750          0.00     0.00     0.00
           33  0.48548        4.9291        5.1750          0.00     0.00     0.00
           34   0.0000        4.9530        0.0000          0.00     0.00     0.00
           35   0.0000        4.9530        4.8516          0.00     0.00     0.00
           36   0.0000        4.9530        4.5281          0.00     0.00     0.00
           37   0.0000        4.9530        4.2047          0.00     0.00     0.00
           38   0.0000        4.9530        3.8812          0.00     0.00     0.00
           39   0.0000        4.9530        3.5578          0.00     0.00     0.00
           40   0.0000        4.9530        3.2344          0.00     0.00     0.00
           41   0.0000        4.9530        2.9109          0.00     0.00     0.00
           42   0.0000        4.9530        2.5875          0.00     0.00     0.00
           43   0.0000        4.9530        2.2641          0.00     0.00     0.00
           44   0.0000        4.9530        1.9406          0.00     0.00     0.00
           45   0.0000        4.9530        1.6172          0.00     0.00     0.00
           46   0.0000        4.9530        1.2937          0.00     0.00     0.00
           47   0.0000        4.9530       0.97031          0.00     0.00     0.00
           48   0.0000        4.9530       0.64688          0.00     0.00     0.00
           49   0.0000        4.9530       0.32344          0.00     0.00     0.00
           50  0.48548        4.9291        0.0000          0.00     0.00     0.00
           51  0.96628        4.8578        0.0000          0.00     0.00     0.00
           52   1.4378        4.7397        0.0000          0.00     0.00     0.00
           53   1.8954        4.5760        0.0000          0.00     0.00     0.00
           54   2.3348        4.3682        0.0000          0.00     0.00     0.00
           55   2.7517        4.1183        0.0000          0.00     0.00     0.00
           56   3.1421        3.8287        0.0000          0.00     0.00     0.00
           57   3.5023        3.5023        0.0000          0.00     0.00     0.00
           58   3.8287        3.1421        0.0000          0.00     0.00     0.00
           59   4.1183        2.7517        0.0000          0.00     0.00     0.00
           60   4.3682        2.3348        0.0000          0.00     0.00     0.00
           61   4.5760        1.8954        0.0000          0.00     0.00     0.00
           62   4.7397        1.4378        0.0000          0.00     0.00     0.00
           63   4.8578       0.96628        0.0000          0.00     0.00     0.00
           64   4.9291       0.48548        0.0000          0.00     0.00     0.00
           65   4.8578       0.96628       0.32344          0.00     0.00     0.00
           66   4.5760        1.8954       0.32344          0.00     0.00     0.00
           67   4.1183        2.7517       0.32344          0.00     0.00     0.00
           68   3.5023        3.5023       0.32344          0.00     0.00     0.00
           69   2.7517        4.1183       0.32344          0.00     0.00     0.00
           70   1.8954        4.5760       0.32344          0.00     0.00     0.00
           71  0.96628        4.8578       0.32344          0.00     0.00     0.00
           72   4.9291       0.48548       0.64687          0.00     0.00     0.00
           73   4.8578       0.96628       0.64687          0.00     0.00     0.00
           74   4.7397        1.4378       0.64687          0.00     0.00     0.00
           75   4.5760        1.8954       0.64687          0.00     0.00     0.00
           76   4.3682        2.3348       0.64687          0.00     0.00     0.00
           77   4.1183        2.7517       0.64688          0.00     0.00     0.00
           78   3.8287        3.1421       0.64688          0.00     0.00     0.00
           79   3.5023        3.5023       0.64688          0.00     0.00     0.00
           80   3.1421        3.8287       0.64688          0.00     0.00     0.00
           81   2.7517        4.1183       0.64688          0.00     0.00     0.00
           82   2.3348        4.3682       0.64688          0.00     0.00     0.00
           83   1.8954        4.5760       0.64688          0.00     0.00     0.00
           84   1.4378        4.7397       0.64688          0.00     0.00     0.00
           85  0.96628        4.8578       0.64688          0.00     0.00     0.00
           86  0.48548        4.9291       0.64688          0.00     0.00     0.00
           87   4.8578       0.96628       0.97031          0.00     0.00     0.00
           88   4.5760        1.8954       0.97031          0.00     0.00     0.00
           89   4.1183        2.7517       0.97031          0.00     0.00     0.00
           90   3.5023        3.5023       0.97031          0.00     0.00     0.00
           91   2.7517        4.1183       0.97031          0.00     0.00     0.00
           92   1.8954        4.5760       0.97031          0.00     0.00     0.00
           93  0.96628        4.8578       0.97031          0.00     0.00     0.00
           94   4.9291       0.48548        1.2937          0.00     0.00     0.00
           95   4.8578       0.96628        1.2937          0.00     0.00     0.00
           96   4.7397        1.4378        1.2937          0.00     0.00     0.00
           97   4.5760        1.8954        1.2937          0.00     0.00     0.00
           98   4.3682        2.3348        1.2937          0.00     0.00     0.00
           99   4.1183        2.7517        1.2937          0.00     0.00     0.00
          100   3.8287        3.1421        1.2937          0.00     0.00     0.00
          101   3.5023        3.5023        1.2937          0.00     0.00     0.00
          102   3.1421        3.8287        1.2938          0.00     0.00     0.00
          103   2.7517        4.1183        1.2938          0.00     0.00     0.00
          104   2.3348        4.3682        1.2938          0.00     0.00     0.00
          105   1.8954        4.5760        1.2937          0.00     0.00     0.00
          106   1.4378        4.7397        1.2938          0.00     0.00     0.00
          107  0.96628        4.8578        1.2938          0.00     0.00     0.00
          108  0.48548        4.9291        1.2938          0.00     0.00     0.00
          109   4.8578       0.96628        1.6172          0.00     0.00     0.00
          110   4.5760        1.8954        1.6172          0.00     0.00     0.00
          111   4.1183        2.7517        1.6172          0.00     0.00     0.00
          112   3.5023        3.5023        1.6172          0.00     0.00     0.00
          113   2.7517        4.1183        1.6172          0.00     0.00     0.00
          114   1.8954        4.5760        1.6172          0.00     0.00     0.00
          115  0.96628        4.8578        1.6172          0.00     0.00     0.00
          116   4.9291       0.48548        1.9406          0.00     0.00     0.00
          117   4.8578       0.96628        1.9406          0.00     0.00     0.00
          118   4.7397        1.4378        1.9406          0.00     0.00     0.00
          119   4.5760        1.8954        1.9406          0.00     0.00     0.00
          120   4.3682        2.3348        1.9406          0.00     0.00     0.00
          121   4.1183        2.7517        1.9406          0.00     0.00     0.00
          122   3.8287        3.1421        1.9406          0.00     0.00     0.00
          123   3.5023        3.5023        1.9406          0.00     0.00     0.00
          124   3.1421        3.8287        1.9406          0.00     0.00     0.00
          125   2.7517        4.1183        1.9406          0.00     0.00     0.00
          126   2.3348        4.3682        1.9406          0.00     0.00     0.00
          127   1.8954        4.5760        1.9406          0.00     0.00     0.00
          128   1.4378        4.7397        1.9406          0.00     0.00     0.00
          129  0.96628        4.8578        1.9406          0.00     0.00     0.00
          130  0.48548        4.9291        1.9406          0.00     0.00     0.00
          131   4.8578       0.96628        2.2641          0.00     0.00     0.00
          132   4.5760        1.8954        2.2641          0.00     0.00     0.00
          133   4.1183        2.7517        2.2641          0.00     0.00     0.00
          134   3.5023        3.5023        2.2641          0.00     0.00     0.00
          135   2.7517        4.1183        2.2641          0.00     0.00     0.00
          136   1.8954        4.5760        2.2641          0.00     0.00     0.00
          137  0.96628        4.8578        2.2641          0.00     0.00     0.00
          138   4.9291       0.48548        2.5875          0.00     0.00     0.00
          139   4.8578       0.96628        2.5875          0.00     0.00     0.00
          140   4.7397        1.4378        2.5875          0.00     0.00     0.00
          141   4.5760        1.8954        2.5875          0.00     0.00     0.00
          142   4.3682        2.3348        2.5875          0.00     0.00     0.00
          143   4.1183        2.7517        2.5875          0.00     0.00     0.00
          144   3.8287        3.1421        2.5875          0.00     0.00     0.00
          145   3.5023        3.5023        2.5875          0.00     0.00     0.00
          146   3.1421        3.8287        2.5875          0.00     0.00     0.00
          147   2.7517        4.1183        2.5875          0.00     0.00     0.00
          148   2.3348        4.3682        2.5875          0.00     0.00     0.00
          149   1.8954        4.5760        2.5875          0.00     0.00     0.00
          150   1.4378        4.7397        2.5875          0.00     0.00     0.00
          151  0.96628        4.8578        2.5875          0.00     0.00     0.00
          152  0.48548        4.9291        2.5875          0.00     0.00     0.00
          153   4.8578       0.96628        2.9109          0.00     0.00     0.00
          154   4.5760        1.8954        2.9109          0.00     0.00     0.00
          155   4.1183        2.7517        2.9109          0.00     0.00     0.00
          156   3.5023        3.5023        2.9109          0.00     0.00     0.00
          157   2.7517        4.1183        2.9109          0.00     0.00     0.00
          158   1.8954        4.5760        2.9109          0.00     0.00     0.00
          159  0.96628        4.8578        2.9109          0.00     0.00     0.00
          160   4.9291       0.48548        3.2344          0.00     0.00     0.00
          161   4.8578       0.96628        3.2344          0.00     0.00     0.00
          162   4.7397        1.4378        3.2344          0.00     0.00     0.00
          163   4.5760        1.8954        3.2344          0.00     0.00     0.00
          164   4.3682        2.3348        3.2344          0.00     0.00     0.00
          165   4.1183        2.7517        3.2344          0.00     0.00     0.00
          166   3.8287        3.1421        3.2344          0.00     0.00     0.00
          167   3.5023        3.5023        3.2344          0.00     0.00     0.00
          168   3.1421        3.8287        3.2344          0.00     0.00     0.00
          169   2.7517        4.1183        3.2344          0.00     0.00     0.00
          170   2.3348        4.3682        3.2344          0.00     0.00     0.00
          171   1.8954        4.5760        3.2344          0.00     0.00     0.00
          172   1.4378        4.7397        3.2344          0.00     0.00     0.00
          173  0.96628        4.8578        3.2344          0.00     0.00     0.00
          174  0.48548        4.9291        3.2344          0.00     0.00     0.00
          175   4.8578       0.96628        3.5578          0.00     0.00     0.00
          176   4.5760        1.8954        3.5578          0.00     0.00     0.00
          177   4.1183        2.7517        3.5578          0.00     0.00     0.00
          178   3.5023        3.5023        3.5578          0.00     0.00     0.00
          179   2.7517        4.1183        3.5578          0.00     0.00     0.00
          180   1.8954        4.5760        3.5578          0.00     0.00     0.00
          181  0.96628        4.8578        3.5578          0.00     0.00     0.00
          182   4.9291       0.48548        3.8812          0.00     0.00     0.00
          183   4.8578       0.96628        3.8812          0.00     0.00     0.00
          184   4.7397        1.4378        3.8812          0.00     0.00     0.00
          185   4.5760        1.8954        3.8812          0.00     0.00     0.00
          186   4.3682        2.3348        3.8812          0.00     0.00     0.00
          187   4.1183        2.7517        3.8812          0.00     0.00     0.00
          188   3.8287        3.1421        3.8813          0.00     0.00     0.00
          189   3.5023        3.5023        3.8813          0.00     0.00     0.00
          190   3.1421        3.8287        3.8813          0.00     0.00     0.00
          191   2.7517        4.1183        3.8813          0.00     0.00     0.00
          192   2.3348        4.3682        3.8813          0.00     0.00     0.00
          193   1.8954        4.5760        3.8813          0.00     0.00     0.00
          194   1.4378        4.7397        3.8813          0.00     0.00     0.00
          195  0.96628        4.8578        3.8813          0.00     0.00     0.00
          196  0.48548        4.9291        3.8813          0.00     0.00     0.00
          197   4.8578       0.96628        4.2047          0.00     0.00     0.00
          198   4.5760        1.8954        4.2047          0.00     0.00     0.00
          199   4.1183        2.7517        4.2047          0.00     0.00     0.00
          200   3.5023        3.5023        4.2047          0.00     0.00     0.00
          201   2.7517        4.1183        4.2047          0.00     0.00     0.00
          202   1.8954        4.5760        4.2047          0.00     0.00     0.00
          203  0.96628        4.8578        4.2047          0.00     0.00     0.00
          204   4.9291       0.48548        4.5281          0.00     0.00     0.00
          205   4.8578       0.96628        4.5281          0.00     0.00     0.00
          206   4.7397        1.4378        4.5281          0.00     0.00     0.00
          207   4.5760        1.8954        4.5281          0.00     0.00     0.00
          208   4.3682        2.3348        4.5281          0.00     0.00     0.00
          209   4.1183        2.7517        4.5281          0.00     0.00     0.00
          210   3.8287        3.1421        4.5281          0.00     0.00     0.00
          211   3.5023        3.5023        4.5281          0.00     0.00     0.00
          212   3.1421        3.8287        4.5281          0.00     0.00     0.00
          213   2.7517        4.1183        4.5281          0.00     0.00     0.00
          214   2.3348        4.3682        4.5281          0.00     0.00     0.00
          215   1.8954        4.5760        4.5281          0.00     0.00     0.00
          216   1.4378        4.7397        4.5281          0.00     0.00     0.00
          217  0.96628        4.8578        4.5281          0.00     0.00     0.00
          218  0.48548        4.9291        4.5281          0.00     0.00     0.00
          219   4.8578       0.96628        4.8516          0.00     0.00     0.00
          220   4.5760        1.8954        4.8516          0.00     0.00     0.00
          221   4.1183        2.7517        4.8516          0.00     0.00     0.00
          222   3.5023        3.5023        4.8516          0.00     0.00     0.00
          223   2.7517        4.1183        4.8516          0.00     0.00     0.00
          224   1.8954        4.5760        4.8516          0.00     0.00     0.00
          225  0.96628        4.8578        4.8516          0.00     0.00     0.00




.. GENERATED FROM PYTHON SOURCE LINES 393-396

Solve
~~~~~
Enter solution mode and solve the system. Print the solver output.

.. GENERATED FROM PYTHON SOURCE LINES 396-400

.. code-block:: default


    solve_procedure()






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    *****  ANSYS SOLVE    COMMAND  *****

     TRANSFER SOLID MODEL BOUNDARY CONDITIONS TO FINITE ELEMENT MODEL
          FORCES         TRANSFERRED FROM KEYPOINTS     =      1

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     There is no title defined for this analysis.                            

     *** SELECTION OF ELEMENT TECHNOLOGIES FOR APPLICABLE ELEMENTS ***
                    ---GIVE SUGGESTIONS ONLY---

     ELEMENT TYPE         1 IS SHELL281. IT IS ASSOCIATED WITH ELASTOPLASTIC 
     MATERIALS ONLY. KEYOPT(8)=2 IS SUGGESTED.


       *****ANSYS VERIFICATION RUN ONLY*****
         DO NOT USE RESULTS FOR PRODUCTION

                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  
       DEGREES OF FREEDOM. . . . . . UX   UY   UZ   ROTX ROTY ROTZ
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     Present time 0 is less than or equal to the previous time.  Time will   
     default to 1.                                                           

     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1
       TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    
       NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1
       STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN
                                                      FOR THE LAST SUBSTEP


     *** NOTE ***                            CP =       0.000   TIME= 00:00:00
     Predictor is ON by default for structural elements with rotational      
     degrees of freedom.  Use the PRED,OFF command to turn the predictor     
     OFF if it adversely affects the convergence.                            


     Range of element maximum matrix coefficients in global coordinates
     Maximum = 3034922.21 at element 0.                                      
     Minimum = 3034922.21 at element 0.                                      

       *** ELEMENT MATRIX FORMULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL281      0.000   0.000000
     Time at end of element matrix formulation CP = 0.                       

     SPARSE MATRIX DIRECT SOLVER.
      Number of equations =        1199,    Maximum wavefront =      0
      Memory available (MB) =    0.0    ,  Memory required (MB) =    0.0    

     Sparse solver maximum pivot= 0 at node 0 .                              
     Sparse solver minimum pivot= 0 at node 0 .                              
     Sparse solver minimum pivot in absolute value= 0 at node 0 .            

       *** ELEMENT RESULT CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL281      0.000   0.000000

       *** NODAL LOAD CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1        64  SHELL281      0.000   0.000000
     *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1
     *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX



.. GENERATED FROM PYTHON SOURCE LINES 401-406

Post-processing
~~~~~~~~~~~~~~~
Enter post-processing for the model with elements ``shell281``.
Plotting nodal displacement.
Get the the radial displacement at the node where force F is applied.

.. GENERATED FROM PYTHON SOURCE LINES 406-412

.. code-block:: default


    post_processing()
    plot_nodal_disp()
    top_node_281, deflect_shell_281 = get_displacements()





.. image-sg:: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_007.png
   :alt: vm 006 pinched cylinder
   :srcset: /examples/gallery_examples/06-verif-manual/images/sphx_glr_vm-006-pinched_cylinder_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 413-419

Check Results
~~~~~~~~~~~~~
Now we have the deflections, we can compare them to the expected values
of radial deflection at the node where force :math:`F` was applied
for both simulations. The expected value for :math:`\delta_{\mathrm{shell181}}` is 0.1139,
and :math:`\delta_{\mathrm{shell281}}` is 0.1139.

.. GENERATED FROM PYTHON SOURCE LINES 419-441

.. code-block:: default


    # Results obtained by hand-calculations.
    deflect_target_181 = 0.1139
    deflect_target_281 = 0.1139

    # Calculate the deviation.
    deflect_ratio_shell_181 = abs(deflect_shell_181) / deflect_target_181
    deflect_ratio_shell_281 = abs(deflect_shell_281) / deflect_target_281

    # Print output results.
    output = f"""
    ----------------------------------------------------------------------------
    ------------------------- VM3 RESULTS COMPARISON ---------------------------
    ----------------------------------------------------------------------------
                                |   TARGET   |   Mechanical APDL   |   RATIO   |
    ----------------------------------------------------------------------------
        Deflection, in SHELL181{deflect_target_181:11.4f} {abs(deflect_shell_181):17.4f} {deflect_ratio_shell_181:15.3f}
        Deflection, in SHELL281{deflect_target_281:11.4f} {abs(deflect_shell_281):17.4f} {deflect_ratio_shell_281:15.3f}
    ----------------------------------------------------------------------------
    """
    print(output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ----------------------------------------------------------------------------
    ------------------------- VM3 RESULTS COMPARISON ---------------------------
    ----------------------------------------------------------------------------
                                |   TARGET   |   Mechanical APDL   |   RATIO   |
    ----------------------------------------------------------------------------
        Deflection, in SHELL181     0.1139            0.1100           0.965
        Deflection, in SHELL281     0.1139            0.1137           0.998
    ----------------------------------------------------------------------------





.. GENERATED FROM PYTHON SOURCE LINES 442-443

stop mapdl

.. GENERATED FROM PYTHON SOURCE LINES 443-444

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.510 seconds)


.. _sphx_glr_download_examples_gallery_examples_06-verif-manual_vm-006-pinched_cylinder.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: vm-006-pinched_cylinder.py <vm-006-pinched_cylinder.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: vm-006-pinched_cylinder.ipynb <vm-006-pinched_cylinder.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
