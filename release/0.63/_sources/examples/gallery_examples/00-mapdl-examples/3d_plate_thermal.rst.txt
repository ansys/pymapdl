
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/gallery_examples/00-mapdl-examples/3d_plate_thermal.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py:


.. _ref_3d_plate_thermal:

Basic Thermal Analysis with pyMAPDL
-----------------------------------

This example demonstrates how you can use MAPDL to create a plate,
impose thermal boundary conditions, solve, and plot it all within
pyMAPDL.

First, start MAPDL as a service and disable all but error messages.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: default


    # sphinx_gallery_thumbnail_number = 2

    from ansys.mapdl.core import launch_mapdl

    mapdl = launch_mapdl()








.. GENERATED FROM PYTHON SOURCE LINES 21-24

Geometry and Material Properties
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create a simple beam, specify the material properties, and mesh it.

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: default

    mapdl.prep7()
    mapdl.mp("kxx", 1, 45)
    mapdl.et(1, 90)
    mapdl.block(-0.3, 0.3, -0.46, 1.34, -0.2, -0.2 + 0.02)
    mapdl.vsweep(1)
    mapdl.eplot()





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_001.png
   :alt: 3d plate thermal
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 33-36

Boundary Conditions
~~~~~~~~~~~~~~~~~~~
Set the thermal boundary conditions

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: default

    mapdl.asel("S", vmin=3)
    mapdl.nsla()
    mapdl.d("all", "temp", 5)
    mapdl.asel("S", vmin=4)
    mapdl.nsla()
    mapdl.d("all", "temp", 100)
    out = mapdl.allsel()









.. GENERATED FROM PYTHON SOURCE LINES 46-49

Solve
~~~~~
Solve the thermal static analysis and print the results

.. GENERATED FROM PYTHON SOURCE LINES 49-55

.. code-block:: default

    mapdl.vsweep(1)
    mapdl.run("/SOLU")
    print(mapdl.solve())
    out = mapdl.finish()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    *****  MAPDL SOLVE    COMMAND  *****

     *** NOTE ***                            CP =      45.898   TIME= 09:08:23
     There is no title defined for this analysis.                            

     *** MAPDL - ENGINEERING ANALYSIS SYSTEM  RELEASE                  22.2     ***
     Ansys Mechanical Enterprise                       
     00000000  VERSION=LINUX x64     09:08:23  DEC 08, 2022 CP=     45.900

                                                                               



                           S O L U T I O N   O P T I O N S

       PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  
       DEGREES OF FREEDOM. . . . . . TEMP
       ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)
       GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  

     *** NOTE ***                            CP =      45.901   TIME= 09:08:23
     Present time 0 is less than or equal to the previous time.  Time will   
     default to 1.                                                           

     *** NOTE ***                            CP =      45.901   TIME= 09:08:23
     The conditions for direct assembly have been met.  No .emat or .erot    
     files will be produced.                                                 

                          L O A D   S T E P   O P T I O N S

       LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1
       TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    
       NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1
       STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO
       PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT
       DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN
                                                      FOR THE LAST SUBSTEP


     SOLUTION MONITORING INFO IS WRITTEN TO FILE= file.mntr                                                                                                                                                                                                                                                           


     Range of element maximum matrix coefficients in global coordinates
     Maximum = 13.6474747 at element 449.                                    
     Minimum = 13.6474747 at element 105.                                    

       *** ELEMENT MATRIX FORMULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.043   0.000096
     Time at end of element matrix formulation CP = 45.9494133.              

     SPARSE MATRIX DIRECT SOLVER.
      Number of equations =        2606,    Maximum wavefront =     72
      Memory allocated for solver              =     4.813 MB
      Memory required for in-core solution     =     4.639 MB
      Memory required for out-of-core solution =     2.499 MB

     *** NOTE ***                            CP =      46.014   TIME= 09:08:23
     The Sparse Matrix Solver is currently running in the in-core memory     
     mode.  This memory mode uses the most amount of memory in order to      
     avoid using the hard drive as much as possible, which most often        
     results in the fastest solution time.  This mode is recommended if      
     enough physical memory is present to accommodate all of the solver      
     data.                                                                   
     Sparse solver maximum pivot= 29.5686693 at node 2185 TEMP.              
     Sparse solver minimum pivot= 0.585450932 at node 2282 TEMP.             
     Sparse solver minimum pivot in absolute value= 0.585450932 at node 2282 
     TEMP.                                                                   

       *** ELEMENT RESULT CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.026   0.000058

       *** NODAL LOAD CALCULATION TIMES
         TYPE    NUMBER   ENAME      TOTAL CP  AVE CP

            1       450  SOLID90       0.023   0.000051
     *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1
     *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX


     *** MAPDL BINARY FILE STATISTICS
      BUFFER SIZE USED= 16384
            1.062 MB WRITTEN ON ASSEMBLED MATRIX FILE: file.full
            0.750 MB WRITTEN ON RESULTS FILE: file.rth




.. GENERATED FROM PYTHON SOURCE LINES 56-60

Post-Processing using MAPDL
~~~~~~~~~~~~~~~~~~~~~~~~~~~
View the thermal solution of the beam by getting the results
directly through MAPDL.

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default

    mapdl.post1()
    mapdl.set(1, 1)
    mapdl.post_processing.plot_nodal_temperature()





.. image-sg:: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_002.png
   :alt: 3d plate thermal
   :srcset: /examples/gallery_examples/00-mapdl-examples/images/sphx_glr_3d_plate_thermal_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 66-68

Alternatively you could also use the result object that reads in the
result file using pyansys

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: default


    result = mapdl.result
    nnum, temp = result.nodal_temperature(0)
    # this is the same as pyansys.read_binary(mapdl._result_file)
    print(nnum, temp)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [    1     2     3 ... 12715 12716 12717] [0. 0. 0. ... 0. 0. 0.]




.. GENERATED FROM PYTHON SOURCE LINES 75-76

stop mapdl

.. GENERATED FROM PYTHON SOURCE LINES 76-77

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.243 seconds)


.. _sphx_glr_download_examples_gallery_examples_00-mapdl-examples_3d_plate_thermal.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3d_plate_thermal.py <3d_plate_thermal.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3d_plate_thermal.ipynb <3d_plate_thermal.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
