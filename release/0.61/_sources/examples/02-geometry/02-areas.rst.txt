
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02-geometry/02-areas.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_02-geometry_02-areas.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02-geometry_02-areas.py:


.. _ref_basic-geometry-areas:

Areas
-----
This example shows how you can use PyMAPDL to create basic geometry
using Pythonic PREP7 area commands.

.. GENERATED FROM PYTHON SOURCE LINES 10-22

.. code-block:: default


    import numpy as np

    from ansys.mapdl.core import launch_mapdl

    # start MAPDL and enter the pre-processing routine
    mapdl = launch_mapdl()
    mapdl.clear()
    mapdl.prep7()
    print(mapdl)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Product:             Ansys Mechanical Enterprise
    MAPDL Version:       21.2
    ansys.mapdl Version: 0.61.7





.. GENERATED FROM PYTHON SOURCE LINES 23-26

APDL Command: A
~~~~~~~~~~~~~~~
Create a simple triangle in the XY plane using three keypoints.

.. GENERATED FROM PYTHON SOURCE LINES 26-34

.. code-block:: default


    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    k2 = mapdl.k("", 0, 1, 0)
    a0 = mapdl.a(k0, k1, k2)
    mapdl.aplot(show_lines=True, line_width=5, show_bounds=True, cpos="xy")





.. image-sg:: /examples/02-geometry/images/sphx_glr_02-areas_001.png
   :alt: 02 areas
   :srcset: /examples/02-geometry/images/sphx_glr_02-areas_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 35-38

APDL Command: AL
~~~~~~~~~~~~~~~~
Create an area from four lines.

.. GENERATED FROM PYTHON SOURCE LINES 38-53

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 1, 0, 0)
    k2 = mapdl.k("", 1, 1, 0)
    k3 = mapdl.k("", 0, 1, 0)
    l0 = mapdl.l(k0, k1)
    l1 = mapdl.l(k1, k2)
    l2 = mapdl.l(k2, k3)
    l3 = mapdl.l(k3, k0)
    anum = mapdl.al(l0, l1, l2, l3)
    mapdl.aplot(show_lines=True, line_width=5, show_bounds=True, cpos="xy")





.. image-sg:: /examples/02-geometry/images/sphx_glr_02-areas_002.png
   :alt: 02 areas
   :srcset: /examples/02-geometry/images/sphx_glr_02-areas_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 54-59

APDL Command: ADRAG
~~~~~~~~~~~~~~~~~~~
Generate areas by dragging a line pattern along a path.

Drag a circle between two keypoints to create an area

.. GENERATED FROM PYTHON SOURCE LINES 59-70

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    k0 = mapdl.k("", 0, 0, 0)
    k1 = mapdl.k("", 0, 0, 1)
    carc = mapdl.circle(k0, 1, k1, arc=90)
    l0 = mapdl.l(k0, k1)
    mapdl.adrag(carc[0], nlp1=l0)
    mapdl.aplot(show_lines=True, line_width=5, show_bounds=True, smooth_shading=True)





.. image-sg:: /examples/02-geometry/images/sphx_glr_02-areas_003.png
   :alt: 02 areas
   :srcset: /examples/02-geometry/images/sphx_glr_02-areas_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 71-74

APDL Command: ASBA
~~~~~~~~~~~~~~~~~~
Subtract a ``0.5 x 0.5`` rectangle from a ``1 x 1`` rectangle.

.. GENERATED FROM PYTHON SOURCE LINES 74-83

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()

    anum0 = mapdl.blc4(0, 0, 1, 1)
    anum1 = mapdl.blc4(0.25, 0.25, 0.5, 0.5)
    aout = mapdl.asba(anum0, anum1)
    mapdl.aplot(show_lines=True, line_width=5, show_bounds=True, cpos="xy")





.. image-sg:: /examples/02-geometry/images/sphx_glr_02-areas_004.png
   :alt: 02 areas
   :srcset: /examples/02-geometry/images/sphx_glr_02-areas_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 84-87

Area IDs
~~~~~~~~
Return an array of the area IDs

.. GENERATED FROM PYTHON SOURCE LINES 87-91

.. code-block:: default

    anum = mapdl.geometry.anum
    anum






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([3], dtype=int32)



.. GENERATED FROM PYTHON SOURCE LINES 92-100

Area Geometry
~~~~~~~~~~~~~
Get the VTK ``PolyData`` containing lines.  This VTK mesh can be
saved or plotted.  For more details, visit https://docs.pyvista.com

Note that this is a method so you can select the quality of the
areas (mesh density), and if you would like a merged output or
individual meshes.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default

    areas = mapdl.geometry.areas(quality=3)
    areas






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [UnstructuredGrid (0x7fe0854e36a0)
      N Cells:	12
      N Points:	24
      X Bounds:	0.000e+00, 1.000e+00
      Y Bounds:	0.000e+00, 1.000e+00
      Z Bounds:	0.000e+00, 0.000e+00
      N Arrays:	3
    ]



.. GENERATED FROM PYTHON SOURCE LINES 105-107

Merged Area Geometry
~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 107-115

.. code-block:: default

    area = mapdl.geometry.areas(quality=3, merge=True)
    area

    # optionally save the area, or plot it
    # area.save('mesh.vtk')
    # area.plot()







.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table>
    <tr><th>PolyData</th><th>Information</th></tr>
    <tr><td>N Cells</td><td>12</td></tr>
    <tr><td>N Points</td><td>24</td></tr>
    <tr><td>X Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Y Bounds</td><td>0.000e+00, 1.000e+00</td></tr>
    <tr><td>Z Bounds</td><td>0.000e+00, 0.000e+00</td></tr>
    <tr><td>N Arrays</td><td>1</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Name</th><th>Field</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td><b>entity_num</b></td><td>Cells</td><td>int32</td><td>1</td><td>3.000e+00</td><td>3.000e+00</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 116-124

Area Selection
~~~~~~~~~~~~~~
There are two approaches for selecting areas, the old "legacy" style
and the new style.  The old style is valuable for those who are
comfortable with the existing MAPDL commands, and new style is
useful for selecting areas in a pythonic manner.

This example generates a series of random squares and selects them

.. GENERATED FROM PYTHON SOURCE LINES 124-141

.. code-block:: default

    mapdl.clear()
    mapdl.prep7()


    def generate_random_area():
        start_x, start_y, height, width = np.random.random(4)
        mapdl.blc4(start_x * 10, start_y * 10, height, width)


    # create 20 random rectangles
    for i in range(20):
        generate_random_area()

    # Print the area numbers
    print(mapdl.geometry.anum)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]




.. GENERATED FROM PYTHON SOURCE LINES 142-143

Select every other area with the old style command.

.. GENERATED FROM PYTHON SOURCE LINES 143-147

.. code-block:: default

    mapdl.asel("S", "AREA", "", 1, 20, 2)
    print(mapdl.geometry.anum)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1  3  5  7  9 11 13 15 17 19]




.. GENERATED FROM PYTHON SOURCE LINES 148-151

Select every other area with the new style command.

Note that the Area IDs are 1 based in MAPDL, while Python ranges are 0 based.

.. GENERATED FROM PYTHON SOURCE LINES 151-155

.. code-block:: default

    mapdl.geometry.area_select(range(1, 21, 2))
    print(mapdl.geometry.anum)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1  3  5  7  9 11 13 15 17 19]




.. GENERATED FROM PYTHON SOURCE LINES 156-161

Select areas from a list

Note that you can ``return_selected`` if you want to see what you
have selected.  This is helpful when reselecting from existing
areas.

.. GENERATED FROM PYTHON SOURCE LINES 161-165

.. code-block:: default

    items = mapdl.geometry.area_select([1, 5, 10, 20], return_selected=True)
    print(items)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [ 1  5 10 20]




.. GENERATED FROM PYTHON SOURCE LINES 166-185

APDL Command: APLOT
~~~~~~~~~~~~~~~~~~~
This method uses VTK and pyvista to generate a dynamic 3D plot.

There are a variety of plotting options available for all the common
plotting methods.  Here, we enable the bounds and show the lines of
the plot while increasing the plot quality with the ``quality``
parameter.

Note that the `cpos` keyword argument can be used to describe the
camera direction from the following:

- 'iso' - Isometric view
- 'xy' - XY Plane view
- 'xz' - XZ Plane view
- 'yx' - YX Plane view
- 'yz' - YZ Plane view
- 'zx' - ZX Plane view
- 'zy' - ZY Plane view

.. GENERATED FROM PYTHON SOURCE LINES 185-188

.. code-block:: default


    mapdl.aplot(quality=1, show_bounds=True, cpos="iso", show_lines=True)




.. image-sg:: /examples/02-geometry/images/sphx_glr_02-areas_005.png
   :alt: 02 areas
   :srcset: /examples/02-geometry/images/sphx_glr_02-areas_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 189-190

stop mapdl

.. GENERATED FROM PYTHON SOURCE LINES 190-191

.. code-block:: default

    mapdl.exit()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.228 seconds)


.. _sphx_glr_download_examples_02-geometry_02-areas.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 02-areas.py <02-areas.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 02-areas.ipynb <02-areas.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
