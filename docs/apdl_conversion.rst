APDL Conversion Examples
========================
ANSYS APDL contains over 200 verification files used for ANSYS validation and demonstration.  These validation files are used here to demo the use of the ``pyansys`` file translator ``pyansys.convert_script``.

Of particular note in the following examples is how most of the commands can be called as a method to the ansys object rather than sending a string as a command.  Additionally, take note that some commands require the ``with ansys.non_interactive:`` directive since some commands require and will break the CORBA server connection.  Also note that APDL macros that use ``*CREATE`` have been replaced with a python function.  This will make the code easier to debug should it be necessary to insert a break point in the code.

Ideally, all math and variable setting would take place within Python as much as possible as APDL math is much less transparent and more difficult to debug.  These examples only show an automatic translation of a verification file and not optimized code.  Should it be necessary to pull parameters or arrays from ansys, use the ``*GET`` command in conjunction with ``ansys.load_parameters``.  For example:

.. code:: python

   ansys.get('DEF_Y', 'NODE' , 2, 'U' ,'Y')
   ansys.load_parameters()

The parameters are now acessable within the ``ANSYS`` object:

.. code:: python

    >>> ansys.parameters
    {'AAS_MAPD': 1.0,
     'DEF_X': 8.631926066372,
     'DEF_Y': 4.532094298033,
     'ST_EN': 24.01187254488,
     '_RETURN': 0.0,
     '_STATUS': 1.0}

    >>> ansys.parameters['DEF_Y']
    4.532094298033


VM1 - Statically Indeterminate Reaction Force Analysis
------------------------------------------------------
HTML overview `VM1 <https://www.sharcnet.ca/Software/Ansys/17.0/en-us/help/ans_vm/Hlp_V_VM1.html>`_

ANSYS APDL code:

.. code::

    /COM,ANSYS MEDIA REL. 150 (11/8/2013) REF. VERIF. MANUAL: REL. 150
    /VERIFY,VM1
    /PREP7
    /TITLE, VM1, STATICALLY INDETERMINATE REACTION FORCE ANALYSIS
    C***      STR. OF MATL., TIMOSHENKO, PART 1, 3RD ED., PAGE 26, PROB.10
    ANTYPE,STATIC                  ! STATIC ANALYSIS
    ET,1,LINK180
    SECTYPE,1,LINK
    SECDATA,1  			       ! CROSS SECTIONAL AREA (ARBITRARY) = 1
    MP,EX,1,30E6
    N,1
    N,2,,4
    N,3,,7
    N,4,,10
    E,1,2                          ! DEFINE ELEMENTS
    EGEN,3,1,1
    D,1,ALL,,,4,3                  ! BOUNDARY CONDITIONS AND LOADING
    F,2,FY,-500
    F,3,FY,-1000
    FINISH
    /SOLU    
    OUTPR,BASIC,1
    OUTPR,NLOAD,1
    SOLVE
    FINISH
    /POST1
    NSEL,S,LOC,Y,10
    FSUM
    *GET,REAC_1,FSUM,,ITEM,FY
    NSEL,S,LOC,Y,0
    FSUM
    *GET,REAC_2,FSUM,,ITEM,FY
    
    *DIM,LABEL,CHAR,2
    *DIM,VALUE,,2,3
    LABEL(1) = 'R1, lb','R2, lb '
    *VFILL,VALUE(1,1),DATA,900.0,600.0
    *VFILL,VALUE(1,2),DATA,ABS(REAC_1),ABS(REAC_2)
    *VFILL,VALUE(1,3),DATA,ABS(REAC_1 / 900) ,ABS( REAC_2 / 600)
    /OUT,vm1,vrt
    /COM
    /COM,------------------- VM1 RESULTS COMPARISON ---------------------
    /COM,
    /COM,         |   TARGET   |   Mechanical APDL   |   RATIO
    /COM,
    *VWRITE,LABEL(1),VALUE(1,1),VALUE(1,2),VALUE(1,3)
    (1X,A8,'   ',F10.1,'  ',F10.1,'   ',1F5.3)
    /COM,----------------------------------------------------------------
    /OUT
    FINISH
    *LIST,vm1,vrt

This verification file was translated using:

.. code:: python

    import pyansys
    pyansys.convert_script('vm1.dat', 'vm1.py')

Translated code:

.. code:: python

    """ Script generated by pyansys version 0.30.1"""
    import pyansys
    ansys = pyansys.Mapdl("/usr/ansys_inc/v182/ansys/bin/ansys182", loglevel="INFO")
    ansys.run("/COM,ANSYS MEDIA REL. 150 (11/8/2013) REF. VERIF. MANUAL: REL. 150")
    ansys.run("/VERIFY,VM1")
    ansys.run("/PREP7")
    ansys.run("/TITLE, VM1, STATICALLY INDETERMINATE REACTION FORCE ANALYSIS")
    ansys.run("C***      STR. OF MATL., TIMOSHENKO, PART 1, 3RD ED., PAGE 26, PROB.10")
    ansys.antype("STATIC")  #STATIC ANALYSIS
    ansys.et(1, "LINK180")
    ansys.sectype(1, "LINK")
    ansys.secdata(1)  #CROSS SECTIONAL AREA (ARBITRARY) = 1
    ansys.mp("EX", 1, 30E6)
    ansys.n(1)
    ansys.n(2, "", 4)
    ansys.n(3, "", 7)
    ansys.n(4, "", 10)
    ansys.e(1, 2)  #DEFINE ELEMENTS
    ansys.egen(3, 1, 1)
    ansys.d(1, "ALL", "", "", 4, 3)  #BOUNDARY CONDITIONS AND LOADING
    ansys.f(2, "FY", -500)
    ansys.f(3, "FY", -1000)
    ansys.finish()
    ansys.run("/SOLU")
    ansys.outpr("BASIC", 1)
    ansys.outpr("NLOAD", 1)
    ansys.solve()
    ansys.finish()
    ansys.run("/POST1")
    ansys.nsel("S", "LOC", "Y", 10)
    ansys.fsum()
    ansys.run("*GET,REAC_1,FSUM,,ITEM,FY")
    ansys.nsel("S", "LOC", "Y", 0)
    ansys.fsum()
    ansys.run("*GET,REAC_2,FSUM,,ITEM,FY")
    ansys.run("*DIM,LABEL,CHAR,2")
    ansys.run("*DIM,VALUE,,2,3")
    ansys.run("LABEL(1) = 'R1, lb','R2, lb '")
    ansys.run("*VFILL,VALUE(1,1),DATA,900.0,600.0")
    ansys.run("*VFILL,VALUE(1,2),DATA,ABS(REAC_1),ABS(REAC_2)")
    ansys.run("*VFILL,VALUE(1,3),DATA,ABS(REAC_1 / 900) ,ABS( REAC_2 / 600)")
    ansys.run("/OUT,vm1,vrt")
    ansys.run("/COM")
    ansys.run("/COM,------------------- VM1 RESULTS COMPARISON ---------------------")
    ansys.run("/COM,")
    ansys.run("/COM,         |   TARGET   |   Mechanical APDL   |   RATIO")
    ansys.run("/COM,")
    with ansys.non_interactive:
        ansys.run("*VWRITE,LABEL(1),VALUE(1,1),VALUE(1,2),VALUE(1,3)")
        ansys.run("(1X,A8,'   ',F10.1,'  ',F10.1,'   ',1F5.3)")
    ansys.run("/COM,----------------------------------------------------------------")
    ansys.run("/OUT")
    ansys.finish()
    ansys.run("*LIST,vm1,vrt")
    ansys.exit()


Results from running the converted file:

.. code::

    2018-08-20 23:23:35,022 [INFO] pyansys.ansys:
    ------------------- VM1 RESULTS COMPARISON ---------------------
    |   TARGET   |   Mechanical APDL   |   RATIO
    /INPUT FILE=    LINE=       0
    R1, lb          900.0       900.0   1.000
    R2, lb          600.0       600.0   1.000
    ----------------------------------------------------------------


VM7 - Plastic Compression of a Pipe Assembly
--------------------------------------------
HTML overview `VM7 <https://www.sharcnet.ca/Software/Ansys/17.0/en-us/help/ans_vm/Hlp_V_VM7.html>`_

ANSYS APDL code:

.. code::

    /COM,ANSYS MEDIA REL. 150 (11/8/2013) REF. VERIF. MANUAL: REL. 150
    /VERIFY,VM7
    /PREP7
    /TITLE, VM7, PLASTIC COMPRESSION OF A PIPE ASSEMBLY
    C***          MECHANICS OF SOLIDS, CRANDALL AND DAHL, 1959, PAGE 180, EX. 5.1
    C***          USING PIPE288, SOLID185 AND SHELL181 ELEMENTS
    THETA=6                              ! SUBTENDED ANGLE
    ET,1,PIPE288,,,,2
    ET,2,SOLID185
    ET,3,SHELL181,,,2                    ! FULL INTEGRATION
    SECTYPE,1,SHELL
    SECDATA,0.5,1,0,5	                   ! THICKNESS (SHELL181)
    SECTYPE,2,SHELL
    SECDATA,0.5,2,0,5	                   ! THICKNESS (SHELL181)
    SECTYPE,3,PIPE
    SECDATA,4.9563384,0.5                ! OUTSIDE DIA. AND WALL THICKNESS FOR INSIDE TUBE (PIPE288)
    SECTYPE,4,PIPE
    SECDATA,8.139437,0.5                 ! OUTSIDE DIA. AND WALL THICKNESS FOR OUTSIDE TUBE (PIPE288)
    MP,EX  ,1,26.875E6                   ! STEEL
    MP,PRXY,1,0.3
    MP,EX  ,2,11E6                       ! ALUMINUM
    MP,PRXY,2,0.3
    TB,BKIN,1,1                          ! DEFINE NON-LINEAR MATERIAL PROPERTY FOR STEEL
    TBTEMP,0
    TBDATA,1,86000,0
    TB,BKIN,2,1                          ! DEFINE NON-LINEAR MATERIAL PROPERTY FOR ALUMINUM
    TBTEMP,0
    TBDATA,1,55000,0
    N,1                                  ! GENERATE NODES AND ELEMENTS FOR PIPE288
    N,2,,,10
    MAT,1  
    SECNUM,3                             ! STEEL (INSIDE) TUBE
    E,1,2
    MAT,2  
    SECNUM,4                             ! ALUMINUM (OUTSIDE) TUBE
    E,1,2
    CSYS,1
    N,101,1.9781692                      ! GENERATE NODES AND ELEMENTS FOR SOLID185
    N,102,2.4781692
    N,103,3.5697185
    N,104,4.0697185
    N,105,1.9781692,,10
    N,106,2.4781692,,10
    N,107,3.5697185,,10
    N,108,4.0697185,,10
    NGEN,2,10,101,108,,,THETA            ! GENERATE 2ND SET OF NODES TO FORM A THETA DEGREE SLICE
    NROTAT,101,118,1
    TYPE,2
    MAT,1                                ! INSIDE (STEEL) TUBE
    E,101,102,112,111,105,106,116,115
    MAT,2                                ! OUTSIDE (ALUMINUM) TUBE
    E,103,104,114,113,107,108,118,117
    N,201,2.2281692                      ! GENERATE NODES AND ELEMENTS FOR SHELL181
    N,203,2.2281692,,10
    N,202,3.8197185
    N,204,3.8197185,,10
    NGEN,2,4,201,204,,,THETA             ! GENERATE NODES TO FORM A THETA DEGREE SLICE
    TYPE,3
    SECNUM,1                             ! INSIDE (STEEL) TUBE
    E,203,201,205,207
    SECNUM,2                             ! OUTSIDE (ALUMINUM) TUBE
    E,204,202,206,208
    C*** APPLY CONSTRAINTS TO PIPE288 MODEL
    D,1,ALL                              ! FIX ALL DOFS FOR BOTTOM END OF PIPE288
    D,2,UX,,,,,UY,ROTX,ROTY,ROTZ         ! ALLOW ONLY UZ DOF AT TOP END OF PIPE288 MODEL
    C*** APPLY CONSTRAINTS TO SOLID185 AND SHELL181 MODELS
    CP,1,UX,101,111,105,115              ! COUPLE NODES AT BOUNDARY IN RADIAL DIR FOR SOLID185
    CPSGEN,4,,1
    CP,5,UX,201,205,203,20               ! COUPLE NODES AT BOUNDARY IN RADIAL DIR FOR SHELL181
    CPSGEN,2,,5
    CP,7,ROTY,201,205                    ! COUPLE NODES AT BOUNDARY IN ROTY DIR FOR SHELL181
    CPSGEN,4,,7
    NSEL,S,NODE,,101,212                 ! SELECT ONLY NODES IN SOLID185 AND SHELL181 MODELS
    NSEL,R,LOC,Y,0                       ! SELECT NODES AT THETA = 0 FROM THE SELECTED SET
    DSYM,SYMM,Y,1                        ! APPLY SYMMETRY BOUNDARY CONDITIONS
    NSEL,S,NODE,,101,212                 ! SELECT ONLY NODES IN SOLID185 AND SHELL181 MODELS
    NSEL,R,LOC,Y,THETA                   ! SELECT NODES AT THETA FROM THE SELECTED SET
    DSYM,SYMM,Y,1                        ! APPLY SYMMETRY BOUNDARY CONDITIONS
    NSEL,ALL
    NSEL,R,LOC,Z,0                       ! SELECT ONLY NODES AT Z = 0
    D,ALL,UZ,0                           ! CONSTRAIN BOTTOM NODES IN Z DIRECTION
    NSEL,ALL
    FINISH
    /SOLU    
    OUTPR,BASIC,LAST                     ! PRINT BASIC SOLUTION AT END OF LOAD STEP
    C*** APPLY DISPLACEMENT LOADS TO ALL MODELS
    *CREATE,DISP
    NSEL,R,LOC,Z,10                      ! SELECT NODES AT Z = 10 TO APPLY DISPLACEMENT
    D,ALL,UZ,ARG1
    NSEL,ALL
    /OUT,SCRATCH
    SOLVE
    *END
    *USE,DISP,-.032
    *USE,DISP,-.05
    *USE,DISP,-.1
    FINISH
    /OUT,
    /POST1
    C*** CREATE MACRO TO GET RESULTS FOR EACH MODEL
    *CREATE,GETLOAD
    NSEL,S,NODE,,1,2                    ! SELECT NODES IN PIPE288 MODEL
    NSEL,R,LOC,Z,0
    /OUT,SCRATCH
    FSUM                                ! FZ IS TOTAL LOAD FOR PIPE288 MODEL
    *GET,LOAD_288,FSUM,,ITEM,FZ
    NSEL,S,NODE,,101,118                ! SELECT NODES IN SOLID185 MODEL
    NSEL,R,LOC,Z,0
    FSUM
    *GET,ZFRC,FSUM,0,ITEM,FZ
    LOAD=ZFRC*360/THETA                 ! MULTIPLY BY 360/THETA FOR FULL 360 DEGREE RESULTS
    *STATUS,LOAD
    LOAD_185 = LOAD
    NSEL,S,NODE,,201,212                ! SELECT NODES IN SHELL181 MODEL
    NSEL,R,LOC,Z,0
    FSUM
    /OUT,
    *GET,ZFRC,FSUM,0,ITEM,FZ
    LOAD=ZFRC*360/THETA                 ! MULTIPLY BY 360/THETA FOR FULL 360 DEGREE RESULTS
    *STATUS,LOAD
    LOAD_181 = LOAD
    *VFILL,VALUE_288(1,1),DATA,1024400,1262000,1262000
    *VFILL,VALUE_288(I,2),DATA,ABS(LOAD_288)
    *VFILL,VALUE_288(I,3),DATA,ABS(LOAD_288)/(VALUE_288(I,1))
    *VFILL,VALUE_185(1,1),DATA,1024400,1262000,1262000
    *VFILL,VALUE_185(J,2),DATA,ABS(LOAD_185)
    *VFILL,VALUE_185(J,3),DATA,ABS(LOAD_185)/(VALUE_185(J,1))
    *VFILL,VALUE_181(1,1),DATA,1024400,1262000,1262000
    *VFILL,VALUE_181(K,2),DATA,ABS(LOAD_181)
    *VFILL,VALUE_181(K,3),DATA,ABS(LOAD_181)/(VALUE_181(K,1))
    *END
    C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.032
    C*** ---------------------------------------
    SET,1,1
    I = 1
    J = 1
    K = 1
    *DIM,LABEL,CHAR,3,2
    *DIM,VALUE_288,,3,3
    *DIM,VALUE_185,,3,3
    *DIM,VALUE_181,,3,3
    *USE,GETLOAD
    C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.05
    C*** --------------------------------------
    SET,2,1
    I = I + 1
    J = J + 1
    K = K + 1
    *USE,GETLOAD
    C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.1
    C*** -------------------------------------
    SET,3,1
    I = I +1
    J = J + 1
    K = K + 1
    *USE,GETLOAD
    LABEL(1,1) = 'LOAD, lb','LOAD, lb','LOAD, lb'
    LABEL(1,2) = ' UX=.032',' UX=0.05',' UX=0.10'
    FINISH
    /OUT,vm7,vrt
    /COM,------------------- VM7 RESULTS COMPARISON ---------------------
    /COM,
    /COM,                 |   TARGET   |   Mechanical APDL   |   RATIO
    /COM,
    /COM,RESULTS FOR PIPE288:
    /COM,
    *VWRITE,LABEL(1,1),LABEL(1,2),VALUE_288(1,1),VALUE_288(1,2),VALUE_288(1,3)
    (1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)
    /COM,
    /COM,RESULTS FOR SOLID185:
    /COM,
    *VWRITE,LABEL(1,1),LABEL(1,2),VALUE_185(1,1),VALUE_185(1,2),VALUE_185(1,3)
    (1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)
    /COM,
    /COM,RESULTS FOR SHELL181:
    /COM,
    *VWRITE,LABEL(1,1),LABEL(1,2),VALUE_181(1,1),VALUE_181(1,2),VALUE_181(1,3)
    (1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)
    /COM,
    /COM,-----------------------------------------------------------------
    /OUT
    *LIST,vm7,vrt

.. code:: python

    import pyansys
    pyansys.convert_script('vm7.dat', 'vm7.py')

Translated code:

.. code:: python

    """ Script generated by pyansys version 0.30.1"""
    import pyansys
    ansys = pyansys.Mapdl("/usr/ansys_inc/v182/ansys/bin/ansys182", loglevel="ERROR")
    ansys.run("/COM,ANSYS MEDIA REL. 150 (11/8/2013) REF. VERIF. MANUAL: REL. 150")
    ansys.run("/VERIFY,VM7")
    ansys.run("/PREP7")
    ansys.run("/TITLE, VM7, PLASTIC COMPRESSION OF A PIPE ASSEMBLY")
    ansys.run("C***          MECHANICS OF SOLIDS, CRANDALL AND DAHL, 1959, PAGE 180, EX. 5.1")
    ansys.run("C***          USING PIPE288, SOLID185 AND SHELL181 ELEMENTS")
    ansys.run("THETA=6                              ")  # SUBTENDED ANGLE
    ansys.et(1, "PIPE288", "", "", "", 2)
    ansys.et(2, "SOLID185")
    ansys.et(3, "SHELL181", "", "", 2)  #FULL INTEGRATION
    ansys.sectype(1, "SHELL")
    ansys.secdata(0.5, 1, 0, 5)  #THICKNESS (SHELL181)
    ansys.sectype(2, "SHELL")
    ansys.secdata(0.5, 2, 0, 5)  #THICKNESS (SHELL181)
    ansys.sectype(3, "PIPE")
    ansys.secdata(4.9563384, 0.5)  #OUTSIDE DIA. AND WALL THICKNESS FOR INSIDE TUBE (PIPE288)
    ansys.sectype(4, "PIPE")
    ansys.secdata(8.139437, 0.5)  #OUTSIDE DIA. AND WALL THICKNESS FOR OUTSIDE TUBE (PIPE288)
    ansys.mp("EX", 1, 26.875E6)  #STEEL
    ansys.mp("PRXY", 1, 0.3)
    ansys.mp("EX", 2, 11E6)  #ALUMINUM
    ansys.mp("PRXY", 2, 0.3)
    ansys.tb("BKIN", 1, 1)  #DEFINE NON-LINEAR MATERIAL PROPERTY FOR STEEL
    ansys.tbtemp(0)
    ansys.tbdata(1, 86000, 0)
    ansys.tb("BKIN", 2, 1)  #DEFINE NON-LINEAR MATERIAL PROPERTY FOR ALUMINUM
    ansys.tbtemp(0)
    ansys.tbdata(1, 55000, 0)
    ansys.n(1)  #GENERATE NODES AND ELEMENTS FOR PIPE288
    ansys.n(2, "", "", 10)
    ansys.mat(1)
    ansys.secnum(3)  #STEEL (INSIDE) TUBE
    ansys.e(1, 2)
    ansys.mat(2)
    ansys.secnum(4)  #ALUMINUM (OUTSIDE) TUBE
    ansys.e(1, 2)
    ansys.csys(1)
    ansys.n(101, 1.9781692)  #GENERATE NODES AND ELEMENTS FOR SOLID185
    ansys.n(102, 2.4781692)
    ansys.n(103, 3.5697185)
    ansys.n(104, 4.0697185)
    ansys.n(105, 1.9781692, "", 10)
    ansys.n(106, 2.4781692, "", 10)
    ansys.n(107, 3.5697185, "", 10)
    ansys.n(108, 4.0697185, "", 10)
    ansys.ngen(2, 10, 101, 108, "", "", "THETA")  #GENERATE 2ND SET OF NODES TO FORM A THETA DEGREE SLICE
    ansys.nrotat(101, 118, 1)
    ansys.type(2)
    ansys.mat(1)  #INSIDE (STEEL) TUBE
    ansys.e(101, 102, 112, 111, 105, 106, 116, 115)
    ansys.mat(2)  #OUTSIDE (ALUMINUM) TUBE
    ansys.e(103, 104, 114, 113, 107, 108, 118, 117)
    ansys.n(201, 2.2281692)  #GENERATE NODES AND ELEMENTS FOR SHELL181
    ansys.n(203, 2.2281692, "", 10)
    ansys.n(202, 3.8197185)
    ansys.n(204, 3.8197185, "", 10)
    ansys.ngen(2, 4, 201, 204, "", "", "THETA")  #GENERATE NODES TO FORM A THETA DEGREE SLICE
    ansys.type(3)
    ansys.secnum(1)  #INSIDE (STEEL) TUBE
    ansys.e(203, 201, 205, 207)
    ansys.secnum(2)  #OUTSIDE (ALUMINUM) TUBE
    ansys.e(204, 202, 206, 208)
    ansys.run("C*** APPLY CONSTRAINTS TO PIPE288 MODEL")
    ansys.d(1, "ALL")  #FIX ALL DOFS FOR BOTTOM END OF PIPE288
    ansys.d(2, "UX", "", "", "", "", "UY", "ROTX", "ROTY", "ROTZ")  #ALLOW ONLY UZ DOF AT TOP END OF PIPE288 MODEL
    ansys.run("C*** APPLY CONSTRAINTS TO SOLID185 AND SHELL181 MODELS")
    ansys.cp(1, "UX", 101, 111, 105, 115)  #COUPLE NODES AT BOUNDARY IN RADIAL DIR FOR SOLID185
    ansys.cpsgen(4, "", 1)
    ansys.cp(5, "UX", 201, 205, 203, 20)  #COUPLE NODES AT BOUNDARY IN RADIAL DIR FOR SHELL181
    ansys.cpsgen(2, "", 5)
    ansys.cp(7, "ROTY", 201, 205)  #COUPLE NODES AT BOUNDARY IN ROTY DIR FOR SHELL181
    ansys.cpsgen(4, "", 7)
    ansys.nsel("S", "NODE", "", 101, 212)  #SELECT ONLY NODES IN SOLID185 AND SHELL181 MODELS
    ansys.nsel("R", "LOC", "Y", 0)  #SELECT NODES AT THETA = 0 FROM THE SELECTED SET
    ansys.dsym("SYMM", "Y", 1)  #APPLY SYMMETRY BOUNDARY CONDITIONS
    ansys.nsel("S", "NODE", "", 101, 212)  #SELECT ONLY NODES IN SOLID185 AND SHELL181 MODELS
    ansys.nsel("R", "LOC", "Y", "THETA")  #SELECT NODES AT THETA FROM THE SELECTED SET
    ansys.dsym("SYMM", "Y", 1)  #APPLY SYMMETRY BOUNDARY CONDITIONS
    ansys.nsel("ALL")
    ansys.nsel("R", "LOC", "Z", 0)  #SELECT ONLY NODES AT Z = 0
    ansys.d("ALL", "UZ", 0)  #CONSTRAIN BOTTOM NODES IN Z DIRECTION
    ansys.nsel("ALL")
    ansys.finish()
    ansys.run("/SOLU")
    ansys.outpr("BASIC", "LAST")  #PRINT BASIC SOLUTION AT END OF LOAD STEP
    ansys.run("C*** APPLY DISPLACEMENT LOADS TO ALL MODELS")


    def DISP(ARG1='', ARG2='', ARG3='', ARG4='', ARG5='', ARG6='',
             ARG7='', ARG8='', ARG9='', ARG10='', ARG11='', ARG12='',
             ARG13='', ARG14='', ARG15='', ARG16='', ARG17='', ARG18=''):
        ansys.nsel("R", "LOC", "Z", 10)  #SELECT NODES AT Z = 10 TO APPLY DISPLACEMENT
        ansys.d("ALL", "UZ", ARG1)
        ansys.nsel("ALL")
        ansys.run("/OUT,SCRATCH")
        ansys.solve()


    DISP(-.032)
    DISP(-.05)
    DISP(-.1)
    ansys.finish()
    ansys.run("/OUT,")
    ansys.run("/POST1")
    ansys.run("C*** CREATE MACRO TO GET RESULTS FOR EACH MODEL")


    def GETLOAD(ARG1='', ARG2='', ARG3='', ARG4='', ARG5='', ARG6='',
                ARG7='', ARG8='', ARG9='', ARG10='', ARG11='', ARG12='',
                ARG13='', ARG14='', ARG15='', ARG16='', ARG17='', ARG18=''):
        ansys.nsel("S", "NODE", "", 1, 2)  #SELECT NODES IN PIPE288 MODEL
        ansys.nsel("R", "LOC", "Z", 0)
        ansys.run("/OUT,SCRATCH")
        ansys.fsum()  #FZ IS TOTAL LOAD FOR PIPE288 MODEL
        ansys.run("*GET,LOAD_288,FSUM,,ITEM,FZ")
        ansys.nsel("S", "NODE", "", 101, 118)  #SELECT NODES IN SOLID185 MODEL
        ansys.nsel("R", "LOC", "Z", 0)
        ansys.fsum()
        ansys.run("*GET,ZFRC,FSUM,0,ITEM,FZ")
        ansys.run("LOAD=ZFRC*360/THETA                 ")  # MULTIPLY BY 360/THETA FOR FULL 360 DEGREE RESULTS
        ansys.run("*STATUS,LOAD")
        ansys.run("LOAD_185 = LOAD")
        ansys.nsel("S", "NODE", "", 201, 212)  #SELECT NODES IN SHELL181 MODEL
        ansys.nsel("R", "LOC", "Z", 0)
        ansys.fsum()
        ansys.run("/OUT,")
        ansys.run("*GET,ZFRC,FSUM,0,ITEM,FZ")
        ansys.run("LOAD=ZFRC*360/THETA                 ")  # MULTIPLY BY 360/THETA FOR FULL 360 DEGREE RESULTS
        ansys.run("*STATUS,LOAD")
        ansys.run("LOAD_181 = LOAD")
        ansys.run("*VFILL,VALUE_288(1,1),DATA,1024400,1262000,1262000")
        ansys.run("*VFILL,VALUE_288(I,2),DATA,ABS(LOAD_288)")
        ansys.run("*VFILL,VALUE_288(I,3),DATA,ABS(LOAD_288)/(VALUE_288(I,1))")
        ansys.run("*VFILL,VALUE_185(1,1),DATA,1024400,1262000,1262000")
        ansys.run("*VFILL,VALUE_185(J,2),DATA,ABS(LOAD_185)")
        ansys.run("*VFILL,VALUE_185(J,3),DATA,ABS(LOAD_185)/(VALUE_185(J,1))")
        ansys.run("*VFILL,VALUE_181(1,1),DATA,1024400,1262000,1262000")
        ansys.run("*VFILL,VALUE_181(K,2),DATA,ABS(LOAD_181)")
        ansys.run("*VFILL,VALUE_181(K,3),DATA,ABS(LOAD_181)/(VALUE_181(K,1))")


    ansys.run("C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.032")
    ansys.run("C*** ---------------------------------------")
    ansys.set(1, 1)
    ansys.run("I = 1")
    ansys.run("J = 1")
    ansys.run("K = 1")
    ansys.run("*DIM,LABEL,CHAR,3,2")
    ansys.run("*DIM,VALUE_288,,3,3")
    ansys.run("*DIM,VALUE_185,,3,3")
    ansys.run("*DIM,VALUE_181,,3,3")
    GETLOAD()
    ansys.run("C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.05")
    ansys.run("C*** --------------------------------------")
    ansys.set(2, 1)
    ansys.run("I = I + 1")
    ansys.run("J = J + 1")
    ansys.run("K = K + 1")
    GETLOAD()
    ansys.run("C*** GET TOTAL LOAD FOR DISPLACEMENT = 0.1")
    ansys.run("C*** -------------------------------------")
    ansys.set(3, 1)
    ansys.run("I = I +1")
    ansys.run("J = J + 1")
    ansys.run("K = K + 1")
    GETLOAD()
    ansys.run("LABEL(1,1) = 'LOAD, lb','LOAD, lb','LOAD, lb'")
    ansys.run("LABEL(1,2) = ' UX=.032',' UX=0.05',' UX=0.10'")
    ansys.finish()
    ansys.run("/OUT,vm7,vrt")
    ansys.run("/COM,------------------- VM7 RESULTS COMPARISON ---------------------")
    ansys.run("/COM,")
    ansys.run("/COM,                 |   TARGET   |   Mechanical APDL   |   RATIO")
    ansys.run("/COM,")
    ansys.run("/COM,RESULTS FOR PIPE288:")
    ansys.run("/COM,")
    with ansys.non_interactive:
        ansys.run("*VWRITE,LABEL(1,1),LABEL(1,2),VALUE_288(1,1),VALUE_288(1,2),VALUE_288(1,3)")
        ansys.run("(1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)")
        ansys.run("/COM,")
        ansys.run("/COM,RESULTS FOR SOLID185:")
        ansys.run("/COM,")
        ansys.run("*VWRITE,LABEL(1,1),LABEL(1,2),VALUE_185(1,1),VALUE_185(1,2),VALUE_185(1,3)")
        ansys.run("(1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)")
        ansys.run("/COM,")
        ansys.run("/COM,RESULTS FOR SHELL181:")
        ansys.run("/COM,")
        ansys.run("*VWRITE,LABEL(1,1),LABEL(1,2),VALUE_181(1,1),VALUE_181(1,2),VALUE_181(1,3)")
        ansys.run("(1X,A8,A8,'   ',F10.0,'  ',F14.0,'   ',1F15.3)")
        ansys.run("/COM,")
        ansys.run("/COM,-----------------------------------------------------------------")
        ansys.run("/OUT")
        ansys.run("*LIST,vm7,vrt")
    ansys.exit()
